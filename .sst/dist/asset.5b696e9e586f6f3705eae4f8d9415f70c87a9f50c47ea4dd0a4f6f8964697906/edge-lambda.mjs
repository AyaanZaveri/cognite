import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
import{createRequire as A}from"module";function n(e,...o){console.log("[provider-framework]",e,...o.map(t=>typeof t=="object"?JSON.stringify(t,void 0,2):t))}import C from"https";import E from"url";var p="AWSCDK::CustomResourceProviderFramework::CREATE_FAILED",f="AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";async function c(e,o,t={}){let r={Status:e,Reason:t.reason||e,StackId:o.StackId,RequestId:o.RequestId,PhysicalResourceId:o.PhysicalResourceId||f,LogicalResourceId:o.LogicalResourceId,NoEcho:t.noEcho,Data:o.Data};n("submit response to cloudformation",r);let s=JSON.stringify(r),a=E.parse(o.ResponseURL);await S({hostname:a.hostname,path:a.path,method:"PUT",headers:{"content-type":"","content-length":s.length}},s)}function y(e){return async o=>{if(o.RequestType==="Delete"&&o.PhysicalResourceId===p){n("ignoring DELETE event caused by a failed CREATE event"),await c("SUCCESS",o);return}try{await e(o)}catch(t){if(n(t),t instanceof d)throw n("retry requested by handler"),t;o.PhysicalResourceId||(o.RequestType==="Create"?(n("CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"),o.PhysicalResourceId=p):n(`ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(o)}`));let r=[t.message,`Logs: https://${process.env.AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${process.env.AWS_REGION}#logsV2:log-groups/log-group/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_GROUP_NAME)}/log-events/${encodeURIComponent(process.env.AWS_LAMBDA_LOG_STREAM_NAME)}`].join(`
`);await c("FAILED",o,{reason:r})}}}var d=class extends Error{};async function S(e,o){return new Promise((t,r)=>{try{let s=C.request(e,t);s.on("error",r),s.write(o),s.end()}catch(s){r(s)}})}var F=A(import.meta.url),l=F("aws-sdk");l.config.logger=console;var I=new l.S3({region:"us-east-1"}),u=new l.Lambda({region:"us-east-1"}),U=y(async e=>{n("onEventHandler",e);let o=e.RequestType==="Create"?P(e.ResourceProperties.FunctionNamePrefix):e.PhysicalResourceId.split(":").pop(),t,r,s=e.ResourceProperties.FunctionBucket,a=e.ResourceProperties.FunctionParams;switch(e.RequestType){case"Create":{await g(s,a);let i=await L(o,a);t=i.FunctionArn,r={FunctionArn:i.FunctionArn};break}case"Update":{let i=e.OldResourceProperties.FunctionParams;b(a,i)&&await h(o,a),T(a,i)&&(await g(s,a),await m(o,a)),t=e.PhysicalResourceId,r={FunctionArn:e.PhysicalResourceId};break}case"Delete":{await _(o);break}default:throw new Error("Unsupported request type")}return c("SUCCESS",{...e,PhysicalResourceId:t,Data:r})});function P(e){let r="abcdefghijklmnopqrstuvwxyz",s=r.length,a=`${e.toLowerCase().slice(0,64-20-1)}-`;for(let i=0;i<20;i++)a+=r.charAt(Math.floor(Math.random()*s));return a}async function g(e,o){n("copyAsset() called with params",e,o),n("copy");let t=await I.copyObject({Bucket:e,CopySource:`/${o.Code.S3Bucket}/${o.Code.S3Key}`,Key:o.Code.S3Key}).promise();n("response",t),o.Code.S3Bucket=e}async function L(e,o){n("createFunction() called with params",o);let t=await u.createFunction({...o,FunctionName:e}).promise();return n("response",t),{FunctionArn:t.FunctionArn}}async function h(e,o){n("updateFunctionConfiguration() called with params",o);try{let t=await u.updateFunctionConfiguration({FunctionName:e,...o,Code:void 0}).promise();n("response",t);return}catch(t){if(R(t)){await h(e,o);return}throw t}}async function m(e,o){n("updateFunctionCode() called with params",o);try{let t=await u.updateFunctionCode({FunctionName:e,Publish:!1,...o.Code}).promise();n("response",t);return}catch(t){if(R(t)){await m(e,o);return}throw t}}async function _(e){n("deleteFunction() called with functionName",e);let o=await u.deleteFunction({FunctionName:e}).promise();n("response",o)}function b(e,o){return Object.keys(e).length!==Object.keys(e).length||["Description","Handler","Runtime","MemorySize","Timeout","Role"].some(t=>e[t]!==o[t])}function T(e,o){return e.Code.S3Bucket!==o.Code.S3Bucket||e.Code.S3Key!==o.Code.S3Key}function R(e){return e.code==="ThrottlingException"&&e.message==="Rate exceeded"||e.code==="Throttling"&&e.message==="Rate exceeded"||e.code==="TooManyRequestsException"&&e.message==="Too Many Requests"||e.code==="TooManyUpdates"||e.code==="OperationAbortedException"||e.code==="TimeoutError"||e.code==="NetworkingError"||e.code==="ResourceConflictException"}export{U as handler};
