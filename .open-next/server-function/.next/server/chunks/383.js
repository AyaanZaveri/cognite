exports.id = 383;
exports.ids = [383];
exports.modules = {

/***/ 92603:
/***/ ((module) => {

// Exports
module.exports = {
	"style": {"fontFamily":"'__Space_Grotesk_e75d16', '__Space_Grotesk_Fallback_e75d16'","fontStyle":"normal"},
	"className": "__className_e75d16"
};


/***/ }),

/***/ 62140:
/***/ ((module) => {

"use strict";

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;
var isArray = function isArray(arr) {
    if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
    }
    return toStr.call(arr) === "[object Array]";
};
var isPlainObject = function isPlainObject(obj) {
    if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
    }
    var hasOwnConstructor = hasOwn.call(obj, "constructor");
    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
    // Not own constructor property must be Object
    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
    }
    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.
    var key;
    for(key in obj){}
    return typeof key === "undefined" || hasOwn.call(obj, key);
};
// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
    if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
        });
    } else {
        target[options.name] = options.newValue;
    }
};
// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
    if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
            return void 0;
        } else if (gOPD) {
            // In early versions of node, obj['__proto__'] is buggy when obj has
            // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
            return gOPD(obj, name).value;
        }
    }
    return obj[name];
};
module.exports = function extend() {
    var options, name, src, copy, copyIsArray, clone;
    var target = arguments[0];
    var i = 1;
    var length = arguments.length;
    var deep = false;
    // Handle a deep copy situation
    if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    }
    if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
    }
    for(; i < length; ++i){
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
            // Extend the base object
            for(name in options){
                src = getProperty(target, name);
                copy = getProperty(options, name);
                // Prevent never-ending loop
                if (target !== copy) {
                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && isArray(src) ? src : [];
                        } else {
                            clone = src && isPlainObject(src) ? src : {};
                        }
                        // Never move original objects, clone them
                        setProperty(target, {
                            name: name,
                            newValue: extend(deep, clone, copy)
                        });
                    // Don't bring in undefined values
                    } else if (typeof copy !== "undefined") {
                        setProperty(target, {
                            name: name,
                            newValue: copy
                        });
                    }
                }
            }
        }
    }
    // Return the modified object
    return target;
};


/***/ }),

/***/ 37046:
/***/ ((module) => {

"use strict";
// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027

var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
var NEWLINE_REGEX = /\n/g;
var WHITESPACE_REGEX = /^\s*/;
// declaration
var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
var COLON_REGEX = /^:\s*/;
var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
var SEMICOLON_REGEX = /^[;\s]*/;
// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
var TRIM_REGEX = /^\s+|\s+$/g;
// strings
var NEWLINE = "\n";
var FORWARD_SLASH = "/";
var ASTERISK = "*";
var EMPTY_STRING = "";
// types
var TYPE_COMMENT = "comment";
var TYPE_DECLARATION = "declaration";
/**
 * @param {String} style
 * @param {Object} [options]
 * @return {Object[]}
 * @throws {TypeError}
 * @throws {Error}
 */ module.exports = function(style, options) {
    if (typeof style !== "string") {
        throw new TypeError("First argument must be a string");
    }
    if (!style) return [];
    options = options || {};
    /**
   * Positional.
   */ var lineno = 1;
    var column = 1;
    /**
   * Update lineno and column based on `str`.
   *
   * @param {String} str
   */ function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i = str.lastIndexOf(NEWLINE);
        column = ~i ? str.length - i : column + str.length;
    }
    /**
   * Mark position and patch `node.position`.
   *
   * @return {Function}
   */ function position() {
        var start = {
            line: lineno,
            column: column
        };
        return function(node) {
            node.position = new Position(start);
            whitespace();
            return node;
        };
    }
    /**
   * Store position information for a node.
   *
   * @constructor
   * @property {Object} start
   * @property {Object} end
   * @property {undefined|String} source
   */ function Position(start) {
        this.start = start;
        this.end = {
            line: lineno,
            column: column
        };
        this.source = options.source;
    }
    /**
   * Non-enumerable source string.
   */ Position.prototype.content = style;
    var errorsList = [];
    /**
   * Error `msg`.
   *
   * @param {String} msg
   * @throws {Error}
   */ function error(msg) {
        var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
        err.reason = msg;
        err.filename = options.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options.silent) {
            errorsList.push(err);
        } else {
            throw err;
        }
    }
    /**
   * Match `re` and return captures.
   *
   * @param {RegExp} re
   * @return {undefined|Array}
   */ function match(re) {
        var m = re.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
    }
    /**
   * Parse whitespace.
   */ function whitespace() {
        match(WHITESPACE_REGEX);
    }
    /**
   * Parse comments.
   *
   * @param {Object[]} [rules]
   * @return {Object[]}
   */ function comments(rules) {
        var c;
        rules = rules || [];
        while(c = comment()){
            if (c !== false) {
                rules.push(c);
            }
        }
        return rules;
    }
    /**
   * Parse comment.
   *
   * @return {Object}
   * @throws {Error}
   */ function comment() {
        var pos = position();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
        var i = 2;
        while(EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))){
            ++i;
        }
        i += 2;
        if (EMPTY_STRING === style.charAt(i - 1)) {
            return error("End of comment missing");
        }
        var str = style.slice(2, i - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i);
        column += 2;
        return pos({
            type: TYPE_COMMENT,
            comment: str
        });
    }
    /**
   * Parse declaration.
   *
   * @return {Object}
   * @throws {Error}
   */ function declaration() {
        var pos = position();
        // prop
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();
        // :
        if (!match(COLON_REGEX)) return error("property missing ':'");
        // val
        var val = match(VALUE_REGEX);
        var ret = pos({
            type: TYPE_DECLARATION,
            property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
            value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        // ;
        match(SEMICOLON_REGEX);
        return ret;
    }
    /**
   * Parse declarations.
   *
   * @return {Object[]}
   */ function declarations() {
        var decls = [];
        comments(decls);
        // declarations
        var decl;
        while(decl = declaration()){
            if (decl !== false) {
                decls.push(decl);
                comments(decls);
            }
        }
        return decls;
    }
    whitespace();
    return declarations();
};
/**
 * Trim `str`.
 *
 * @param {String} str
 * @return {String}
 */ function trim(str) {
    return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
}


/***/ }),

/***/ 4310:
/***/ ((module) => {

"use strict";
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ 
module.exports = function isBuffer(obj) {
    return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
};


/***/ }),

/***/ 58795:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/**
 * lucide-react v0.260.0 - ISC
 */ 
var react = __webpack_require__(49994);
var defaultAttributes = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 2,
    strokeLinecap: "round",
    strokeLinejoin: "round"
};
const toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
const createLucideIcon = (iconName, iconNode)=>{
    const Component = react.forwardRef(({ color = "currentColor", size = 24, strokeWidth = 2, absoluteStrokeWidth, children, ...rest }, ref)=>react.createElement("svg", {
            ref,
            ...defaultAttributes,
            width: size,
            height: size,
            stroke: color,
            strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
            className: `lucide lucide-${toKebabCase(iconName)}`,
            ...rest
        }, [
            ...iconNode.map(([tag, attrs])=>react.createElement(tag, attrs)),
            ...(Array.isArray(children) ? children : [
                children
            ]) || []
        ]));
    Component.displayName = `${iconName}`;
    return Component;
};
const Accessibility = createLucideIcon("Accessibility", [
    [
        "circle",
        {
            cx: "16",
            cy: "4",
            r: "1",
            key: "1grugj"
        }
    ],
    [
        "path",
        {
            d: "m18 19 1-7-6 1",
            key: "r0i19z"
        }
    ],
    [
        "path",
        {
            d: "m5 8 3-3 5.5 3-2.36 3.5",
            key: "9ptxx2"
        }
    ],
    [
        "path",
        {
            d: "M4.24 14.5a5 5 0 0 0 6.88 6",
            key: "10kmtu"
        }
    ],
    [
        "path",
        {
            d: "M13.76 17.5a5 5 0 0 0-6.88-6",
            key: "2qq6rc"
        }
    ]
]);
var accessibility = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Accessibility
});
const ActivitySquare = createLucideIcon("ActivitySquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M17 12h-2l-2 5-2-10-2 5H7",
            key: "15hlnc"
        }
    ]
]);
var activitySquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ActivitySquare
});
const Activity = createLucideIcon("Activity", [
    [
        "path",
        {
            d: "M22 12h-4l-3 9L9 3l-3 9H2",
            key: "d5dnw9"
        }
    ]
]);
var activity = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Activity
});
const AirVent = createLucideIcon("AirVent", [
    [
        "path",
        {
            d: "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
            key: "larmp2"
        }
    ],
    [
        "path",
        {
            d: "M6 8h12",
            key: "6g4wlu"
        }
    ],
    [
        "path",
        {
            d: "M18.3 17.7a2.5 2.5 0 0 1-3.16 3.83 2.53 2.53 0 0 1-1.14-2V12",
            key: "1bo8pg"
        }
    ],
    [
        "path",
        {
            d: "M6.6 15.6A2 2 0 1 0 10 17v-5",
            key: "t9h90c"
        }
    ]
]);
var airVent = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AirVent
});
const Airplay = createLucideIcon("Airplay", [
    [
        "path",
        {
            d: "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1",
            key: "ns4c3b"
        }
    ],
    [
        "polygon",
        {
            points: "12 15 17 21 7 21 12 15",
            key: "1sy95i"
        }
    ]
]);
var airplay = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Airplay
});
const AlarmCheck = createLucideIcon("AlarmCheck", [
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "8",
            key: "3y4lt7"
        }
    ],
    [
        "path",
        {
            d: "M5 3 2 6",
            key: "18tl5t"
        }
    ],
    [
        "path",
        {
            d: "m22 6-3-3",
            key: "1opdir"
        }
    ],
    [
        "path",
        {
            d: "M6.38 18.7 4 21",
            key: "17xu3x"
        }
    ],
    [
        "path",
        {
            d: "M17.64 18.67 20 21",
            key: "kv2oe2"
        }
    ],
    [
        "path",
        {
            d: "m9 13 2 2 4-4",
            key: "6343dt"
        }
    ]
]);
var alarmCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlarmCheck
});
const AlarmClockOff = createLucideIcon("AlarmClockOff", [
    [
        "path",
        {
            d: "M6.87 6.87a8 8 0 1 0 11.26 11.26",
            key: "3on8tj"
        }
    ],
    [
        "path",
        {
            d: "M19.9 14.25a8 8 0 0 0-9.15-9.15",
            key: "15ghsc"
        }
    ],
    [
        "path",
        {
            d: "m22 6-3-3",
            key: "1opdir"
        }
    ],
    [
        "path",
        {
            d: "M6.26 18.67 4 21",
            key: "yzmioq"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M4 4 2 6",
            key: "1ycko6"
        }
    ]
]);
var alarmClockOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlarmClockOff
});
const AlarmClock = createLucideIcon("AlarmClock", [
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "8",
            key: "3y4lt7"
        }
    ],
    [
        "path",
        {
            d: "M12 9v4l2 2",
            key: "1c63tq"
        }
    ],
    [
        "path",
        {
            d: "M5 3 2 6",
            key: "18tl5t"
        }
    ],
    [
        "path",
        {
            d: "m22 6-3-3",
            key: "1opdir"
        }
    ],
    [
        "path",
        {
            d: "M6.38 18.7 4 21",
            key: "17xu3x"
        }
    ],
    [
        "path",
        {
            d: "M17.64 18.67 20 21",
            key: "kv2oe2"
        }
    ]
]);
var alarmClock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlarmClock
});
const AlarmMinus = createLucideIcon("AlarmMinus", [
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "8",
            key: "3y4lt7"
        }
    ],
    [
        "path",
        {
            d: "M5 3 2 6",
            key: "18tl5t"
        }
    ],
    [
        "path",
        {
            d: "m22 6-3-3",
            key: "1opdir"
        }
    ],
    [
        "path",
        {
            d: "M6.38 18.7 4 21",
            key: "17xu3x"
        }
    ],
    [
        "path",
        {
            d: "M17.64 18.67 20 21",
            key: "kv2oe2"
        }
    ],
    [
        "path",
        {
            d: "M9 13h6",
            key: "1uhe8q"
        }
    ]
]);
var alarmMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlarmMinus
});
const AlarmPlus = createLucideIcon("AlarmPlus", [
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "8",
            key: "3y4lt7"
        }
    ],
    [
        "path",
        {
            d: "M5 3 2 6",
            key: "18tl5t"
        }
    ],
    [
        "path",
        {
            d: "m22 6-3-3",
            key: "1opdir"
        }
    ],
    [
        "path",
        {
            d: "M6.38 18.7 4 21",
            key: "17xu3x"
        }
    ],
    [
        "path",
        {
            d: "M17.64 18.67 20 21",
            key: "kv2oe2"
        }
    ],
    [
        "path",
        {
            d: "M12 10v6",
            key: "1bos4e"
        }
    ],
    [
        "path",
        {
            d: "M9 13h6",
            key: "1uhe8q"
        }
    ]
]);
var alarmPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlarmPlus
});
const Album = createLucideIcon("Album", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "polyline",
        {
            points: "11 3 11 11 14 8 17 11 17 3",
            key: "1wcwz3"
        }
    ]
]);
var album = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Album
});
const AlertCircle = createLucideIcon("AlertCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "12",
            key: "1pkeuh"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "16",
            y2: "16",
            key: "4dfq90"
        }
    ]
]);
var alertCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlertCircle
});
const AlertOctagon = createLucideIcon("AlertOctagon", [
    [
        "polygon",
        {
            points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
            key: "h1p8hx"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "12",
            key: "1pkeuh"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "16",
            y2: "16",
            key: "4dfq90"
        }
    ]
]);
var alertOctagon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlertOctagon
});
const AlertTriangle = createLucideIcon("AlertTriangle", [
    [
        "path",
        {
            d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z",
            key: "c3ski4"
        }
    ],
    [
        "path",
        {
            d: "M12 9v4",
            key: "juzpu7"
        }
    ],
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ]
]);
var alertTriangle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlertTriangle
});
const AlignCenterHorizontal = createLucideIcon("AlignCenterHorizontal", [
    [
        "path",
        {
            d: "M2 12h20",
            key: "9i4pu4"
        }
    ],
    [
        "path",
        {
            d: "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4",
            key: "11f1s0"
        }
    ],
    [
        "path",
        {
            d: "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4",
            key: "t14dx9"
        }
    ],
    [
        "path",
        {
            d: "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1",
            key: "1w07xs"
        }
    ],
    [
        "path",
        {
            d: "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1",
            key: "1apec2"
        }
    ]
]);
var alignCenterHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignCenterHorizontal
});
const AlignCenterVertical = createLucideIcon("AlignCenterVertical", [
    [
        "path",
        {
            d: "M12 2v20",
            key: "t6zp3m"
        }
    ],
    [
        "path",
        {
            d: "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4",
            key: "14d6g8"
        }
    ],
    [
        "path",
        {
            d: "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4",
            key: "1e2lrw"
        }
    ],
    [
        "path",
        {
            d: "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1",
            key: "1fkdwx"
        }
    ],
    [
        "path",
        {
            d: "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1",
            key: "1euafb"
        }
    ]
]);
var alignCenterVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignCenterVertical
});
const AlignCenter = createLucideIcon("AlignCenter", [
    [
        "line",
        {
            x1: "21",
            x2: "3",
            y1: "6",
            y2: "6",
            key: "1fp77t"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "7",
            y1: "12",
            y2: "12",
            key: "rsh8ii"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "5",
            y1: "18",
            y2: "18",
            key: "1t0tuv"
        }
    ]
]);
var alignCenter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignCenter
});
const AlignEndHorizontal = createLucideIcon("AlignEndHorizontal", [
    [
        "rect",
        {
            width: "6",
            height: "16",
            x: "4",
            y: "2",
            rx: "2",
            key: "z5wdxg"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "9",
            x: "14",
            y: "9",
            rx: "2",
            key: "um7a8w"
        }
    ],
    [
        "path",
        {
            d: "M22 22H2",
            key: "19qnx5"
        }
    ]
]);
var alignEndHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignEndHorizontal
});
const AlignEndVertical = createLucideIcon("AlignEndVertical", [
    [
        "rect",
        {
            width: "16",
            height: "6",
            x: "2",
            y: "4",
            rx: "2",
            key: "10wcwx"
        }
    ],
    [
        "rect",
        {
            width: "9",
            height: "6",
            x: "9",
            y: "14",
            rx: "2",
            key: "4p5bwg"
        }
    ],
    [
        "path",
        {
            d: "M22 22V2",
            key: "12ipfv"
        }
    ]
]);
var alignEndVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignEndVertical
});
const AlignHorizontalDistributeCenter = createLucideIcon("AlignHorizontalDistributeCenter", [
    [
        "rect",
        {
            width: "6",
            height: "14",
            x: "4",
            y: "5",
            rx: "2",
            key: "1wwnby"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "14",
            y: "7",
            rx: "2",
            key: "1fe6j6"
        }
    ],
    [
        "path",
        {
            d: "M17 22v-5",
            key: "4b6g73"
        }
    ],
    [
        "path",
        {
            d: "M17 7V2",
            key: "hnrr36"
        }
    ],
    [
        "path",
        {
            d: "M7 22v-3",
            key: "1r4jpn"
        }
    ],
    [
        "path",
        {
            d: "M7 5V2",
            key: "liy1u9"
        }
    ]
]);
var alignHorizontalDistributeCenter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalDistributeCenter
});
const AlignHorizontalDistributeEnd = createLucideIcon("AlignHorizontalDistributeEnd", [
    [
        "rect",
        {
            width: "6",
            height: "14",
            x: "4",
            y: "5",
            rx: "2",
            key: "1wwnby"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "14",
            y: "7",
            rx: "2",
            key: "1fe6j6"
        }
    ],
    [
        "path",
        {
            d: "M10 2v20",
            key: "uyc634"
        }
    ],
    [
        "path",
        {
            d: "M20 2v20",
            key: "1tx262"
        }
    ]
]);
var alignHorizontalDistributeEnd = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalDistributeEnd
});
const AlignHorizontalDistributeStart = createLucideIcon("AlignHorizontalDistributeStart", [
    [
        "rect",
        {
            width: "6",
            height: "14",
            x: "4",
            y: "5",
            rx: "2",
            key: "1wwnby"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "14",
            y: "7",
            rx: "2",
            key: "1fe6j6"
        }
    ],
    [
        "path",
        {
            d: "M4 2v20",
            key: "gtpd5x"
        }
    ],
    [
        "path",
        {
            d: "M14 2v20",
            key: "tg6bpw"
        }
    ]
]);
var alignHorizontalDistributeStart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalDistributeStart
});
const AlignHorizontalJustifyCenter = createLucideIcon("AlignHorizontalJustifyCenter", [
    [
        "rect",
        {
            width: "6",
            height: "14",
            x: "2",
            y: "5",
            rx: "2",
            key: "dy24zr"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "16",
            y: "7",
            rx: "2",
            key: "13zkjt"
        }
    ],
    [
        "path",
        {
            d: "M12 2v20",
            key: "t6zp3m"
        }
    ]
]);
var alignHorizontalJustifyCenter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalJustifyCenter
});
const AlignHorizontalJustifyEnd = createLucideIcon("AlignHorizontalJustifyEnd", [
    [
        "rect",
        {
            width: "6",
            height: "14",
            x: "2",
            y: "5",
            rx: "2",
            key: "dy24zr"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "12",
            y: "7",
            rx: "2",
            key: "1ht384"
        }
    ],
    [
        "path",
        {
            d: "M22 2v20",
            key: "40qfg1"
        }
    ]
]);
var alignHorizontalJustifyEnd = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalJustifyEnd
});
const AlignHorizontalJustifyStart = createLucideIcon("AlignHorizontalJustifyStart", [
    [
        "rect",
        {
            width: "6",
            height: "14",
            x: "6",
            y: "5",
            rx: "2",
            key: "hsirpf"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "16",
            y: "7",
            rx: "2",
            key: "13zkjt"
        }
    ],
    [
        "path",
        {
            d: "M2 2v20",
            key: "1ivd8o"
        }
    ]
]);
var alignHorizontalJustifyStart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalJustifyStart
});
const AlignHorizontalSpaceAround = createLucideIcon("AlignHorizontalSpaceAround", [
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "9",
            y: "7",
            rx: "2",
            key: "yn7j0q"
        }
    ],
    [
        "path",
        {
            d: "M4 22V2",
            key: "tsjzd3"
        }
    ],
    [
        "path",
        {
            d: "M20 22V2",
            key: "1bnhr8"
        }
    ]
]);
var alignHorizontalSpaceAround = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalSpaceAround
});
const AlignHorizontalSpaceBetween = createLucideIcon("AlignHorizontalSpaceBetween", [
    [
        "rect",
        {
            width: "6",
            height: "14",
            x: "3",
            y: "5",
            rx: "2",
            key: "j77dae"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "15",
            y: "7",
            rx: "2",
            key: "bq30hj"
        }
    ],
    [
        "path",
        {
            d: "M3 2v20",
            key: "1d2pfg"
        }
    ],
    [
        "path",
        {
            d: "M21 2v20",
            key: "p059bm"
        }
    ]
]);
var alignHorizontalSpaceBetween = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignHorizontalSpaceBetween
});
const AlignJustify = createLucideIcon("AlignJustify", [
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "6",
            y2: "6",
            key: "4m8b97"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "12",
            y2: "12",
            key: "10d38w"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "18",
            y2: "18",
            key: "kwyyxn"
        }
    ]
]);
var alignJustify = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignJustify
});
const AlignLeft = createLucideIcon("AlignLeft", [
    [
        "line",
        {
            x1: "21",
            x2: "3",
            y1: "6",
            y2: "6",
            key: "1fp77t"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "3",
            y1: "12",
            y2: "12",
            key: "v6grx8"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "3",
            y1: "18",
            y2: "18",
            key: "1awlsn"
        }
    ]
]);
var alignLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignLeft
});
const AlignRight = createLucideIcon("AlignRight", [
    [
        "line",
        {
            x1: "21",
            x2: "3",
            y1: "6",
            y2: "6",
            key: "1fp77t"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "9",
            y1: "12",
            y2: "12",
            key: "1uyos4"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "7",
            y1: "18",
            y2: "18",
            key: "1g9eri"
        }
    ]
]);
var alignRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignRight
});
const AlignStartHorizontal = createLucideIcon("AlignStartHorizontal", [
    [
        "rect",
        {
            width: "6",
            height: "16",
            x: "4",
            y: "6",
            rx: "2",
            key: "1n4dg1"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "9",
            x: "14",
            y: "6",
            rx: "2",
            key: "17khns"
        }
    ],
    [
        "path",
        {
            d: "M22 2H2",
            key: "fhrpnj"
        }
    ]
]);
var alignStartHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignStartHorizontal
});
const AlignStartVertical = createLucideIcon("AlignStartVertical", [
    [
        "rect",
        {
            width: "9",
            height: "6",
            x: "6",
            y: "14",
            rx: "2",
            key: "lpm2y7"
        }
    ],
    [
        "rect",
        {
            width: "16",
            height: "6",
            x: "6",
            y: "4",
            rx: "2",
            key: "rdj6ps"
        }
    ],
    [
        "path",
        {
            d: "M2 2v20",
            key: "1ivd8o"
        }
    ]
]);
var alignStartVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignStartVertical
});
const AlignVerticalDistributeCenter = createLucideIcon("AlignVerticalDistributeCenter", [
    [
        "rect",
        {
            width: "14",
            height: "6",
            x: "5",
            y: "14",
            rx: "2",
            key: "jmoj9s"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "4",
            rx: "2",
            key: "aza5on"
        }
    ],
    [
        "path",
        {
            d: "M22 7h-5",
            key: "o2endc"
        }
    ],
    [
        "path",
        {
            d: "M7 7H1",
            key: "105l6j"
        }
    ],
    [
        "path",
        {
            d: "M22 17h-3",
            key: "1lwga1"
        }
    ],
    [
        "path",
        {
            d: "M5 17H2",
            key: "1gx9xc"
        }
    ]
]);
var alignVerticalDistributeCenter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalDistributeCenter
});
const AlignVerticalDistributeEnd = createLucideIcon("AlignVerticalDistributeEnd", [
    [
        "rect",
        {
            width: "14",
            height: "6",
            x: "5",
            y: "14",
            rx: "2",
            key: "jmoj9s"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "4",
            rx: "2",
            key: "aza5on"
        }
    ],
    [
        "path",
        {
            d: "M2 20h20",
            key: "owomy5"
        }
    ],
    [
        "path",
        {
            d: "M2 10h20",
            key: "1ir3d8"
        }
    ]
]);
var alignVerticalDistributeEnd = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalDistributeEnd
});
const AlignVerticalDistributeStart = createLucideIcon("AlignVerticalDistributeStart", [
    [
        "rect",
        {
            width: "14",
            height: "6",
            x: "5",
            y: "14",
            rx: "2",
            key: "jmoj9s"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "4",
            rx: "2",
            key: "aza5on"
        }
    ],
    [
        "path",
        {
            d: "M2 14h20",
            key: "myj16y"
        }
    ],
    [
        "path",
        {
            d: "M2 4h20",
            key: "mda7wb"
        }
    ]
]);
var alignVerticalDistributeStart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalDistributeStart
});
const AlignVerticalJustifyCenter = createLucideIcon("AlignVerticalJustifyCenter", [
    [
        "rect",
        {
            width: "14",
            height: "6",
            x: "5",
            y: "16",
            rx: "2",
            key: "1i8z2d"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "2",
            rx: "2",
            key: "ypihtt"
        }
    ],
    [
        "path",
        {
            d: "M2 12h20",
            key: "9i4pu4"
        }
    ]
]);
var alignVerticalJustifyCenter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalJustifyCenter
});
const AlignVerticalJustifyEnd = createLucideIcon("AlignVerticalJustifyEnd", [
    [
        "rect",
        {
            width: "14",
            height: "6",
            x: "5",
            y: "12",
            rx: "2",
            key: "4l4tp2"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "2",
            rx: "2",
            key: "ypihtt"
        }
    ],
    [
        "path",
        {
            d: "M2 22h20",
            key: "272qi7"
        }
    ]
]);
var alignVerticalJustifyEnd = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalJustifyEnd
});
const AlignVerticalJustifyStart = createLucideIcon("AlignVerticalJustifyStart", [
    [
        "rect",
        {
            width: "14",
            height: "6",
            x: "5",
            y: "16",
            rx: "2",
            key: "1i8z2d"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "6",
            rx: "2",
            key: "13squh"
        }
    ],
    [
        "path",
        {
            d: "M2 2h20",
            key: "1ennik"
        }
    ]
]);
var alignVerticalJustifyStart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalJustifyStart
});
const AlignVerticalSpaceAround = createLucideIcon("AlignVerticalSpaceAround", [
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "9",
            rx: "2",
            key: "b1zbii"
        }
    ],
    [
        "path",
        {
            d: "M22 20H2",
            key: "1p1f7z"
        }
    ],
    [
        "path",
        {
            d: "M22 4H2",
            key: "1b7qnq"
        }
    ]
]);
var alignVerticalSpaceAround = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalSpaceAround
});
const AlignVerticalSpaceBetween = createLucideIcon("AlignVerticalSpaceBetween", [
    [
        "rect",
        {
            width: "14",
            height: "6",
            x: "5",
            y: "15",
            rx: "2",
            key: "1w91an"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "6",
            x: "7",
            y: "3",
            rx: "2",
            key: "17wqzy"
        }
    ],
    [
        "path",
        {
            d: "M2 21h20",
            key: "1nyx9w"
        }
    ],
    [
        "path",
        {
            d: "M2 3h20",
            key: "91anmk"
        }
    ]
]);
var alignVerticalSpaceBetween = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AlignVerticalSpaceBetween
});
const Ampersand = createLucideIcon("Ampersand", [
    [
        "path",
        {
            d: "M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13",
            key: "1o9ehi"
        }
    ],
    [
        "path",
        {
            d: "M16 12h3",
            key: "4uvgyw"
        }
    ]
]);
var ampersand = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ampersand
});
const Ampersands = createLucideIcon("Ampersands", [
    [
        "path",
        {
            d: "M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
            key: "12lh1k"
        }
    ],
    [
        "path",
        {
            d: "M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
            key: "173c68"
        }
    ]
]);
var ampersands = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ampersands
});
const Anchor = createLucideIcon("Anchor", [
    [
        "circle",
        {
            cx: "12",
            cy: "5",
            r: "3",
            key: "rqqgnr"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "8",
            key: "abakz7"
        }
    ],
    [
        "path",
        {
            d: "M5 12H2a10 10 0 0 0 20 0h-3",
            key: "1hv3nh"
        }
    ]
]);
var anchor = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Anchor
});
const Angry = createLucideIcon("Angry", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M16 16s-1.5-2-4-2-4 2-4 2",
            key: "epbg0q"
        }
    ],
    [
        "path",
        {
            d: "M7.5 8 10 9",
            key: "olxxln"
        }
    ],
    [
        "path",
        {
            d: "m14 9 2.5-1",
            key: "1j6cij"
        }
    ],
    [
        "path",
        {
            d: "M9 10h0",
            key: "1vxvly"
        }
    ],
    [
        "path",
        {
            d: "M15 10h0",
            key: "1j6oav"
        }
    ]
]);
var angry = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Angry
});
const Annoyed = createLucideIcon("Annoyed", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M8 15h8",
            key: "45n4r"
        }
    ],
    [
        "path",
        {
            d: "M8 9h2",
            key: "1g203m"
        }
    ],
    [
        "path",
        {
            d: "M14 9h2",
            key: "116p9w"
        }
    ]
]);
var annoyed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Annoyed
});
const Aperture = createLucideIcon("Aperture", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "14.31",
            x2: "20.05",
            y1: "8",
            y2: "17.94",
            key: "jdes2e"
        }
    ],
    [
        "line",
        {
            x1: "9.69",
            x2: "21.17",
            y1: "8",
            y2: "8",
            key: "1gubuk"
        }
    ],
    [
        "line",
        {
            x1: "7.38",
            x2: "13.12",
            y1: "12",
            y2: "2.06",
            key: "1m4d1n"
        }
    ],
    [
        "line",
        {
            x1: "9.69",
            x2: "3.95",
            y1: "16",
            y2: "6.06",
            key: "1wye2p"
        }
    ],
    [
        "line",
        {
            x1: "14.31",
            x2: "2.83",
            y1: "16",
            y2: "16",
            key: "1l9f4x"
        }
    ],
    [
        "line",
        {
            x1: "16.62",
            x2: "10.88",
            y1: "12",
            y2: "21.94",
            key: "1jjvfs"
        }
    ]
]);
var aperture = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Aperture
});
const AppWindow = createLucideIcon("AppWindow", [
    [
        "rect",
        {
            x: "2",
            y: "4",
            width: "20",
            height: "16",
            rx: "2",
            key: "izxlao"
        }
    ],
    [
        "path",
        {
            d: "M10 4v4",
            key: "pp8u80"
        }
    ],
    [
        "path",
        {
            d: "M2 8h20",
            key: "d11cs7"
        }
    ],
    [
        "path",
        {
            d: "M6 4v4",
            key: "1svtjw"
        }
    ]
]);
var appWindow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AppWindow
});
const Apple = createLucideIcon("Apple", [
    [
        "path",
        {
            d: "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z",
            key: "3s7exb"
        }
    ],
    [
        "path",
        {
            d: "M10 2c1 .5 2 2 2 5",
            key: "fcco2y"
        }
    ]
]);
var apple = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Apple
});
const ArchiveRestore = createLucideIcon("ArchiveRestore", [
    [
        "rect",
        {
            width: "20",
            height: "5",
            x: "2",
            y: "4",
            rx: "2",
            key: "uhwcea"
        }
    ],
    [
        "path",
        {
            d: "M12 13v7",
            key: "1arz7h"
        }
    ],
    [
        "path",
        {
            d: "m9 16 3-3 3 3",
            key: "1idcnm"
        }
    ],
    [
        "path",
        {
            d: "M4 9v9a2 2 0 0 0 2 2h2",
            key: "qxnby6"
        }
    ],
    [
        "path",
        {
            d: "M20 9v9a2 2 0 0 1-2 2h-2",
            key: "gz3jmx"
        }
    ]
]);
var archiveRestore = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArchiveRestore
});
const Archive = createLucideIcon("Archive", [
    [
        "rect",
        {
            width: "20",
            height: "5",
            x: "2",
            y: "4",
            rx: "2",
            key: "uhwcea"
        }
    ],
    [
        "path",
        {
            d: "M4 9v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9",
            key: "shkvi4"
        }
    ],
    [
        "path",
        {
            d: "M10 13h4",
            key: "ytezjc"
        }
    ]
]);
var archive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Archive
});
const AreaChart = createLucideIcon("AreaChart", [
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ],
    [
        "path",
        {
            d: "M7 12v5h12V8l-5 5-4-4Z",
            key: "zxz28u"
        }
    ]
]);
var areaChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AreaChart
});
const Armchair = createLucideIcon("Armchair", [
    [
        "path",
        {
            d: "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3",
            key: "irtipd"
        }
    ],
    [
        "path",
        {
            d: "M3 11v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H7v-2a2 2 0 0 0-4 0Z",
            key: "1ed1m0"
        }
    ],
    [
        "path",
        {
            d: "M5 18v2",
            key: "ppbyun"
        }
    ],
    [
        "path",
        {
            d: "M19 18v2",
            key: "gy7782"
        }
    ]
]);
var armchair = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Armchair
});
const ArrowBigDownDash = createLucideIcon("ArrowBigDownDash", [
    [
        "path",
        {
            d: "M15 5H9",
            key: "1tp3ed"
        }
    ],
    [
        "path",
        {
            d: "M15 9v3h4l-7 7-7-7h4V9h6z",
            key: "oscb9h"
        }
    ]
]);
var arrowBigDownDash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigDownDash
});
const ArrowBigDown = createLucideIcon("ArrowBigDown", [
    [
        "path",
        {
            d: "M15 6v6h4l-7 7-7-7h4V6h6z",
            key: "1thax2"
        }
    ]
]);
var arrowBigDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigDown
});
const ArrowBigLeftDash = createLucideIcon("ArrowBigLeftDash", [
    [
        "path",
        {
            d: "M19 15V9",
            key: "1hci5f"
        }
    ],
    [
        "path",
        {
            d: "M15 15h-3v4l-7-7 7-7v4h3v6z",
            key: "16tjna"
        }
    ]
]);
var arrowBigLeftDash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigLeftDash
});
const ArrowBigLeft = createLucideIcon("ArrowBigLeft", [
    [
        "path",
        {
            d: "M18 15h-6v4l-7-7 7-7v4h6v6z",
            key: "lbrdak"
        }
    ]
]);
var arrowBigLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigLeft
});
const ArrowBigRightDash = createLucideIcon("ArrowBigRightDash", [
    [
        "path",
        {
            d: "M5 9v6",
            key: "158jrl"
        }
    ],
    [
        "path",
        {
            d: "M9 9h3V5l7 7-7 7v-4H9V9z",
            key: "1sg2xn"
        }
    ]
]);
var arrowBigRightDash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigRightDash
});
const ArrowBigRight = createLucideIcon("ArrowBigRight", [
    [
        "path",
        {
            d: "M6 9h6V5l7 7-7 7v-4H6V9z",
            key: "7fvt9c"
        }
    ]
]);
var arrowBigRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigRight
});
const ArrowBigUpDash = createLucideIcon("ArrowBigUpDash", [
    [
        "path",
        {
            d: "M9 19h6",
            key: "456am0"
        }
    ],
    [
        "path",
        {
            d: "M9 15v-3H5l7-7 7 7h-4v3H9z",
            key: "1r2uve"
        }
    ]
]);
var arrowBigUpDash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigUpDash
});
const ArrowBigUp = createLucideIcon("ArrowBigUp", [
    [
        "path",
        {
            d: "M9 18v-6H5l7-7 7 7h-4v6H9z",
            key: "1x06kx"
        }
    ]
]);
var arrowBigUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowBigUp
});
const ArrowDown01 = createLucideIcon("ArrowDown01", [
    [
        "path",
        {
            d: "m3 16 4 4 4-4",
            key: "1co6wj"
        }
    ],
    [
        "path",
        {
            d: "M7 20V4",
            key: "1yoxec"
        }
    ],
    [
        "rect",
        {
            x: "15",
            y: "4",
            width: "4",
            height: "6",
            ry: "2",
            key: "1bwicg"
        }
    ],
    [
        "path",
        {
            d: "M17 20v-6h-2",
            key: "1qp1so"
        }
    ],
    [
        "path",
        {
            d: "M15 20h4",
            key: "1j968p"
        }
    ]
]);
var arrowDown01 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDown01
});
const ArrowDown10 = createLucideIcon("ArrowDown10", [
    [
        "path",
        {
            d: "m3 16 4 4 4-4",
            key: "1co6wj"
        }
    ],
    [
        "path",
        {
            d: "M7 20V4",
            key: "1yoxec"
        }
    ],
    [
        "path",
        {
            d: "M17 10V4h-2",
            key: "zcsr5x"
        }
    ],
    [
        "path",
        {
            d: "M15 10h4",
            key: "id2lce"
        }
    ],
    [
        "rect",
        {
            x: "15",
            y: "14",
            width: "4",
            height: "6",
            ry: "2",
            key: "33xykx"
        }
    ]
]);
var arrowDown10 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDown10
});
const ArrowDownAZ = createLucideIcon("ArrowDownAZ", [
    [
        "path",
        {
            d: "m3 16 4 4 4-4",
            key: "1co6wj"
        }
    ],
    [
        "path",
        {
            d: "M7 20V4",
            key: "1yoxec"
        }
    ],
    [
        "path",
        {
            d: "M20 8h-5",
            key: "1vsyxs"
        }
    ],
    [
        "path",
        {
            d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10",
            key: "ag13bf"
        }
    ],
    [
        "path",
        {
            d: "M15 14h5l-5 6h5",
            key: "ur5jdg"
        }
    ]
]);
var arrowDownAZ = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownAZ
});
const ArrowDownCircle = createLucideIcon("ArrowDownCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M12 8v8",
            key: "napkw2"
        }
    ],
    [
        "path",
        {
            d: "m8 12 4 4 4-4",
            key: "k98ssh"
        }
    ]
]);
var arrowDownCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownCircle
});
const ArrowDownFromLine = createLucideIcon("ArrowDownFromLine", [
    [
        "path",
        {
            d: "M19 3H5",
            key: "1236rx"
        }
    ],
    [
        "path",
        {
            d: "M12 21V7",
            key: "gj6g52"
        }
    ],
    [
        "path",
        {
            d: "m6 15 6 6 6-6",
            key: "h15q88"
        }
    ]
]);
var arrowDownFromLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownFromLine
});
const ArrowDownLeftFromCircle = createLucideIcon("ArrowDownLeftFromCircle", [
    [
        "path",
        {
            d: "M2 12a10 10 0 1 1 10 10",
            key: "1yn6ov"
        }
    ],
    [
        "path",
        {
            d: "m2 22 10-10",
            key: "28ilpk"
        }
    ],
    [
        "path",
        {
            d: "M8 22H2v-6",
            key: "sulq54"
        }
    ]
]);
var arrowDownLeftFromCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownLeftFromCircle
});
const ArrowDownLeftSquare = createLucideIcon("ArrowDownLeftSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m16 8-8 8",
            key: "166keh"
        }
    ],
    [
        "path",
        {
            d: "M16 16H8V8",
            key: "1w2ppm"
        }
    ]
]);
var arrowDownLeftSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownLeftSquare
});
const ArrowDownLeft = createLucideIcon("ArrowDownLeft", [
    [
        "path",
        {
            d: "M17 7 7 17",
            key: "15tmo1"
        }
    ],
    [
        "path",
        {
            d: "M17 17H7V7",
            key: "1org7z"
        }
    ]
]);
var arrowDownLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownLeft
});
const ArrowDownNarrowWide = createLucideIcon("ArrowDownNarrowWide", [
    [
        "path",
        {
            d: "m3 16 4 4 4-4",
            key: "1co6wj"
        }
    ],
    [
        "path",
        {
            d: "M7 20V4",
            key: "1yoxec"
        }
    ],
    [
        "path",
        {
            d: "M11 4h4",
            key: "6d7r33"
        }
    ],
    [
        "path",
        {
            d: "M11 8h7",
            key: "djye34"
        }
    ],
    [
        "path",
        {
            d: "M11 12h10",
            key: "1438ji"
        }
    ]
]);
var arrowDownNarrowWide = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownNarrowWide
});
const ArrowDownRightFromCircle = createLucideIcon("ArrowDownRightFromCircle", [
    [
        "path",
        {
            d: "M12 22a10 10 0 1 1 10-10",
            key: "130bv5"
        }
    ],
    [
        "path",
        {
            d: "M22 22 12 12",
            key: "131aw7"
        }
    ],
    [
        "path",
        {
            d: "M22 16v6h-6",
            key: "1gvm70"
        }
    ]
]);
var arrowDownRightFromCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownRightFromCircle
});
const ArrowDownRightSquare = createLucideIcon("ArrowDownRightSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m8 8 8 8",
            key: "1imecy"
        }
    ],
    [
        "path",
        {
            d: "M16 8v8H8",
            key: "1lbpgo"
        }
    ]
]);
var arrowDownRightSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownRightSquare
});
const ArrowDownRight = createLucideIcon("ArrowDownRight", [
    [
        "path",
        {
            d: "m7 7 10 10",
            key: "1fmybs"
        }
    ],
    [
        "path",
        {
            d: "M17 7v10H7",
            key: "6fjiku"
        }
    ]
]);
var arrowDownRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownRight
});
const ArrowDownSquare = createLucideIcon("ArrowDownSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M12 8v8",
            key: "napkw2"
        }
    ],
    [
        "path",
        {
            d: "m8 12 4 4 4-4",
            key: "k98ssh"
        }
    ]
]);
var arrowDownSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownSquare
});
const ArrowDownToDot = createLucideIcon("ArrowDownToDot", [
    [
        "path",
        {
            d: "M12 2v14",
            key: "jyx4ut"
        }
    ],
    [
        "path",
        {
            d: "m19 9-7 7-7-7",
            key: "1oe3oy"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "21",
            r: "1",
            key: "o0uj5v"
        }
    ]
]);
var arrowDownToDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownToDot
});
const ArrowDownToLine = createLucideIcon("ArrowDownToLine", [
    [
        "path",
        {
            d: "M12 17V3",
            key: "1cwfxf"
        }
    ],
    [
        "path",
        {
            d: "m6 11 6 6 6-6",
            key: "12ii2o"
        }
    ],
    [
        "path",
        {
            d: "M19 21H5",
            key: "150jfl"
        }
    ]
]);
var arrowDownToLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownToLine
});
const ArrowDownUp = createLucideIcon("ArrowDownUp", [
    [
        "path",
        {
            d: "m3 16 4 4 4-4",
            key: "1co6wj"
        }
    ],
    [
        "path",
        {
            d: "M7 20V4",
            key: "1yoxec"
        }
    ],
    [
        "path",
        {
            d: "m21 8-4-4-4 4",
            key: "1c9v7m"
        }
    ],
    [
        "path",
        {
            d: "M17 4v16",
            key: "7dpous"
        }
    ]
]);
var arrowDownUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownUp
});
const ArrowDownWideNarrow = createLucideIcon("ArrowDownWideNarrow", [
    [
        "path",
        {
            d: "m3 16 4 4 4-4",
            key: "1co6wj"
        }
    ],
    [
        "path",
        {
            d: "M7 20V4",
            key: "1yoxec"
        }
    ],
    [
        "path",
        {
            d: "M11 4h10",
            key: "1w87gc"
        }
    ],
    [
        "path",
        {
            d: "M11 8h7",
            key: "djye34"
        }
    ],
    [
        "path",
        {
            d: "M11 12h4",
            key: "q8tih4"
        }
    ]
]);
var arrowDownWideNarrow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownWideNarrow
});
const ArrowDownZA = createLucideIcon("ArrowDownZA", [
    [
        "path",
        {
            d: "m3 16 4 4 4-4",
            key: "1co6wj"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ],
    [
        "path",
        {
            d: "M15 4h5l-5 6h5",
            key: "8asdl1"
        }
    ],
    [
        "path",
        {
            d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20",
            key: "r6l5cz"
        }
    ],
    [
        "path",
        {
            d: "M20 18h-5",
            key: "18j1r2"
        }
    ]
]);
var arrowDownZA = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDownZA
});
const ArrowDown = createLucideIcon("ArrowDown", [
    [
        "path",
        {
            d: "M12 5v14",
            key: "s699le"
        }
    ],
    [
        "path",
        {
            d: "m19 12-7 7-7-7",
            key: "1idqje"
        }
    ]
]);
var arrowDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowDown
});
const ArrowLeftCircle = createLucideIcon("ArrowLeftCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M16 12H8",
            key: "1fr5h0"
        }
    ],
    [
        "path",
        {
            d: "m12 8-4 4 4 4",
            key: "15vm53"
        }
    ]
]);
var arrowLeftCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowLeftCircle
});
const ArrowLeftFromLine = createLucideIcon("ArrowLeftFromLine", [
    [
        "path",
        {
            d: "m9 6-6 6 6 6",
            key: "7v63n9"
        }
    ],
    [
        "path",
        {
            d: "M3 12h14",
            key: "13k4hi"
        }
    ],
    [
        "path",
        {
            d: "M21 19V5",
            key: "b4bplr"
        }
    ]
]);
var arrowLeftFromLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowLeftFromLine
});
const ArrowLeftRight = createLucideIcon("ArrowLeftRight", [
    [
        "path",
        {
            d: "M8 3 4 7l4 4",
            key: "9rb6wj"
        }
    ],
    [
        "path",
        {
            d: "M4 7h16",
            key: "6tx8e3"
        }
    ],
    [
        "path",
        {
            d: "m16 21 4-4-4-4",
            key: "siv7j2"
        }
    ],
    [
        "path",
        {
            d: "M20 17H4",
            key: "h6l3hr"
        }
    ]
]);
var arrowLeftRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowLeftRight
});
const ArrowLeftSquare = createLucideIcon("ArrowLeftSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m12 8-4 4 4 4",
            key: "15vm53"
        }
    ],
    [
        "path",
        {
            d: "M16 12H8",
            key: "1fr5h0"
        }
    ]
]);
var arrowLeftSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowLeftSquare
});
const ArrowLeftToLine = createLucideIcon("ArrowLeftToLine", [
    [
        "path",
        {
            d: "M3 19V5",
            key: "rwsyhb"
        }
    ],
    [
        "path",
        {
            d: "m13 6-6 6 6 6",
            key: "1yhaz7"
        }
    ],
    [
        "path",
        {
            d: "M7 12h14",
            key: "uoisry"
        }
    ]
]);
var arrowLeftToLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowLeftToLine
});
const ArrowLeft = createLucideIcon("ArrowLeft", [
    [
        "path",
        {
            d: "m12 19-7-7 7-7",
            key: "1l729n"
        }
    ],
    [
        "path",
        {
            d: "M19 12H5",
            key: "x3x0zl"
        }
    ]
]);
var arrowLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowLeft
});
const ArrowRightCircle = createLucideIcon("ArrowRightCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "path",
        {
            d: "m12 16 4-4-4-4",
            key: "1i9zcv"
        }
    ]
]);
var arrowRightCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowRightCircle
});
const ArrowRightFromLine = createLucideIcon("ArrowRightFromLine", [
    [
        "path",
        {
            d: "M3 5v14",
            key: "1nt18q"
        }
    ],
    [
        "path",
        {
            d: "M21 12H7",
            key: "13ipq5"
        }
    ],
    [
        "path",
        {
            d: "m15 18 6-6-6-6",
            key: "6tx3qv"
        }
    ]
]);
var arrowRightFromLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowRightFromLine
});
const ArrowRightLeft = createLucideIcon("ArrowRightLeft", [
    [
        "path",
        {
            d: "m16 3 4 4-4 4",
            key: "1x1c3m"
        }
    ],
    [
        "path",
        {
            d: "M20 7H4",
            key: "zbl0bi"
        }
    ],
    [
        "path",
        {
            d: "m8 21-4-4 4-4",
            key: "h9nckh"
        }
    ],
    [
        "path",
        {
            d: "M4 17h16",
            key: "g4d7ey"
        }
    ]
]);
var arrowRightLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowRightLeft
});
const ArrowRightSquare = createLucideIcon("ArrowRightSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "path",
        {
            d: "m12 16 4-4-4-4",
            key: "1i9zcv"
        }
    ]
]);
var arrowRightSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowRightSquare
});
const ArrowRightToLine = createLucideIcon("ArrowRightToLine", [
    [
        "path",
        {
            d: "M17 12H3",
            key: "8awo09"
        }
    ],
    [
        "path",
        {
            d: "m11 18 6-6-6-6",
            key: "8c2y43"
        }
    ],
    [
        "path",
        {
            d: "M21 5v14",
            key: "nzette"
        }
    ]
]);
var arrowRightToLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowRightToLine
});
const ArrowRight = createLucideIcon("ArrowRight", [
    [
        "path",
        {
            d: "M5 12h14",
            key: "1ays0h"
        }
    ],
    [
        "path",
        {
            d: "m12 5 7 7-7 7",
            key: "xquz4c"
        }
    ]
]);
var arrowRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowRight
});
const ArrowUp01 = createLucideIcon("ArrowUp01", [
    [
        "path",
        {
            d: "m3 8 4-4 4 4",
            key: "11wl7u"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ],
    [
        "rect",
        {
            x: "15",
            y: "4",
            width: "4",
            height: "6",
            ry: "2",
            key: "1bwicg"
        }
    ],
    [
        "path",
        {
            d: "M17 20v-6h-2",
            key: "1qp1so"
        }
    ],
    [
        "path",
        {
            d: "M15 20h4",
            key: "1j968p"
        }
    ]
]);
var arrowUp01 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUp01
});
const ArrowUp10 = createLucideIcon("ArrowUp10", [
    [
        "path",
        {
            d: "m3 8 4-4 4 4",
            key: "11wl7u"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ],
    [
        "path",
        {
            d: "M17 10V4h-2",
            key: "zcsr5x"
        }
    ],
    [
        "path",
        {
            d: "M15 10h4",
            key: "id2lce"
        }
    ],
    [
        "rect",
        {
            x: "15",
            y: "14",
            width: "4",
            height: "6",
            ry: "2",
            key: "33xykx"
        }
    ]
]);
var arrowUp10 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUp10
});
const ArrowUpAZ = createLucideIcon("ArrowUpAZ", [
    [
        "path",
        {
            d: "m3 8 4-4 4 4",
            key: "11wl7u"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ],
    [
        "path",
        {
            d: "M20 8h-5",
            key: "1vsyxs"
        }
    ],
    [
        "path",
        {
            d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10",
            key: "ag13bf"
        }
    ],
    [
        "path",
        {
            d: "M15 14h5l-5 6h5",
            key: "ur5jdg"
        }
    ]
]);
var arrowUpAZ = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpAZ
});
const ArrowUpCircle = createLucideIcon("ArrowUpCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m16 12-4-4-4 4",
            key: "177agl"
        }
    ],
    [
        "path",
        {
            d: "M12 16V8",
            key: "1sbj14"
        }
    ]
]);
var arrowUpCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpCircle
});
const ArrowUpDown = createLucideIcon("ArrowUpDown", [
    [
        "path",
        {
            d: "m21 16-4 4-4-4",
            key: "f6ql7i"
        }
    ],
    [
        "path",
        {
            d: "M17 20V4",
            key: "1ejh1v"
        }
    ],
    [
        "path",
        {
            d: "m3 8 4-4 4 4",
            key: "11wl7u"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ]
]);
var arrowUpDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpDown
});
const ArrowUpFromDot = createLucideIcon("ArrowUpFromDot", [
    [
        "path",
        {
            d: "m5 9 7-7 7 7",
            key: "1hw5ic"
        }
    ],
    [
        "path",
        {
            d: "M12 16V2",
            key: "ywoabb"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "21",
            r: "1",
            key: "o0uj5v"
        }
    ]
]);
var arrowUpFromDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpFromDot
});
const ArrowUpFromLine = createLucideIcon("ArrowUpFromLine", [
    [
        "path",
        {
            d: "m18 9-6-6-6 6",
            key: "kcunyi"
        }
    ],
    [
        "path",
        {
            d: "M12 3v14",
            key: "7cf3v8"
        }
    ],
    [
        "path",
        {
            d: "M5 21h14",
            key: "11awu3"
        }
    ]
]);
var arrowUpFromLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpFromLine
});
const ArrowUpLeftFromCircle = createLucideIcon("ArrowUpLeftFromCircle", [
    [
        "path",
        {
            d: "M2 8V2h6",
            key: "hiwtdz"
        }
    ],
    [
        "path",
        {
            d: "m2 2 10 10",
            key: "1oh8rs"
        }
    ],
    [
        "path",
        {
            d: "M12 2A10 10 0 1 1 2 12",
            key: "rrk4fa"
        }
    ]
]);
var arrowUpLeftFromCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpLeftFromCircle
});
const ArrowUpLeftSquare = createLucideIcon("ArrowUpLeftSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M8 16V8h8",
            key: "19xb1h"
        }
    ],
    [
        "path",
        {
            d: "M16 16 8 8",
            key: "1qdy8n"
        }
    ]
]);
var arrowUpLeftSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpLeftSquare
});
const ArrowUpLeft = createLucideIcon("ArrowUpLeft", [
    [
        "path",
        {
            d: "M7 17V7h10",
            key: "11bw93"
        }
    ],
    [
        "path",
        {
            d: "M17 17 7 7",
            key: "2786uv"
        }
    ]
]);
var arrowUpLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpLeft
});
const ArrowUpNarrowWide = createLucideIcon("ArrowUpNarrowWide", [
    [
        "path",
        {
            d: "m3 8 4-4 4 4",
            key: "11wl7u"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ],
    [
        "path",
        {
            d: "M11 12h4",
            key: "q8tih4"
        }
    ],
    [
        "path",
        {
            d: "M11 16h7",
            key: "uosisv"
        }
    ],
    [
        "path",
        {
            d: "M11 20h10",
            key: "jvxblo"
        }
    ]
]);
var arrowUpNarrowWide = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpNarrowWide
});
const ArrowUpRightFromCircle = createLucideIcon("ArrowUpRightFromCircle", [
    [
        "path",
        {
            d: "M22 12A10 10 0 1 1 12 2",
            key: "1fm58d"
        }
    ],
    [
        "path",
        {
            d: "M22 2 12 12",
            key: "yg2myt"
        }
    ],
    [
        "path",
        {
            d: "M16 2h6v6",
            key: "zan5cs"
        }
    ]
]);
var arrowUpRightFromCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpRightFromCircle
});
const ArrowUpRightSquare = createLucideIcon("ArrowUpRightSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M8 8h8v8",
            key: "b65dnt"
        }
    ],
    [
        "path",
        {
            d: "m8 16 8-8",
            key: "13b9ih"
        }
    ]
]);
var arrowUpRightSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpRightSquare
});
const ArrowUpRight = createLucideIcon("ArrowUpRight", [
    [
        "path",
        {
            d: "M7 7h10v10",
            key: "1tivn9"
        }
    ],
    [
        "path",
        {
            d: "M7 17 17 7",
            key: "1vkiza"
        }
    ]
]);
var arrowUpRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpRight
});
const ArrowUpSquare = createLucideIcon("ArrowUpSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m16 12-4-4-4 4",
            key: "177agl"
        }
    ],
    [
        "path",
        {
            d: "M12 16V8",
            key: "1sbj14"
        }
    ]
]);
var arrowUpSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpSquare
});
const ArrowUpToLine = createLucideIcon("ArrowUpToLine", [
    [
        "path",
        {
            d: "M5 3h14",
            key: "7usisc"
        }
    ],
    [
        "path",
        {
            d: "m18 13-6-6-6 6",
            key: "1kf1n9"
        }
    ],
    [
        "path",
        {
            d: "M12 7v14",
            key: "1akyts"
        }
    ]
]);
var arrowUpToLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpToLine
});
const ArrowUpWideNarrow = createLucideIcon("ArrowUpWideNarrow", [
    [
        "path",
        {
            d: "m3 8 4-4 4 4",
            key: "11wl7u"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ],
    [
        "path",
        {
            d: "M11 12h10",
            key: "1438ji"
        }
    ],
    [
        "path",
        {
            d: "M11 16h7",
            key: "uosisv"
        }
    ],
    [
        "path",
        {
            d: "M11 20h4",
            key: "1krc32"
        }
    ]
]);
var arrowUpWideNarrow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpWideNarrow
});
const ArrowUpZA = createLucideIcon("ArrowUpZA", [
    [
        "path",
        {
            d: "m3 8 4-4 4 4",
            key: "11wl7u"
        }
    ],
    [
        "path",
        {
            d: "M7 4v16",
            key: "1glfcx"
        }
    ],
    [
        "path",
        {
            d: "M15 4h5l-5 6h5",
            key: "8asdl1"
        }
    ],
    [
        "path",
        {
            d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20",
            key: "r6l5cz"
        }
    ],
    [
        "path",
        {
            d: "M20 18h-5",
            key: "18j1r2"
        }
    ]
]);
var arrowUpZA = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUpZA
});
const ArrowUp = createLucideIcon("ArrowUp", [
    [
        "path",
        {
            d: "m5 12 7-7 7 7",
            key: "hav0vg"
        }
    ],
    [
        "path",
        {
            d: "M12 19V5",
            key: "x0mq9r"
        }
    ]
]);
var arrowUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowUp
});
const ArrowsUpFromLine = createLucideIcon("ArrowsUpFromLine", [
    [
        "path",
        {
            d: "m4 6 3-3 3 3",
            key: "9aidw8"
        }
    ],
    [
        "path",
        {
            d: "M7 17V3",
            key: "19qxw1"
        }
    ],
    [
        "path",
        {
            d: "m14 6 3-3 3 3",
            key: "6iy689"
        }
    ],
    [
        "path",
        {
            d: "M17 17V3",
            key: "o0fmgi"
        }
    ],
    [
        "path",
        {
            d: "M4 21h16",
            key: "1h09gz"
        }
    ]
]);
var arrowsUpFromLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ArrowsUpFromLine
});
const Asterisk = createLucideIcon("Asterisk", [
    [
        "path",
        {
            d: "M12 6v12",
            key: "1vza4d"
        }
    ],
    [
        "path",
        {
            d: "M17.196 9 6.804 15",
            key: "1ah31z"
        }
    ],
    [
        "path",
        {
            d: "m6.804 9 10.392 6",
            key: "1b6pxd"
        }
    ]
]);
var asterisk = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Asterisk
});
const AtSign = createLucideIcon("AtSign", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ],
    [
        "path",
        {
            d: "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8",
            key: "7n84p3"
        }
    ]
]);
var atSign = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: AtSign
});
const Atom = createLucideIcon("Atom", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ],
    [
        "path",
        {
            d: "M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z",
            key: "1l2ple"
        }
    ],
    [
        "path",
        {
            d: "M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z",
            key: "1wam0m"
        }
    ]
]);
var atom = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Atom
});
const Award = createLucideIcon("Award", [
    [
        "circle",
        {
            cx: "12",
            cy: "8",
            r: "6",
            key: "1vp47v"
        }
    ],
    [
        "path",
        {
            d: "M15.477 12.89 17 22l-5-3-5 3 1.523-9.11",
            key: "em7aur"
        }
    ]
]);
var award = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Award
});
const Axe = createLucideIcon("Axe", [
    [
        "path",
        {
            d: "m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9",
            key: "csbz4o"
        }
    ],
    [
        "path",
        {
            d: "M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z",
            key: "113wfo"
        }
    ]
]);
var axe = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Axe
});
const Axis3d = createLucideIcon("Axis3d", [
    [
        "path",
        {
            d: "M4 4v16h16",
            key: "1s015l"
        }
    ],
    [
        "path",
        {
            d: "m4 20 7-7",
            key: "17qe9y"
        }
    ]
]);
var axis3d = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Axis3d
});
const Baby = createLucideIcon("Baby", [
    [
        "path",
        {
            d: "M9 12h.01",
            key: "157uk2"
        }
    ],
    [
        "path",
        {
            d: "M15 12h.01",
            key: "1k8ypt"
        }
    ],
    [
        "path",
        {
            d: "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5",
            key: "1u7htd"
        }
    ],
    [
        "path",
        {
            d: "M19 6.3a9 9 0 0 1 1.8 3.9 2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1",
            key: "5yv0yz"
        }
    ]
]);
var baby = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Baby
});
const Backpack = createLucideIcon("Backpack", [
    [
        "path",
        {
            d: "M4 20V10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2Z",
            key: "tunmdx"
        }
    ],
    [
        "path",
        {
            d: "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2",
            key: "donm21"
        }
    ],
    [
        "path",
        {
            d: "M8 21v-5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v5",
            key: "xk3gvk"
        }
    ],
    [
        "path",
        {
            d: "M8 10h8",
            key: "c7uz4u"
        }
    ],
    [
        "path",
        {
            d: "M8 18h8",
            key: "1no2b1"
        }
    ]
]);
var backpack = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Backpack
});
const BadgeAlert = createLucideIcon("BadgeAlert", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "12",
            key: "1pkeuh"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "16",
            y2: "16",
            key: "4dfq90"
        }
    ]
]);
var badgeAlert = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgeAlert
});
const BadgeCheck = createLucideIcon("BadgeCheck", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "path",
        {
            d: "m9 12 2 2 4-4",
            key: "dzmm74"
        }
    ]
]);
var badgeCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgeCheck
});
const BadgeDollarSign = createLucideIcon("BadgeDollarSign", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "path",
        {
            d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8",
            key: "1h4pet"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ]
]);
var badgeDollarSign = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgeDollarSign
});
const BadgeHelp = createLucideIcon("BadgeHelp", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "path",
        {
            d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3",
            key: "1u773s"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "17",
            y2: "17",
            key: "io3f8k"
        }
    ]
]);
var badgeHelp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgeHelp
});
const BadgeInfo = createLucideIcon("BadgeInfo", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "16",
            y2: "12",
            key: "1y1yb1"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "8",
            y2: "8",
            key: "110wyk"
        }
    ]
]);
var badgeInfo = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgeInfo
});
const BadgeMinus = createLucideIcon("BadgeMinus", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "12",
            y2: "12",
            key: "1jonct"
        }
    ]
]);
var badgeMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgeMinus
});
const BadgePercent = createLucideIcon("BadgePercent", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "path",
        {
            d: "m15 9-6 6",
            key: "1uzhvr"
        }
    ],
    [
        "path",
        {
            d: "M9 9h.01",
            key: "1q5me6"
        }
    ],
    [
        "path",
        {
            d: "M15 15h.01",
            key: "lqbp3k"
        }
    ]
]);
var badgePercent = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgePercent
});
const BadgePlus = createLucideIcon("BadgePlus", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "16",
            key: "10p56q"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "12",
            y2: "12",
            key: "1jonct"
        }
    ]
]);
var badgePlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgePlus
});
const BadgeX = createLucideIcon("BadgeX", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "9",
            y1: "9",
            y2: "15",
            key: "f7djnv"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "9",
            y2: "15",
            key: "1shsy8"
        }
    ]
]);
var badgeX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BadgeX
});
const Badge = createLucideIcon("Badge", [
    [
        "path",
        {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
        }
    ]
]);
var badge = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Badge
});
const BaggageClaim = createLucideIcon("BaggageClaim", [
    [
        "path",
        {
            d: "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2",
            key: "4irg2o"
        }
    ],
    [
        "path",
        {
            d: "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10",
            key: "14fcyx"
        }
    ],
    [
        "rect",
        {
            width: "13",
            height: "8",
            x: "8",
            y: "6",
            rx: "1",
            key: "o6oiis"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "20",
            r: "2",
            key: "t9985n"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "20",
            r: "2",
            key: "e5v82j"
        }
    ]
]);
var baggageClaim = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BaggageClaim
});
const Ban = createLucideIcon("Ban", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m4.9 4.9 14.2 14.2",
            key: "1m5liu"
        }
    ]
]);
var ban = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ban
});
const Banana = createLucideIcon("Banana", [
    [
        "path",
        {
            d: "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5",
            key: "1cscit"
        }
    ],
    [
        "path",
        {
            d: "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z",
            key: "1y1nbv"
        }
    ]
]);
var banana = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Banana
});
const Banknote = createLucideIcon("Banknote", [
    [
        "rect",
        {
            width: "20",
            height: "12",
            x: "2",
            y: "6",
            rx: "2",
            key: "9lu3g6"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ],
    [
        "path",
        {
            d: "M6 12h.01M18 12h.01",
            key: "113zkx"
        }
    ]
]);
var banknote = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Banknote
});
const BarChart2 = createLucideIcon("BarChart2", [
    [
        "line",
        {
            x1: "18",
            x2: "18",
            y1: "20",
            y2: "10",
            key: "1xfpm4"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "20",
            y2: "4",
            key: "be30l9"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "20",
            y2: "14",
            key: "1r4le6"
        }
    ]
]);
var barChart2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BarChart2
});
const BarChart3 = createLucideIcon("BarChart3", [
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ],
    [
        "path",
        {
            d: "M18 17V9",
            key: "2bz60n"
        }
    ],
    [
        "path",
        {
            d: "M13 17V5",
            key: "1frdt8"
        }
    ],
    [
        "path",
        {
            d: "M8 17v-3",
            key: "17ska0"
        }
    ]
]);
var barChart3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BarChart3
});
const BarChart4 = createLucideIcon("BarChart4", [
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ],
    [
        "path",
        {
            d: "M13 17V9",
            key: "1fwyjl"
        }
    ],
    [
        "path",
        {
            d: "M18 17V5",
            key: "sfb6ij"
        }
    ],
    [
        "path",
        {
            d: "M8 17v-3",
            key: "17ska0"
        }
    ]
]);
var barChart4 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BarChart4
});
const BarChartBig = createLucideIcon("BarChartBig", [
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "7",
            x: "7",
            y: "10",
            rx: "1",
            key: "14u6mf"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "12",
            x: "15",
            y: "5",
            rx: "1",
            key: "b3pek6"
        }
    ]
]);
var barChartBig = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BarChartBig
});
const BarChartHorizontalBig = createLucideIcon("BarChartHorizontalBig", [
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ],
    [
        "rect",
        {
            width: "12",
            height: "4",
            x: "7",
            y: "5",
            rx: "1",
            key: "936jl1"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "4",
            x: "7",
            y: "13",
            rx: "1",
            key: "jqfkpy"
        }
    ]
]);
var barChartHorizontalBig = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BarChartHorizontalBig
});
const BarChartHorizontal = createLucideIcon("BarChartHorizontal", [
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ],
    [
        "path",
        {
            d: "M7 16h8",
            key: "srdodz"
        }
    ],
    [
        "path",
        {
            d: "M7 11h12",
            key: "127s9w"
        }
    ],
    [
        "path",
        {
            d: "M7 6h3",
            key: "w9rmul"
        }
    ]
]);
var barChartHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BarChartHorizontal
});
const BarChart = createLucideIcon("BarChart", [
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "20",
            y2: "10",
            key: "1vz5eb"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "18",
            y1: "20",
            y2: "4",
            key: "cun8e5"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "20",
            y2: "16",
            key: "hq0ia6"
        }
    ]
]);
var barChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BarChart
});
const Baseline = createLucideIcon("Baseline", [
    [
        "path",
        {
            d: "M4 20h16",
            key: "14thso"
        }
    ],
    [
        "path",
        {
            d: "m6 16 6-12 6 12",
            key: "1b4byz"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ]
]);
var baseline = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Baseline
});
const Bath = createLucideIcon("Bath", [
    [
        "path",
        {
            d: "M9 6 6.5 3.5a1.5 1.5 0 0 0-1-.5C4.683 3 4 3.683 4 4.5V17a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5",
            key: "1r8yf5"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "8",
            y1: "5",
            y2: "7",
            key: "h5g8z4"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1dnqot"
        }
    ],
    [
        "line",
        {
            x1: "7",
            x2: "7",
            y1: "19",
            y2: "21",
            key: "16jp00"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "17",
            y1: "19",
            y2: "21",
            key: "1pxrnk"
        }
    ]
]);
var bath = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bath
});
const BatteryCharging = createLucideIcon("BatteryCharging", [
    [
        "path",
        {
            d: "M15 7h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2",
            key: "1sdynx"
        }
    ],
    [
        "path",
        {
            d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h1",
            key: "1gkd3k"
        }
    ],
    [
        "path",
        {
            d: "m11 7-3 5h4l-3 5",
            key: "b4a64w"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "22",
            y1: "11",
            y2: "13",
            key: "4dh1rd"
        }
    ]
]);
var batteryCharging = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BatteryCharging
});
const BatteryFull = createLucideIcon("BatteryFull", [
    [
        "rect",
        {
            width: "16",
            height: "10",
            x: "2",
            y: "7",
            rx: "2",
            ry: "2",
            key: "1w10f2"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "22",
            y1: "11",
            y2: "13",
            key: "4dh1rd"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "11",
            y2: "13",
            key: "1wd6dw"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "11",
            y2: "13",
            key: "haxvl5"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "14",
            y1: "11",
            y2: "13",
            key: "c6fn6x"
        }
    ]
]);
var batteryFull = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BatteryFull
});
const BatteryLow = createLucideIcon("BatteryLow", [
    [
        "rect",
        {
            width: "16",
            height: "10",
            x: "2",
            y: "7",
            rx: "2",
            ry: "2",
            key: "1w10f2"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "22",
            y1: "11",
            y2: "13",
            key: "4dh1rd"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "11",
            y2: "13",
            key: "1wd6dw"
        }
    ]
]);
var batteryLow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BatteryLow
});
const BatteryMedium = createLucideIcon("BatteryMedium", [
    [
        "rect",
        {
            width: "16",
            height: "10",
            x: "2",
            y: "7",
            rx: "2",
            ry: "2",
            key: "1w10f2"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "22",
            y1: "11",
            y2: "13",
            key: "4dh1rd"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "11",
            y2: "13",
            key: "1wd6dw"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "11",
            y2: "13",
            key: "haxvl5"
        }
    ]
]);
var batteryMedium = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BatteryMedium
});
const BatteryWarning = createLucideIcon("BatteryWarning", [
    [
        "path",
        {
            d: "M14 7h2a2 2 0 0 1 2 2v6c0 1-1 2-2 2h-2",
            key: "1if82c"
        }
    ],
    [
        "path",
        {
            d: "M6 7H4a2 2 0 0 0-2 2v6c0 1 1 2 2 2h2",
            key: "2pdlyl"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "22",
            y1: "11",
            y2: "13",
            key: "4dh1rd"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "7",
            y2: "13",
            key: "1uzyus"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "17",
            y2: "17.01",
            key: "1y8k4g"
        }
    ]
]);
var batteryWarning = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BatteryWarning
});
const Battery = createLucideIcon("Battery", [
    [
        "rect",
        {
            width: "16",
            height: "10",
            x: "2",
            y: "7",
            rx: "2",
            ry: "2",
            key: "1w10f2"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "22",
            y1: "11",
            y2: "13",
            key: "4dh1rd"
        }
    ]
]);
var battery = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Battery
});
const Beaker = createLucideIcon("Beaker", [
    [
        "path",
        {
            d: "M4.5 3h15",
            key: "c7n0jr"
        }
    ],
    [
        "path",
        {
            d: "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3",
            key: "m1uhx7"
        }
    ],
    [
        "path",
        {
            d: "M6 14h12",
            key: "4cwo0f"
        }
    ]
]);
var beaker = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Beaker
});
const BeanOff = createLucideIcon("BeanOff", [
    [
        "path",
        {
            d: "M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1",
            key: "bq3udt"
        }
    ],
    [
        "path",
        {
            d: "M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66",
            key: "17ccse"
        }
    ],
    [
        "path",
        {
            d: "M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04",
            key: "18zqgq"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var beanOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BeanOff
});
const Bean = createLucideIcon("Bean", [
    [
        "path",
        {
            d: "M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z",
            key: "1tvzk7"
        }
    ],
    [
        "path",
        {
            d: "M5.341 10.62a4 4 0 1 0 5.279-5.28",
            key: "2cyri2"
        }
    ]
]);
var bean = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bean
});
const BedDouble = createLucideIcon("BedDouble", [
    [
        "path",
        {
            d: "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8",
            key: "1k78r4"
        }
    ],
    [
        "path",
        {
            d: "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4",
            key: "fb3tl2"
        }
    ],
    [
        "path",
        {
            d: "M12 4v6",
            key: "1dcgq2"
        }
    ],
    [
        "path",
        {
            d: "M2 18h20",
            key: "ajqnye"
        }
    ]
]);
var bedDouble = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BedDouble
});
const BedSingle = createLucideIcon("BedSingle", [
    [
        "path",
        {
            d: "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8",
            key: "1wm6mi"
        }
    ],
    [
        "path",
        {
            d: "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4",
            key: "4k93s5"
        }
    ],
    [
        "path",
        {
            d: "M3 18h18",
            key: "1h113x"
        }
    ]
]);
var bedSingle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BedSingle
});
const Bed = createLucideIcon("Bed", [
    [
        "path",
        {
            d: "M2 4v16",
            key: "vw9hq8"
        }
    ],
    [
        "path",
        {
            d: "M2 8h18a2 2 0 0 1 2 2v10",
            key: "1dgv2r"
        }
    ],
    [
        "path",
        {
            d: "M2 17h20",
            key: "18nfp3"
        }
    ],
    [
        "path",
        {
            d: "M6 8v9",
            key: "1yriud"
        }
    ]
]);
var bed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bed
});
const Beef = createLucideIcon("Beef", [
    [
        "circle",
        {
            cx: "12.5",
            cy: "8.5",
            r: "2.5",
            key: "9738u8"
        }
    ],
    [
        "path",
        {
            d: "M12.5 2a6.5 6.5 0 0 0-6.22 4.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3A6.5 6.5 0 0 0 12.5 2Z",
            key: "o0f6za"
        }
    ],
    [
        "path",
        {
            d: "m18.5 6 2.19 4.5a6.48 6.48 0 0 1 .31 2 6.49 6.49 0 0 1-2.6 5.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5",
            key: "k7p6i0"
        }
    ]
]);
var beef = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Beef
});
const Beer = createLucideIcon("Beer", [
    [
        "path",
        {
            d: "M17 11h1a3 3 0 0 1 0 6h-1",
            key: "1yp76v"
        }
    ],
    [
        "path",
        {
            d: "M9 12v6",
            key: "1u1cab"
        }
    ],
    [
        "path",
        {
            d: "M13 12v6",
            key: "1sugkk"
        }
    ],
    [
        "path",
        {
            d: "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z",
            key: "1510fo"
        }
    ],
    [
        "path",
        {
            d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8",
            key: "19jb7n"
        }
    ]
]);
var beer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Beer
});
const BellDot = createLucideIcon("BellDot", [
    [
        "path",
        {
            d: "M19.4 14.9C20.2 16.4 21 17 21 17H3s3-2 3-9c0-3.3 2.7-6 6-6 .7 0 1.3.1 1.9.3",
            key: "xcehk"
        }
    ],
    [
        "path",
        {
            d: "M10.3 21a1.94 1.94 0 0 0 3.4 0",
            key: "qgo35s"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "8",
            r: "3",
            key: "1g0gzu"
        }
    ]
]);
var bellDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BellDot
});
const BellMinus = createLucideIcon("BellMinus", [
    [
        "path",
        {
            d: "M18.4 12c.8 3.8 2.6 5 2.6 5H3s3-2 3-9c0-3.3 2.7-6 6-6 1.8 0 3.4.8 4.5 2",
            key: "eck70s"
        }
    ],
    [
        "path",
        {
            d: "M10.3 21a1.94 1.94 0 0 0 3.4 0",
            key: "qgo35s"
        }
    ],
    [
        "path",
        {
            d: "M15 8h6",
            key: "8ybuxh"
        }
    ]
]);
var bellMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BellMinus
});
const BellOff = createLucideIcon("BellOff", [
    [
        "path",
        {
            d: "M8.7 3A6 6 0 0 1 18 8a21.3 21.3 0 0 0 .6 5",
            key: "o7mx20"
        }
    ],
    [
        "path",
        {
            d: "M17 17H3s3-2 3-9a4.67 4.67 0 0 1 .3-1.7",
            key: "16f1lm"
        }
    ],
    [
        "path",
        {
            d: "M10.3 21a1.94 1.94 0 0 0 3.4 0",
            key: "qgo35s"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ]
]);
var bellOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BellOff
});
const BellPlus = createLucideIcon("BellPlus", [
    [
        "path",
        {
            d: "M19.3 14.8C20.1 16.4 21 17 21 17H3s3-2 3-9c0-3.3 2.7-6 6-6 1 0 1.9.2 2.8.7",
            key: "guizqy"
        }
    ],
    [
        "path",
        {
            d: "M10.3 21a1.94 1.94 0 0 0 3.4 0",
            key: "qgo35s"
        }
    ],
    [
        "path",
        {
            d: "M15 8h6",
            key: "8ybuxh"
        }
    ],
    [
        "path",
        {
            d: "M18 5v6",
            key: "g5ayrv"
        }
    ]
]);
var bellPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BellPlus
});
const BellRing = createLucideIcon("BellRing", [
    [
        "path",
        {
            d: "M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9",
            key: "1qo2s2"
        }
    ],
    [
        "path",
        {
            d: "M10.3 21a1.94 1.94 0 0 0 3.4 0",
            key: "qgo35s"
        }
    ],
    [
        "path",
        {
            d: "M4 2C2.8 3.7 2 5.7 2 8",
            key: "tap9e0"
        }
    ],
    [
        "path",
        {
            d: "M22 8c0-2.3-.8-4.3-2-6",
            key: "5bb3ad"
        }
    ]
]);
var bellRing = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BellRing
});
const Bell = createLucideIcon("Bell", [
    [
        "path",
        {
            d: "M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9",
            key: "1qo2s2"
        }
    ],
    [
        "path",
        {
            d: "M10.3 21a1.94 1.94 0 0 0 3.4 0",
            key: "qgo35s"
        }
    ]
]);
var bell = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bell
});
const Bike = createLucideIcon("Bike", [
    [
        "circle",
        {
            cx: "18.5",
            cy: "17.5",
            r: "3.5",
            key: "15x4ox"
        }
    ],
    [
        "circle",
        {
            cx: "5.5",
            cy: "17.5",
            r: "3.5",
            key: "1noe27"
        }
    ],
    [
        "circle",
        {
            cx: "15",
            cy: "5",
            r: "1",
            key: "19l28e"
        }
    ],
    [
        "path",
        {
            d: "M12 17.5V14l-3-3 4-3 2 3h2",
            key: "1npguv"
        }
    ]
]);
var bike = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bike
});
const Binary = createLucideIcon("Binary", [
    [
        "rect",
        {
            x: "14",
            y: "14",
            width: "4",
            height: "6",
            rx: "2",
            key: "p02svl"
        }
    ],
    [
        "rect",
        {
            x: "6",
            y: "4",
            width: "4",
            height: "6",
            rx: "2",
            key: "xm4xkj"
        }
    ],
    [
        "path",
        {
            d: "M6 20h4",
            key: "1i6q5t"
        }
    ],
    [
        "path",
        {
            d: "M14 10h4",
            key: "ru81e7"
        }
    ],
    [
        "path",
        {
            d: "M6 14h2v6",
            key: "16z9wg"
        }
    ],
    [
        "path",
        {
            d: "M14 4h2v6",
            key: "1idq9u"
        }
    ]
]);
var binary = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Binary
});
const Biohazard = createLucideIcon("Biohazard", [
    [
        "circle",
        {
            cx: "12",
            cy: "11.9",
            r: "2",
            key: "e8h31w"
        }
    ],
    [
        "path",
        {
            d: "M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6",
            key: "17bolr"
        }
    ],
    [
        "path",
        {
            d: "m8.9 10.1 1.4.8",
            key: "15ezny"
        }
    ],
    [
        "path",
        {
            d: "M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5",
            key: "wtwa5u"
        }
    ],
    [
        "path",
        {
            d: "m15.1 10.1-1.4.8",
            key: "1r0b28"
        }
    ],
    [
        "path",
        {
            d: "M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2",
            key: "m7qszh"
        }
    ],
    [
        "path",
        {
            d: "M12 13.9v1.6",
            key: "zfyyim"
        }
    ],
    [
        "path",
        {
            d: "M13.5 5.4c-1-.2-2-.2-3 0",
            key: "1bi9q0"
        }
    ],
    [
        "path",
        {
            d: "M17 16.4c.7-.7 1.2-1.6 1.5-2.5",
            key: "1rhjqw"
        }
    ],
    [
        "path",
        {
            d: "M5.5 13.9c.3.9.8 1.8 1.5 2.5",
            key: "8gsud3"
        }
    ]
]);
var biohazard = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Biohazard
});
const Bird = createLucideIcon("Bird", [
    [
        "path",
        {
            d: "M16 7h.01",
            key: "1kdx03"
        }
    ],
    [
        "path",
        {
            d: "M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20",
            key: "oj1oa8"
        }
    ],
    [
        "path",
        {
            d: "m20 7 2 .5-2 .5",
            key: "12nv4d"
        }
    ],
    [
        "path",
        {
            d: "M10 18v3",
            key: "1yea0a"
        }
    ],
    [
        "path",
        {
            d: "M14 17.75V21",
            key: "1pymcb"
        }
    ],
    [
        "path",
        {
            d: "M7 18a6 6 0 0 0 3.84-10.61",
            key: "1npnn0"
        }
    ]
]);
var bird = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bird
});
const Bitcoin = createLucideIcon("Bitcoin", [
    [
        "path",
        {
            d: "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727",
            key: "yr8idg"
        }
    ]
]);
var bitcoin = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bitcoin
});
const Blinds = createLucideIcon("Blinds", [
    [
        "path",
        {
            d: "M3 3h18",
            key: "o7r712"
        }
    ],
    [
        "path",
        {
            d: "M20 7H8",
            key: "gd2fo2"
        }
    ],
    [
        "path",
        {
            d: "M20 11H8",
            key: "1ynp89"
        }
    ],
    [
        "path",
        {
            d: "M10 19h10",
            key: "19hjk5"
        }
    ],
    [
        "path",
        {
            d: "M8 15h12",
            key: "1yqzne"
        }
    ],
    [
        "path",
        {
            d: "M4 3v14",
            key: "fggqzn"
        }
    ],
    [
        "circle",
        {
            cx: "4",
            cy: "19",
            r: "2",
            key: "p3m9r0"
        }
    ]
]);
var blinds = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Blinds
});
const BluetoothConnected = createLucideIcon("BluetoothConnected", [
    [
        "path",
        {
            d: "m7 7 10 10-5 5V2l5 5L7 17",
            key: "1q5490"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "21",
            y1: "12",
            y2: "12",
            key: "1rsjjs"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "6",
            y1: "12",
            y2: "12",
            key: "11yl8c"
        }
    ]
]);
var bluetoothConnected = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BluetoothConnected
});
const BluetoothOff = createLucideIcon("BluetoothOff", [
    [
        "path",
        {
            d: "m17 17-5 5V12l-5 5",
            key: "v5aci6"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M14.5 9.5 17 7l-5-5v4.5",
            key: "1kddfz"
        }
    ]
]);
var bluetoothOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BluetoothOff
});
const BluetoothSearching = createLucideIcon("BluetoothSearching", [
    [
        "path",
        {
            d: "m7 7 10 10-5 5V2l5 5L7 17",
            key: "1q5490"
        }
    ],
    [
        "path",
        {
            d: "M20.83 14.83a4 4 0 0 0 0-5.66",
            key: "k8tn1j"
        }
    ],
    [
        "path",
        {
            d: "M18 12h.01",
            key: "yjnet6"
        }
    ]
]);
var bluetoothSearching = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BluetoothSearching
});
const Bluetooth = createLucideIcon("Bluetooth", [
    [
        "path",
        {
            d: "m7 7 10 10-5 5V2l5 5L7 17",
            key: "1q5490"
        }
    ]
]);
var bluetooth = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bluetooth
});
const Bold = createLucideIcon("Bold", [
    [
        "path",
        {
            d: "M14 12a4 4 0 0 0 0-8H6v8",
            key: "v2sylx"
        }
    ],
    [
        "path",
        {
            d: "M15 20a4 4 0 0 0 0-8H6v8Z",
            key: "1ef5ya"
        }
    ]
]);
var bold = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bold
});
const Bomb = createLucideIcon("Bomb", [
    [
        "circle",
        {
            cx: "11",
            cy: "13",
            r: "9",
            key: "hd149"
        }
    ],
    [
        "path",
        {
            d: "m19.5 9.5 1.8-1.8a2.4 2.4 0 0 0 0-3.4l-1.6-1.6a2.41 2.41 0 0 0-3.4 0l-1.8 1.8",
            key: "9owvxi"
        }
    ],
    [
        "path",
        {
            d: "m22 2-1.5 1.5",
            key: "ay92ug"
        }
    ]
]);
var bomb = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bomb
});
const Bone = createLucideIcon("Bone", [
    [
        "path",
        {
            d: "M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z",
            key: "w610uw"
        }
    ]
]);
var bone = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bone
});
const BookCopy = createLucideIcon("BookCopy", [
    [
        "path",
        {
            d: "M2 16V4a2 2 0 0 1 2-2h11",
            key: "spzkk5"
        }
    ],
    [
        "path",
        {
            d: "M5 14H4a2 2 0 1 0 0 4h1",
            key: "16gqf9"
        }
    ],
    [
        "path",
        {
            d: "M22 18H11a2 2 0 1 0 0 4h11V6H11a2 2 0 0 0-2 2v12",
            key: "1owzki"
        }
    ]
]);
var bookCopy = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookCopy
});
const BookDown = createLucideIcon("BookDown", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "t4utmx"
        }
    ],
    [
        "path",
        {
            d: "M12 13V7",
            key: "h0r20n"
        }
    ],
    [
        "path",
        {
            d: "m9 10 3 3 3-3",
            key: "zt5b4y"
        }
    ]
]);
var bookDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookDown
});
const BookKey = createLucideIcon("BookKey", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H14",
            key: "1gfsgw"
        }
    ],
    [
        "path",
        {
            d: "M20 8v14H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "zb0ngp"
        }
    ],
    [
        "circle",
        {
            cx: "14",
            cy: "8",
            r: "2",
            key: "u49eql"
        }
    ],
    [
        "path",
        {
            d: "m20 2-4.5 4.5",
            key: "1sppr8"
        }
    ],
    [
        "path",
        {
            d: "m19 3 1 1",
            key: "ze14oc"
        }
    ]
]);
var bookKey = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookKey
});
const BookLock = createLucideIcon("BookLock", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10",
            key: "18wgow"
        }
    ],
    [
        "path",
        {
            d: "M20 15v7H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "dpch1j"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "5",
            x: "12",
            y: "6",
            rx: "1",
            key: "9nqwug"
        }
    ],
    [
        "path",
        {
            d: "M18 6V4a2 2 0 1 0-4 0v2",
            key: "1aquzs"
        }
    ]
]);
var bookLock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookLock
});
const BookMarked = createLucideIcon("BookMarked", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "t4utmx"
        }
    ],
    [
        "polyline",
        {
            points: "10 2 10 10 13 7 16 10 16 2",
            key: "13o6vz"
        }
    ]
]);
var bookMarked = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookMarked
});
const BookMinus = createLucideIcon("BookMinus", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "t4utmx"
        }
    ],
    [
        "path",
        {
            d: "M9 10h6",
            key: "9gxzsh"
        }
    ]
]);
var bookMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookMinus
});
const BookOpenCheck = createLucideIcon("BookOpenCheck", [
    [
        "path",
        {
            d: "M8 3H2v15h7c1.7 0 3 1.3 3 3V7c0-2.2-1.8-4-4-4Z",
            key: "1i8u0n"
        }
    ],
    [
        "path",
        {
            d: "m16 12 2 2 4-4",
            key: "mdajum"
        }
    ],
    [
        "path",
        {
            d: "M22 6V3h-6c-2.2 0-4 1.8-4 4v14c0-1.7 1.3-3 3-3h7v-2.3",
            key: "jb5l51"
        }
    ]
]);
var bookOpenCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookOpenCheck
});
const BookOpen = createLucideIcon("BookOpen", [
    [
        "path",
        {
            d: "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z",
            key: "vv98re"
        }
    ],
    [
        "path",
        {
            d: "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z",
            key: "1cyq3y"
        }
    ]
]);
var bookOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookOpen
});
const BookPlus = createLucideIcon("BookPlus", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "t4utmx"
        }
    ],
    [
        "path",
        {
            d: "M9 10h6",
            key: "9gxzsh"
        }
    ],
    [
        "path",
        {
            d: "M12 7v6",
            key: "lw1j43"
        }
    ]
]);
var bookPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookPlus
});
const BookTemplate = createLucideIcon("BookTemplate", [
    [
        "path",
        {
            d: "M20 22h-2",
            key: "1rpnb6"
        }
    ],
    [
        "path",
        {
            d: "M20 15v2h-2",
            key: "fph276"
        }
    ],
    [
        "path",
        {
            d: "M4 19.5V15",
            key: "6gr39e"
        }
    ],
    [
        "path",
        {
            d: "M20 8v3",
            key: "deu0bs"
        }
    ],
    [
        "path",
        {
            d: "M18 2h2v2",
            key: "180o53"
        }
    ],
    [
        "path",
        {
            d: "M4 11V9",
            key: "v3xsx8"
        }
    ],
    [
        "path",
        {
            d: "M12 2h2",
            key: "cvn524"
        }
    ],
    [
        "path",
        {
            d: "M12 22h2",
            key: "kn7ki6"
        }
    ],
    [
        "path",
        {
            d: "M12 17h2",
            key: "13u4lk"
        }
    ],
    [
        "path",
        {
            d: "M8 22H6.5a2.5 2.5 0 0 1 0-5H8",
            key: "fiseg2"
        }
    ],
    [
        "path",
        {
            d: "M4 5v-.5A2.5 2.5 0 0 1 6.5 2H8",
            key: "wywhs9"
        }
    ]
]);
var bookTemplate = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookTemplate
});
const BookUp2 = createLucideIcon("BookUp2", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2",
            key: "1lorq7"
        }
    ],
    [
        "path",
        {
            d: "M18 2h2v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "1nfm9i"
        }
    ],
    [
        "path",
        {
            d: "M12 13V7",
            key: "h0r20n"
        }
    ],
    [
        "path",
        {
            d: "m9 10 3-3 3 3",
            key: "11gsxs"
        }
    ],
    [
        "path",
        {
            d: "m9 5 3-3 3 3",
            key: "l8vdw6"
        }
    ]
]);
var bookUp2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookUp2
});
const BookUp = createLucideIcon("BookUp", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "t4utmx"
        }
    ],
    [
        "path",
        {
            d: "M12 13V7",
            key: "h0r20n"
        }
    ],
    [
        "path",
        {
            d: "m9 10 3-3 3 3",
            key: "11gsxs"
        }
    ]
]);
var bookUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookUp
});
const BookX = createLucideIcon("BookX", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "t4utmx"
        }
    ],
    [
        "path",
        {
            d: "m14.5 7-5 5",
            key: "dy991v"
        }
    ],
    [
        "path",
        {
            d: "m9.5 7 5 5",
            key: "s45iea"
        }
    ]
]);
var bookX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookX
});
const Book = createLucideIcon("Book", [
    [
        "path",
        {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20",
            key: "t4utmx"
        }
    ]
]);
var book = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Book
});
const BookmarkMinus = createLucideIcon("BookmarkMinus", [
    [
        "path",
        {
            d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z",
            key: "1fy3hk"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "9",
            y1: "10",
            y2: "10",
            key: "1gty7f"
        }
    ]
]);
var bookmarkMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookmarkMinus
});
const BookmarkPlus = createLucideIcon("BookmarkPlus", [
    [
        "path",
        {
            d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z",
            key: "1fy3hk"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "7",
            y2: "13",
            key: "1cppfj"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "9",
            y1: "10",
            y2: "10",
            key: "1gty7f"
        }
    ]
]);
var bookmarkPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BookmarkPlus
});
const Bookmark = createLucideIcon("Bookmark", [
    [
        "path",
        {
            d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z",
            key: "1fy3hk"
        }
    ]
]);
var bookmark = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bookmark
});
const Bot = createLucideIcon("Bot", [
    [
        "rect",
        {
            width: "18",
            height: "10",
            x: "3",
            y: "11",
            rx: "2",
            key: "1ofdy3"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "5",
            r: "2",
            key: "f1ur92"
        }
    ],
    [
        "path",
        {
            d: "M12 7v4",
            key: "xawao1"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "16",
            y2: "16",
            key: "h6x27f"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "16",
            y2: "16",
            key: "5lty7f"
        }
    ]
]);
var bot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bot
});
const BoxSelect = createLucideIcon("BoxSelect", [
    [
        "path",
        {
            d: "M5 3a2 2 0 0 0-2 2",
            key: "y57alp"
        }
    ],
    [
        "path",
        {
            d: "M19 3a2 2 0 0 1 2 2",
            key: "18rm91"
        }
    ],
    [
        "path",
        {
            d: "M21 19a2 2 0 0 1-2 2",
            key: "1j7049"
        }
    ],
    [
        "path",
        {
            d: "M5 21a2 2 0 0 1-2-2",
            key: "sbafld"
        }
    ],
    [
        "path",
        {
            d: "M9 3h1",
            key: "1yesri"
        }
    ],
    [
        "path",
        {
            d: "M9 21h1",
            key: "15o7lz"
        }
    ],
    [
        "path",
        {
            d: "M14 3h1",
            key: "1ec4yj"
        }
    ],
    [
        "path",
        {
            d: "M14 21h1",
            key: "v9vybs"
        }
    ],
    [
        "path",
        {
            d: "M3 9v1",
            key: "1r0deq"
        }
    ],
    [
        "path",
        {
            d: "M21 9v1",
            key: "mxsmne"
        }
    ],
    [
        "path",
        {
            d: "M3 14v1",
            key: "vnatye"
        }
    ],
    [
        "path",
        {
            d: "M21 14v1",
            key: "169vum"
        }
    ]
]);
var boxSelect = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BoxSelect
});
const Box = createLucideIcon("Box", [
    [
        "path",
        {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
        }
    ],
    [
        "polyline",
        {
            points: "3.29 7 12 12 20.71 7",
            key: "ousv84"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "12",
            key: "a4e8g8"
        }
    ]
]);
var box = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Box
});
const Boxes = createLucideIcon("Boxes", [
    [
        "path",
        {
            d: "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z",
            key: "lc1i9w"
        }
    ],
    [
        "path",
        {
            d: "m7 16.5-4.74-2.85",
            key: "1o9zyk"
        }
    ],
    [
        "path",
        {
            d: "m7 16.5 5-3",
            key: "va8pkn"
        }
    ],
    [
        "path",
        {
            d: "M7 16.5v5.17",
            key: "jnp8gn"
        }
    ],
    [
        "path",
        {
            d: "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z",
            key: "8zsnat"
        }
    ],
    [
        "path",
        {
            d: "m17 16.5-5-3",
            key: "8arw3v"
        }
    ],
    [
        "path",
        {
            d: "m17 16.5 4.74-2.85",
            key: "8rfmw"
        }
    ],
    [
        "path",
        {
            d: "M17 16.5v5.17",
            key: "k6z78m"
        }
    ],
    [
        "path",
        {
            d: "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z",
            key: "1xygjf"
        }
    ],
    [
        "path",
        {
            d: "M12 8 7.26 5.15",
            key: "1vbdud"
        }
    ],
    [
        "path",
        {
            d: "m12 8 4.74-2.85",
            key: "3rx089"
        }
    ],
    [
        "path",
        {
            d: "M12 13.5V8",
            key: "1io7kd"
        }
    ]
]);
var boxes = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Boxes
});
const Braces = createLucideIcon("Braces", [
    [
        "path",
        {
            d: "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1",
            key: "ezmyqa"
        }
    ],
    [
        "path",
        {
            d: "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1",
            key: "e1hn23"
        }
    ]
]);
var braces = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Braces
});
const Brackets = createLucideIcon("Brackets", [
    [
        "path",
        {
            d: "M16 3h3v18h-3",
            key: "1yor1f"
        }
    ],
    [
        "path",
        {
            d: "M8 21H5V3h3",
            key: "1qrfwo"
        }
    ]
]);
var brackets = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Brackets
});
const BrainCircuit = createLucideIcon("BrainCircuit", [
    [
        "path",
        {
            d: "M12 4.5a2.5 2.5 0 0 0-4.96-.46 2.5 2.5 0 0 0-1.98 3 2.5 2.5 0 0 0-1.32 4.24 3 3 0 0 0 .34 5.58 2.5 2.5 0 0 0 2.96 3.08 2.5 2.5 0 0 0 4.91.05L12 20V4.5Z",
            key: "ixwj2a"
        }
    ],
    [
        "path",
        {
            d: "M16 8V5c0-1.1.9-2 2-2",
            key: "13dx7u"
        }
    ],
    [
        "path",
        {
            d: "M12 13h4",
            key: "1ku699"
        }
    ],
    [
        "path",
        {
            d: "M12 18h6a2 2 0 0 1 2 2v1",
            key: "105ag5"
        }
    ],
    [
        "path",
        {
            d: "M12 8h8",
            key: "1lhi5i"
        }
    ],
    [
        "path",
        {
            d: "M20.5 8a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
            key: "1s25gz"
        }
    ],
    [
        "path",
        {
            d: "M16.5 13a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
            key: "127460"
        }
    ],
    [
        "path",
        {
            d: "M20.5 21a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
            key: "fys062"
        }
    ],
    [
        "path",
        {
            d: "M18.5 3a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z",
            key: "1vib61"
        }
    ]
]);
var brainCircuit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BrainCircuit
});
const BrainCog = createLucideIcon("BrainCog", [
    [
        "path",
        {
            d: "M12 4.5a2.5 2.5 0 0 0-4.96-.46 2.5 2.5 0 0 0-1.98 3 2.5 2.5 0 0 0-1.32 4.24 3 3 0 0 0 .34 5.58 2.5 2.5 0 0 0 2.96 3.08A2.5 2.5 0 0 0 9.5 22c1.21 0 2.5-.74 2.5-2.5m0-15a2.5 2.5 0 0 1 4.96-.46 2.5 2.5 0 0 1 1.98 3 2.5 2.5 0 0 1 1.32 4.24 3 3 0 0 1-.34 5.58 2.5 2.5 0 0 1-2.96 3.08A2.5 2.5 0 0 1 14.5 22c-1.21 0-2.5-.74-2.5-2.5m0-15V5m0 14.5V19",
            key: "1s39q3"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ],
    [
        "path",
        {
            d: "M12 9v1",
            key: "pby5my"
        }
    ],
    [
        "path",
        {
            d: "M12 14v1",
            key: "eiwm5y"
        }
    ],
    [
        "path",
        {
            d: "m14.6 10.5-.87.5",
            key: "pm6qkn"
        }
    ],
    [
        "path",
        {
            d: "m10.27 13-.87.5",
            key: "1h0pla"
        }
    ],
    [
        "path",
        {
            d: "m14.6 13.5-.87-.5",
            key: "1pggcy"
        }
    ],
    [
        "path",
        {
            d: "m10.27 11-.87-.5",
            key: "1d8xkg"
        }
    ]
]);
var brainCog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: BrainCog
});
const Brain = createLucideIcon("Brain", [
    [
        "path",
        {
            d: "M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3A2.5 2.5 0 0 1 9.5 2Z",
            key: "1mhkh5"
        }
    ],
    [
        "path",
        {
            d: "M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 14.5 2Z",
            key: "1d6s00"
        }
    ]
]);
var brain = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Brain
});
const Briefcase = createLucideIcon("Briefcase", [
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "7",
            rx: "2",
            ry: "2",
            key: "eto64e"
        }
    ],
    [
        "path",
        {
            d: "M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16",
            key: "zwj3tp"
        }
    ]
]);
var briefcase = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Briefcase
});
const Brush = createLucideIcon("Brush", [
    [
        "path",
        {
            d: "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08",
            key: "1styjt"
        }
    ],
    [
        "path",
        {
            d: "M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z",
            key: "z0l1mu"
        }
    ]
]);
var brush = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Brush
});
const Bug = createLucideIcon("Bug", [
    [
        "rect",
        {
            width: "8",
            height: "14",
            x: "8",
            y: "6",
            rx: "4",
            key: "hq8nra"
        }
    ],
    [
        "path",
        {
            d: "m19 7-3 2",
            key: "fmg8ec"
        }
    ],
    [
        "path",
        {
            d: "m5 7 3 2",
            key: "dkxqes"
        }
    ],
    [
        "path",
        {
            d: "m19 19-3-2",
            key: "1hbhi4"
        }
    ],
    [
        "path",
        {
            d: "m5 19 3-2",
            key: "dvt2ee"
        }
    ],
    [
        "path",
        {
            d: "M20 13h-4",
            key: "1agfp2"
        }
    ],
    [
        "path",
        {
            d: "M4 13h4",
            key: "1bwh8b"
        }
    ],
    [
        "path",
        {
            d: "m10 4 1 2",
            key: "1pot59"
        }
    ],
    [
        "path",
        {
            d: "m14 4-1 2",
            key: "m8sn0o"
        }
    ]
]);
var bug = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bug
});
const Building2 = createLucideIcon("Building2", [
    [
        "path",
        {
            d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z",
            key: "1b4qmf"
        }
    ],
    [
        "path",
        {
            d: "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2",
            key: "i71pzd"
        }
    ],
    [
        "path",
        {
            d: "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2",
            key: "10jefs"
        }
    ],
    [
        "path",
        {
            d: "M10 6h4",
            key: "1itunk"
        }
    ],
    [
        "path",
        {
            d: "M10 10h4",
            key: "tcdvrf"
        }
    ],
    [
        "path",
        {
            d: "M10 14h4",
            key: "kelpxr"
        }
    ],
    [
        "path",
        {
            d: "M10 18h4",
            key: "1ulq68"
        }
    ]
]);
var building2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Building2
});
const Building = createLucideIcon("Building", [
    [
        "rect",
        {
            width: "16",
            height: "20",
            x: "4",
            y: "2",
            rx: "2",
            ry: "2",
            key: "76otgf"
        }
    ],
    [
        "path",
        {
            d: "M9 22v-4h6v4",
            key: "r93iot"
        }
    ],
    [
        "path",
        {
            d: "M8 6h.01",
            key: "1dz90k"
        }
    ],
    [
        "path",
        {
            d: "M16 6h.01",
            key: "1x0f13"
        }
    ],
    [
        "path",
        {
            d: "M12 6h.01",
            key: "1vi96p"
        }
    ],
    [
        "path",
        {
            d: "M12 10h.01",
            key: "1nrarc"
        }
    ],
    [
        "path",
        {
            d: "M12 14h.01",
            key: "1etili"
        }
    ],
    [
        "path",
        {
            d: "M16 10h.01",
            key: "1m94wz"
        }
    ],
    [
        "path",
        {
            d: "M16 14h.01",
            key: "1gbofw"
        }
    ],
    [
        "path",
        {
            d: "M8 10h.01",
            key: "19clt8"
        }
    ],
    [
        "path",
        {
            d: "M8 14h.01",
            key: "6423bh"
        }
    ]
]);
var building = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Building
});
const Bus = createLucideIcon("Bus", [
    [
        "path",
        {
            d: "M19 17h2l.64-2.54c.24-.959.24-1.962 0-2.92l-1.07-4.27A3 3 0 0 0 17.66 5H4a2 2 0 0 0-2 2v10h2",
            key: "wfsdqh"
        }
    ],
    [
        "path",
        {
            d: "M14 17H9",
            key: "o2noo5"
        }
    ],
    [
        "circle",
        {
            cx: "6.5",
            cy: "17.5",
            r: "2.5",
            key: "gc8oob"
        }
    ],
    [
        "circle",
        {
            cx: "16.5",
            cy: "17.5",
            r: "2.5",
            key: "4btu0q"
        }
    ]
]);
var bus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Bus
});
const CakeSlice = createLucideIcon("CakeSlice", [
    [
        "circle",
        {
            cx: "9",
            cy: "7",
            r: "2",
            key: "1305pl"
        }
    ],
    [
        "path",
        {
            d: "M7.2 7.9 3 11v9c0 .6.4 1 1 1h16c.6 0 1-.4 1-1v-9c0-2-3-6-7-8l-3.6 2.6",
            key: "xle13f"
        }
    ],
    [
        "path",
        {
            d: "M16 13H3",
            key: "1wpj08"
        }
    ],
    [
        "path",
        {
            d: "M16 17H3",
            key: "3lvfcd"
        }
    ]
]);
var cakeSlice = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CakeSlice
});
const Cake = createLucideIcon("Cake", [
    [
        "path",
        {
            d: "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8",
            key: "1w3rig"
        }
    ],
    [
        "path",
        {
            d: "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1",
            key: "n2jgmb"
        }
    ],
    [
        "path",
        {
            d: "M2 21h20",
            key: "1nyx9w"
        }
    ],
    [
        "path",
        {
            d: "M7 8v2",
            key: "kqglng"
        }
    ],
    [
        "path",
        {
            d: "M12 8v2",
            key: "1woqiv"
        }
    ],
    [
        "path",
        {
            d: "M17 8v2",
            key: "teptal"
        }
    ],
    [
        "path",
        {
            d: "M7 4h.01",
            key: "1bh4kh"
        }
    ],
    [
        "path",
        {
            d: "M12 4h.01",
            key: "1ujb9j"
        }
    ],
    [
        "path",
        {
            d: "M17 4h.01",
            key: "1upcoc"
        }
    ]
]);
var cake = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cake
});
const Calculator = createLucideIcon("Calculator", [
    [
        "rect",
        {
            width: "16",
            height: "20",
            x: "4",
            y: "2",
            rx: "2",
            key: "1nb95v"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "6",
            y2: "6",
            key: "x4nwl0"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "14",
            y2: "18",
            key: "wjye3r"
        }
    ],
    [
        "path",
        {
            d: "M16 10h.01",
            key: "1m94wz"
        }
    ],
    [
        "path",
        {
            d: "M12 10h.01",
            key: "1nrarc"
        }
    ],
    [
        "path",
        {
            d: "M8 10h.01",
            key: "19clt8"
        }
    ],
    [
        "path",
        {
            d: "M12 14h.01",
            key: "1etili"
        }
    ],
    [
        "path",
        {
            d: "M8 14h.01",
            key: "6423bh"
        }
    ],
    [
        "path",
        {
            d: "M12 18h.01",
            key: "mhygvu"
        }
    ],
    [
        "path",
        {
            d: "M8 18h.01",
            key: "lrp35t"
        }
    ]
]);
var calculator = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Calculator
});
const CalendarCheck2 = createLucideIcon("CalendarCheck2", [
    [
        "path",
        {
            d: "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
            key: "bce9hv"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "path",
        {
            d: "m16 20 2 2 4-4",
            key: "13tcca"
        }
    ]
]);
var calendarCheck2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarCheck2
});
const CalendarCheck = createLucideIcon("CalendarCheck", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            ry: "2",
            key: "eu3xkr"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "path",
        {
            d: "m9 16 2 2 4-4",
            key: "19s6y9"
        }
    ]
]);
var calendarCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarCheck
});
const CalendarClock = createLucideIcon("CalendarClock", [
    [
        "path",
        {
            d: "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5",
            key: "1osxxc"
        }
    ],
    [
        "path",
        {
            d: "M16 2v4",
            key: "4m81vk"
        }
    ],
    [
        "path",
        {
            d: "M8 2v4",
            key: "1cmpym"
        }
    ],
    [
        "path",
        {
            d: "M3 10h5",
            key: "r794hk"
        }
    ],
    [
        "path",
        {
            d: "M17.5 17.5 16 16.25V14",
            key: "re2vv1"
        }
    ],
    [
        "path",
        {
            d: "M22 16a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z",
            key: "ame013"
        }
    ]
]);
var calendarClock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarClock
});
const CalendarDays = createLucideIcon("CalendarDays", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            ry: "2",
            key: "eu3xkr"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "path",
        {
            d: "M8 14h.01",
            key: "6423bh"
        }
    ],
    [
        "path",
        {
            d: "M12 14h.01",
            key: "1etili"
        }
    ],
    [
        "path",
        {
            d: "M16 14h.01",
            key: "1gbofw"
        }
    ],
    [
        "path",
        {
            d: "M8 18h.01",
            key: "lrp35t"
        }
    ],
    [
        "path",
        {
            d: "M12 18h.01",
            key: "mhygvu"
        }
    ],
    [
        "path",
        {
            d: "M16 18h.01",
            key: "kzsmim"
        }
    ]
]);
var calendarDays = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarDays
});
const CalendarHeart = createLucideIcon("CalendarHeart", [
    [
        "path",
        {
            d: "M21 10V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h7",
            key: "1sfrvf"
        }
    ],
    [
        "path",
        {
            d: "M16 2v4",
            key: "4m81vk"
        }
    ],
    [
        "path",
        {
            d: "M8 2v4",
            key: "1cmpym"
        }
    ],
    [
        "path",
        {
            d: "M3 10h18",
            key: "8toen8"
        }
    ],
    [
        "path",
        {
            d: "M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
            key: "1t7hil"
        }
    ]
]);
var calendarHeart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarHeart
});
const CalendarMinus = createLucideIcon("CalendarMinus", [
    [
        "path",
        {
            d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
            key: "3spt84"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "22",
            y1: "19",
            y2: "19",
            key: "1g9955"
        }
    ]
]);
var calendarMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarMinus
});
const CalendarOff = createLucideIcon("CalendarOff", [
    [
        "path",
        {
            d: "M4.18 4.18A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18",
            key: "1feomx"
        }
    ],
    [
        "path",
        {
            d: "M21 15.5V6a2 2 0 0 0-2-2H9.5",
            key: "yhw86o"
        }
    ],
    [
        "path",
        {
            d: "M16 2v4",
            key: "4m81vk"
        }
    ],
    [
        "path",
        {
            d: "M3 10h7",
            key: "1wap6i"
        }
    ],
    [
        "path",
        {
            d: "M21 10h-5.5",
            key: "quycpq"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var calendarOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarOff
});
const CalendarPlus = createLucideIcon("CalendarPlus", [
    [
        "path",
        {
            d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
            key: "3spt84"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "19",
            y1: "16",
            y2: "22",
            key: "1ttwzi"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "22",
            y1: "19",
            y2: "19",
            key: "1g9955"
        }
    ]
]);
var calendarPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarPlus
});
const CalendarRange = createLucideIcon("CalendarRange", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            ry: "2",
            key: "eu3xkr"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "path",
        {
            d: "M17 14h-6",
            key: "bkmgh3"
        }
    ],
    [
        "path",
        {
            d: "M13 18H7",
            key: "bb0bb7"
        }
    ],
    [
        "path",
        {
            d: "M7 14h.01",
            key: "1qa3f1"
        }
    ],
    [
        "path",
        {
            d: "M17 18h.01",
            key: "1bdyru"
        }
    ]
]);
var calendarRange = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarRange
});
const CalendarSearch = createLucideIcon("CalendarSearch", [
    [
        "path",
        {
            d: "M21 12V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h7.5",
            key: "18ncp8"
        }
    ],
    [
        "path",
        {
            d: "M16 2v4",
            key: "4m81vk"
        }
    ],
    [
        "path",
        {
            d: "M8 2v4",
            key: "1cmpym"
        }
    ],
    [
        "path",
        {
            d: "M3 10h18",
            key: "8toen8"
        }
    ],
    [
        "path",
        {
            d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6v0Z",
            key: "mgbru4"
        }
    ],
    [
        "path",
        {
            d: "m22 22-1.5-1.5",
            key: "1x83k4"
        }
    ]
]);
var calendarSearch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarSearch
});
const CalendarX2 = createLucideIcon("CalendarX2", [
    [
        "path",
        {
            d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
            key: "3spt84"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "22",
            y1: "17",
            y2: "22",
            key: "xa9o8b"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "22",
            y1: "22",
            y2: "17",
            key: "18nitg"
        }
    ]
]);
var calendarX2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarX2
});
const CalendarX = createLucideIcon("CalendarX", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            ry: "2",
            key: "eu3xkr"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "14",
            y1: "14",
            y2: "18",
            key: "1g3qc0"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "10",
            y1: "14",
            y2: "18",
            key: "1az83m"
        }
    ]
]);
var calendarX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CalendarX
});
const Calendar = createLucideIcon("Calendar", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            ry: "2",
            key: "eu3xkr"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "6",
            key: "m3sa8f"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "6",
            key: "18kwsl"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "10",
            y2: "10",
            key: "xt86sb"
        }
    ]
]);
var calendar = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Calendar
});
const CameraOff = createLucideIcon("CameraOff", [
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ],
    [
        "path",
        {
            d: "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16",
            key: "qmtpty"
        }
    ],
    [
        "path",
        {
            d: "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5",
            key: "1ufyfc"
        }
    ],
    [
        "path",
        {
            d: "M14.121 15.121A3 3 0 1 1 9.88 10.88",
            key: "11zox6"
        }
    ]
]);
var cameraOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CameraOff
});
const Camera = createLucideIcon("Camera", [
    [
        "path",
        {
            d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",
            key: "1tc9qg"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "3",
            key: "1vg3eu"
        }
    ]
]);
var camera = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Camera
});
const CandlestickChart = createLucideIcon("CandlestickChart", [
    [
        "path",
        {
            d: "M9 5v4",
            key: "14uxtq"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "6",
            x: "7",
            y: "9",
            rx: "1",
            key: "f4fvz0"
        }
    ],
    [
        "path",
        {
            d: "M9 15v2",
            key: "r5rk32"
        }
    ],
    [
        "path",
        {
            d: "M17 3v2",
            key: "1l2re6"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "8",
            x: "15",
            y: "5",
            rx: "1",
            key: "z38je5"
        }
    ],
    [
        "path",
        {
            d: "M17 13v3",
            key: "5l0wba"
        }
    ],
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ]
]);
var candlestickChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CandlestickChart
});
const CandyCane = createLucideIcon("CandyCane", [
    [
        "path",
        {
            d: "M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z",
            key: "isaq8g"
        }
    ],
    [
        "path",
        {
            d: "M17.75 7 15 2.1",
            key: "12x7e8"
        }
    ],
    [
        "path",
        {
            d: "M10.9 4.8 13 9",
            key: "100a87"
        }
    ],
    [
        "path",
        {
            d: "m7.9 9.7 2 4.4",
            key: "ntfhaj"
        }
    ],
    [
        "path",
        {
            d: "M4.9 14.7 7 18.9",
            key: "1x43jy"
        }
    ]
]);
var candyCane = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CandyCane
});
const CandyOff = createLucideIcon("CandyOff", [
    [
        "path",
        {
            d: "m8.5 8.5-1 1a4.95 4.95 0 0 0 7 7l1-1",
            key: "1ff4ui"
        }
    ],
    [
        "path",
        {
            d: "M11.843 6.187A4.947 4.947 0 0 1 16.5 7.5a4.947 4.947 0 0 1 1.313 4.657",
            key: "1sbrv4"
        }
    ],
    [
        "path",
        {
            d: "M14 16.5V14",
            key: "1maf8j"
        }
    ],
    [
        "path",
        {
            d: "M14 6.5v1.843",
            key: "1a6u6t"
        }
    ],
    [
        "path",
        {
            d: "M10 10v7.5",
            key: "80pj65"
        }
    ],
    [
        "path",
        {
            d: "m16 7 1-5 1.367.683A3 3 0 0 0 19.708 3H21v1.292a3 3 0 0 0 .317 1.341L22 7l-5 1",
            key: "11a9mt"
        }
    ],
    [
        "path",
        {
            d: "m8 17-1 5-1.367-.683A3 3 0 0 0 4.292 21H3v-1.292a3 3 0 0 0-.317-1.341L2 17l5-1",
            key: "3mjmon"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var candyOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CandyOff
});
const Candy = createLucideIcon("Candy", [
    [
        "path",
        {
            d: "m9.5 7.5-2 2a4.95 4.95 0 1 0 7 7l2-2a4.95 4.95 0 1 0-7-7Z",
            key: "ue6khb"
        }
    ],
    [
        "path",
        {
            d: "M14 6.5v10",
            key: "5xnk7c"
        }
    ],
    [
        "path",
        {
            d: "M10 7.5v10",
            key: "1uew51"
        }
    ],
    [
        "path",
        {
            d: "m16 7 1-5 1.37.68A3 3 0 0 0 19.7 3H21v1.3c0 .46.1.92.32 1.33L22 7l-5 1",
            key: "b9cp6k"
        }
    ],
    [
        "path",
        {
            d: "m8 17-1 5-1.37-.68A3 3 0 0 0 4.3 21H3v-1.3a3 3 0 0 0-.32-1.33L2 17l5-1",
            key: "5lney8"
        }
    ]
]);
var candy = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Candy
});
const Car = createLucideIcon("Car", [
    [
        "path",
        {
            d: "M14 16H9m10 0h3v-3.15a1 1 0 0 0-.84-.99L16 11l-2.7-3.6a1 1 0 0 0-.8-.4H5.24a2 2 0 0 0-1.8 1.1l-.8 1.63A6 6 0 0 0 2 12.42V16h2",
            key: "l5np60"
        }
    ],
    [
        "circle",
        {
            cx: "6.5",
            cy: "16.5",
            r: "2.5",
            key: "ae40ju"
        }
    ],
    [
        "circle",
        {
            cx: "16.5",
            cy: "16.5",
            r: "2.5",
            key: "1smtlt"
        }
    ]
]);
var car = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Car
});
const Carrot = createLucideIcon("Carrot", [
    [
        "path",
        {
            d: "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46",
            key: "rfqxbe"
        }
    ],
    [
        "path",
        {
            d: "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z",
            key: "6b25w4"
        }
    ],
    [
        "path",
        {
            d: "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z",
            key: "fn65lo"
        }
    ]
]);
var carrot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Carrot
});
const CaseLower = createLucideIcon("CaseLower", [
    [
        "circle",
        {
            cx: "7",
            cy: "12",
            r: "3",
            key: "12clwm"
        }
    ],
    [
        "path",
        {
            d: "M10 9v6",
            key: "17i7lo"
        }
    ],
    [
        "circle",
        {
            cx: "17",
            cy: "12",
            r: "3",
            key: "gl7c2s"
        }
    ],
    [
        "path",
        {
            d: "M14 7v8",
            key: "dl84cr"
        }
    ]
]);
var caseLower = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CaseLower
});
const CaseSensitive = createLucideIcon("CaseSensitive", [
    [
        "path",
        {
            d: "m3 15 4-8 4 8",
            key: "1vwr6u"
        }
    ],
    [
        "path",
        {
            d: "M4 13h6",
            key: "1r9ots"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "12",
            r: "3",
            key: "1kchzo"
        }
    ],
    [
        "path",
        {
            d: "M21 9v6",
            key: "anns31"
        }
    ]
]);
var caseSensitive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CaseSensitive
});
const CaseUpper = createLucideIcon("CaseUpper", [
    [
        "path",
        {
            d: "m3 15 4-8 4 8",
            key: "1vwr6u"
        }
    ],
    [
        "path",
        {
            d: "M4 13h6",
            key: "1r9ots"
        }
    ],
    [
        "path",
        {
            d: "M15 11h4.5a2 2 0 0 1 0 4H15V7h4a2 2 0 0 1 0 4",
            key: "1sqfas"
        }
    ]
]);
var caseUpper = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CaseUpper
});
const CassetteTape = createLucideIcon("CassetteTape", [
    [
        "rect",
        {
            width: "20",
            height: "16",
            x: "2",
            y: "4",
            rx: "2",
            key: "18n3k1"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "10",
            r: "2",
            key: "1xl4ub"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "circle",
        {
            cx: "16",
            cy: "10",
            r: "2",
            key: "r14t7q"
        }
    ],
    [
        "path",
        {
            d: "m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3",
            key: "l01ucn"
        }
    ]
]);
var cassetteTape = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CassetteTape
});
const Cast = createLucideIcon("Cast", [
    [
        "path",
        {
            d: "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6",
            key: "3zrzxg"
        }
    ],
    [
        "path",
        {
            d: "M2 12a9 9 0 0 1 8 8",
            key: "g6cvee"
        }
    ],
    [
        "path",
        {
            d: "M2 16a5 5 0 0 1 4 4",
            key: "1y1dii"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "2.01",
            y1: "20",
            y2: "20",
            key: "xu2jvo"
        }
    ]
]);
var cast = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cast
});
const Castle = createLucideIcon("Castle", [
    [
        "path",
        {
            d: "M22 20v-9H2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z",
            key: "109fe4"
        }
    ],
    [
        "path",
        {
            d: "M18 11V4H6v7",
            key: "mon5oj"
        }
    ],
    [
        "path",
        {
            d: "M15 22v-4a3 3 0 0 0-3-3v0a3 3 0 0 0-3 3v4",
            key: "jdggr9"
        }
    ],
    [
        "path",
        {
            d: "M22 11V9",
            key: "3zbp94"
        }
    ],
    [
        "path",
        {
            d: "M2 11V9",
            key: "1x5rnq"
        }
    ],
    [
        "path",
        {
            d: "M6 4V2",
            key: "1rsq15"
        }
    ],
    [
        "path",
        {
            d: "M18 4V2",
            key: "1jsdo1"
        }
    ],
    [
        "path",
        {
            d: "M10 4V2",
            key: "75d9ly"
        }
    ],
    [
        "path",
        {
            d: "M14 4V2",
            key: "8nj3z6"
        }
    ]
]);
var castle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Castle
});
const Cat = createLucideIcon("Cat", [
    [
        "path",
        {
            d: "M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z",
            key: "x6xyqk"
        }
    ],
    [
        "path",
        {
            d: "M8 14v.5",
            key: "1nzgdb"
        }
    ],
    [
        "path",
        {
            d: "M16 14v.5",
            key: "1lajdz"
        }
    ],
    [
        "path",
        {
            d: "M11.25 16.25h1.5L12 17l-.75-.75Z",
            key: "12kq1m"
        }
    ]
]);
var cat = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cat
});
const CheckCheck = createLucideIcon("CheckCheck", [
    [
        "path",
        {
            d: "M18 6 7 17l-5-5",
            key: "116fxf"
        }
    ],
    [
        "path",
        {
            d: "m22 10-7.5 7.5L13 16",
            key: "ke71qq"
        }
    ]
]);
var checkCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CheckCheck
});
const CheckCircle2 = createLucideIcon("CheckCircle2", [
    [
        "path",
        {
            d: "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z",
            key: "14v8dr"
        }
    ],
    [
        "path",
        {
            d: "m9 12 2 2 4-4",
            key: "dzmm74"
        }
    ]
]);
var checkCircle2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CheckCircle2
});
const CheckCircle = createLucideIcon("CheckCircle", [
    [
        "path",
        {
            d: "M22 11.08V12a10 10 0 1 1-5.93-9.14",
            key: "g774vq"
        }
    ],
    [
        "polyline",
        {
            points: "22 4 12 14.01 9 11.01",
            key: "6xbx8j"
        }
    ]
]);
var checkCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CheckCircle
});
const CheckSquare = createLucideIcon("CheckSquare", [
    [
        "polyline",
        {
            points: "9 11 12 14 22 4",
            key: "19ybtz"
        }
    ],
    [
        "path",
        {
            d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11",
            key: "1jnkn4"
        }
    ]
]);
var checkSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CheckSquare
});
const Check = createLucideIcon("Check", [
    [
        "polyline",
        {
            points: "20 6 9 17 4 12",
            key: "10jjfj"
        }
    ]
]);
var check = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Check
});
const ChefHat = createLucideIcon("ChefHat", [
    [
        "path",
        {
            d: "M6 13.87A4 4 0 0 1 7.41 6a5.11 5.11 0 0 1 1.05-1.54 5 5 0 0 1 7.08 0A5.11 5.11 0 0 1 16.59 6 4 4 0 0 1 18 13.87V21H6Z",
            key: "z3ra2g"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "18",
            y1: "17",
            y2: "17",
            key: "12q60k"
        }
    ]
]);
var chefHat = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChefHat
});
const Cherry = createLucideIcon("Cherry", [
    [
        "path",
        {
            d: "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z",
            key: "cvxqlc"
        }
    ],
    [
        "path",
        {
            d: "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z",
            key: "1ostrc"
        }
    ],
    [
        "path",
        {
            d: "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12",
            key: "hqx58h"
        }
    ],
    [
        "path",
        {
            d: "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z",
            key: "eykp1o"
        }
    ]
]);
var cherry = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cherry
});
const ChevronDownCircle = createLucideIcon("ChevronDownCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m16 10-4 4-4-4",
            key: "894hmk"
        }
    ]
]);
var chevronDownCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronDownCircle
});
const ChevronDownSquare = createLucideIcon("ChevronDownSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m16 10-4 4-4-4",
            key: "894hmk"
        }
    ]
]);
var chevronDownSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronDownSquare
});
const ChevronDown = createLucideIcon("ChevronDown", [
    [
        "path",
        {
            d: "m6 9 6 6 6-6",
            key: "qrunsl"
        }
    ]
]);
var chevronDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronDown
});
const ChevronFirst = createLucideIcon("ChevronFirst", [
    [
        "path",
        {
            d: "m17 18-6-6 6-6",
            key: "1yerx2"
        }
    ],
    [
        "path",
        {
            d: "M7 6v12",
            key: "1p53r6"
        }
    ]
]);
var chevronFirst = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronFirst
});
const ChevronLast = createLucideIcon("ChevronLast", [
    [
        "path",
        {
            d: "m7 18 6-6-6-6",
            key: "lwmzdw"
        }
    ],
    [
        "path",
        {
            d: "M17 6v12",
            key: "1o0aio"
        }
    ]
]);
var chevronLast = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronLast
});
const ChevronLeftCircle = createLucideIcon("ChevronLeftCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m14 16-4-4 4-4",
            key: "ojs7w8"
        }
    ]
]);
var chevronLeftCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronLeftCircle
});
const ChevronLeftSquare = createLucideIcon("ChevronLeftSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m14 16-4-4 4-4",
            key: "ojs7w8"
        }
    ]
]);
var chevronLeftSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronLeftSquare
});
const ChevronLeft = createLucideIcon("ChevronLeft", [
    [
        "path",
        {
            d: "m15 18-6-6 6-6",
            key: "1wnfg3"
        }
    ]
]);
var chevronLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronLeft
});
const ChevronRightCircle = createLucideIcon("ChevronRightCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m10 8 4 4-4 4",
            key: "1wy4r4"
        }
    ]
]);
var chevronRightCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronRightCircle
});
const ChevronRightSquare = createLucideIcon("ChevronRightSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m10 8 4 4-4 4",
            key: "1wy4r4"
        }
    ]
]);
var chevronRightSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronRightSquare
});
const ChevronRight = createLucideIcon("ChevronRight", [
    [
        "path",
        {
            d: "m9 18 6-6-6-6",
            key: "mthhwq"
        }
    ]
]);
var chevronRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronRight
});
const ChevronUpCircle = createLucideIcon("ChevronUpCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m8 14 4-4 4 4",
            key: "fy2ptz"
        }
    ]
]);
var chevronUpCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronUpCircle
});
const ChevronUpSquare = createLucideIcon("ChevronUpSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m8 14 4-4 4 4",
            key: "fy2ptz"
        }
    ]
]);
var chevronUpSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronUpSquare
});
const ChevronUp = createLucideIcon("ChevronUp", [
    [
        "path",
        {
            d: "m18 15-6-6-6 6",
            key: "153udz"
        }
    ]
]);
var chevronUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronUp
});
const ChevronsDownUp = createLucideIcon("ChevronsDownUp", [
    [
        "path",
        {
            d: "m7 20 5-5 5 5",
            key: "13a0gw"
        }
    ],
    [
        "path",
        {
            d: "m7 4 5 5 5-5",
            key: "1kwcof"
        }
    ]
]);
var chevronsDownUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsDownUp
});
const ChevronsDown = createLucideIcon("ChevronsDown", [
    [
        "path",
        {
            d: "m7 6 5 5 5-5",
            key: "1lc07p"
        }
    ],
    [
        "path",
        {
            d: "m7 13 5 5 5-5",
            key: "1d48rs"
        }
    ]
]);
var chevronsDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsDown
});
const ChevronsLeftRight = createLucideIcon("ChevronsLeftRight", [
    [
        "path",
        {
            d: "m9 7-5 5 5 5",
            key: "j5w590"
        }
    ],
    [
        "path",
        {
            d: "m15 7 5 5-5 5",
            key: "1bl6da"
        }
    ]
]);
var chevronsLeftRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsLeftRight
});
const ChevronsLeft = createLucideIcon("ChevronsLeft", [
    [
        "path",
        {
            d: "m11 17-5-5 5-5",
            key: "13zhaf"
        }
    ],
    [
        "path",
        {
            d: "m18 17-5-5 5-5",
            key: "h8a8et"
        }
    ]
]);
var chevronsLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsLeft
});
const ChevronsRightLeft = createLucideIcon("ChevronsRightLeft", [
    [
        "path",
        {
            d: "m20 17-5-5 5-5",
            key: "30x0n2"
        }
    ],
    [
        "path",
        {
            d: "m4 17 5-5-5-5",
            key: "16spf4"
        }
    ]
]);
var chevronsRightLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsRightLeft
});
const ChevronsRight = createLucideIcon("ChevronsRight", [
    [
        "path",
        {
            d: "m6 17 5-5-5-5",
            key: "xnjwq"
        }
    ],
    [
        "path",
        {
            d: "m13 17 5-5-5-5",
            key: "17xmmf"
        }
    ]
]);
var chevronsRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsRight
});
const ChevronsUpDown = createLucideIcon("ChevronsUpDown", [
    [
        "path",
        {
            d: "m7 15 5 5 5-5",
            key: "1hf1tw"
        }
    ],
    [
        "path",
        {
            d: "m7 9 5-5 5 5",
            key: "sgt6xg"
        }
    ]
]);
var chevronsUpDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsUpDown
});
const ChevronsUp = createLucideIcon("ChevronsUp", [
    [
        "path",
        {
            d: "m17 11-5-5-5 5",
            key: "e8nh98"
        }
    ],
    [
        "path",
        {
            d: "m17 18-5-5-5 5",
            key: "2avn1x"
        }
    ]
]);
var chevronsUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ChevronsUp
});
const Chrome = createLucideIcon("Chrome", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ],
    [
        "line",
        {
            x1: "21.17",
            x2: "12",
            y1: "8",
            y2: "8",
            key: "a0cw5f"
        }
    ],
    [
        "line",
        {
            x1: "3.95",
            x2: "8.54",
            y1: "6.06",
            y2: "14",
            key: "1kftof"
        }
    ],
    [
        "line",
        {
            x1: "10.88",
            x2: "15.46",
            y1: "21.94",
            y2: "14",
            key: "1ymyh8"
        }
    ]
]);
var chrome = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Chrome
});
const Church = createLucideIcon("Church", [
    [
        "path",
        {
            d: "m18 7 4 2v11a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9l4-2",
            key: "gy5gyo"
        }
    ],
    [
        "path",
        {
            d: "M14 22v-4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v4",
            key: "cpkuc4"
        }
    ],
    [
        "path",
        {
            d: "M18 22V5l-6-3-6 3v17",
            key: "1hsnhq"
        }
    ],
    [
        "path",
        {
            d: "M12 7v5",
            key: "ma6bk"
        }
    ],
    [
        "path",
        {
            d: "M10 9h4",
            key: "u4k05v"
        }
    ]
]);
var church = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Church
});
const CigaretteOff = createLucideIcon("CigaretteOff", [
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ],
    [
        "path",
        {
            d: "M12 12H2v4h14",
            key: "91gsaq"
        }
    ],
    [
        "path",
        {
            d: "M22 12v4",
            key: "142cbu"
        }
    ],
    [
        "path",
        {
            d: "M18 12h-.5",
            key: "12ymji"
        }
    ],
    [
        "path",
        {
            d: "M7 12v4",
            key: "jqww69"
        }
    ],
    [
        "path",
        {
            d: "M18 8c0-2.5-2-2.5-2-5",
            key: "1il607"
        }
    ],
    [
        "path",
        {
            d: "M22 8c0-2.5-2-2.5-2-5",
            key: "1gah44"
        }
    ]
]);
var cigaretteOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CigaretteOff
});
const Cigarette = createLucideIcon("Cigarette", [
    [
        "path",
        {
            d: "M18 12H2v4h16",
            key: "2rt1hm"
        }
    ],
    [
        "path",
        {
            d: "M22 12v4",
            key: "142cbu"
        }
    ],
    [
        "path",
        {
            d: "M7 12v4",
            key: "jqww69"
        }
    ],
    [
        "path",
        {
            d: "M18 8c0-2.5-2-2.5-2-5",
            key: "1il607"
        }
    ],
    [
        "path",
        {
            d: "M22 8c0-2.5-2-2.5-2-5",
            key: "1gah44"
        }
    ]
]);
var cigarette = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cigarette
});
const CircleDashed = createLucideIcon("CircleDashed", [
    [
        "path",
        {
            d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0",
            key: "1qdqn0"
        }
    ],
    [
        "path",
        {
            d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7",
            key: "1bq7p6"
        }
    ],
    [
        "path",
        {
            d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8",
            key: "1rlaqf"
        }
    ],
    [
        "path",
        {
            d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69",
            key: "1xk03u"
        }
    ],
    [
        "path",
        {
            d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0",
            key: "l7re25"
        }
    ],
    [
        "path",
        {
            d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7",
            key: "1v18p6"
        }
    ],
    [
        "path",
        {
            d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8",
            key: "xdo6bj"
        }
    ],
    [
        "path",
        {
            d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69",
            key: "1jjmaz"
        }
    ]
]);
var circleDashed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleDashed
});
const CircleDollarSign = createLucideIcon("CircleDollarSign", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8",
            key: "1h4pet"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ]
]);
var circleDollarSign = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleDollarSign
});
const CircleDotDashed = createLucideIcon("CircleDotDashed", [
    [
        "path",
        {
            d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0",
            key: "1qdqn0"
        }
    ],
    [
        "path",
        {
            d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7",
            key: "1bq7p6"
        }
    ],
    [
        "path",
        {
            d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8",
            key: "1rlaqf"
        }
    ],
    [
        "path",
        {
            d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69",
            key: "1xk03u"
        }
    ],
    [
        "path",
        {
            d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0",
            key: "l7re25"
        }
    ],
    [
        "path",
        {
            d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7",
            key: "1v18p6"
        }
    ],
    [
        "path",
        {
            d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8",
            key: "xdo6bj"
        }
    ],
    [
        "path",
        {
            d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69",
            key: "1jjmaz"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ]
]);
var circleDotDashed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleDotDashed
});
const CircleDot = createLucideIcon("CircleDot", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ]
]);
var circleDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleDot
});
const CircleEllipsis = createLucideIcon("CircleEllipsis", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M17 12h.01",
            key: "1m0b6t"
        }
    ],
    [
        "path",
        {
            d: "M12 12h.01",
            key: "1mp3jc"
        }
    ],
    [
        "path",
        {
            d: "M7 12h.01",
            key: "eqddd0"
        }
    ]
]);
var circleEllipsis = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleEllipsis
});
const CircleEqual = createLucideIcon("CircleEqual", [
    [
        "path",
        {
            d: "M7 10h10",
            key: "1101jm"
        }
    ],
    [
        "path",
        {
            d: "M7 14h10",
            key: "1mhdw3"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ]
]);
var circleEqual = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleEqual
});
const CircleOff = createLucideIcon("CircleOff", [
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M8.35 2.69A10 10 0 0 1 21.3 15.65",
            key: "1pfsoa"
        }
    ],
    [
        "path",
        {
            d: "M19.08 19.08A10 10 0 1 1 4.92 4.92",
            key: "1ablyi"
        }
    ]
]);
var circleOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleOff
});
const CircleSlash2 = createLucideIcon("CircleSlash2", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M22 2 2 22",
            key: "y4kqgn"
        }
    ]
]);
var circleSlash2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleSlash2
});
const CircleSlash = createLucideIcon("CircleSlash", [
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "15",
            y2: "9",
            key: "1dfufj"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ]
]);
var circleSlash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircleSlash
});
const Circle = createLucideIcon("Circle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ]
]);
var circle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Circle
});
const CircuitBoard = createLucideIcon("CircuitBoard", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M11 9h4a2 2 0 0 0 2-2V3",
            key: "1ve2rv"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "9",
            r: "2",
            key: "af1f0g"
        }
    ],
    [
        "path",
        {
            d: "M7 21v-4a2 2 0 0 1 2-2h4",
            key: "1fwkro"
        }
    ],
    [
        "circle",
        {
            cx: "15",
            cy: "15",
            r: "2",
            key: "3i40o0"
        }
    ]
]);
var circuitBoard = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CircuitBoard
});
const Citrus = createLucideIcon("Citrus", [
    [
        "path",
        {
            d: "M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z",
            key: "4ite01"
        }
    ],
    [
        "path",
        {
            d: "M19.65 15.66A8 8 0 0 1 8.35 4.34",
            key: "1gxipu"
        }
    ],
    [
        "path",
        {
            d: "m14 10-5.5 5.5",
            key: "92pfem"
        }
    ],
    [
        "path",
        {
            d: "M14 17.85V10H6.15",
            key: "xqmtsk"
        }
    ]
]);
var citrus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Citrus
});
const Clapperboard = createLucideIcon("Clapperboard", [
    [
        "path",
        {
            d: "M4 11v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8H4Z",
            key: "1hxvyx"
        }
    ],
    [
        "path",
        {
            d: "m4 11-.88-2.87a2 2 0 0 1 1.33-2.5l11.48-3.5a2 2 0 0 1 2.5 1.32l.87 2.87L4 11.01Z",
            key: "1vz1k2"
        }
    ],
    [
        "path",
        {
            d: "m6.6 4.99 3.38 4.2",
            key: "192ida"
        }
    ],
    [
        "path",
        {
            d: "m11.86 3.38 3.38 4.2",
            key: "hhucvz"
        }
    ]
]);
var clapperboard = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clapperboard
});
const ClipboardCheck = createLucideIcon("ClipboardCheck", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
        }
    ],
    [
        "path",
        {
            d: "m9 14 2 2 4-4",
            key: "df797q"
        }
    ]
]);
var clipboardCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardCheck
});
const ClipboardCopy = createLucideIcon("ClipboardCopy", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2",
            key: "4jdomd"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 2 2v4",
            key: "3hqy98"
        }
    ],
    [
        "path",
        {
            d: "M21 14H11",
            key: "1bme5i"
        }
    ],
    [
        "path",
        {
            d: "m15 10-4 4 4 4",
            key: "5dvupr"
        }
    ]
]);
var clipboardCopy = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardCopy
});
const ClipboardEdit = createLucideIcon("ClipboardEdit", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z",
            key: "1rgxu8"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5",
            key: "cereej"
        }
    ],
    [
        "path",
        {
            d: "M4 13.5V6a2 2 0 0 1 2-2h2",
            key: "5ua5vh"
        }
    ]
]);
var clipboardEdit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardEdit
});
const ClipboardList = createLucideIcon("ClipboardList", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
        }
    ],
    [
        "path",
        {
            d: "M12 11h4",
            key: "1jrz19"
        }
    ],
    [
        "path",
        {
            d: "M12 16h4",
            key: "n85exb"
        }
    ],
    [
        "path",
        {
            d: "M8 11h.01",
            key: "1dfujw"
        }
    ],
    [
        "path",
        {
            d: "M8 16h.01",
            key: "18s6g9"
        }
    ]
]);
var clipboardList = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardList
});
const ClipboardPaste = createLucideIcon("ClipboardPaste", [
    [
        "path",
        {
            d: "M15 2H9a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1Z",
            key: "1pp7kr"
        }
    ],
    [
        "path",
        {
            d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M16 4h2a2 2 0 0 1 2 2v2M11 14h10",
            key: "2ik1ml"
        }
    ],
    [
        "path",
        {
            d: "m17 10 4 4-4 4",
            key: "vp2hj1"
        }
    ]
]);
var clipboardPaste = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardPaste
});
const ClipboardSignature = createLucideIcon("ClipboardSignature", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5",
            key: "1but9f"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 1.73 1",
            key: "1p8n7l"
        }
    ],
    [
        "path",
        {
            d: "M18.42 9.61a2.1 2.1 0 1 1 2.97 2.97L16.95 17 13 18l.99-3.95 4.43-4.44Z",
            key: "johvi5"
        }
    ],
    [
        "path",
        {
            d: "M8 18h1",
            key: "13wk12"
        }
    ]
]);
var clipboardSignature = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardSignature
});
const ClipboardType = createLucideIcon("ClipboardType", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
        }
    ],
    [
        "path",
        {
            d: "M9 12v-1h6v1",
            key: "iehl6m"
        }
    ],
    [
        "path",
        {
            d: "M11 17h2",
            key: "12w5me"
        }
    ],
    [
        "path",
        {
            d: "M12 11v6",
            key: "1bwqyc"
        }
    ]
]);
var clipboardType = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardType
});
const ClipboardX = createLucideIcon("ClipboardX", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
        }
    ],
    [
        "path",
        {
            d: "m15 11-6 6",
            key: "1toa9n"
        }
    ],
    [
        "path",
        {
            d: "m9 11 6 6",
            key: "wlibny"
        }
    ]
]);
var clipboardX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ClipboardX
});
const Clipboard = createLucideIcon("Clipboard", [
    [
        "rect",
        {
            width: "8",
            height: "4",
            x: "8",
            y: "2",
            rx: "1",
            ry: "1",
            key: "tgr4d6"
        }
    ],
    [
        "path",
        {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
        }
    ]
]);
var clipboard = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clipboard
});
const Clock1 = createLucideIcon("Clock1", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 14.5 8",
            key: "12zbmj"
        }
    ]
]);
var clock1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock1
});
const Clock10 = createLucideIcon("Clock10", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 8 10",
            key: "atfzqc"
        }
    ]
]);
var clock10 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock10
});
const Clock11 = createLucideIcon("Clock11", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 9.5 8",
            key: "l5bg6f"
        }
    ]
]);
var clock11 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock11
});
const Clock12 = createLucideIcon("Clock12", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12",
            key: "1fub01"
        }
    ]
]);
var clock12 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock12
});
const Clock2 = createLucideIcon("Clock2", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 16 10",
            key: "1g230d"
        }
    ]
]);
var clock2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock2
});
const Clock3 = createLucideIcon("Clock3", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 16.5 12",
            key: "1aq6pp"
        }
    ]
]);
var clock3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock3
});
const Clock4 = createLucideIcon("Clock4", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 16 14",
            key: "68esgv"
        }
    ]
]);
var clock4 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock4
});
const Clock5 = createLucideIcon("Clock5", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 14.5 16",
            key: "1pcbox"
        }
    ]
]);
var clock5 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock5
});
const Clock6 = createLucideIcon("Clock6", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 12 16.5",
            key: "hb2qv6"
        }
    ]
]);
var clock6 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock6
});
const Clock7 = createLucideIcon("Clock7", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 9.5 16",
            key: "ka3394"
        }
    ]
]);
var clock7 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock7
});
const Clock8 = createLucideIcon("Clock8", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 8 14",
            key: "tmc9b4"
        }
    ]
]);
var clock8 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock8
});
const Clock9 = createLucideIcon("Clock9", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 7.5 12",
            key: "1k60p0"
        }
    ]
]);
var clock9 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock9
});
const Clock = createLucideIcon("Clock", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polyline",
        {
            points: "12 6 12 12 16 14",
            key: "68esgv"
        }
    ]
]);
var clock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clock
});
const CloudCog = createLucideIcon("CloudCog", [
    [
        "path",
        {
            d: "M20 16.2A4.5 4.5 0 0 0 17.5 8h-1.8A7 7 0 1 0 4 14.9",
            key: "19hoja"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "17",
            r: "3",
            key: "1spfwm"
        }
    ],
    [
        "path",
        {
            d: "M12 13v1",
            key: "176q98"
        }
    ],
    [
        "path",
        {
            d: "M12 20v1",
            key: "1wcdkc"
        }
    ],
    [
        "path",
        {
            d: "M16 17h-1",
            key: "y560le"
        }
    ],
    [
        "path",
        {
            d: "M9 17H8",
            key: "1lfe9z"
        }
    ],
    [
        "path",
        {
            d: "m15 14-.88.88",
            key: "12ytk1"
        }
    ],
    [
        "path",
        {
            d: "M9.88 19.12 9 20",
            key: "1kmb4r"
        }
    ],
    [
        "path",
        {
            d: "m15 20-.88-.88",
            key: "1ipjcf"
        }
    ],
    [
        "path",
        {
            d: "M9.88 14.88 9 14",
            key: "c4uok7"
        }
    ]
]);
var cloudCog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudCog
});
const CloudDrizzle = createLucideIcon("CloudDrizzle", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "M8 19v1",
            key: "1dk2by"
        }
    ],
    [
        "path",
        {
            d: "M8 14v1",
            key: "84yxot"
        }
    ],
    [
        "path",
        {
            d: "M16 19v1",
            key: "v220m7"
        }
    ],
    [
        "path",
        {
            d: "M16 14v1",
            key: "g12gj6"
        }
    ],
    [
        "path",
        {
            d: "M12 21v1",
            key: "q8vafk"
        }
    ],
    [
        "path",
        {
            d: "M12 16v1",
            key: "1mx6rx"
        }
    ]
]);
var cloudDrizzle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudDrizzle
});
const CloudFog = createLucideIcon("CloudFog", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "M16 17H7",
            key: "pygtm1"
        }
    ],
    [
        "path",
        {
            d: "M17 21H9",
            key: "1u2q02"
        }
    ]
]);
var cloudFog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudFog
});
const CloudHail = createLucideIcon("CloudHail", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "M16 14v2",
            key: "a1is7l"
        }
    ],
    [
        "path",
        {
            d: "M8 14v2",
            key: "1e9m6t"
        }
    ],
    [
        "path",
        {
            d: "M16 20h.01",
            key: "xwek51"
        }
    ],
    [
        "path",
        {
            d: "M8 20h.01",
            key: "1vjney"
        }
    ],
    [
        "path",
        {
            d: "M12 16v2",
            key: "z66u1j"
        }
    ],
    [
        "path",
        {
            d: "M12 22h.01",
            key: "1urd7a"
        }
    ]
]);
var cloudHail = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudHail
});
const CloudLightning = createLucideIcon("CloudLightning", [
    [
        "path",
        {
            d: "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973",
            key: "1cez44"
        }
    ],
    [
        "path",
        {
            d: "m13 12-3 5h4l-3 5",
            key: "1t22er"
        }
    ]
]);
var cloudLightning = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudLightning
});
const CloudMoonRain = createLucideIcon("CloudMoonRain", [
    [
        "path",
        {
            d: "M10.083 9A6.002 6.002 0 0 1 16 4a4.243 4.243 0 0 0 6 6c0 2.22-1.206 4.16-3 5.197",
            key: "u82z8m"
        }
    ],
    [
        "path",
        {
            d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24",
            key: "1qmrp3"
        }
    ],
    [
        "path",
        {
            d: "M11 20v2",
            key: "174qtz"
        }
    ],
    [
        "path",
        {
            d: "M7 19v2",
            key: "12npes"
        }
    ]
]);
var cloudMoonRain = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudMoonRain
});
const CloudMoon = createLucideIcon("CloudMoon", [
    [
        "path",
        {
            d: "M13 16a3 3 0 1 1 0 6H7a5 5 0 1 1 4.9-6Z",
            key: "p44pc9"
        }
    ],
    [
        "path",
        {
            d: "M10.1 9A6 6 0 0 1 16 4a4.24 4.24 0 0 0 6 6 6 6 0 0 1-3 5.197",
            key: "16nha0"
        }
    ]
]);
var cloudMoon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudMoon
});
const CloudOff = createLucideIcon("CloudOff", [
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193",
            key: "yfwify"
        }
    ],
    [
        "path",
        {
            d: "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07",
            key: "jlfiyv"
        }
    ]
]);
var cloudOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudOff
});
const CloudRainWind = createLucideIcon("CloudRainWind", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "m9.2 22 3-7",
            key: "sb5f6j"
        }
    ],
    [
        "path",
        {
            d: "m9 13-3 7",
            key: "500co5"
        }
    ],
    [
        "path",
        {
            d: "m17 13-3 7",
            key: "8t2fiy"
        }
    ]
]);
var cloudRainWind = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudRainWind
});
const CloudRain = createLucideIcon("CloudRain", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "M16 14v6",
            key: "1j4efv"
        }
    ],
    [
        "path",
        {
            d: "M8 14v6",
            key: "17c4r9"
        }
    ],
    [
        "path",
        {
            d: "M12 16v6",
            key: "c8a4gj"
        }
    ]
]);
var cloudRain = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudRain
});
const CloudSnow = createLucideIcon("CloudSnow", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "M8 15h.01",
            key: "a7atzg"
        }
    ],
    [
        "path",
        {
            d: "M8 19h.01",
            key: "puxtts"
        }
    ],
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ],
    [
        "path",
        {
            d: "M12 21h.01",
            key: "h35vbk"
        }
    ],
    [
        "path",
        {
            d: "M16 15h.01",
            key: "rnfrdf"
        }
    ],
    [
        "path",
        {
            d: "M16 19h.01",
            key: "1vcnzz"
        }
    ]
]);
var cloudSnow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudSnow
});
const CloudSunRain = createLucideIcon("CloudSunRain", [
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ],
    [
        "path",
        {
            d: "m4.93 4.93 1.41 1.41",
            key: "149t6j"
        }
    ],
    [
        "path",
        {
            d: "M20 12h2",
            key: "1q8mjw"
        }
    ],
    [
        "path",
        {
            d: "m19.07 4.93-1.41 1.41",
            key: "1shlcs"
        }
    ],
    [
        "path",
        {
            d: "M15.947 12.65a4 4 0 0 0-5.925-4.128",
            key: "dpwdj0"
        }
    ],
    [
        "path",
        {
            d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24",
            key: "1qmrp3"
        }
    ],
    [
        "path",
        {
            d: "M11 20v2",
            key: "174qtz"
        }
    ],
    [
        "path",
        {
            d: "M7 19v2",
            key: "12npes"
        }
    ]
]);
var cloudSunRain = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudSunRain
});
const CloudSun = createLucideIcon("CloudSun", [
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ],
    [
        "path",
        {
            d: "m4.93 4.93 1.41 1.41",
            key: "149t6j"
        }
    ],
    [
        "path",
        {
            d: "M20 12h2",
            key: "1q8mjw"
        }
    ],
    [
        "path",
        {
            d: "m19.07 4.93-1.41 1.41",
            key: "1shlcs"
        }
    ],
    [
        "path",
        {
            d: "M15.947 12.65a4 4 0 0 0-5.925-4.128",
            key: "dpwdj0"
        }
    ],
    [
        "path",
        {
            d: "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z",
            key: "s09mg5"
        }
    ]
]);
var cloudSun = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CloudSun
});
const Cloud = createLucideIcon("Cloud", [
    [
        "path",
        {
            d: "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z",
            key: "p7xjir"
        }
    ]
]);
var cloud = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cloud
});
const Cloudy = createLucideIcon("Cloudy", [
    [
        "path",
        {
            d: "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z",
            key: "gqqjvc"
        }
    ],
    [
        "path",
        {
            d: "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5",
            key: "1p2s76"
        }
    ]
]);
var cloudy = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cloudy
});
const Clover = createLucideIcon("Clover", [
    [
        "path",
        {
            d: "M16.2 3.8a2.7 2.7 0 0 0-3.81 0l-.4.38-.4-.4a2.7 2.7 0 0 0-3.82 0C6.73 4.85 6.67 6.64 8 8l4 4 4-4c1.33-1.36 1.27-3.15.2-4.2z",
            key: "1gxwox"
        }
    ],
    [
        "path",
        {
            d: "M8 8c-1.36-1.33-3.15-1.27-4.2-.2a2.7 2.7 0 0 0 0 3.81l.38.4-.4.4a2.7 2.7 0 0 0 0 3.82C4.85 17.27 6.64 17.33 8 16",
            key: "il7z7z"
        }
    ],
    [
        "path",
        {
            d: "M16 16c1.36 1.33 3.15 1.27 4.2.2a2.7 2.7 0 0 0 0-3.81l-.38-.4.4-.4a2.7 2.7 0 0 0 0-3.82C19.15 6.73 17.36 6.67 16 8",
            key: "15bpx2"
        }
    ],
    [
        "path",
        {
            d: "M7.8 20.2a2.7 2.7 0 0 0 3.81 0l.4-.38.4.4a2.7 2.7 0 0 0 3.82 0c1.06-1.06 1.12-2.85-.21-4.21l-4-4-4 4c-1.33 1.36-1.27 3.15-.2 4.2z",
            key: "v9mug8"
        }
    ],
    [
        "path",
        {
            d: "m7 17-5 5",
            key: "1py3mz"
        }
    ]
]);
var clover = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Clover
});
const Club = createLucideIcon("Club", [
    [
        "path",
        {
            d: "M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z",
            key: "27yuqz"
        }
    ],
    [
        "path",
        {
            d: "M12 17.66L12 22",
            key: "ogfahf"
        }
    ]
]);
var club = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Club
});
const Code2 = createLucideIcon("Code2", [
    [
        "path",
        {
            d: "m18 16 4-4-4-4",
            key: "1inbqp"
        }
    ],
    [
        "path",
        {
            d: "m6 8-4 4 4 4",
            key: "15zrgr"
        }
    ],
    [
        "path",
        {
            d: "m14.5 4-5 16",
            key: "e7oirm"
        }
    ]
]);
var code2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Code2
});
const Code = createLucideIcon("Code", [
    [
        "polyline",
        {
            points: "16 18 22 12 16 6",
            key: "z7tu5w"
        }
    ],
    [
        "polyline",
        {
            points: "8 6 2 12 8 18",
            key: "1eg1df"
        }
    ]
]);
var code = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Code
});
const Codepen = createLucideIcon("Codepen", [
    [
        "polygon",
        {
            points: "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2",
            key: "srzb37"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "15.5",
            key: "1t73f2"
        }
    ],
    [
        "polyline",
        {
            points: "22 8.5 12 15.5 2 8.5",
            key: "ajlxae"
        }
    ],
    [
        "polyline",
        {
            points: "2 15.5 12 8.5 22 15.5",
            key: "susrui"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "8.5",
            key: "2cldga"
        }
    ]
]);
var codepen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Codepen
});
const Codesandbox = createLucideIcon("Codesandbox", [
    [
        "path",
        {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
        }
    ],
    [
        "polyline",
        {
            points: "7.5 4.21 12 6.81 16.5 4.21",
            key: "fabo96"
        }
    ],
    [
        "polyline",
        {
            points: "7.5 19.79 7.5 14.6 3 12",
            key: "z377f1"
        }
    ],
    [
        "polyline",
        {
            points: "21 12 16.5 14.6 16.5 19.79",
            key: "9nrev1"
        }
    ],
    [
        "polyline",
        {
            points: "3.27 6.96 12 12.01 20.73 6.96",
            key: "1180pa"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22.08",
            y2: "12",
            key: "3z3uq6"
        }
    ]
]);
var codesandbox = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Codesandbox
});
const Coffee = createLucideIcon("Coffee", [
    [
        "path",
        {
            d: "M17 8h1a4 4 0 1 1 0 8h-1",
            key: "jx4kbh"
        }
    ],
    [
        "path",
        {
            d: "M3 8h14v9a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4Z",
            key: "1bxrl0"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "2",
            y2: "4",
            key: "1cr9l3"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "2",
            y2: "4",
            key: "170wym"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "14",
            y1: "2",
            y2: "4",
            key: "1c5f70"
        }
    ]
]);
var coffee = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Coffee
});
const Cog = createLucideIcon("Cog", [
    [
        "path",
        {
            d: "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z",
            key: "sobvz5"
        }
    ],
    [
        "path",
        {
            d: "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z",
            key: "11i496"
        }
    ],
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ],
    [
        "path",
        {
            d: "M12 22v-2",
            key: "1osdcq"
        }
    ],
    [
        "path",
        {
            d: "m17 20.66-1-1.73",
            key: "eq3orb"
        }
    ],
    [
        "path",
        {
            d: "M11 10.27 7 3.34",
            key: "16pf9h"
        }
    ],
    [
        "path",
        {
            d: "m20.66 17-1.73-1",
            key: "sg0v6f"
        }
    ],
    [
        "path",
        {
            d: "m3.34 7 1.73 1",
            key: "1ulond"
        }
    ],
    [
        "path",
        {
            d: "M14 12h8",
            key: "4f43i9"
        }
    ],
    [
        "path",
        {
            d: "M2 12h2",
            key: "1t8f8n"
        }
    ],
    [
        "path",
        {
            d: "m20.66 7-1.73 1",
            key: "1ow05n"
        }
    ],
    [
        "path",
        {
            d: "m3.34 17 1.73-1",
            key: "nuk764"
        }
    ],
    [
        "path",
        {
            d: "m17 3.34-1 1.73",
            key: "2wel8s"
        }
    ],
    [
        "path",
        {
            d: "m11 13.73-4 6.93",
            key: "794ttg"
        }
    ]
]);
var cog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cog
});
const Coins = createLucideIcon("Coins", [
    [
        "circle",
        {
            cx: "8",
            cy: "8",
            r: "6",
            key: "3yglwk"
        }
    ],
    [
        "path",
        {
            d: "M18.09 10.37A6 6 0 1 1 10.34 18",
            key: "t5s6rm"
        }
    ],
    [
        "path",
        {
            d: "M7 6h1v4",
            key: "1obek4"
        }
    ],
    [
        "path",
        {
            d: "m16.71 13.88.7.71-2.82 2.82",
            key: "1rbuyh"
        }
    ]
]);
var coins = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Coins
});
const Columns = createLucideIcon("Columns", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "3",
            y2: "21",
            key: "1efggb"
        }
    ]
]);
var columns = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Columns
});
const Combine = createLucideIcon("Combine", [
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "2",
            y: "2",
            rx: "2",
            key: "z1hh3n"
        }
    ],
    [
        "path",
        {
            d: "M14 2c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2",
            key: "83orz6"
        }
    ],
    [
        "path",
        {
            d: "M20 2c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2",
            key: "k86dmt"
        }
    ],
    [
        "path",
        {
            d: "M10 18H5c-1.7 0-3-1.3-3-3v-1",
            key: "6vokjl"
        }
    ],
    [
        "polyline",
        {
            points: "7 21 10 18 7 15",
            key: "1k02g0"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "14",
            y: "14",
            rx: "2",
            key: "1fa9i4"
        }
    ]
]);
var combine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Combine
});
const Command = createLucideIcon("Command", [
    [
        "path",
        {
            d: "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3",
            key: "11bfej"
        }
    ]
]);
var command = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Command
});
const Compass = createLucideIcon("Compass", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polygon",
        {
            points: "16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76",
            key: "m9r19z"
        }
    ]
]);
var compass = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Compass
});
const Component = createLucideIcon("Component", [
    [
        "path",
        {
            d: "M5.5 8.5 9 12l-3.5 3.5L2 12l3.5-3.5Z",
            key: "1kciei"
        }
    ],
    [
        "path",
        {
            d: "m12 2 3.5 3.5L12 9 8.5 5.5 12 2Z",
            key: "1ome0g"
        }
    ],
    [
        "path",
        {
            d: "M18.5 8.5 22 12l-3.5 3.5L15 12l3.5-3.5Z",
            key: "vbupec"
        }
    ],
    [
        "path",
        {
            d: "m12 15 3.5 3.5L12 22l-3.5-3.5L12 15Z",
            key: "16csic"
        }
    ]
]);
var component = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Component
});
const ConciergeBell = createLucideIcon("ConciergeBell", [
    [
        "path",
        {
            d: "M2 18a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2H2v-2Z",
            key: "1co3i8"
        }
    ],
    [
        "path",
        {
            d: "M20 16a8 8 0 1 0-16 0",
            key: "1pa543"
        }
    ],
    [
        "path",
        {
            d: "M12 4v4",
            key: "1bq03y"
        }
    ],
    [
        "path",
        {
            d: "M10 4h4",
            key: "1xpv9s"
        }
    ]
]);
var conciergeBell = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ConciergeBell
});
const Construction = createLucideIcon("Construction", [
    [
        "rect",
        {
            x: "2",
            y: "6",
            width: "20",
            height: "8",
            rx: "1",
            key: "1estib"
        }
    ],
    [
        "path",
        {
            d: "M17 14v7",
            key: "7m2elx"
        }
    ],
    [
        "path",
        {
            d: "M7 14v7",
            key: "1cm7wv"
        }
    ],
    [
        "path",
        {
            d: "M17 3v3",
            key: "1v4jwn"
        }
    ],
    [
        "path",
        {
            d: "M7 3v3",
            key: "7o6guu"
        }
    ],
    [
        "path",
        {
            d: "M10 14 2.3 6.3",
            key: "1023jk"
        }
    ],
    [
        "path",
        {
            d: "m14 6 7.7 7.7",
            key: "1s8pl2"
        }
    ],
    [
        "path",
        {
            d: "m8 6 8 8",
            key: "hl96qh"
        }
    ]
]);
var construction = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Construction
});
const Contact2 = createLucideIcon("Contact2", [
    [
        "path",
        {
            d: "M16 18a4 4 0 0 0-8 0",
            key: "1lzouq"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "11",
            r: "3",
            key: "itu57m"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            key: "1hopcy"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "4",
            key: "1ff9gb"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "4",
            key: "1ufoma"
        }
    ]
]);
var contact2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Contact2
});
const Contact = createLucideIcon("Contact", [
    [
        "path",
        {
            d: "M17 18a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2",
            key: "1mghuy"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            key: "1hopcy"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "2",
            key: "1yojzk"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "4",
            key: "1ff9gb"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "2",
            y2: "4",
            key: "1ufoma"
        }
    ]
]);
var contact = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Contact
});
const Container = createLucideIcon("Container", [
    [
        "path",
        {
            d: "M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z",
            key: "1t2lqe"
        }
    ],
    [
        "path",
        {
            d: "M10 21.9V14L2.1 9.1",
            key: "o7czzq"
        }
    ],
    [
        "path",
        {
            d: "m10 14 11.9-6.9",
            key: "zm5e20"
        }
    ],
    [
        "path",
        {
            d: "M14 19.8v-8.1",
            key: "159ecu"
        }
    ],
    [
        "path",
        {
            d: "M18 17.5V9.4",
            key: "11uown"
        }
    ]
]);
var container = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Container
});
const Contrast = createLucideIcon("Contrast", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M12 18a6 6 0 0 0 0-12v12z",
            key: "j4l70d"
        }
    ]
]);
var contrast = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Contrast
});
const Cookie = createLucideIcon("Cookie", [
    [
        "path",
        {
            d: "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5",
            key: "laymnq"
        }
    ],
    [
        "path",
        {
            d: "M8.5 8.5v.01",
            key: "ue8clq"
        }
    ],
    [
        "path",
        {
            d: "M16 15.5v.01",
            key: "14dtrp"
        }
    ],
    [
        "path",
        {
            d: "M12 12v.01",
            key: "u5ubse"
        }
    ],
    [
        "path",
        {
            d: "M11 17v.01",
            key: "1hyl5a"
        }
    ],
    [
        "path",
        {
            d: "M7 14v.01",
            key: "uct60s"
        }
    ]
]);
var cookie = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cookie
});
const CopyCheck = createLucideIcon("CopyCheck", [
    [
        "path",
        {
            d: "m12 15 2 2 4-4",
            key: "2c609p"
        }
    ],
    [
        "rect",
        {
            width: "14",
            height: "14",
            x: "8",
            y: "8",
            rx: "2",
            ry: "2",
            key: "17jyea"
        }
    ],
    [
        "path",
        {
            d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",
            key: "zix9uf"
        }
    ]
]);
var copyCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CopyCheck
});
const CopyMinus = createLucideIcon("CopyMinus", [
    [
        "line",
        {
            x1: "12",
            x2: "18",
            y1: "15",
            y2: "15",
            key: "1nscbv"
        }
    ],
    [
        "rect",
        {
            width: "14",
            height: "14",
            x: "8",
            y: "8",
            rx: "2",
            ry: "2",
            key: "17jyea"
        }
    ],
    [
        "path",
        {
            d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",
            key: "zix9uf"
        }
    ]
]);
var copyMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CopyMinus
});
const CopyPlus = createLucideIcon("CopyPlus", [
    [
        "line",
        {
            x1: "15",
            x2: "15",
            y1: "12",
            y2: "18",
            key: "1p7wdc"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "18",
            y1: "15",
            y2: "15",
            key: "1nscbv"
        }
    ],
    [
        "rect",
        {
            width: "14",
            height: "14",
            x: "8",
            y: "8",
            rx: "2",
            ry: "2",
            key: "17jyea"
        }
    ],
    [
        "path",
        {
            d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",
            key: "zix9uf"
        }
    ]
]);
var copyPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CopyPlus
});
const CopySlash = createLucideIcon("CopySlash", [
    [
        "line",
        {
            x1: "12",
            x2: "18",
            y1: "18",
            y2: "12",
            key: "ebkxgr"
        }
    ],
    [
        "rect",
        {
            width: "14",
            height: "14",
            x: "8",
            y: "8",
            rx: "2",
            ry: "2",
            key: "17jyea"
        }
    ],
    [
        "path",
        {
            d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",
            key: "zix9uf"
        }
    ]
]);
var copySlash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CopySlash
});
const CopyX = createLucideIcon("CopyX", [
    [
        "line",
        {
            x1: "12",
            x2: "18",
            y1: "12",
            y2: "18",
            key: "1rg63v"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "18",
            y1: "18",
            y2: "12",
            key: "ebkxgr"
        }
    ],
    [
        "rect",
        {
            width: "14",
            height: "14",
            x: "8",
            y: "8",
            rx: "2",
            ry: "2",
            key: "17jyea"
        }
    ],
    [
        "path",
        {
            d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",
            key: "zix9uf"
        }
    ]
]);
var copyX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CopyX
});
const Copy = createLucideIcon("Copy", [
    [
        "rect",
        {
            width: "14",
            height: "14",
            x: "8",
            y: "8",
            rx: "2",
            ry: "2",
            key: "17jyea"
        }
    ],
    [
        "path",
        {
            d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",
            key: "zix9uf"
        }
    ]
]);
var copy = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Copy
});
const Copyleft = createLucideIcon("Copyleft", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M9 9.35a4 4 0 1 1 0 5.3",
            key: "p8fkhi"
        }
    ]
]);
var copyleft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Copyleft
});
const Copyright = createLucideIcon("Copyright", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M15 9.354a4 4 0 1 0 0 5.292",
            key: "8xfhbo"
        }
    ]
]);
var copyright = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Copyright
});
const CornerDownLeft = createLucideIcon("CornerDownLeft", [
    [
        "polyline",
        {
            points: "9 10 4 15 9 20",
            key: "r3jprv"
        }
    ],
    [
        "path",
        {
            d: "M20 4v7a4 4 0 0 1-4 4H4",
            key: "6o5b7l"
        }
    ]
]);
var cornerDownLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerDownLeft
});
const CornerDownRight = createLucideIcon("CornerDownRight", [
    [
        "polyline",
        {
            points: "15 10 20 15 15 20",
            key: "1q7qjw"
        }
    ],
    [
        "path",
        {
            d: "M4 4v7a4 4 0 0 0 4 4h12",
            key: "z08zvw"
        }
    ]
]);
var cornerDownRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerDownRight
});
const CornerLeftDown = createLucideIcon("CornerLeftDown", [
    [
        "polyline",
        {
            points: "14 15 9 20 4 15",
            key: "nkc4i"
        }
    ],
    [
        "path",
        {
            d: "M20 4h-7a4 4 0 0 0-4 4v12",
            key: "nbpdq2"
        }
    ]
]);
var cornerLeftDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerLeftDown
});
const CornerLeftUp = createLucideIcon("CornerLeftUp", [
    [
        "polyline",
        {
            points: "14 9 9 4 4 9",
            key: "m9oyvo"
        }
    ],
    [
        "path",
        {
            d: "M20 20h-7a4 4 0 0 1-4-4V4",
            key: "1blwi3"
        }
    ]
]);
var cornerLeftUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerLeftUp
});
const CornerRightDown = createLucideIcon("CornerRightDown", [
    [
        "polyline",
        {
            points: "10 15 15 20 20 15",
            key: "axus6l"
        }
    ],
    [
        "path",
        {
            d: "M4 4h7a4 4 0 0 1 4 4v12",
            key: "wcbgct"
        }
    ]
]);
var cornerRightDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerRightDown
});
const CornerRightUp = createLucideIcon("CornerRightUp", [
    [
        "polyline",
        {
            points: "10 9 15 4 20 9",
            key: "1lr6px"
        }
    ],
    [
        "path",
        {
            d: "M4 20h7a4 4 0 0 0 4-4V4",
            key: "1plgdj"
        }
    ]
]);
var cornerRightUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerRightUp
});
const CornerUpLeft = createLucideIcon("CornerUpLeft", [
    [
        "polyline",
        {
            points: "9 14 4 9 9 4",
            key: "881910"
        }
    ],
    [
        "path",
        {
            d: "M20 20v-7a4 4 0 0 0-4-4H4",
            key: "1nkjon"
        }
    ]
]);
var cornerUpLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerUpLeft
});
const CornerUpRight = createLucideIcon("CornerUpRight", [
    [
        "polyline",
        {
            points: "15 14 20 9 15 4",
            key: "1tbx3s"
        }
    ],
    [
        "path",
        {
            d: "M4 20v-7a4 4 0 0 1 4-4h12",
            key: "1lu4f8"
        }
    ]
]);
var cornerUpRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CornerUpRight
});
const Cpu = createLucideIcon("Cpu", [
    [
        "rect",
        {
            x: "4",
            y: "4",
            width: "16",
            height: "16",
            rx: "2",
            key: "1vbyd7"
        }
    ],
    [
        "rect",
        {
            x: "9",
            y: "9",
            width: "6",
            height: "6",
            key: "o3kz5p"
        }
    ],
    [
        "path",
        {
            d: "M15 2v2",
            key: "13l42r"
        }
    ],
    [
        "path",
        {
            d: "M15 20v2",
            key: "15mkzm"
        }
    ],
    [
        "path",
        {
            d: "M2 15h2",
            key: "1gxd5l"
        }
    ],
    [
        "path",
        {
            d: "M2 9h2",
            key: "1bbxkp"
        }
    ],
    [
        "path",
        {
            d: "M20 15h2",
            key: "19e6y8"
        }
    ],
    [
        "path",
        {
            d: "M20 9h2",
            key: "19tzq7"
        }
    ],
    [
        "path",
        {
            d: "M9 2v2",
            key: "165o2o"
        }
    ],
    [
        "path",
        {
            d: "M9 20v2",
            key: "i2bqo8"
        }
    ]
]);
var cpu = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cpu
});
const CreativeCommons = createLucideIcon("CreativeCommons", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1",
            key: "1ss3eq"
        }
    ],
    [
        "path",
        {
            d: "M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1",
            key: "1od56t"
        }
    ]
]);
var creativeCommons = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CreativeCommons
});
const CreditCard = createLucideIcon("CreditCard", [
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "5",
            rx: "2",
            key: "ynyp8z"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "10",
            y2: "10",
            key: "1b3vmo"
        }
    ]
]);
var creditCard = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CreditCard
});
const Croissant = createLucideIcon("Croissant", [
    [
        "path",
        {
            d: "m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z",
            key: "1ozxlb"
        }
    ],
    [
        "path",
        {
            d: "m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83",
            key: "ffuyb5"
        }
    ],
    [
        "path",
        {
            d: "M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4",
            key: "osnpzi"
        }
    ],
    [
        "path",
        {
            d: "m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2",
            key: "1vubaw"
        }
    ],
    [
        "path",
        {
            d: "M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5",
            key: "wxr772"
        }
    ]
]);
var croissant = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Croissant
});
const Crop = createLucideIcon("Crop", [
    [
        "path",
        {
            d: "M6 2v14a2 2 0 0 0 2 2h14",
            key: "ron5a4"
        }
    ],
    [
        "path",
        {
            d: "M18 22V8a2 2 0 0 0-2-2H2",
            key: "7s9ehn"
        }
    ]
]);
var crop = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Crop
});
const Cross = createLucideIcon("Cross", [
    [
        "path",
        {
            d: "M11 2a2 2 0 0 0-2 2v5H4a2 2 0 0 0-2 2v2c0 1.1.9 2 2 2h5v5c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-5h5a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-5V4a2 2 0 0 0-2-2h-2z",
            key: "1t5g7j"
        }
    ]
]);
var cross = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Cross
});
const Crosshair = createLucideIcon("Crosshair", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "18",
            y1: "12",
            y2: "12",
            key: "l9bcsi"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "2",
            y1: "12",
            y2: "12",
            key: "13hhkx"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "6",
            y2: "2",
            key: "10w3f3"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "18",
            key: "15g9kq"
        }
    ]
]);
var crosshair = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Crosshair
});
const Crown = createLucideIcon("Crown", [
    [
        "path",
        {
            d: "m2 4 3 12h14l3-12-6 7-4-7-4 7-6-7zm3 16h14",
            key: "zkxr6b"
        }
    ]
]);
var crown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Crown
});
const CupSoda = createLucideIcon("CupSoda", [
    [
        "path",
        {
            d: "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8",
            key: "8166m8"
        }
    ],
    [
        "path",
        {
            d: "M5 8h14",
            key: "pcz4l3"
        }
    ],
    [
        "path",
        {
            d: "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0",
            key: "yjz344"
        }
    ],
    [
        "path",
        {
            d: "m12 8 1-6h2",
            key: "3ybfa4"
        }
    ]
]);
var cupSoda = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: CupSoda
});
const Currency = createLucideIcon("Currency", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "8",
            key: "46899m"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "6",
            y1: "3",
            y2: "6",
            key: "1jkytn"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "18",
            y1: "3",
            y2: "6",
            key: "14zfjt"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "6",
            y1: "21",
            y2: "18",
            key: "iusuec"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "18",
            y1: "21",
            y2: "18",
            key: "yj2dd7"
        }
    ]
]);
var currency = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Currency
});
const DatabaseBackup = createLucideIcon("DatabaseBackup", [
    [
        "ellipse",
        {
            cx: "12",
            cy: "5",
            rx: "9",
            ry: "3",
            key: "msslwz"
        }
    ],
    [
        "path",
        {
            d: "M3 5v14c0 1.4 3 2.7 7 3",
            key: "jgylly"
        }
    ],
    [
        "path",
        {
            d: "M3 12c0 1.2 2 2.5 5 3",
            key: "vxrdms"
        }
    ],
    [
        "path",
        {
            d: "M21 5v4",
            key: "1vq2e7"
        }
    ],
    [
        "path",
        {
            d: "M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16",
            key: "1f4ei9"
        }
    ],
    [
        "path",
        {
            d: "M12 12v4h4",
            key: "1bxaet"
        }
    ]
]);
var databaseBackup = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DatabaseBackup
});
const Database = createLucideIcon("Database", [
    [
        "ellipse",
        {
            cx: "12",
            cy: "5",
            rx: "9",
            ry: "3",
            key: "msslwz"
        }
    ],
    [
        "path",
        {
            d: "M3 5V19A9 3 0 0 0 21 19V5",
            key: "1wlel7"
        }
    ],
    [
        "path",
        {
            d: "M3 12A9 3 0 0 0 21 12",
            key: "mv7ke4"
        }
    ]
]);
var database = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Database
});
const Delete = createLucideIcon("Delete", [
    [
        "path",
        {
            d: "M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z",
            key: "1oy587"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "12",
            y1: "9",
            y2: "15",
            key: "1olkx5"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "18",
            y1: "9",
            y2: "15",
            key: "1n50pc"
        }
    ]
]);
var _delete = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Delete
});
const Dessert = createLucideIcon("Dessert", [
    [
        "circle",
        {
            cx: "12",
            cy: "4",
            r: "2",
            key: "muu5ef"
        }
    ],
    [
        "path",
        {
            d: "M10.2 3.2C5.5 4 2 8.1 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4 0c0-4.9-3.5-9-8.2-9.8",
            key: "lfo06j"
        }
    ],
    [
        "path",
        {
            d: "M3.2 14.8a9 9 0 0 0 17.6 0",
            key: "12xarc"
        }
    ]
]);
var dessert = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dessert
});
const Diamond = createLucideIcon("Diamond", [
    [
        "path",
        {
            d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z",
            key: "1f1r0c"
        }
    ]
]);
var diamond = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Diamond
});
const Dice1 = createLucideIcon("Dice1", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M12 12h.01",
            key: "1mp3jc"
        }
    ]
]);
var dice1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dice1
});
const Dice2 = createLucideIcon("Dice2", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M15 9h.01",
            key: "x1ddxp"
        }
    ],
    [
        "path",
        {
            d: "M9 15h.01",
            key: "fzyn71"
        }
    ]
]);
var dice2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dice2
});
const Dice3 = createLucideIcon("Dice3", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M16 8h.01",
            key: "cr5u4v"
        }
    ],
    [
        "path",
        {
            d: "M12 12h.01",
            key: "1mp3jc"
        }
    ],
    [
        "path",
        {
            d: "M8 16h.01",
            key: "18s6g9"
        }
    ]
]);
var dice3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dice3
});
const Dice4 = createLucideIcon("Dice4", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M16 8h.01",
            key: "cr5u4v"
        }
    ],
    [
        "path",
        {
            d: "M8 8h.01",
            key: "1e4136"
        }
    ],
    [
        "path",
        {
            d: "M8 16h.01",
            key: "18s6g9"
        }
    ],
    [
        "path",
        {
            d: "M16 16h.01",
            key: "1f9h7w"
        }
    ]
]);
var dice4 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dice4
});
const Dice5 = createLucideIcon("Dice5", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M16 8h.01",
            key: "cr5u4v"
        }
    ],
    [
        "path",
        {
            d: "M8 8h.01",
            key: "1e4136"
        }
    ],
    [
        "path",
        {
            d: "M8 16h.01",
            key: "18s6g9"
        }
    ],
    [
        "path",
        {
            d: "M16 16h.01",
            key: "1f9h7w"
        }
    ],
    [
        "path",
        {
            d: "M12 12h.01",
            key: "1mp3jc"
        }
    ]
]);
var dice5 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dice5
});
const Dice6 = createLucideIcon("Dice6", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M16 8h.01",
            key: "cr5u4v"
        }
    ],
    [
        "path",
        {
            d: "M16 12h.01",
            key: "1l6xoz"
        }
    ],
    [
        "path",
        {
            d: "M16 16h.01",
            key: "1f9h7w"
        }
    ],
    [
        "path",
        {
            d: "M8 8h.01",
            key: "1e4136"
        }
    ],
    [
        "path",
        {
            d: "M8 12h.01",
            key: "czm47f"
        }
    ],
    [
        "path",
        {
            d: "M8 16h.01",
            key: "18s6g9"
        }
    ]
]);
var dice6 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dice6
});
const Dices = createLucideIcon("Dices", [
    [
        "rect",
        {
            width: "12",
            height: "12",
            x: "2",
            y: "10",
            rx: "2",
            ry: "2",
            key: "6agr2n"
        }
    ],
    [
        "path",
        {
            d: "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6",
            key: "1o487t"
        }
    ],
    [
        "path",
        {
            d: "M6 18h.01",
            key: "uhywen"
        }
    ],
    [
        "path",
        {
            d: "M10 14h.01",
            key: "ssrbsk"
        }
    ],
    [
        "path",
        {
            d: "M15 6h.01",
            key: "cblpky"
        }
    ],
    [
        "path",
        {
            d: "M18 9h.01",
            key: "2061c0"
        }
    ]
]);
var dices = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dices
});
const Diff = createLucideIcon("Diff", [
    [
        "path",
        {
            d: "M12 3v14",
            key: "7cf3v8"
        }
    ],
    [
        "path",
        {
            d: "M5 10h14",
            key: "elsbfy"
        }
    ],
    [
        "path",
        {
            d: "M5 21h14",
            key: "11awu3"
        }
    ]
]);
var diff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Diff
});
const Disc2 = createLucideIcon("Disc2", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ],
    [
        "path",
        {
            d: "M12 12h.01",
            key: "1mp3jc"
        }
    ]
]);
var disc2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Disc2
});
const Disc3 = createLucideIcon("Disc3", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M6 12c0-1.7.7-3.2 1.8-4.2",
            key: "oqkarx"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ],
    [
        "path",
        {
            d: "M18 12c0 1.7-.7 3.2-1.8 4.2",
            key: "1eah9h"
        }
    ]
]);
var disc3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Disc3
});
const Disc = createLucideIcon("Disc", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ]
]);
var disc = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Disc
});
const DivideCircle = createLucideIcon("DivideCircle", [
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "12",
            y2: "12",
            key: "1jonct"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "16",
            y2: "16",
            key: "aqc6ln"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "8",
            key: "1mkcni"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ]
]);
var divideCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DivideCircle
});
const DivideSquare = createLucideIcon("DivideSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "12",
            y2: "12",
            key: "1jonct"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "16",
            y2: "16",
            key: "aqc6ln"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "8",
            key: "1mkcni"
        }
    ]
]);
var divideSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DivideSquare
});
const Divide = createLucideIcon("Divide", [
    [
        "circle",
        {
            cx: "12",
            cy: "6",
            r: "1",
            key: "1bh7o1"
        }
    ],
    [
        "line",
        {
            x1: "5",
            x2: "19",
            y1: "12",
            y2: "12",
            key: "13b5wn"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "18",
            r: "1",
            key: "lqb9t5"
        }
    ]
]);
var divide = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Divide
});
const DnaOff = createLucideIcon("DnaOff", [
    [
        "path",
        {
            d: "M15 2c-1.35 1.5-2.092 3-2.5 4.5M9 22c1.35-1.5 2.092-3 2.5-4.5",
            key: "sxiaad"
        }
    ],
    [
        "path",
        {
            d: "M2 15c3.333-3 6.667-3 10-3m10-3c-1.5 1.35-3 2.092-4.5 2.5",
            key: "yn4bs1"
        }
    ],
    [
        "path",
        {
            d: "m17 6-2.5-2.5",
            key: "5cdfhj"
        }
    ],
    [
        "path",
        {
            d: "m14 8-1.5-1.5",
            key: "1ohn8i"
        }
    ],
    [
        "path",
        {
            d: "m7 18 2.5 2.5",
            key: "16tu1a"
        }
    ],
    [
        "path",
        {
            d: "m3.5 14.5.5.5",
            key: "hapbhd"
        }
    ],
    [
        "path",
        {
            d: "m20 9 .5.5",
            key: "1n7z02"
        }
    ],
    [
        "path",
        {
            d: "m6.5 12.5 1 1",
            key: "cs35ky"
        }
    ],
    [
        "path",
        {
            d: "m16.5 10.5 1 1",
            key: "696xn5"
        }
    ],
    [
        "path",
        {
            d: "m10 16 1.5 1.5",
            key: "11lckj"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var dnaOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DnaOff
});
const Dna = createLucideIcon("Dna", [
    [
        "path",
        {
            d: "M2 15c6.667-6 13.333 0 20-6",
            key: "1pyr53"
        }
    ],
    [
        "path",
        {
            d: "M9 22c1.798-1.998 2.518-3.995 2.807-5.993",
            key: "q3hbxp"
        }
    ],
    [
        "path",
        {
            d: "M15 2c-1.798 1.998-2.518 3.995-2.807 5.993",
            key: "80uv8i"
        }
    ],
    [
        "path",
        {
            d: "m17 6-2.5-2.5",
            key: "5cdfhj"
        }
    ],
    [
        "path",
        {
            d: "m14 8-1-1",
            key: "15nbz5"
        }
    ],
    [
        "path",
        {
            d: "m7 18 2.5 2.5",
            key: "16tu1a"
        }
    ],
    [
        "path",
        {
            d: "m3.5 14.5.5.5",
            key: "hapbhd"
        }
    ],
    [
        "path",
        {
            d: "m20 9 .5.5",
            key: "1n7z02"
        }
    ],
    [
        "path",
        {
            d: "m6.5 12.5 1 1",
            key: "cs35ky"
        }
    ],
    [
        "path",
        {
            d: "m16.5 10.5 1 1",
            key: "696xn5"
        }
    ],
    [
        "path",
        {
            d: "m10 16 1.5 1.5",
            key: "11lckj"
        }
    ]
]);
var dna = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dna
});
const Dog = createLucideIcon("Dog", [
    [
        "path",
        {
            d: "M10 5.172C10 3.782 8.423 2.679 6.5 3c-2.823.47-4.113 6.006-4 7 .08.703 1.725 1.722 3.656 1 1.261-.472 1.96-1.45 2.344-2.5",
            key: "19br0u"
        }
    ],
    [
        "path",
        {
            d: "M14.267 5.172c0-1.39 1.577-2.493 3.5-2.172 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5",
            key: "11n1an"
        }
    ],
    [
        "path",
        {
            d: "M8 14v.5",
            key: "1nzgdb"
        }
    ],
    [
        "path",
        {
            d: "M16 14v.5",
            key: "1lajdz"
        }
    ],
    [
        "path",
        {
            d: "M11.25 16.25h1.5L12 17l-.75-.75Z",
            key: "12kq1m"
        }
    ],
    [
        "path",
        {
            d: "M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444c0-1.061-.162-2.2-.493-3.309m-9.243-6.082A8.801 8.801 0 0 1 12 5c.78 0 1.5.108 2.161.306",
            key: "wsu29d"
        }
    ]
]);
var dog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dog
});
const DollarSign = createLucideIcon("DollarSign", [
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "22",
            key: "7eqyqh"
        }
    ],
    [
        "path",
        {
            d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6",
            key: "1b0p4s"
        }
    ]
]);
var dollarSign = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DollarSign
});
const Donut = createLucideIcon("Donut", [
    [
        "path",
        {
            d: "M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3",
            key: "19sr3x"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ]
]);
var donut = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Donut
});
const DoorClosed = createLucideIcon("DoorClosed", [
    [
        "path",
        {
            d: "M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14",
            key: "36qu9e"
        }
    ],
    [
        "path",
        {
            d: "M2 20h20",
            key: "owomy5"
        }
    ],
    [
        "path",
        {
            d: "M14 12v.01",
            key: "xfcn54"
        }
    ]
]);
var doorClosed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DoorClosed
});
const DoorOpen = createLucideIcon("DoorOpen", [
    [
        "path",
        {
            d: "M13 4h3a2 2 0 0 1 2 2v14",
            key: "hrm0s9"
        }
    ],
    [
        "path",
        {
            d: "M2 20h3",
            key: "1gaodv"
        }
    ],
    [
        "path",
        {
            d: "M13 20h9",
            key: "s90cdi"
        }
    ],
    [
        "path",
        {
            d: "M10 12v.01",
            key: "vx6srw"
        }
    ],
    [
        "path",
        {
            d: "M13 4.562v16.157a1 1 0 0 1-1.242.97L5 20V5.562a2 2 0 0 1 1.515-1.94l4-1A2 2 0 0 1 13 4.561Z",
            key: "199qr4"
        }
    ]
]);
var doorOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DoorOpen
});
const Dot = createLucideIcon("Dot", [
    [
        "circle",
        {
            cx: "12.1",
            cy: "12.1",
            r: "1",
            key: "18d7e5"
        }
    ]
]);
var dot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dot
});
const DownloadCloud = createLucideIcon("DownloadCloud", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "M12 12v9",
            key: "192myk"
        }
    ],
    [
        "path",
        {
            d: "m8 17 4 4 4-4",
            key: "1ul180"
        }
    ]
]);
var downloadCloud = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: DownloadCloud
});
const Download = createLucideIcon("Download", [
    [
        "path",
        {
            d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",
            key: "ih7n3h"
        }
    ],
    [
        "polyline",
        {
            points: "7 10 12 15 17 10",
            key: "2ggqvy"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "15",
            y2: "3",
            key: "1vk2je"
        }
    ]
]);
var download = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Download
});
const Dribbble = createLucideIcon("Dribbble", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94",
            key: "hpej1"
        }
    ],
    [
        "path",
        {
            d: "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32",
            key: "1tr44o"
        }
    ],
    [
        "path",
        {
            d: "M8.56 2.75c4.37 6 6 9.42 8 17.72",
            key: "kbh691"
        }
    ]
]);
var dribbble = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dribbble
});
const Droplet = createLucideIcon("Droplet", [
    [
        "path",
        {
            d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z",
            key: "c7niix"
        }
    ]
]);
var droplet = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Droplet
});
const Droplets = createLucideIcon("Droplets", [
    [
        "path",
        {
            d: "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z",
            key: "1ptgy4"
        }
    ],
    [
        "path",
        {
            d: "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97",
            key: "1sl1rz"
        }
    ]
]);
var droplets = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Droplets
});
const Drumstick = createLucideIcon("Drumstick", [
    [
        "path",
        {
            d: "M15.45 15.4c-2.13.65-4.3.32-5.7-1.1-2.29-2.27-1.76-6.5 1.17-9.42 2.93-2.93 7.15-3.46 9.43-1.18 1.41 1.41 1.74 3.57 1.1 5.71-1.4-.51-3.26-.02-4.64 1.36-1.38 1.38-1.87 3.23-1.36 4.63z",
            key: "1o96s0"
        }
    ],
    [
        "path",
        {
            d: "m11.25 15.6-2.16 2.16a2.5 2.5 0 1 1-4.56 1.73 2.49 2.49 0 0 1-1.41-4.24 2.5 2.5 0 0 1 3.14-.32l2.16-2.16",
            key: "14vv5h"
        }
    ]
]);
var drumstick = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Drumstick
});
const Dumbbell = createLucideIcon("Dumbbell", [
    [
        "path",
        {
            d: "m6.5 6.5 11 11",
            key: "f7oqzb"
        }
    ],
    [
        "path",
        {
            d: "m21 21-1-1",
            key: "cpc6if"
        }
    ],
    [
        "path",
        {
            d: "m3 3 1 1",
            key: "d3rpuf"
        }
    ],
    [
        "path",
        {
            d: "m18 22 4-4",
            key: "1e32o6"
        }
    ],
    [
        "path",
        {
            d: "m2 6 4-4",
            key: "189tqz"
        }
    ],
    [
        "path",
        {
            d: "m3 10 7-7",
            key: "1bxui2"
        }
    ],
    [
        "path",
        {
            d: "m14 21 7-7",
            key: "16x78n"
        }
    ]
]);
var dumbbell = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Dumbbell
});
const EarOff = createLucideIcon("EarOff", [
    [
        "path",
        {
            d: "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46",
            key: "1qngmn"
        }
    ],
    [
        "path",
        {
            d: "M6 8.5c0-.75.13-1.47.36-2.14",
            key: "b06bma"
        }
    ],
    [
        "path",
        {
            d: "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76",
            key: "g10hsz"
        }
    ],
    [
        "path",
        {
            d: "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18",
            key: "ygzou7"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var earOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: EarOff
});
const Ear = createLucideIcon("Ear", [
    [
        "path",
        {
            d: "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0",
            key: "1dfaln"
        }
    ],
    [
        "path",
        {
            d: "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4",
            key: "1qnva7"
        }
    ]
]);
var ear = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ear
});
const Edit2 = createLucideIcon("Edit2", [
    [
        "path",
        {
            d: "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z",
            key: "2s2c1q"
        }
    ]
]);
var edit2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Edit2
});
const Edit3 = createLucideIcon("Edit3", [
    [
        "path",
        {
            d: "M12 20h9",
            key: "t2du7b"
        }
    ],
    [
        "path",
        {
            d: "M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z",
            key: "18w55b"
        }
    ]
]);
var edit3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Edit3
});
const Edit = createLucideIcon("Edit", [
    [
        "path",
        {
            d: "M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7",
            key: "1qinfi"
        }
    ],
    [
        "path",
        {
            d: "M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z",
            key: "1cs3r3"
        }
    ]
]);
var edit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Edit
});
const EggFried = createLucideIcon("EggFried", [
    [
        "circle",
        {
            cx: "11.5",
            cy: "12.5",
            r: "3.5",
            key: "1cl1mi"
        }
    ],
    [
        "path",
        {
            d: "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z",
            key: "165ef9"
        }
    ]
]);
var eggFried = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: EggFried
});
const EggOff = createLucideIcon("EggOff", [
    [
        "path",
        {
            d: "M6.399 6.399C5.362 8.157 4.65 10.189 4.5 12c-.37 4.43 1.27 9.95 7.5 10 3.256-.026 5.259-1.547 6.375-3.625",
            key: "6et380"
        }
    ],
    [
        "path",
        {
            d: "M19.532 13.875A14.07 14.07 0 0 0 19.5 12c-.36-4.34-3.95-9.96-7.5-10-1.04.012-2.082.502-3.046 1.297",
            key: "gcdc3f"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var eggOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: EggOff
});
const Egg = createLucideIcon("Egg", [
    [
        "path",
        {
            d: "M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z",
            key: "1c39pg"
        }
    ]
]);
var egg = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Egg
});
const EqualNot = createLucideIcon("EqualNot", [
    [
        "line",
        {
            x1: "5",
            x2: "19",
            y1: "9",
            y2: "9",
            key: "1nwqeh"
        }
    ],
    [
        "line",
        {
            x1: "5",
            x2: "19",
            y1: "15",
            y2: "15",
            key: "g8yjpy"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "5",
            y1: "5",
            y2: "19",
            key: "1x9vlm"
        }
    ]
]);
var equalNot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: EqualNot
});
const Equal = createLucideIcon("Equal", [
    [
        "line",
        {
            x1: "5",
            x2: "19",
            y1: "9",
            y2: "9",
            key: "1nwqeh"
        }
    ],
    [
        "line",
        {
            x1: "5",
            x2: "19",
            y1: "15",
            y2: "15",
            key: "g8yjpy"
        }
    ]
]);
var equal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Equal
});
const Eraser = createLucideIcon("Eraser", [
    [
        "path",
        {
            d: "m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21",
            key: "182aya"
        }
    ],
    [
        "path",
        {
            d: "M22 21H7",
            key: "t4ddhn"
        }
    ],
    [
        "path",
        {
            d: "m5 11 9 9",
            key: "1mo9qw"
        }
    ]
]);
var eraser = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Eraser
});
const Euro = createLucideIcon("Euro", [
    [
        "path",
        {
            d: "M4 10h12",
            key: "1y6xl8"
        }
    ],
    [
        "path",
        {
            d: "M4 14h9",
            key: "1loblj"
        }
    ],
    [
        "path",
        {
            d: "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2",
            key: "1j6lzo"
        }
    ]
]);
var euro = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Euro
});
const Expand = createLucideIcon("Expand", [
    [
        "path",
        {
            d: "m21 21-6-6m6 6v-4.8m0 4.8h-4.8",
            key: "1c15vz"
        }
    ],
    [
        "path",
        {
            d: "M3 16.2V21m0 0h4.8M3 21l6-6",
            key: "1fsnz2"
        }
    ],
    [
        "path",
        {
            d: "M21 7.8V3m0 0h-4.8M21 3l-6 6",
            key: "hawz9i"
        }
    ],
    [
        "path",
        {
            d: "M3 7.8V3m0 0h4.8M3 3l6 6",
            key: "u9ee12"
        }
    ]
]);
var expand = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Expand
});
const ExternalLink = createLucideIcon("ExternalLink", [
    [
        "path",
        {
            d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",
            key: "a6xqqp"
        }
    ],
    [
        "polyline",
        {
            points: "15 3 21 3 21 9",
            key: "mznyad"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "21",
            y1: "14",
            y2: "3",
            key: "18c3s4"
        }
    ]
]);
var externalLink = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ExternalLink
});
const EyeOff = createLucideIcon("EyeOff", [
    [
        "path",
        {
            d: "M9.88 9.88a3 3 0 1 0 4.24 4.24",
            key: "1jxqfv"
        }
    ],
    [
        "path",
        {
            d: "M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68",
            key: "9wicm4"
        }
    ],
    [
        "path",
        {
            d: "M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61",
            key: "1jreej"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var eyeOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: EyeOff
});
const Eye = createLucideIcon("Eye", [
    [
        "path",
        {
            d: "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z",
            key: "rwhkz3"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ]
]);
var eye = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Eye
});
const Facebook = createLucideIcon("Facebook", [
    [
        "path",
        {
            d: "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z",
            key: "1jg4f8"
        }
    ]
]);
var facebook = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Facebook
});
const Factory = createLucideIcon("Factory", [
    [
        "path",
        {
            d: "M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "159hny"
        }
    ],
    [
        "path",
        {
            d: "M17 18h1",
            key: "uldtlt"
        }
    ],
    [
        "path",
        {
            d: "M12 18h1",
            key: "s9uhes"
        }
    ],
    [
        "path",
        {
            d: "M7 18h1",
            key: "1neino"
        }
    ]
]);
var factory = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Factory
});
const Fan = createLucideIcon("Fan", [
    [
        "path",
        {
            d: "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z",
            key: "484a7f"
        }
    ],
    [
        "path",
        {
            d: "M12 12v.01",
            key: "u5ubse"
        }
    ]
]);
var fan = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Fan
});
const FastForward = createLucideIcon("FastForward", [
    [
        "polygon",
        {
            points: "13 19 22 12 13 5 13 19",
            key: "587y9g"
        }
    ],
    [
        "polygon",
        {
            points: "2 19 11 12 2 5 2 19",
            key: "3pweh0"
        }
    ]
]);
var fastForward = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FastForward
});
const Feather = createLucideIcon("Feather", [
    [
        "path",
        {
            d: "M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z",
            key: "u4sw5n"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "2",
            y1: "8",
            y2: "22",
            key: "1c47m2"
        }
    ],
    [
        "line",
        {
            x1: "17.5",
            x2: "9",
            y1: "15",
            y2: "15",
            key: "2fj3pr"
        }
    ]
]);
var feather = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Feather
});
const FerrisWheel = createLucideIcon("FerrisWheel", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ],
    [
        "path",
        {
            d: "M12 2v4",
            key: "3427ic"
        }
    ],
    [
        "path",
        {
            d: "m6.8 15-3.5 2",
            key: "hjy98k"
        }
    ],
    [
        "path",
        {
            d: "m20.7 7-3.5 2",
            key: "f08gto"
        }
    ],
    [
        "path",
        {
            d: "M6.8 9 3.3 7",
            key: "1aevh4"
        }
    ],
    [
        "path",
        {
            d: "m20.7 17-3.5-2",
            key: "1liqo3"
        }
    ],
    [
        "path",
        {
            d: "m9 22 3-8 3 8",
            key: "wees03"
        }
    ],
    [
        "path",
        {
            d: "M8 22h8",
            key: "rmew8v"
        }
    ],
    [
        "path",
        {
            d: "M18 18.7a9 9 0 1 0-12 0",
            key: "dhzg4g"
        }
    ]
]);
var ferrisWheel = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FerrisWheel
});
const Figma = createLucideIcon("Figma", [
    [
        "path",
        {
            d: "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z",
            key: "1340ok"
        }
    ],
    [
        "path",
        {
            d: "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z",
            key: "1hz3m3"
        }
    ],
    [
        "path",
        {
            d: "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z",
            key: "1oz8n2"
        }
    ],
    [
        "path",
        {
            d: "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z",
            key: "1ff65i"
        }
    ],
    [
        "path",
        {
            d: "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z",
            key: "pdip6e"
        }
    ]
]);
var figma = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Figma
});
const FileArchive = createLucideIcon("FileArchive", [
    [
        "path",
        {
            d: "M4 22V4c0-.5.2-1 .6-1.4C5 2.2 5.5 2 6 2h8.5L20 7.5V20c0 .5-.2 1-.6 1.4-.4.4-.9.6-1.4.6h-2",
            key: "1u864v"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "circle",
        {
            cx: "10",
            cy: "20",
            r: "2",
            key: "1xzdoj"
        }
    ],
    [
        "path",
        {
            d: "M10 7V6",
            key: "dljcrl"
        }
    ],
    [
        "path",
        {
            d: "M10 12v-1",
            key: "v7bkov"
        }
    ],
    [
        "path",
        {
            d: "M10 18v-2",
            key: "1cjy8d"
        }
    ]
]);
var fileArchive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileArchive
});
const FileAudio2 = createLucideIcon("FileAudio2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v2",
            key: "fkyf72"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M2 17v-3a4 4 0 0 1 8 0v3",
            key: "1ggdre"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "17",
            r: "1",
            key: "bc1fq4"
        }
    ],
    [
        "circle",
        {
            cx: "3",
            cy: "17",
            r: "1",
            key: "vo6nti"
        }
    ]
]);
var fileAudio2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileAudio2
});
const FileAudio = createLucideIcon("FileAudio", [
    [
        "path",
        {
            d: "M17.5 22h.5c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3",
            key: "1013sb"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M10 20v-1a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0Z",
            key: "gqt63y"
        }
    ],
    [
        "path",
        {
            d: "M6 20v-1a2 2 0 1 0-4 0v1a2 2 0 1 0 4 0Z",
            key: "cf7lqx"
        }
    ],
    [
        "path",
        {
            d: "M2 19v-3a6 6 0 0 1 12 0v3",
            key: "1acxgf"
        }
    ]
]);
var fileAudio = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileAudio
});
const FileAxis3d = createLucideIcon("FileAxis3d", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M8 10v8h8",
            key: "tlaukw"
        }
    ],
    [
        "path",
        {
            d: "m8 18 4-4",
            key: "12zab0"
        }
    ]
]);
var fileAxis3d = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileAxis3d
});
const FileBadge2 = createLucideIcon("FileBadge2", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "path",
        {
            d: "M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z",
            key: "13rien"
        }
    ],
    [
        "path",
        {
            d: "m14 12.5 1 5.5-3-1-3 1 1-5.5",
            key: "14xlky"
        }
    ]
]);
var fileBadge2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileBadge2
});
const FileBadge = createLucideIcon("FileBadge", [
    [
        "path",
        {
            d: "M4 7V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-6",
            key: "qtddq0"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z",
            key: "u0c8gj"
        }
    ],
    [
        "path",
        {
            d: "M7 16.5 8 22l-3-1-3 1 1-5.5",
            key: "5gm2nr"
        }
    ]
]);
var fileBadge = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileBadge
});
const FileBarChart2 = createLucideIcon("FileBarChart2", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M12 18v-6",
            key: "17g6i2"
        }
    ],
    [
        "path",
        {
            d: "M8 18v-1",
            key: "zg0ygc"
        }
    ],
    [
        "path",
        {
            d: "M16 18v-3",
            key: "j5jt4h"
        }
    ]
]);
var fileBarChart2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileBarChart2
});
const FileBarChart = createLucideIcon("FileBarChart", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M12 18v-4",
            key: "q1q25u"
        }
    ],
    [
        "path",
        {
            d: "M8 18v-2",
            key: "qcmpov"
        }
    ],
    [
        "path",
        {
            d: "M16 18v-6",
            key: "15y0np"
        }
    ]
]);
var fileBarChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileBarChart
});
const FileBox = createLucideIcon("FileBox", [
    [
        "path",
        {
            d: "M14.5 22H18a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "h7jej2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M2.97 13.12c-.6.36-.97 1.02-.97 1.74v3.28c0 .72.37 1.38.97 1.74l3 1.83c.63.39 1.43.39 2.06 0l3-1.83c.6-.36.97-1.02.97-1.74v-3.28c0-.72-.37-1.38-.97-1.74l-3-1.83a1.97 1.97 0 0 0-2.06 0l-3 1.83Z",
            key: "f4a3oc"
        }
    ],
    [
        "path",
        {
            d: "m7 17-4.74-2.85",
            key: "etm6su"
        }
    ],
    [
        "path",
        {
            d: "m7 17 4.74-2.85",
            key: "5xuooz"
        }
    ],
    [
        "path",
        {
            d: "M7 17v5",
            key: "1yj1jh"
        }
    ]
]);
var fileBox = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileBox
});
const FileCheck2 = createLucideIcon("FileCheck2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m3 15 2 2 4-4",
            key: "1lhrkk"
        }
    ]
]);
var fileCheck2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileCheck2
});
const FileCheck = createLucideIcon("FileCheck", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m9 15 2 2 4-4",
            key: "1grp1n"
        }
    ]
]);
var fileCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileCheck
});
const FileClock = createLucideIcon("FileClock", [
    [
        "path",
        {
            d: "M16 22h2c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3",
            key: "9lo3o3"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "16",
            r: "6",
            key: "10v15b"
        }
    ],
    [
        "path",
        {
            d: "M9.5 17.5 8 16.25V14",
            key: "1o80t2"
        }
    ]
]);
var fileClock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileClock
});
const FileCode2 = createLucideIcon("FileCode2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m9 18 3-3-3-3",
            key: "112psh"
        }
    ],
    [
        "path",
        {
            d: "m5 12-3 3 3 3",
            key: "oke12k"
        }
    ]
]);
var fileCode2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileCode2
});
const FileCode = createLucideIcon("FileCode", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m10 13-2 2 2 2",
            key: "17smn8"
        }
    ],
    [
        "path",
        {
            d: "m14 17 2-2-2-2",
            key: "14mezr"
        }
    ]
]);
var fileCode = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileCode
});
const FileCog2 = createLucideIcon("FileCog2", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "15",
            r: "2",
            key: "1vpstw"
        }
    ],
    [
        "path",
        {
            d: "M12 12v1",
            key: "1vuyxr"
        }
    ],
    [
        "path",
        {
            d: "M12 17v1",
            key: "y8y3f9"
        }
    ],
    [
        "path",
        {
            d: "m14.6 13.5-.87.5",
            key: "nomeg4"
        }
    ],
    [
        "path",
        {
            d: "m10.27 16-.87.5",
            key: "1o8v95"
        }
    ],
    [
        "path",
        {
            d: "m14.6 16.5-.87-.5",
            key: "gzu2jw"
        }
    ],
    [
        "path",
        {
            d: "m10.27 14-.87-.5",
            key: "1vlkk3"
        }
    ]
]);
var fileCog2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileCog2
});
const FileCog = createLucideIcon("FileCog", [
    [
        "path",
        {
            d: "M4 6V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4",
            key: "dba9qu"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "14",
            r: "3",
            key: "a1xfv6"
        }
    ],
    [
        "path",
        {
            d: "M6 10v1",
            key: "xs0f9j"
        }
    ],
    [
        "path",
        {
            d: "M6 17v1",
            key: "idyhc0"
        }
    ],
    [
        "path",
        {
            d: "M10 14H9",
            key: "m5fm2q"
        }
    ],
    [
        "path",
        {
            d: "M3 14H2",
            key: "19ot09"
        }
    ],
    [
        "path",
        {
            d: "m9 11-.88.88",
            key: "lhul2b"
        }
    ],
    [
        "path",
        {
            d: "M3.88 16.12 3 17",
            key: "169z9n"
        }
    ],
    [
        "path",
        {
            d: "m9 17-.88-.88",
            key: "5io96w"
        }
    ],
    [
        "path",
        {
            d: "M3.88 11.88 3 11",
            key: "1ynhy1"
        }
    ]
]);
var fileCog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileCog
});
const FileDiff = createLucideIcon("FileDiff", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "path",
        {
            d: "M12 13V7",
            key: "h0r20n"
        }
    ],
    [
        "path",
        {
            d: "M9 10h6",
            key: "9gxzsh"
        }
    ],
    [
        "path",
        {
            d: "M9 17h6",
            key: "r8uit2"
        }
    ]
]);
var fileDiff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileDiff
});
const FileDigit = createLucideIcon("FileDigit", [
    [
        "rect",
        {
            width: "4",
            height: "6",
            x: "2",
            y: "12",
            rx: "2",
            key: "jm304g"
        }
    ],
    [
        "path",
        {
            d: "M14 2v6h6",
            key: "1kof46"
        }
    ],
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "path",
        {
            d: "M10 12h2v6",
            key: "12zw74"
        }
    ],
    [
        "path",
        {
            d: "M10 18h4",
            key: "1ulq68"
        }
    ]
]);
var fileDigit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileDigit
});
const FileDown = createLucideIcon("FileDown", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M12 18v-6",
            key: "17g6i2"
        }
    ],
    [
        "path",
        {
            d: "m9 15 3 3 3-3",
            key: "1npd3o"
        }
    ]
]);
var fileDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileDown
});
const FileEdit = createLucideIcon("FileEdit", [
    [
        "path",
        {
            d: "M4 13.5V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-5.5",
            key: "1bg6eb"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z",
            key: "1rgxu8"
        }
    ]
]);
var fileEdit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileEdit
});
const FileHeart = createLucideIcon("FileHeart", [
    [
        "path",
        {
            d: "M4 6V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4",
            key: "dba9qu"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
            key: "1c1fso"
        }
    ]
]);
var fileHeart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileHeart
});
const FileImage = createLucideIcon("FileImage", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "circle",
        {
            cx: "10",
            cy: "13",
            r: "2",
            key: "6v46hv"
        }
    ],
    [
        "path",
        {
            d: "m20 17-1.09-1.09a2 2 0 0 0-2.82 0L10 22",
            key: "17vly1"
        }
    ]
]);
var fileImage = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileImage
});
const FileInput = createLucideIcon("FileInput", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M2 15h10",
            key: "jfw4w8"
        }
    ],
    [
        "path",
        {
            d: "m9 18 3-3-3-3",
            key: "112psh"
        }
    ]
]);
var fileInput = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileInput
});
const FileJson2 = createLucideIcon("FileJson2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1",
            key: "fq0c9t"
        }
    ],
    [
        "path",
        {
            d: "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1",
            key: "4gibmv"
        }
    ]
]);
var fileJson2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileJson2
});
const FileJson = createLucideIcon("FileJson", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1",
            key: "1oajmo"
        }
    ],
    [
        "path",
        {
            d: "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1",
            key: "mpwhp6"
        }
    ]
]);
var fileJson = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileJson
});
const FileKey2 = createLucideIcon("FileKey2", [
    [
        "path",
        {
            d: "M4 10V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4",
            key: "1nw5t3"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "circle",
        {
            cx: "4",
            cy: "16",
            r: "2",
            key: "1ehqvc"
        }
    ],
    [
        "path",
        {
            d: "m10 10-4.5 4.5",
            key: "7fwrp6"
        }
    ],
    [
        "path",
        {
            d: "m9 11 1 1",
            key: "wa6s5q"
        }
    ]
]);
var fileKey2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileKey2
});
const FileKey = createLucideIcon("FileKey", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "circle",
        {
            cx: "10",
            cy: "16",
            r: "2",
            key: "4ckbqe"
        }
    ],
    [
        "path",
        {
            d: "m16 10-4.5 4.5",
            key: "7p3ebg"
        }
    ],
    [
        "path",
        {
            d: "m15 11 1 1",
            key: "1bsyx3"
        }
    ]
]);
var fileKey = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileKey
});
const FileLineChart = createLucideIcon("FileLineChart", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m16 13-3.5 3.5-2-2L8 17",
            key: "zz7yod"
        }
    ]
]);
var fileLineChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileLineChart
});
const FileLock2 = createLucideIcon("FileLock2", [
    [
        "path",
        {
            d: "M4 5V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4",
            key: "gwd2r9"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "5",
            x: "2",
            y: "13",
            rx: "1",
            key: "10y5wo"
        }
    ],
    [
        "path",
        {
            d: "M8 13v-2a2 2 0 1 0-4 0v2",
            key: "1pdxzg"
        }
    ]
]);
var fileLock2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileLock2
});
const FileLock = createLucideIcon("FileLock", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "6",
            x: "8",
            y: "12",
            rx: "1",
            key: "3yr8at"
        }
    ],
    [
        "path",
        {
            d: "M15 12v-2a3 3 0 1 0-6 0v2",
            key: "1nqnhw"
        }
    ]
]);
var fileLock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileLock
});
const FileMinus2 = createLucideIcon("FileMinus2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M3 15h6",
            key: "4e2qda"
        }
    ]
]);
var fileMinus2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileMinus2
});
const FileMinus = createLucideIcon("FileMinus", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "15",
            y2: "15",
            key: "110plj"
        }
    ]
]);
var fileMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileMinus
});
const FileOutput = createLucideIcon("FileOutput", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M2 15h10",
            key: "jfw4w8"
        }
    ],
    [
        "path",
        {
            d: "m5 12-3 3 3 3",
            key: "oke12k"
        }
    ]
]);
var fileOutput = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileOutput
});
const FilePieChart = createLucideIcon("FilePieChart", [
    [
        "path",
        {
            d: "M16 22h2a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3",
            key: "zhyrez"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M4.04 11.71a5.84 5.84 0 1 0 8.2 8.29",
            key: "f1t5jc"
        }
    ],
    [
        "path",
        {
            d: "M13.83 16A5.83 5.83 0 0 0 8 10.17V16h5.83Z",
            key: "7q54ec"
        }
    ]
]);
var filePieChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FilePieChart
});
const FilePlus2 = createLucideIcon("FilePlus2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M3 15h6",
            key: "4e2qda"
        }
    ],
    [
        "path",
        {
            d: "M6 12v6",
            key: "1u72j0"
        }
    ]
]);
var filePlus2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FilePlus2
});
const FilePlus = createLucideIcon("FilePlus", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "18",
            y2: "12",
            key: "1tsf04"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "15",
            y2: "15",
            key: "110plj"
        }
    ]
]);
var filePlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FilePlus
});
const FileQuestion = createLucideIcon("FileQuestion", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "path",
        {
            d: "M10 10.3c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
            key: "1umxtm"
        }
    ],
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ]
]);
var fileQuestion = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileQuestion
});
const FileScan = createLucideIcon("FileScan", [
    [
        "path",
        {
            d: "M20 10V7.5L14.5 2H6a2 2 0 0 0-2 2v16c0 1.1.9 2 2 2h4.5",
            key: "uvikde"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M16 22a2 2 0 0 1-2-2",
            key: "1wqh5n"
        }
    ],
    [
        "path",
        {
            d: "M20 22a2 2 0 0 0 2-2",
            key: "1l9q4k"
        }
    ],
    [
        "path",
        {
            d: "M20 14a2 2 0 0 1 2 2",
            key: "1ny6zw"
        }
    ],
    [
        "path",
        {
            d: "M16 14a2 2 0 0 0-2 2",
            key: "ceaadl"
        }
    ]
]);
var fileScan = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileScan
});
const FileSearch2 = createLucideIcon("FileSearch2", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "circle",
        {
            cx: "11.5",
            cy: "14.5",
            r: "2.5",
            key: "1bq0ko"
        }
    ],
    [
        "path",
        {
            d: "M13.25 16.25 15 18",
            key: "9eh8bj"
        }
    ]
]);
var fileSearch2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileSearch2
});
const FileSearch = createLucideIcon("FileSearch", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3",
            key: "am10z3"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z",
            key: "ychnub"
        }
    ],
    [
        "path",
        {
            d: "m9 18-1.5-1.5",
            key: "1j6qii"
        }
    ]
]);
var fileSearch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileSearch
});
const FileSignature = createLucideIcon("FileSignature", [
    [
        "path",
        {
            d: "M20 19.5v.5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h8.5L18 5.5",
            key: "kd5d3"
        }
    ],
    [
        "path",
        {
            d: "M8 18h1",
            key: "13wk12"
        }
    ],
    [
        "path",
        {
            d: "M18.42 9.61a2.1 2.1 0 1 1 2.97 2.97L16.95 17 13 18l.99-3.95 4.43-4.44Z",
            key: "johvi5"
        }
    ]
]);
var fileSignature = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileSignature
});
const FileSpreadsheet = createLucideIcon("FileSpreadsheet", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M8 13h2",
            key: "yr2amv"
        }
    ],
    [
        "path",
        {
            d: "M8 17h2",
            key: "2yhykz"
        }
    ],
    [
        "path",
        {
            d: "M14 13h2",
            key: "un5t4a"
        }
    ],
    [
        "path",
        {
            d: "M14 17h2",
            key: "10kma7"
        }
    ]
]);
var fileSpreadsheet = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileSpreadsheet
});
const FileStack = createLucideIcon("FileStack", [
    [
        "path",
        {
            d: "M16 2v5h5",
            key: "kt2in0"
        }
    ],
    [
        "path",
        {
            d: "M21 6v6.5c0 .8-.7 1.5-1.5 1.5h-7c-.8 0-1.5-.7-1.5-1.5v-9c0-.8.7-1.5 1.5-1.5H17l4 4z",
            key: "1km23n"
        }
    ],
    [
        "path",
        {
            d: "M7 8v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H15",
            key: "16874u"
        }
    ],
    [
        "path",
        {
            d: "M3 12v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H11",
            key: "k2ox98"
        }
    ]
]);
var fileStack = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileStack
});
const FileSymlink = createLucideIcon("FileSymlink", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v7",
            key: "138uzh"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m10 18 3-3-3-3",
            key: "18f6ys"
        }
    ],
    [
        "path",
        {
            d: "M4 18v-1a2 2 0 0 1 2-2h6",
            key: "5uz2rn"
        }
    ]
]);
var fileSymlink = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileSymlink
});
const FileTerminal = createLucideIcon("FileTerminal", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m8 16 2-2-2-2",
            key: "10vzyd"
        }
    ],
    [
        "path",
        {
            d: "M12 18h4",
            key: "1wd2n7"
        }
    ]
]);
var fileTerminal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileTerminal
});
const FileText = createLucideIcon("FileText", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "8",
            y1: "13",
            y2: "13",
            key: "14keom"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "8",
            y1: "17",
            y2: "17",
            key: "17nazh"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "8",
            y1: "9",
            y2: "9",
            key: "1a5vjj"
        }
    ]
]);
var fileText = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileText
});
const FileType2 = createLucideIcon("FileType2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M2 13v-1h6v1",
            key: "1dh9dg"
        }
    ],
    [
        "path",
        {
            d: "M4 18h2",
            key: "1xrofg"
        }
    ],
    [
        "path",
        {
            d: "M5 12v6",
            key: "150t9c"
        }
    ]
]);
var fileType2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileType2
});
const FileType = createLucideIcon("FileType", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M9 13v-1h6v1",
            key: "1bb014"
        }
    ],
    [
        "path",
        {
            d: "M11 18h2",
            key: "12mj7e"
        }
    ],
    [
        "path",
        {
            d: "M12 12v6",
            key: "3ahymv"
        }
    ]
]);
var fileType = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileType
});
const FileUp = createLucideIcon("FileUp", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M12 12v6",
            key: "3ahymv"
        }
    ],
    [
        "path",
        {
            d: "m15 15-3-3-3 3",
            key: "15xj92"
        }
    ]
]);
var fileUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileUp
});
const FileVideo2 = createLucideIcon("FileVideo2", [
    [
        "path",
        {
            d: "M4 8V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4",
            key: "1nti49"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m10 15.5 4 2.5v-6l-4 2.5",
            key: "t7cp39"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "6",
            x: "2",
            y: "12",
            rx: "1",
            key: "1a6c1e"
        }
    ]
]);
var fileVideo2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileVideo2
});
const FileVideo = createLucideIcon("FileVideo", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m10 11 5 3-5 3v-6Z",
            key: "7ntvm4"
        }
    ]
]);
var fileVideo = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileVideo
});
const FileVolume2 = createLucideIcon("FileVolume2", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "M11.5 13.5c.32.4.5.94.5 1.5s-.18 1.1-.5 1.5",
            key: "joawwx"
        }
    ],
    [
        "path",
        {
            d: "M15 12c.64.8 1 1.87 1 3s-.36 2.2-1 3",
            key: "1f2wyw"
        }
    ],
    [
        "path",
        {
            d: "M8 15h.01",
            key: "a7atzg"
        }
    ]
]);
var fileVolume2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileVolume2
});
const FileVolume = createLucideIcon("FileVolume", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3",
            key: "am10z3"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "path",
        {
            d: "m7 10-3 2H2v4h2l3 2v-8Z",
            key: "tazg57"
        }
    ],
    [
        "path",
        {
            d: "M11 11c.64.8 1 1.87 1 3s-.36 2.2-1 3",
            key: "1yej3m"
        }
    ]
]);
var fileVolume = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileVolume
});
const FileWarning = createLucideIcon("FileWarning", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "path",
        {
            d: "M12 9v4",
            key: "juzpu7"
        }
    ],
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ]
]);
var fileWarning = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileWarning
});
const FileX2 = createLucideIcon("FileX2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
            key: "702lig"
        }
    ],
    [
        "path",
        {
            d: "M14 2v6h6",
            key: "1kof46"
        }
    ],
    [
        "path",
        {
            d: "m3 12.5 5 5",
            key: "1qls4r"
        }
    ],
    [
        "path",
        {
            d: "m8 12.5-5 5",
            key: "b853mi"
        }
    ]
]);
var fileX2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileX2
});
const FileX = createLucideIcon("FileX", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ],
    [
        "line",
        {
            x1: "9.5",
            x2: "14.5",
            y1: "12.5",
            y2: "17.5",
            key: "izs6du"
        }
    ],
    [
        "line",
        {
            x1: "14.5",
            x2: "9.5",
            y1: "12.5",
            y2: "17.5",
            key: "1lehlj"
        }
    ]
]);
var fileX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FileX
});
const File = createLucideIcon("File", [
    [
        "path",
        {
            d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
            key: "1nnpy2"
        }
    ],
    [
        "polyline",
        {
            points: "14 2 14 8 20 8",
            key: "1ew0cm"
        }
    ]
]);
var file = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: File
});
const Files = createLucideIcon("Files", [
    [
        "path",
        {
            d: "M15.5 2H8.6c-.4 0-.8.2-1.1.5-.3.3-.5.7-.5 1.1v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8c.4 0 .8-.2 1.1-.5.3-.3.5-.7.5-1.1V6.5L15.5 2z",
            key: "cennsq"
        }
    ],
    [
        "path",
        {
            d: "M3 7.6v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8",
            key: "ms809a"
        }
    ],
    [
        "path",
        {
            d: "M15 2v5h5",
            key: "qq6kwv"
        }
    ]
]);
var files = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Files
});
const Film = createLucideIcon("Film", [
    [
        "rect",
        {
            width: "20",
            height: "20",
            x: "2",
            y: "2",
            rx: "2.18",
            ry: "2.18",
            key: "vury4c"
        }
    ],
    [
        "line",
        {
            x1: "7",
            x2: "7",
            y1: "2",
            y2: "22",
            key: "t1e4qh"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "17",
            y1: "2",
            y2: "22",
            key: "1tliql"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1dnqot"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "7",
            y1: "7",
            y2: "7",
            key: "1wdzzh"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "7",
            y1: "17",
            y2: "17",
            key: "2fufxq"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "22",
            y1: "17",
            y2: "17",
            key: "1xg577"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "22",
            y1: "7",
            y2: "7",
            key: "acrv2l"
        }
    ]
]);
var film = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Film
});
const FilterX = createLucideIcon("FilterX", [
    [
        "path",
        {
            d: "M13.013 3H2l8 9.46V19l4 2v-8.54l.9-1.055",
            key: "1fi1da"
        }
    ],
    [
        "path",
        {
            d: "m22 3-5 5",
            key: "12jva0"
        }
    ],
    [
        "path",
        {
            d: "m17 3 5 5",
            key: "k36vhe"
        }
    ]
]);
var filterX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FilterX
});
const Filter = createLucideIcon("Filter", [
    [
        "polygon",
        {
            points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3",
            key: "1yg77f"
        }
    ]
]);
var filter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Filter
});
const Fingerprint = createLucideIcon("Fingerprint", [
    [
        "path",
        {
            d: "M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4",
            key: "1jc9o5"
        }
    ],
    [
        "path",
        {
            d: "M5 19.5C5.5 18 6 15 6 12c0-.7.12-1.37.34-2",
            key: "1mxgy1"
        }
    ],
    [
        "path",
        {
            d: "M17.29 21.02c.12-.6.43-2.3.5-3.02",
            key: "ptglia"
        }
    ],
    [
        "path",
        {
            d: "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4",
            key: "1nerag"
        }
    ],
    [
        "path",
        {
            d: "M8.65 22c.21-.66.45-1.32.57-2",
            key: "13wd9y"
        }
    ],
    [
        "path",
        {
            d: "M14 13.12c0 2.38 0 6.38-1 8.88",
            key: "o46ks0"
        }
    ],
    [
        "path",
        {
            d: "M2 16h.01",
            key: "1gqxmh"
        }
    ],
    [
        "path",
        {
            d: "M21.8 16c.2-2 .131-5.354 0-6",
            key: "drycrb"
        }
    ],
    [
        "path",
        {
            d: "M9 6.8a6 6 0 0 1 9 5.2c0 .47 0 1.17-.02 2",
            key: "1fgabc"
        }
    ]
]);
var fingerprint = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Fingerprint
});
const FishOff = createLucideIcon("FishOff", [
    [
        "path",
        {
            d: "M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058",
            key: "1j1hse"
        }
    ],
    [
        "path",
        {
            d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618",
            key: "1q46z8"
        }
    ],
    [
        "path",
        {
            d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20",
            key: "1407gh"
        }
    ]
]);
var fishOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FishOff
});
const Fish = createLucideIcon("Fish", [
    [
        "path",
        {
            d: "M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z",
            key: "15baut"
        }
    ],
    [
        "path",
        {
            d: "M18 12v.5",
            key: "18hhni"
        }
    ],
    [
        "path",
        {
            d: "M16 17.93a9.77 9.77 0 0 1 0-11.86",
            key: "16dt7o"
        }
    ],
    [
        "path",
        {
            d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33",
            key: "l9di03"
        }
    ],
    [
        "path",
        {
            d: "M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4",
            key: "1kjonw"
        }
    ],
    [
        "path",
        {
            d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98",
            key: "1zlm23"
        }
    ]
]);
var fish = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Fish
});
const FlagOff = createLucideIcon("FlagOff", [
    [
        "path",
        {
            d: "M8 2c3 0 5 2 8 2s4-1 4-1v11",
            key: "9rwyz9"
        }
    ],
    [
        "path",
        {
            d: "M4 22V4",
            key: "1plyxx"
        }
    ],
    [
        "path",
        {
            d: "M4 15s1-1 4-1 5 2 8 2",
            key: "1myooe"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var flagOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlagOff
});
const FlagTriangleLeft = createLucideIcon("FlagTriangleLeft", [
    [
        "path",
        {
            d: "M17 22V2L7 7l10 5",
            key: "1rmf0r"
        }
    ]
]);
var flagTriangleLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlagTriangleLeft
});
const FlagTriangleRight = createLucideIcon("FlagTriangleRight", [
    [
        "path",
        {
            d: "M7 22V2l10 5-10 5",
            key: "17n18y"
        }
    ]
]);
var flagTriangleRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlagTriangleRight
});
const Flag = createLucideIcon("Flag", [
    [
        "path",
        {
            d: "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z",
            key: "i9b6wo"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "4",
            y1: "22",
            y2: "15",
            key: "1cm3nv"
        }
    ]
]);
var flag = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Flag
});
const Flame = createLucideIcon("Flame", [
    [
        "path",
        {
            d: "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z",
            key: "96xj49"
        }
    ]
]);
var flame = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Flame
});
const FlashlightOff = createLucideIcon("FlashlightOff", [
    [
        "path",
        {
            d: "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4",
            key: "1r120k"
        }
    ],
    [
        "path",
        {
            d: "M7 2h11v4c0 2-2 2-2 4v1",
            key: "dz1920"
        }
    ],
    [
        "line",
        {
            x1: "11",
            x2: "18",
            y1: "6",
            y2: "6",
            key: "bi1vpe"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var flashlightOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlashlightOff
});
const Flashlight = createLucideIcon("Flashlight", [
    [
        "path",
        {
            d: "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z",
            key: "1orkel"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "18",
            y1: "6",
            y2: "6",
            key: "1z11jq"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "12",
            y2: "12",
            key: "1f4yc1"
        }
    ]
]);
var flashlight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Flashlight
});
const FlaskConicalOff = createLucideIcon("FlaskConicalOff", [
    [
        "path",
        {
            d: "M10 10 4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-1.272-2.542",
            key: "59ek9y"
        }
    ],
    [
        "path",
        {
            d: "M10 2v2.343",
            key: "15t272"
        }
    ],
    [
        "path",
        {
            d: "M14 2v6.343",
            key: "sxr80q"
        }
    ],
    [
        "path",
        {
            d: "M8.5 2h7",
            key: "csnxdl"
        }
    ],
    [
        "path",
        {
            d: "M7 16h9",
            key: "t5njau"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var flaskConicalOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlaskConicalOff
});
const FlaskConical = createLucideIcon("FlaskConical", [
    [
        "path",
        {
            d: "M10 2v7.527a2 2 0 0 1-.211.896L4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-5.069-10.127A2 2 0 0 1 14 9.527V2",
            key: "pzvekw"
        }
    ],
    [
        "path",
        {
            d: "M8.5 2h7",
            key: "csnxdl"
        }
    ],
    [
        "path",
        {
            d: "M7 16h10",
            key: "wp8him"
        }
    ]
]);
var flaskConical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlaskConical
});
const FlaskRound = createLucideIcon("FlaskRound", [
    [
        "path",
        {
            d: "M10 2v7.31",
            key: "5d1hyh"
        }
    ],
    [
        "path",
        {
            d: "M14 9.3V1.99",
            key: "14k4l0"
        }
    ],
    [
        "path",
        {
            d: "M8.5 2h7",
            key: "csnxdl"
        }
    ],
    [
        "path",
        {
            d: "M14 9.3a6.5 6.5 0 1 1-4 0",
            key: "1r8fvy"
        }
    ],
    [
        "path",
        {
            d: "M5.52 16h12.96",
            key: "46hh1i"
        }
    ]
]);
var flaskRound = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlaskRound
});
const FlipHorizontal2 = createLucideIcon("FlipHorizontal2", [
    [
        "path",
        {
            d: "m3 7 5 5-5 5V7",
            key: "couhi7"
        }
    ],
    [
        "path",
        {
            d: "m21 7-5 5 5 5V7",
            key: "6ouia7"
        }
    ],
    [
        "path",
        {
            d: "M12 20v2",
            key: "1lh1kg"
        }
    ],
    [
        "path",
        {
            d: "M12 14v2",
            key: "8jcxud"
        }
    ],
    [
        "path",
        {
            d: "M12 8v2",
            key: "1woqiv"
        }
    ],
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ]
]);
var flipHorizontal2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlipHorizontal2
});
const FlipHorizontal = createLucideIcon("FlipHorizontal", [
    [
        "path",
        {
            d: "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3",
            key: "1i73f7"
        }
    ],
    [
        "path",
        {
            d: "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3",
            key: "saxlbk"
        }
    ],
    [
        "path",
        {
            d: "M12 20v2",
            key: "1lh1kg"
        }
    ],
    [
        "path",
        {
            d: "M12 14v2",
            key: "8jcxud"
        }
    ],
    [
        "path",
        {
            d: "M12 8v2",
            key: "1woqiv"
        }
    ],
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ]
]);
var flipHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlipHorizontal
});
const FlipVertical2 = createLucideIcon("FlipVertical2", [
    [
        "path",
        {
            d: "m17 3-5 5-5-5h10",
            key: "1ftt6x"
        }
    ],
    [
        "path",
        {
            d: "m17 21-5-5-5 5h10",
            key: "1m0wmu"
        }
    ],
    [
        "path",
        {
            d: "M4 12H2",
            key: "rhcxmi"
        }
    ],
    [
        "path",
        {
            d: "M10 12H8",
            key: "s88cx1"
        }
    ],
    [
        "path",
        {
            d: "M16 12h-2",
            key: "10asgb"
        }
    ],
    [
        "path",
        {
            d: "M22 12h-2",
            key: "14jgyd"
        }
    ]
]);
var flipVertical2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlipVertical2
});
const FlipVertical = createLucideIcon("FlipVertical", [
    [
        "path",
        {
            d: "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3",
            key: "14bfxa"
        }
    ],
    [
        "path",
        {
            d: "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3",
            key: "14rx03"
        }
    ],
    [
        "path",
        {
            d: "M4 12H2",
            key: "rhcxmi"
        }
    ],
    [
        "path",
        {
            d: "M10 12H8",
            key: "s88cx1"
        }
    ],
    [
        "path",
        {
            d: "M16 12h-2",
            key: "10asgb"
        }
    ],
    [
        "path",
        {
            d: "M22 12h-2",
            key: "14jgyd"
        }
    ]
]);
var flipVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FlipVertical
});
const Flower2 = createLucideIcon("Flower2", [
    [
        "path",
        {
            d: "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1",
            key: "3pnvol"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "8",
            r: "2",
            key: "1822b1"
        }
    ],
    [
        "path",
        {
            d: "M12 10v12",
            key: "6ubwww"
        }
    ],
    [
        "path",
        {
            d: "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z",
            key: "9hd38g"
        }
    ],
    [
        "path",
        {
            d: "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z",
            key: "ufn41s"
        }
    ]
]);
var flower2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Flower2
});
const Flower = createLucideIcon("Flower", [
    [
        "path",
        {
            d: "M12 7.5a4.5 4.5 0 1 1 4.5 4.5M12 7.5A4.5 4.5 0 1 0 7.5 12M12 7.5V9m-4.5 3a4.5 4.5 0 1 0 4.5 4.5M7.5 12H9m7.5 0a4.5 4.5 0 1 1-4.5 4.5m4.5-4.5H15m-3 4.5V15",
            key: "51z86h"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ],
    [
        "path",
        {
            d: "m8 16 1.5-1.5",
            key: "ce6zph"
        }
    ],
    [
        "path",
        {
            d: "M14.5 9.5 16 8",
            key: "1kzrzb"
        }
    ],
    [
        "path",
        {
            d: "m8 8 1.5 1.5",
            key: "1yv88w"
        }
    ],
    [
        "path",
        {
            d: "M14.5 14.5 16 16",
            key: "12xhjh"
        }
    ]
]);
var flower = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Flower
});
const Focus = createLucideIcon("Focus", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ],
    [
        "path",
        {
            d: "M3 7V5a2 2 0 0 1 2-2h2",
            key: "aa7l1z"
        }
    ],
    [
        "path",
        {
            d: "M17 3h2a2 2 0 0 1 2 2v2",
            key: "4qcy5o"
        }
    ],
    [
        "path",
        {
            d: "M21 17v2a2 2 0 0 1-2 2h-2",
            key: "6vwrx8"
        }
    ],
    [
        "path",
        {
            d: "M7 21H5a2 2 0 0 1-2-2v-2",
            key: "ioqczr"
        }
    ]
]);
var focus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Focus
});
const FoldHorizontal = createLucideIcon("FoldHorizontal", [
    [
        "path",
        {
            d: "M2 12h6",
            key: "1wqiqv"
        }
    ],
    [
        "path",
        {
            d: "M22 12h-6",
            key: "1eg9hc"
        }
    ],
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ],
    [
        "path",
        {
            d: "M12 8v2",
            key: "1woqiv"
        }
    ],
    [
        "path",
        {
            d: "M12 14v2",
            key: "8jcxud"
        }
    ],
    [
        "path",
        {
            d: "M12 20v2",
            key: "1lh1kg"
        }
    ],
    [
        "path",
        {
            d: "m19 9-3 3 3 3",
            key: "12ol22"
        }
    ],
    [
        "path",
        {
            d: "m5 15 3-3-3-3",
            key: "1kdhjc"
        }
    ]
]);
var foldHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FoldHorizontal
});
const FoldVertical = createLucideIcon("FoldVertical", [
    [
        "path",
        {
            d: "M12 22v-6",
            key: "6o8u61"
        }
    ],
    [
        "path",
        {
            d: "M12 8V2",
            key: "1wkif3"
        }
    ],
    [
        "path",
        {
            d: "M4 12H2",
            key: "rhcxmi"
        }
    ],
    [
        "path",
        {
            d: "M10 12H8",
            key: "s88cx1"
        }
    ],
    [
        "path",
        {
            d: "M16 12h-2",
            key: "10asgb"
        }
    ],
    [
        "path",
        {
            d: "M22 12h-2",
            key: "14jgyd"
        }
    ],
    [
        "path",
        {
            d: "m15 19-3-3-3 3",
            key: "e37ymu"
        }
    ],
    [
        "path",
        {
            d: "m15 5-3 3-3-3",
            key: "19d6lf"
        }
    ]
]);
var foldVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FoldVertical
});
const FolderArchive = createLucideIcon("FolderArchive", [
    [
        "path",
        {
            d: "M22 20V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h6",
            key: "1l0vpk"
        }
    ],
    [
        "circle",
        {
            cx: "16",
            cy: "19",
            r: "2",
            key: "1uwppb"
        }
    ],
    [
        "path",
        {
            d: "M16 11v-1",
            key: "eoyjtm"
        }
    ],
    [
        "path",
        {
            d: "M16 17v-2",
            key: "1xp69b"
        }
    ]
]);
var folderArchive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderArchive
});
const FolderCheck = createLucideIcon("FolderCheck", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "path",
        {
            d: "m9 13 2 2 4-4",
            key: "6343dt"
        }
    ]
]);
var folderCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderCheck
});
const FolderClock = createLucideIcon("FolderClock", [
    [
        "path",
        {
            d: "M7 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2",
            key: "1p0xo9"
        }
    ],
    [
        "circle",
        {
            cx: "16",
            cy: "16",
            r: "6",
            key: "qoo3c4"
        }
    ],
    [
        "path",
        {
            d: "M16 14v2l1 1",
            key: "xth2jh"
        }
    ]
]);
var folderClock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderClock
});
const FolderClosed = createLucideIcon("FolderClosed", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "path",
        {
            d: "M2 10h20",
            key: "1ir3d8"
        }
    ]
]);
var folderClosed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderClosed
});
const FolderCog2 = createLucideIcon("FolderCog2", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "2",
            key: "1c1ljs"
        }
    ],
    [
        "path",
        {
            d: "M12 10v1",
            key: "ngorzm"
        }
    ],
    [
        "path",
        {
            d: "M12 15v1",
            key: "1ovrzm"
        }
    ],
    [
        "path",
        {
            d: "m14.6 11.5-.87.5",
            key: "zm6w6e"
        }
    ],
    [
        "path",
        {
            d: "m10.27 14-.87.5",
            key: "idea33"
        }
    ],
    [
        "path",
        {
            d: "m14.6 14.5-.87-.5",
            key: "1ii18h"
        }
    ],
    [
        "path",
        {
            d: "m10.27 12-.87-.5",
            key: "tf2vd0"
        }
    ]
]);
var folderCog2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderCog2
});
const FolderCog = createLucideIcon("FolderCog", [
    [
        "path",
        {
            d: "M10.5 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v3",
            key: "1g1zaq"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "18",
            r: "3",
            key: "1xkwt0"
        }
    ],
    [
        "path",
        {
            d: "M18 14v1",
            key: "1sx9hk"
        }
    ],
    [
        "path",
        {
            d: "M18 21v1",
            key: "pviwm2"
        }
    ],
    [
        "path",
        {
            d: "M22 18h-1",
            key: "phgwqy"
        }
    ],
    [
        "path",
        {
            d: "M15 18h-1",
            key: "1v9fvv"
        }
    ],
    [
        "path",
        {
            d: "m21 15-.88.88",
            key: "13nfy4"
        }
    ],
    [
        "path",
        {
            d: "M15.88 20.12 15 21",
            key: "qplfkl"
        }
    ],
    [
        "path",
        {
            d: "m21 21-.88-.88",
            key: "1ryrr1"
        }
    ],
    [
        "path",
        {
            d: "M15.88 15.88 15 15",
            key: "4terp3"
        }
    ]
]);
var folderCog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderCog
});
const FolderDot = createLucideIcon("FolderDot", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "1",
            key: "49l61u"
        }
    ]
]);
var folderDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderDot
});
const FolderDown = createLucideIcon("FolderDown", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "path",
        {
            d: "M12 10v6",
            key: "1bos4e"
        }
    ],
    [
        "path",
        {
            d: "m15 13-3 3-3-3",
            key: "6j2sf0"
        }
    ]
]);
var folderDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderDown
});
const FolderEdit = createLucideIcon("FolderEdit", [
    [
        "path",
        {
            d: "M8.42 10.61a2.1 2.1 0 1 1 2.97 2.97L5.95 19 2 20l.99-3.95 5.43-5.44Z",
            key: "o1ah0z"
        }
    ],
    [
        "path",
        {
            d: "M2 11.5V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5",
            key: "bim890"
        }
    ]
]);
var folderEdit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderEdit
});
const FolderGit2 = createLucideIcon("FolderGit2", [
    [
        "path",
        {
            d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5",
            key: "1w6njk"
        }
    ],
    [
        "circle",
        {
            cx: "13",
            cy: "12",
            r: "2",
            key: "1j92g6"
        }
    ],
    [
        "path",
        {
            d: "M18 19c-2.8 0-5-2.2-5-5v8",
            key: "pkpw2h"
        }
    ],
    [
        "circle",
        {
            cx: "20",
            cy: "19",
            r: "2",
            key: "1obnsp"
        }
    ]
]);
var folderGit2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderGit2
});
const FolderGit = createLucideIcon("FolderGit", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "2",
            key: "1c1ljs"
        }
    ],
    [
        "path",
        {
            d: "M14 13h3",
            key: "1dgedf"
        }
    ],
    [
        "path",
        {
            d: "M7 13h3",
            key: "1pygq7"
        }
    ]
]);
var folderGit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderGit
});
const FolderHeart = createLucideIcon("FolderHeart", [
    [
        "path",
        {
            d: "M11 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v1.5",
            key: "zoglpu"
        }
    ],
    [
        "path",
        {
            d: "M21.29 13.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 21l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
            key: "2tfff6"
        }
    ]
]);
var folderHeart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderHeart
});
const FolderInput = createLucideIcon("FolderInput", [
    [
        "path",
        {
            d: "M2 9V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1",
            key: "1gu97c"
        }
    ],
    [
        "path",
        {
            d: "M2 13h10",
            key: "pgb2dq"
        }
    ],
    [
        "path",
        {
            d: "m9 16 3-3-3-3",
            key: "6m91ic"
        }
    ]
]);
var folderInput = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderInput
});
const FolderKanban = createLucideIcon("FolderKanban", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "path",
        {
            d: "M8 10v4",
            key: "tgpxqk"
        }
    ],
    [
        "path",
        {
            d: "M12 10v2",
            key: "hh53o1"
        }
    ],
    [
        "path",
        {
            d: "M16 10v6",
            key: "1d6xys"
        }
    ]
]);
var folderKanban = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderKanban
});
const FolderKey = createLucideIcon("FolderKey", [
    [
        "path",
        {
            d: "M10 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v2",
            key: "203odn"
        }
    ],
    [
        "circle",
        {
            cx: "16",
            cy: "20",
            r: "2",
            key: "1vifvg"
        }
    ],
    [
        "path",
        {
            d: "m22 14-4.5 4.5",
            key: "1ef6z8"
        }
    ],
    [
        "path",
        {
            d: "m21 15 1 1",
            key: "1ejcpy"
        }
    ]
]);
var folderKey = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderKey
});
const FolderLock = createLucideIcon("FolderLock", [
    [
        "path",
        {
            d: "M10 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v2.5",
            key: "1ivsx8"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "5",
            x: "14",
            y: "17",
            rx: "1",
            key: "19aais"
        }
    ],
    [
        "path",
        {
            d: "M20 17v-2a2 2 0 1 0-4 0v2",
            key: "pwaxnr"
        }
    ]
]);
var folderLock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderLock
});
const FolderMinus = createLucideIcon("FolderMinus", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "13",
            y2: "13",
            key: "10hoct"
        }
    ]
]);
var folderMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderMinus
});
const FolderOpenDot = createLucideIcon("FolderOpenDot", [
    [
        "path",
        {
            d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2",
            key: "1nmvlm"
        }
    ],
    [
        "circle",
        {
            cx: "14",
            cy: "15",
            r: "1",
            key: "1gm4qj"
        }
    ]
]);
var folderOpenDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderOpenDot
});
const FolderOpen = createLucideIcon("FolderOpen", [
    [
        "path",
        {
            d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2",
            key: "1nmvlm"
        }
    ]
]);
var folderOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderOpen
});
const FolderOutput = createLucideIcon("FolderOutput", [
    [
        "path",
        {
            d: "M2 7.5V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2",
            key: "jm8npq"
        }
    ],
    [
        "path",
        {
            d: "M2 13h10",
            key: "pgb2dq"
        }
    ],
    [
        "path",
        {
            d: "m5 10-3 3 3 3",
            key: "1r8ie0"
        }
    ]
]);
var folderOutput = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderOutput
});
const FolderPlus = createLucideIcon("FolderPlus", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "10",
            y2: "16",
            key: "3c25pp"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "13",
            y2: "13",
            key: "10hoct"
        }
    ]
]);
var folderPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderPlus
});
const FolderRoot = createLucideIcon("FolderRoot", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "13",
            r: "2",
            key: "1c1ljs"
        }
    ],
    [
        "path",
        {
            d: "M12 15v5",
            key: "11xva1"
        }
    ]
]);
var folderRoot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderRoot
});
const FolderSearch2 = createLucideIcon("FolderSearch2", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "circle",
        {
            cx: "11.5",
            cy: "12.5",
            r: "2.5",
            key: "1ea5ju"
        }
    ],
    [
        "path",
        {
            d: "M13.27 14.27 15 16",
            key: "5hsvtf"
        }
    ]
]);
var folderSearch2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderSearch2
});
const FolderSearch = createLucideIcon("FolderSearch", [
    [
        "path",
        {
            d: "M11 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v4",
            key: "1moo03"
        }
    ],
    [
        "circle",
        {
            cx: "17",
            cy: "17",
            r: "3",
            key: "18b49y"
        }
    ],
    [
        "path",
        {
            d: "m21 21-1.5-1.5",
            key: "3sg1j"
        }
    ]
]);
var folderSearch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderSearch
});
const FolderSymlink = createLucideIcon("FolderSymlink", [
    [
        "path",
        {
            d: "M2 9V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2",
            key: "1or2t8"
        }
    ],
    [
        "path",
        {
            d: "m8 16 3-3-3-3",
            key: "rlqrt1"
        }
    ],
    [
        "path",
        {
            d: "M2 16v-1a2 2 0 0 1 2-2h6",
            key: "pgw8ln"
        }
    ]
]);
var folderSymlink = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderSymlink
});
const FolderSync = createLucideIcon("FolderSync", [
    [
        "path",
        {
            d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v1",
            key: "1rkwto"
        }
    ],
    [
        "path",
        {
            d: "M12 10v4h4",
            key: "1czhmt"
        }
    ],
    [
        "path",
        {
            d: "m12 14 1.5-1.5c.9-.9 2.2-1.5 3.5-1.5s2.6.6 3.5 1.5c.4.4.8 1 1 1.5",
            key: "25wejs"
        }
    ],
    [
        "path",
        {
            d: "M22 22v-4h-4",
            key: "1ewp4q"
        }
    ],
    [
        "path",
        {
            d: "m22 18-1.5 1.5c-.9.9-2.1 1.5-3.5 1.5s-2.6-.6-3.5-1.5c-.4-.4-.8-1-1-1.5",
            key: "vlp1j8"
        }
    ]
]);
var folderSync = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderSync
});
const FolderTree = createLucideIcon("FolderTree", [
    [
        "path",
        {
            d: "M13 10h7a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
            key: "10jzg2"
        }
    ],
    [
        "path",
        {
            d: "M13 21h7a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.88a1 1 0 0 1-.9-.55l-.44-.9a1 1 0 0 0-.9-.55H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
            key: "1b9nqm"
        }
    ],
    [
        "path",
        {
            d: "M3 3v2c0 1.1.9 2 2 2h3",
            key: "1wqwis"
        }
    ],
    [
        "path",
        {
            d: "M3 3v13c0 1.1.9 2 2 2h3",
            key: "1bqeom"
        }
    ]
]);
var folderTree = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderTree
});
const FolderUp = createLucideIcon("FolderUp", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "path",
        {
            d: "M12 10v6",
            key: "1bos4e"
        }
    ],
    [
        "path",
        {
            d: "m9 13 3-3 3 3",
            key: "1pxg3c"
        }
    ]
]);
var folderUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderUp
});
const FolderX = createLucideIcon("FolderX", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ],
    [
        "path",
        {
            d: "m9.5 10.5 5 5",
            key: "ra9qjz"
        }
    ],
    [
        "path",
        {
            d: "m14.5 10.5-5 5",
            key: "l2rkpq"
        }
    ]
]);
var folderX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FolderX
});
const Folder = createLucideIcon("Folder", [
    [
        "path",
        {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
        }
    ]
]);
var folder = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Folder
});
const Folders = createLucideIcon("Folders", [
    [
        "path",
        {
            d: "M8 17h12a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.93a2 2 0 0 1-1.66-.9l-.82-1.2a2 2 0 0 0-1.66-.9H8a2 2 0 0 0-2 2v9c0 1.1.9 2 2 2Z",
            key: "1aska4"
        }
    ],
    [
        "path",
        {
            d: "M2 8v11c0 1.1.9 2 2 2h14",
            key: "n13cji"
        }
    ]
]);
var folders = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Folders
});
const Footprints = createLucideIcon("Footprints", [
    [
        "path",
        {
            d: "M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z",
            key: "1dudjm"
        }
    ],
    [
        "path",
        {
            d: "M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z",
            key: "l2t8xc"
        }
    ],
    [
        "path",
        {
            d: "M16 17h4",
            key: "1dejxt"
        }
    ],
    [
        "path",
        {
            d: "M4 13h4",
            key: "1bwh8b"
        }
    ]
]);
var footprints = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Footprints
});
const Forklift = createLucideIcon("Forklift", [
    [
        "path",
        {
            d: "M12 12H5a2 2 0 0 0-2 2v5",
            key: "7zsz91"
        }
    ],
    [
        "circle",
        {
            cx: "13",
            cy: "19",
            r: "2",
            key: "wjnkru"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "19",
            r: "2",
            key: "v8kfzx"
        }
    ],
    [
        "path",
        {
            d: "M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5",
            key: "13bk1p"
        }
    ]
]);
var forklift = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Forklift
});
const FormInput = createLucideIcon("FormInput", [
    [
        "rect",
        {
            width: "20",
            height: "12",
            x: "2",
            y: "6",
            rx: "2",
            key: "9lu3g6"
        }
    ],
    [
        "path",
        {
            d: "M12 12h.01",
            key: "1mp3jc"
        }
    ],
    [
        "path",
        {
            d: "M17 12h.01",
            key: "1m0b6t"
        }
    ],
    [
        "path",
        {
            d: "M7 12h.01",
            key: "eqddd0"
        }
    ]
]);
var formInput = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FormInput
});
const Forward = createLucideIcon("Forward", [
    [
        "polyline",
        {
            points: "15 17 20 12 15 7",
            key: "1w3sku"
        }
    ],
    [
        "path",
        {
            d: "M4 18v-2a4 4 0 0 1 4-4h12",
            key: "jmiej9"
        }
    ]
]);
var forward = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Forward
});
const Frame = createLucideIcon("Frame", [
    [
        "line",
        {
            x1: "22",
            x2: "2",
            y1: "6",
            y2: "6",
            key: "15w7dq"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "2",
            y1: "18",
            y2: "18",
            key: "1ip48p"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "2",
            y2: "22",
            key: "a2lnyx"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "18",
            y1: "2",
            y2: "22",
            key: "8vb6jd"
        }
    ]
]);
var frame = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Frame
});
const Framer = createLucideIcon("Framer", [
    [
        "path",
        {
            d: "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7",
            key: "1a2nng"
        }
    ]
]);
var framer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Framer
});
const Frown = createLucideIcon("Frown", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M16 16s-1.5-2-4-2-4 2-4 2",
            key: "epbg0q"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9.01",
            y1: "9",
            y2: "9",
            key: "yxxnd0"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "9",
            y2: "9",
            key: "1p4y9e"
        }
    ]
]);
var frown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Frown
});
const Fuel = createLucideIcon("Fuel", [
    [
        "line",
        {
            x1: "3",
            x2: "15",
            y1: "22",
            y2: "22",
            key: "xegly4"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "14",
            y1: "9",
            y2: "9",
            key: "xcnuvu"
        }
    ],
    [
        "path",
        {
            d: "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18",
            key: "16j0yd"
        }
    ],
    [
        "path",
        {
            d: "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2h0a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5",
            key: "8ur5zv"
        }
    ]
]);
var fuel = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Fuel
});
const FunctionSquare = createLucideIcon("FunctionSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3",
            key: "m1af9g"
        }
    ],
    [
        "path",
        {
            d: "M9 11.2h5.7",
            key: "3zgcl2"
        }
    ]
]);
var functionSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: FunctionSquare
});
const GalleryHorizontalEnd = createLucideIcon("GalleryHorizontalEnd", [
    [
        "path",
        {
            d: "M2 7v10",
            key: "a2pl2d"
        }
    ],
    [
        "path",
        {
            d: "M6 5v14",
            key: "1kq3d7"
        }
    ],
    [
        "rect",
        {
            width: "12",
            height: "18",
            x: "10",
            y: "3",
            rx: "2",
            key: "13i7bc"
        }
    ]
]);
var galleryHorizontalEnd = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GalleryHorizontalEnd
});
const GalleryHorizontal = createLucideIcon("GalleryHorizontal", [
    [
        "path",
        {
            d: "M2 3v18",
            key: "pzttux"
        }
    ],
    [
        "rect",
        {
            width: "12",
            height: "18",
            x: "6",
            y: "3",
            rx: "2",
            key: "btr8bg"
        }
    ],
    [
        "path",
        {
            d: "M22 3v18",
            key: "6jf3v"
        }
    ]
]);
var galleryHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GalleryHorizontal
});
const GalleryThumbnails = createLucideIcon("GalleryThumbnails", [
    [
        "rect",
        {
            width: "18",
            height: "14",
            x: "3",
            y: "3",
            rx: "2",
            key: "74y24f"
        }
    ],
    [
        "path",
        {
            d: "M4 21h1",
            key: "16zlid"
        }
    ],
    [
        "path",
        {
            d: "M9 21h1",
            key: "15o7lz"
        }
    ],
    [
        "path",
        {
            d: "M14 21h1",
            key: "v9vybs"
        }
    ],
    [
        "path",
        {
            d: "M19 21h1",
            key: "edywat"
        }
    ]
]);
var galleryThumbnails = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GalleryThumbnails
});
const GalleryVerticalEnd = createLucideIcon("GalleryVerticalEnd", [
    [
        "path",
        {
            d: "M7 2h10",
            key: "nczekb"
        }
    ],
    [
        "path",
        {
            d: "M5 6h14",
            key: "u2x4p"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "12",
            x: "3",
            y: "10",
            rx: "2",
            key: "l0tzu3"
        }
    ]
]);
var galleryVerticalEnd = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GalleryVerticalEnd
});
const GalleryVertical = createLucideIcon("GalleryVertical", [
    [
        "path",
        {
            d: "M3 2h18",
            key: "15qxfx"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "12",
            x: "3",
            y: "6",
            rx: "2",
            key: "1439r6"
        }
    ],
    [
        "path",
        {
            d: "M3 22h18",
            key: "8prr45"
        }
    ]
]);
var galleryVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GalleryVertical
});
const Gamepad2 = createLucideIcon("Gamepad2", [
    [
        "line",
        {
            x1: "6",
            x2: "10",
            y1: "11",
            y2: "11",
            key: "1gktln"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "9",
            y2: "13",
            key: "qnk9ow"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "12",
            y2: "12",
            key: "krot7o"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "18.01",
            y1: "10",
            y2: "10",
            key: "1lcuu1"
        }
    ],
    [
        "path",
        {
            d: "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z",
            key: "mfqc10"
        }
    ]
]);
var gamepad2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Gamepad2
});
const Gamepad = createLucideIcon("Gamepad", [
    [
        "line",
        {
            x1: "6",
            x2: "10",
            y1: "12",
            y2: "12",
            key: "161bw2"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "10",
            y2: "14",
            key: "1i6ji0"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "13",
            y2: "13",
            key: "dqpgro"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "18.01",
            y1: "11",
            y2: "11",
            key: "meh2c"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "12",
            x: "2",
            y: "6",
            rx: "2",
            key: "9lu3g6"
        }
    ]
]);
var gamepad = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Gamepad
});
const GanttChartSquare = createLucideIcon("GanttChartSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M9 8h7",
            key: "kbo1nt"
        }
    ],
    [
        "path",
        {
            d: "M8 12h6",
            key: "ikassy"
        }
    ],
    [
        "path",
        {
            d: "M11 16h5",
            key: "oq65wt"
        }
    ]
]);
var ganttChartSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GanttChartSquare
});
const GanttChart = createLucideIcon("GanttChart", [
    [
        "path",
        {
            d: "M8 6h10",
            key: "9lnwnk"
        }
    ],
    [
        "path",
        {
            d: "M6 12h9",
            key: "1g9pqf"
        }
    ],
    [
        "path",
        {
            d: "M11 18h7",
            key: "c8dzvl"
        }
    ]
]);
var ganttChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GanttChart
});
const GaugeCircle = createLucideIcon("GaugeCircle", [
    [
        "path",
        {
            d: "M15.6 2.7a10 10 0 1 0 5.7 5.7",
            key: "1e0p6d"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ],
    [
        "path",
        {
            d: "M13.4 10.6 19 5",
            key: "1kr7tw"
        }
    ]
]);
var gaugeCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GaugeCircle
});
const Gauge = createLucideIcon("Gauge", [
    [
        "path",
        {
            d: "m12 14 4-4",
            key: "9kzdfg"
        }
    ],
    [
        "path",
        {
            d: "M3.34 19a10 10 0 1 1 17.32 0",
            key: "19p75a"
        }
    ]
]);
var gauge = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Gauge
});
const Gavel = createLucideIcon("Gavel", [
    [
        "path",
        {
            d: "m14 13-7.5 7.5c-.83.83-2.17.83-3 0 0 0 0 0 0 0a2.12 2.12 0 0 1 0-3L11 10",
            key: "c9cbz0"
        }
    ],
    [
        "path",
        {
            d: "m16 16 6-6",
            key: "vzrcl6"
        }
    ],
    [
        "path",
        {
            d: "m8 8 6-6",
            key: "18bi4p"
        }
    ],
    [
        "path",
        {
            d: "m9 7 8 8",
            key: "5jnvq1"
        }
    ],
    [
        "path",
        {
            d: "m21 11-8-8",
            key: "z4y7zo"
        }
    ]
]);
var gavel = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Gavel
});
const Gem = createLucideIcon("Gem", [
    [
        "path",
        {
            d: "M6 3h12l4 6-10 13L2 9Z",
            key: "1pcd5k"
        }
    ],
    [
        "path",
        {
            d: "M11 3 8 9l4 13 4-13-3-6",
            key: "1fcu3u"
        }
    ],
    [
        "path",
        {
            d: "M2 9h20",
            key: "16fsjt"
        }
    ]
]);
var gem = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Gem
});
const Ghost = createLucideIcon("Ghost", [
    [
        "path",
        {
            d: "M9 10h.01",
            key: "qbtxuw"
        }
    ],
    [
        "path",
        {
            d: "M15 10h.01",
            key: "1qmjsl"
        }
    ],
    [
        "path",
        {
            d: "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z",
            key: "uwwb07"
        }
    ]
]);
var ghost = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ghost
});
const Gift = createLucideIcon("Gift", [
    [
        "polyline",
        {
            points: "20 12 20 22 4 22 4 12",
            key: "nda8fc"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "5",
            x: "2",
            y: "7",
            key: "wkgdzj"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "7",
            key: "1n8zgp"
        }
    ],
    [
        "path",
        {
            d: "M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z",
            key: "zighg4"
        }
    ],
    [
        "path",
        {
            d: "M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z",
            key: "1pa5tk"
        }
    ]
]);
var gift = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Gift
});
const GitBranchPlus = createLucideIcon("GitBranchPlus", [
    [
        "path",
        {
            d: "M6 3v12",
            key: "qpgusn"
        }
    ],
    [
        "path",
        {
            d: "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z",
            key: "1d02ji"
        }
    ],
    [
        "path",
        {
            d: "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z",
            key: "chk6ph"
        }
    ],
    [
        "path",
        {
            d: "M15 6a9 9 0 0 0-9 9",
            key: "or332x"
        }
    ],
    [
        "path",
        {
            d: "M18 15v6",
            key: "9wciyi"
        }
    ],
    [
        "path",
        {
            d: "M21 18h-6",
            key: "139f0c"
        }
    ]
]);
var gitBranchPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitBranchPlus
});
const GitBranch = createLucideIcon("GitBranch", [
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "3",
            y2: "15",
            key: "17qcm7"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "6",
            r: "3",
            key: "1h7g24"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "18",
            r: "3",
            key: "fqmcym"
        }
    ],
    [
        "path",
        {
            d: "M18 9a9 9 0 0 1-9 9",
            key: "n2h4wq"
        }
    ]
]);
var gitBranch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitBranch
});
const GitCommit = createLucideIcon("GitCommit", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "9",
            y1: "12",
            y2: "12",
            key: "1dyftd"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "21",
            y1: "12",
            y2: "12",
            key: "oup4p8"
        }
    ]
]);
var gitCommit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitCommit
});
const GitCompare = createLucideIcon("GitCompare", [
    [
        "circle",
        {
            cx: "18",
            cy: "18",
            r: "3",
            key: "1xkwt0"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "6",
            r: "3",
            key: "1lh9wr"
        }
    ],
    [
        "path",
        {
            d: "M13 6h3a2 2 0 0 1 2 2v7",
            key: "1yeb86"
        }
    ],
    [
        "path",
        {
            d: "M11 18H8a2 2 0 0 1-2-2V9",
            key: "19pyzm"
        }
    ]
]);
var gitCompare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitCompare
});
const GitFork = createLucideIcon("GitFork", [
    [
        "circle",
        {
            cx: "12",
            cy: "18",
            r: "3",
            key: "1mpf1b"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "6",
            r: "3",
            key: "1lh9wr"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "6",
            r: "3",
            key: "1h7g24"
        }
    ],
    [
        "path",
        {
            d: "M18 9v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V9",
            key: "c89w8i"
        }
    ],
    [
        "path",
        {
            d: "M12 12v3",
            key: "158kv8"
        }
    ]
]);
var gitFork = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitFork
});
const GitMerge = createLucideIcon("GitMerge", [
    [
        "circle",
        {
            cx: "18",
            cy: "18",
            r: "3",
            key: "1xkwt0"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "6",
            r: "3",
            key: "1lh9wr"
        }
    ],
    [
        "path",
        {
            d: "M6 21V9a9 9 0 0 0 9 9",
            key: "7kw0sc"
        }
    ]
]);
var gitMerge = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitMerge
});
const GitPullRequestClosed = createLucideIcon("GitPullRequestClosed", [
    [
        "circle",
        {
            cx: "18",
            cy: "18",
            r: "3",
            key: "1xkwt0"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "6",
            r: "3",
            key: "1lh9wr"
        }
    ],
    [
        "path",
        {
            d: "M18 11.5V15",
            key: "65xf6f"
        }
    ],
    [
        "path",
        {
            d: "m21 3-6 6",
            key: "16nqsk"
        }
    ],
    [
        "path",
        {
            d: "m21 9-6-6",
            key: "9j17rh"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "9",
            y2: "21",
            key: "rroup"
        }
    ]
]);
var gitPullRequestClosed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitPullRequestClosed
});
const GitPullRequestDraft = createLucideIcon("GitPullRequestDraft", [
    [
        "circle",
        {
            cx: "18",
            cy: "18",
            r: "3",
            key: "1xkwt0"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "6",
            r: "3",
            key: "1lh9wr"
        }
    ],
    [
        "path",
        {
            d: "M18 6V5",
            key: "1oao2s"
        }
    ],
    [
        "path",
        {
            d: "M18 11v-1",
            key: "11c8tz"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "9",
            y2: "21",
            key: "rroup"
        }
    ]
]);
var gitPullRequestDraft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitPullRequestDraft
});
const GitPullRequest = createLucideIcon("GitPullRequest", [
    [
        "circle",
        {
            cx: "18",
            cy: "18",
            r: "3",
            key: "1xkwt0"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "6",
            r: "3",
            key: "1lh9wr"
        }
    ],
    [
        "path",
        {
            d: "M13 6h3a2 2 0 0 1 2 2v7",
            key: "1yeb86"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "9",
            y2: "21",
            key: "rroup"
        }
    ]
]);
var gitPullRequest = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GitPullRequest
});
const Github = createLucideIcon("Github", [
    [
        "path",
        {
            d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",
            key: "tonef"
        }
    ],
    [
        "path",
        {
            d: "M9 18c-4.51 2-5-2-7-2",
            key: "9comsn"
        }
    ]
]);
var github = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Github
});
const Gitlab = createLucideIcon("Gitlab", [
    [
        "path",
        {
            d: "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z",
            key: "148pdi"
        }
    ]
]);
var gitlab = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Gitlab
});
const GlassWater = createLucideIcon("GlassWater", [
    [
        "path",
        {
            d: "M15.2 22H8.8a2 2 0 0 1-2-1.79L5 3h14l-1.81 17.21A2 2 0 0 1 15.2 22Z",
            key: "48rfw3"
        }
    ],
    [
        "path",
        {
            d: "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0",
            key: "mjntcy"
        }
    ]
]);
var glassWater = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GlassWater
});
const Glasses = createLucideIcon("Glasses", [
    [
        "circle",
        {
            cx: "6",
            cy: "15",
            r: "4",
            key: "vux9w4"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "15",
            r: "4",
            key: "18o8ve"
        }
    ],
    [
        "path",
        {
            d: "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2",
            key: "1ag4bs"
        }
    ],
    [
        "path",
        {
            d: "M2.5 13 5 7c.7-1.3 1.4-2 3-2",
            key: "1hm1gs"
        }
    ],
    [
        "path",
        {
            d: "M21.5 13 19 7c-.7-1.3-1.5-2-3-2",
            key: "1r31ai"
        }
    ]
]);
var glasses = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Glasses
});
const Globe2 = createLucideIcon("Globe2", [
    [
        "path",
        {
            d: "M21.54 15H17a2 2 0 0 0-2 2v4.54",
            key: "1djwo0"
        }
    ],
    [
        "path",
        {
            d: "M7 3.34V5a3 3 0 0 0 3 3v0a2 2 0 0 1 2 2v0c0 1.1.9 2 2 2v0a2 2 0 0 0 2-2v0c0-1.1.9-2 2-2h3.17",
            key: "1fi5u6"
        }
    ],
    [
        "path",
        {
            d: "M11 21.95V18a2 2 0 0 0-2-2v0a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05",
            key: "xsiumc"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ]
]);
var globe2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Globe2
});
const Globe = createLucideIcon("Globe", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1dnqot"
        }
    ],
    [
        "path",
        {
            d: "M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z",
            key: "nb9nel"
        }
    ]
]);
var globe = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Globe
});
const Goal = createLucideIcon("Goal", [
    [
        "path",
        {
            d: "M12 13V2l8 4-8 4",
            key: "5wlwwj"
        }
    ],
    [
        "path",
        {
            d: "M20.55 10.23A9 9 0 1 1 8 4.94",
            key: "5988i3"
        }
    ],
    [
        "path",
        {
            d: "M8 10a5 5 0 1 0 8.9 2.02",
            key: "1hq7ot"
        }
    ]
]);
var goal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Goal
});
const Grab = createLucideIcon("Grab", [
    [
        "path",
        {
            d: "M18 11.5V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4",
            key: "n5nng"
        }
    ],
    [
        "path",
        {
            d: "M14 10V8a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2",
            key: "185i9d"
        }
    ],
    [
        "path",
        {
            d: "M10 9.9V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v5",
            key: "11pz95"
        }
    ],
    [
        "path",
        {
            d: "M6 14v0a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0",
            key: "16yk7l"
        }
    ],
    [
        "path",
        {
            d: "M18 11v0a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0",
            key: "nzvb1c"
        }
    ]
]);
var grab = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Grab
});
const GraduationCap = createLucideIcon("GraduationCap", [
    [
        "path",
        {
            d: "M22 10v6M2 10l10-5 10 5-10 5z",
            key: "1ef52a"
        }
    ],
    [
        "path",
        {
            d: "M6 12v5c3 3 9 3 12 0v-5",
            key: "1f75yj"
        }
    ]
]);
var graduationCap = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GraduationCap
});
const Grape = createLucideIcon("Grape", [
    [
        "path",
        {
            d: "M22 5V2l-5.89 5.89",
            key: "1eenpo"
        }
    ],
    [
        "circle",
        {
            cx: "16.6",
            cy: "15.89",
            r: "3",
            key: "xjtalx"
        }
    ],
    [
        "circle",
        {
            cx: "8.11",
            cy: "7.4",
            r: "3",
            key: "u2fv6i"
        }
    ],
    [
        "circle",
        {
            cx: "12.35",
            cy: "11.65",
            r: "3",
            key: "i6i8g7"
        }
    ],
    [
        "circle",
        {
            cx: "13.91",
            cy: "5.85",
            r: "3",
            key: "6ye0dv"
        }
    ],
    [
        "circle",
        {
            cx: "18.15",
            cy: "10.09",
            r: "3",
            key: "snx9no"
        }
    ],
    [
        "circle",
        {
            cx: "6.56",
            cy: "13.2",
            r: "3",
            key: "17x4xg"
        }
    ],
    [
        "circle",
        {
            cx: "10.8",
            cy: "17.44",
            r: "3",
            key: "1hogw9"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "19",
            r: "3",
            key: "1sn6vo"
        }
    ]
]);
var grape = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Grape
});
const Grid = createLucideIcon("Grid", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "9",
            y2: "9",
            key: "1vqk6q"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "15",
            y2: "15",
            key: "o2sbyz"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9",
            y1: "3",
            y2: "21",
            key: "13tij5"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15",
            y1: "3",
            y2: "21",
            key: "1hpv9i"
        }
    ]
]);
var grid = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Grid
});
const GripHorizontal = createLucideIcon("GripHorizontal", [
    [
        "circle",
        {
            cx: "12",
            cy: "9",
            r: "1",
            key: "124mty"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "9",
            r: "1",
            key: "1ruzo2"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "9",
            r: "1",
            key: "1a8b28"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "15",
            r: "1",
            key: "1e56xg"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "15",
            r: "1",
            key: "1a92ep"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "15",
            r: "1",
            key: "5r1jwy"
        }
    ]
]);
var gripHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GripHorizontal
});
const GripVertical = createLucideIcon("GripVertical", [
    [
        "circle",
        {
            cx: "9",
            cy: "12",
            r: "1",
            key: "1vctgf"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "5",
            r: "1",
            key: "hp0tcf"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "19",
            r: "1",
            key: "fkjjf6"
        }
    ],
    [
        "circle",
        {
            cx: "15",
            cy: "12",
            r: "1",
            key: "1tmaij"
        }
    ],
    [
        "circle",
        {
            cx: "15",
            cy: "5",
            r: "1",
            key: "19l28e"
        }
    ],
    [
        "circle",
        {
            cx: "15",
            cy: "19",
            r: "1",
            key: "f4zoj3"
        }
    ]
]);
var gripVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: GripVertical
});
const Grip = createLucideIcon("Grip", [
    [
        "circle",
        {
            cx: "12",
            cy: "5",
            r: "1",
            key: "gxeob9"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "5",
            r: "1",
            key: "w8mnmm"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "5",
            r: "1",
            key: "lttvr7"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "12",
            r: "1",
            key: "1wjl8i"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "12",
            r: "1",
            key: "1pcz8c"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "19",
            r: "1",
            key: "lyex9k"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "19",
            r: "1",
            key: "shf9b7"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "19",
            r: "1",
            key: "bfqh0e"
        }
    ]
]);
var grip = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Grip
});
const Group = createLucideIcon("Group", [
    [
        "path",
        {
            d: "M3 7V5c0-1.1.9-2 2-2h2",
            key: "adw53z"
        }
    ],
    [
        "path",
        {
            d: "M17 3h2c1.1 0 2 .9 2 2v2",
            key: "an4l38"
        }
    ],
    [
        "path",
        {
            d: "M21 17v2c0 1.1-.9 2-2 2h-2",
            key: "144t0e"
        }
    ],
    [
        "path",
        {
            d: "M7 21H5c-1.1 0-2-.9-2-2v-2",
            key: "rtnfgi"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "5",
            x: "7",
            y: "7",
            rx: "1",
            key: "1eyiv7"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "5",
            x: "10",
            y: "12",
            rx: "1",
            key: "1qlmkx"
        }
    ]
]);
var group = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Group
});
const Hammer = createLucideIcon("Hammer", [
    [
        "path",
        {
            d: "m15 12-8.5 8.5c-.83.83-2.17.83-3 0 0 0 0 0 0 0a2.12 2.12 0 0 1 0-3L12 9",
            key: "1afvon"
        }
    ],
    [
        "path",
        {
            d: "M17.64 15 22 10.64",
            key: "zsji6s"
        }
    ],
    [
        "path",
        {
            d: "m20.91 11.7-1.25-1.25c-.6-.6-.93-1.4-.93-2.25v-.86L16.01 4.6a5.56 5.56 0 0 0-3.94-1.64H9l.92.82A6.18 6.18 0 0 1 12 8.4v1.56l2 2h2.47l2.26 1.91",
            key: "lehyy1"
        }
    ]
]);
var hammer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Hammer
});
const HandMetal = createLucideIcon("HandMetal", [
    [
        "path",
        {
            d: "M18 12.5V10a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4",
            key: "7eki13"
        }
    ],
    [
        "path",
        {
            d: "M14 11V9a2 2 0 1 0-4 0v2",
            key: "94qvcw"
        }
    ],
    [
        "path",
        {
            d: "M10 10.5V5a2 2 0 1 0-4 0v9",
            key: "m1ah89"
        }
    ],
    [
        "path",
        {
            d: "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5",
            key: "t1skq1"
        }
    ]
]);
var handMetal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HandMetal
});
const Hand = createLucideIcon("Hand", [
    [
        "path",
        {
            d: "M18 11V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0",
            key: "aigmz7"
        }
    ],
    [
        "path",
        {
            d: "M14 10V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2",
            key: "1n6bmn"
        }
    ],
    [
        "path",
        {
            d: "M10 10.5V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v8",
            key: "a9iiix"
        }
    ],
    [
        "path",
        {
            d: "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
            key: "1s1gnw"
        }
    ]
]);
var hand = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Hand
});
const HardDrive = createLucideIcon("HardDrive", [
    [
        "line",
        {
            x1: "22",
            x2: "2",
            y1: "12",
            y2: "12",
            key: "1y58io"
        }
    ],
    [
        "path",
        {
            d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
            key: "oot6mr"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6.01",
            y1: "16",
            y2: "16",
            key: "sgf278"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10.01",
            y1: "16",
            y2: "16",
            key: "1l4acy"
        }
    ]
]);
var hardDrive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HardDrive
});
const HardHat = createLucideIcon("HardHat", [
    [
        "path",
        {
            d: "M2 18a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v2z",
            key: "1dej2m"
        }
    ],
    [
        "path",
        {
            d: "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5",
            key: "1p9q5i"
        }
    ],
    [
        "path",
        {
            d: "M4 15v-3a6 6 0 0 1 6-6h0",
            key: "1uc279"
        }
    ],
    [
        "path",
        {
            d: "M14 6h0a6 6 0 0 1 6 6v3",
            key: "1j9mnm"
        }
    ]
]);
var hardHat = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HardHat
});
const Hash = createLucideIcon("Hash", [
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "9",
            y2: "9",
            key: "4lhtct"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "15",
            y2: "15",
            key: "vyu0kd"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "8",
            y1: "3",
            y2: "21",
            key: "1ggp8o"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "14",
            y1: "3",
            y2: "21",
            key: "weycgp"
        }
    ]
]);
var hash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Hash
});
const Haze = createLucideIcon("Haze", [
    [
        "path",
        {
            d: "m5.2 6.2 1.4 1.4",
            key: "17imol"
        }
    ],
    [
        "path",
        {
            d: "M2 13h2",
            key: "13gyu8"
        }
    ],
    [
        "path",
        {
            d: "M20 13h2",
            key: "16rner"
        }
    ],
    [
        "path",
        {
            d: "m17.4 7.6 1.4-1.4",
            key: "t4xlah"
        }
    ],
    [
        "path",
        {
            d: "M22 17H2",
            key: "1gtaj3"
        }
    ],
    [
        "path",
        {
            d: "M22 21H2",
            key: "1gy6en"
        }
    ],
    [
        "path",
        {
            d: "M16 13a4 4 0 0 0-8 0",
            key: "1dyczq"
        }
    ],
    [
        "path",
        {
            d: "M12 5V2.5",
            key: "1vytko"
        }
    ]
]);
var haze = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Haze
});
const Heading1 = createLucideIcon("Heading1", [
    [
        "path",
        {
            d: "M4 12h8",
            key: "17cfdx"
        }
    ],
    [
        "path",
        {
            d: "M4 18V6",
            key: "1rz3zl"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ],
    [
        "path",
        {
            d: "m17 12 3-2v8",
            key: "1hhhft"
        }
    ]
]);
var heading1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heading1
});
const Heading2 = createLucideIcon("Heading2", [
    [
        "path",
        {
            d: "M4 12h8",
            key: "17cfdx"
        }
    ],
    [
        "path",
        {
            d: "M4 18V6",
            key: "1rz3zl"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ],
    [
        "path",
        {
            d: "M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1",
            key: "9jr5yi"
        }
    ]
]);
var heading2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heading2
});
const Heading3 = createLucideIcon("Heading3", [
    [
        "path",
        {
            d: "M4 12h8",
            key: "17cfdx"
        }
    ],
    [
        "path",
        {
            d: "M4 18V6",
            key: "1rz3zl"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ],
    [
        "path",
        {
            d: "M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2",
            key: "68ncm8"
        }
    ],
    [
        "path",
        {
            d: "M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2",
            key: "1ejuhz"
        }
    ]
]);
var heading3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heading3
});
const Heading4 = createLucideIcon("Heading4", [
    [
        "path",
        {
            d: "M4 12h8",
            key: "17cfdx"
        }
    ],
    [
        "path",
        {
            d: "M4 18V6",
            key: "1rz3zl"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ],
    [
        "path",
        {
            d: "M17 10v4h4",
            key: "13sv97"
        }
    ],
    [
        "path",
        {
            d: "M21 10v8",
            key: "1kdml4"
        }
    ]
]);
var heading4 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heading4
});
const Heading5 = createLucideIcon("Heading5", [
    [
        "path",
        {
            d: "M4 12h8",
            key: "17cfdx"
        }
    ],
    [
        "path",
        {
            d: "M4 18V6",
            key: "1rz3zl"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ],
    [
        "path",
        {
            d: "M17 13v-3h4",
            key: "1nvgqp"
        }
    ],
    [
        "path",
        {
            d: "M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17",
            key: "2nebdn"
        }
    ]
]);
var heading5 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heading5
});
const Heading6 = createLucideIcon("Heading6", [
    [
        "path",
        {
            d: "M4 12h8",
            key: "17cfdx"
        }
    ],
    [
        "path",
        {
            d: "M4 18V6",
            key: "1rz3zl"
        }
    ],
    [
        "path",
        {
            d: "M12 18V6",
            key: "zqpxq5"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "16",
            r: "2",
            key: "15mx69"
        }
    ],
    [
        "path",
        {
            d: "M20 10c-2 2-3 3.5-3 6",
            key: "f35dl0"
        }
    ]
]);
var heading6 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heading6
});
const Heading = createLucideIcon("Heading", [
    [
        "path",
        {
            d: "M6 12h12",
            key: "8npq4p"
        }
    ],
    [
        "path",
        {
            d: "M6 20V4",
            key: "1w1bmo"
        }
    ],
    [
        "path",
        {
            d: "M18 20V4",
            key: "o2hl4u"
        }
    ]
]);
var heading = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heading
});
const Headphones = createLucideIcon("Headphones", [
    [
        "path",
        {
            d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3",
            key: "1xhozi"
        }
    ]
]);
var headphones = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Headphones
});
const HeartCrack = createLucideIcon("HeartCrack", [
    [
        "path",
        {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
        }
    ],
    [
        "path",
        {
            d: "m12 13-1-1 2-2-3-3 2-2",
            key: "xjdxli"
        }
    ]
]);
var heartCrack = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HeartCrack
});
const HeartHandshake = createLucideIcon("HeartHandshake", [
    [
        "path",
        {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
        }
    ],
    [
        "path",
        {
            d: "M12 5 9.04 7.96a2.17 2.17 0 0 0 0 3.08v0c.82.82 2.13.85 3 .07l2.07-1.9a2.82 2.82 0 0 1 3.79 0l2.96 2.66",
            key: "12sd6o"
        }
    ],
    [
        "path",
        {
            d: "m18 15-2-2",
            key: "60u0ii"
        }
    ],
    [
        "path",
        {
            d: "m15 18-2-2",
            key: "6p76be"
        }
    ]
]);
var heartHandshake = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HeartHandshake
});
const HeartOff = createLucideIcon("HeartOff", [
    [
        "line",
        {
            x1: "2",
            y1: "2",
            x2: "22",
            y2: "22",
            key: "1w4vcy"
        }
    ],
    [
        "path",
        {
            d: "M16.5 16.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5a5.5 5.5 0 0 1 2.14-4.35",
            key: "3mpagl"
        }
    ],
    [
        "path",
        {
            d: "M8.76 3.1c1.15.22 2.13.78 3.24 1.9 1.5-1.5 2.74-2 4.5-2A5.5 5.5 0 0 1 22 8.5c0 2.12-1.3 3.78-2.67 5.17",
            key: "1gh3v3"
        }
    ]
]);
var heartOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HeartOff
});
const HeartPulse = createLucideIcon("HeartPulse", [
    [
        "path",
        {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
        }
    ],
    [
        "path",
        {
            d: "M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27",
            key: "1uw2ng"
        }
    ]
]);
var heartPulse = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HeartPulse
});
const Heart = createLucideIcon("Heart", [
    [
        "path",
        {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
        }
    ]
]);
var heart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Heart
});
const HelpCircle = createLucideIcon("HelpCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3",
            key: "1u773s"
        }
    ],
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ]
]);
var helpCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HelpCircle
});
const HelpingHand = createLucideIcon("HelpingHand", [
    [
        "path",
        {
            d: "m3 15 5.12-5.12A3 3 0 0 1 10.24 9H13a2 2 0 1 1 0 4h-2.5m4-.68 4.17-4.89a1.88 1.88 0 0 1 2.92 2.36l-4.2 5.94A3 3 0 0 1 14.96 17H9.83a2 2 0 0 0-1.42.59L7 19",
            key: "nitrv7"
        }
    ],
    [
        "path",
        {
            d: "m2 14 6 6",
            key: "g6j1uo"
        }
    ]
]);
var helpingHand = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HelpingHand
});
const Hexagon = createLucideIcon("Hexagon", [
    [
        "path",
        {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
        }
    ]
]);
var hexagon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Hexagon
});
const Highlighter = createLucideIcon("Highlighter", [
    [
        "path",
        {
            d: "m9 11-6 6v3h9l3-3",
            key: "1a3l36"
        }
    ],
    [
        "path",
        {
            d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4",
            key: "14a9rk"
        }
    ]
]);
var highlighter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Highlighter
});
const History = createLucideIcon("History", [
    [
        "path",
        {
            d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8",
            key: "1357e3"
        }
    ],
    [
        "path",
        {
            d: "M3 3v5h5",
            key: "1xhq8a"
        }
    ],
    [
        "path",
        {
            d: "M12 7v5l4 2",
            key: "1fdv2h"
        }
    ]
]);
var history = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: History
});
const Home = createLucideIcon("Home", [
    [
        "path",
        {
            d: "m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",
            key: "y5dka4"
        }
    ],
    [
        "polyline",
        {
            points: "9 22 9 12 15 12 15 22",
            key: "e2us08"
        }
    ]
]);
var home = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Home
});
const HopOff = createLucideIcon("HopOff", [
    [
        "path",
        {
            d: "M17.5 5.5C19 7 20.5 9 21 11c-1.323.265-2.646.39-4.118.226",
            key: "10j95a"
        }
    ],
    [
        "path",
        {
            d: "M5.5 17.5C7 19 9 20.5 11 21c.5-2.5.5-5-1-8.5",
            key: "1mqyjd"
        }
    ],
    [
        "path",
        {
            d: "M17.5 17.5c-2.5 0-4 0-6-1",
            key: "11elt5"
        }
    ],
    [
        "path",
        {
            d: "M20 11.5c1 1.5 2 3.5 2 4.5",
            key: "13ezvz"
        }
    ],
    [
        "path",
        {
            d: "M11.5 20c1.5 1 3.5 2 4.5 2 .5-1.5 0-3-.5-4.5",
            key: "1ufrz1"
        }
    ],
    [
        "path",
        {
            d: "M22 22c-2 0-3.5-.5-5.5-1.5",
            key: "1n8vbj"
        }
    ],
    [
        "path",
        {
            d: "M4.783 4.782C1.073 8.492 1 14.5 5 18c1-1 2-4.5 1.5-6.5 1.5 1 4 1 5.5.5M8.227 2.57C11.578 1.335 15.453 2.089 18 5c-.88.88-3.7 1.761-5.726 1.618",
            key: "1h85u8"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var hopOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: HopOff
});
const Hop = createLucideIcon("Hop", [
    [
        "path",
        {
            d: "M17.5 5.5C19 7 20.5 9 21 11c-2.5.5-5 .5-8.5-1",
            key: "l0z2za"
        }
    ],
    [
        "path",
        {
            d: "M5.5 17.5C7 19 9 20.5 11 21c.5-2.5.5-5-1-8.5",
            key: "1mqyjd"
        }
    ],
    [
        "path",
        {
            d: "M16.5 11.5c1 2 1 3.5 1 6-2.5 0-4 0-6-1",
            key: "10xoad"
        }
    ],
    [
        "path",
        {
            d: "M20 11.5c1 1.5 2 3.5 2 4.5-1.5.5-3 0-4.5-.5",
            key: "1a4gpx"
        }
    ],
    [
        "path",
        {
            d: "M11.5 20c1.5 1 3.5 2 4.5 2 .5-1.5 0-3-.5-4.5",
            key: "1ufrz1"
        }
    ],
    [
        "path",
        {
            d: "M20.5 16.5c1 2 1.5 3.5 1.5 5.5-2 0-3.5-.5-5.5-1.5",
            key: "1ok5d2"
        }
    ],
    [
        "path",
        {
            d: "M4.783 4.782C8.493 1.072 14.5 1 18 5c-1 1-4.5 2-6.5 1.5 1 1.5 1 4 .5 5.5-1.5.5-4 .5-5.5-.5C7 13.5 6 17 5 18c-4-3.5-3.927-9.508-.217-13.218Z",
            key: "8hlroy"
        }
    ],
    [
        "path",
        {
            d: "M4.5 4.5 3 3c-.184-.185-.184-.816 0-1",
            key: "q3aj97"
        }
    ]
]);
var hop = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Hop
});
const Hotel = createLucideIcon("Hotel", [
    [
        "path",
        {
            d: "M18 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2Z",
            key: "p9z69c"
        }
    ],
    [
        "path",
        {
            d: "m9 16 .348-.24c1.465-1.013 3.84-1.013 5.304 0L15 16",
            key: "1bvcvh"
        }
    ],
    [
        "path",
        {
            d: "M8 7h.01",
            key: "1vti4s"
        }
    ],
    [
        "path",
        {
            d: "M16 7h.01",
            key: "1kdx03"
        }
    ],
    [
        "path",
        {
            d: "M12 7h.01",
            key: "1ivr5q"
        }
    ],
    [
        "path",
        {
            d: "M12 11h.01",
            key: "z322tv"
        }
    ],
    [
        "path",
        {
            d: "M16 11h.01",
            key: "xkw8gn"
        }
    ],
    [
        "path",
        {
            d: "M8 11h.01",
            key: "1dfujw"
        }
    ],
    [
        "path",
        {
            d: "M10 22v-6.5m4 0V22",
            key: "16gs4s"
        }
    ]
]);
var hotel = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Hotel
});
const Hourglass = createLucideIcon("Hourglass", [
    [
        "path",
        {
            d: "M5 22h14",
            key: "ehvnwv"
        }
    ],
    [
        "path",
        {
            d: "M5 2h14",
            key: "pdyrp9"
        }
    ],
    [
        "path",
        {
            d: "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22",
            key: "1d314k"
        }
    ],
    [
        "path",
        {
            d: "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2",
            key: "1vvvr6"
        }
    ]
]);
var hourglass = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Hourglass
});
const IceCream2 = createLucideIcon("IceCream2", [
    [
        "path",
        {
            d: "M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6Zm-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0",
            key: "g86ewz"
        }
    ],
    [
        "path",
        {
            d: "M12.14 11a3.5 3.5 0 1 1 6.71 0",
            key: "4k3m1s"
        }
    ],
    [
        "path",
        {
            d: "M15.5 6.5a3.5 3.5 0 1 0-7 0",
            key: "zmuahr"
        }
    ]
]);
var iceCream2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: IceCream2
});
const IceCream = createLucideIcon("IceCream", [
    [
        "path",
        {
            d: "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11",
            key: "1v6356"
        }
    ],
    [
        "path",
        {
            d: "M17 7A5 5 0 0 0 7 7",
            key: "151p3v"
        }
    ],
    [
        "path",
        {
            d: "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4",
            key: "1sdaij"
        }
    ]
]);
var iceCream = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: IceCream
});
const ImageMinus = createLucideIcon("ImageMinus", [
    [
        "path",
        {
            d: "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7",
            key: "m87ecr"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "22",
            y1: "5",
            y2: "5",
            key: "ez7e4s"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "9",
            r: "2",
            key: "af1f0g"
        }
    ],
    [
        "path",
        {
            d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21",
            key: "1xmnt7"
        }
    ]
]);
var imageMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ImageMinus
});
const ImageOff = createLucideIcon("ImageOff", [
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ],
    [
        "path",
        {
            d: "M10.41 10.41a2 2 0 1 1-2.83-2.83",
            key: "1bzlo9"
        }
    ],
    [
        "line",
        {
            x1: "13.5",
            x2: "6",
            y1: "13.5",
            y2: "21",
            key: "1q0aeu"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "21",
            y1: "12",
            y2: "15",
            key: "5mozeu"
        }
    ],
    [
        "path",
        {
            d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59",
            key: "mmje98"
        }
    ],
    [
        "path",
        {
            d: "M21 15V5a2 2 0 0 0-2-2H9",
            key: "43el77"
        }
    ]
]);
var imageOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ImageOff
});
const ImagePlus = createLucideIcon("ImagePlus", [
    [
        "path",
        {
            d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7",
            key: "31hg93"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "22",
            y1: "5",
            y2: "5",
            key: "ez7e4s"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "19",
            y1: "2",
            y2: "8",
            key: "1gkr8c"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "9",
            r: "2",
            key: "af1f0g"
        }
    ],
    [
        "path",
        {
            d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21",
            key: "1xmnt7"
        }
    ]
]);
var imagePlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ImagePlus
});
const Image = createLucideIcon("Image", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "9",
            r: "2",
            key: "af1f0g"
        }
    ],
    [
        "path",
        {
            d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21",
            key: "1xmnt7"
        }
    ]
]);
var image = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Image
});
const Import = createLucideIcon("Import", [
    [
        "path",
        {
            d: "M12 3v12",
            key: "1x0j5s"
        }
    ],
    [
        "path",
        {
            d: "m8 11 4 4 4-4",
            key: "1dohi6"
        }
    ],
    [
        "path",
        {
            d: "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4",
            key: "1ywtjm"
        }
    ]
]);
var _import = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Import
});
const Inbox = createLucideIcon("Inbox", [
    [
        "polyline",
        {
            points: "22 12 16 12 14 15 10 15 8 12 2 12",
            key: "o97t9d"
        }
    ],
    [
        "path",
        {
            d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
            key: "oot6mr"
        }
    ]
]);
var inbox = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Inbox
});
const Indent = createLucideIcon("Indent", [
    [
        "polyline",
        {
            points: "3 8 7 12 3 16",
            key: "f3rxhf"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "11",
            y1: "12",
            y2: "12",
            key: "1fxxak"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "11",
            y1: "6",
            y2: "6",
            key: "asgu94"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "11",
            y1: "18",
            y2: "18",
            key: "13dsj7"
        }
    ]
]);
var indent = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Indent
});
const IndianRupee = createLucideIcon("IndianRupee", [
    [
        "path",
        {
            d: "M6 3h12",
            key: "ggurg9"
        }
    ],
    [
        "path",
        {
            d: "M6 8h12",
            key: "6g4wlu"
        }
    ],
    [
        "path",
        {
            d: "m6 13 8.5 8",
            key: "u1kupk"
        }
    ],
    [
        "path",
        {
            d: "M6 13h3",
            key: "wdp6ag"
        }
    ],
    [
        "path",
        {
            d: "M9 13c6.667 0 6.667-10 0-10",
            key: "1nkvk2"
        }
    ]
]);
var indianRupee = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: IndianRupee
});
const Infinity = createLucideIcon("Infinity", [
    [
        "path",
        {
            d: "M12 12c-2-2.67-4-4-6-4a4 4 0 1 0 0 8c2 0 4-1.33 6-4Zm0 0c2 2.67 4 4 6 4a4 4 0 0 0 0-8c-2 0-4 1.33-6 4Z",
            key: "1z0uae"
        }
    ]
]);
var infinity = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Infinity
});
const Info = createLucideIcon("Info", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M12 16v-4",
            key: "1dtifu"
        }
    ],
    [
        "path",
        {
            d: "M12 8h.01",
            key: "e9boi3"
        }
    ]
]);
var info = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Info
});
const Inspect = createLucideIcon("Inspect", [
    [
        "path",
        {
            d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6",
            key: "14rsvq"
        }
    ],
    [
        "path",
        {
            d: "m12 12 4 10 1.7-4.3L22 16Z",
            key: "64ilsv"
        }
    ]
]);
var inspect = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Inspect
});
const Instagram = createLucideIcon("Instagram", [
    [
        "rect",
        {
            width: "20",
            height: "20",
            x: "2",
            y: "2",
            rx: "5",
            ry: "5",
            key: "2e1cvw"
        }
    ],
    [
        "path",
        {
            d: "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z",
            key: "9exkf1"
        }
    ],
    [
        "line",
        {
            x1: "17.5",
            x2: "17.51",
            y1: "6.5",
            y2: "6.5",
            key: "r4j83e"
        }
    ]
]);
var instagram = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Instagram
});
const Italic = createLucideIcon("Italic", [
    [
        "line",
        {
            x1: "19",
            x2: "10",
            y1: "4",
            y2: "4",
            key: "15jd3p"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "5",
            y1: "20",
            y2: "20",
            key: "bu0au3"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "9",
            y1: "4",
            y2: "20",
            key: "uljnxc"
        }
    ]
]);
var italic = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Italic
});
const IterationCcw = createLucideIcon("IterationCcw", [
    [
        "path",
        {
            d: "M20 10c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8h8",
            key: "4znkd0"
        }
    ],
    [
        "polyline",
        {
            points: "16 14 20 18 16 22",
            key: "11njsm"
        }
    ]
]);
var iterationCcw = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: IterationCcw
});
const IterationCw = createLucideIcon("IterationCw", [
    [
        "path",
        {
            d: "M4 10c0-4.4 3.6-8 8-8s8 3.6 8 8-3.6 8-8 8H4",
            key: "tuf4su"
        }
    ],
    [
        "polyline",
        {
            points: "8 22 4 18 8 14",
            key: "evkj9s"
        }
    ]
]);
var iterationCw = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: IterationCw
});
const JapaneseYen = createLucideIcon("JapaneseYen", [
    [
        "path",
        {
            d: "M12 9.5V21m0-11.5L6 3m6 6.5L18 3",
            key: "2ej80x"
        }
    ],
    [
        "path",
        {
            d: "M6 15h12",
            key: "1hwgt5"
        }
    ],
    [
        "path",
        {
            d: "M6 11h12",
            key: "wf4gp6"
        }
    ]
]);
var japaneseYen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: JapaneseYen
});
const Joystick = createLucideIcon("Joystick", [
    [
        "path",
        {
            d: "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z",
            key: "jg2n2t"
        }
    ],
    [
        "path",
        {
            d: "M6 15v-2",
            key: "gd6mvg"
        }
    ],
    [
        "path",
        {
            d: "M12 15V9",
            key: "8c7uyn"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "6",
            r: "3",
            key: "1gm2ql"
        }
    ]
]);
var joystick = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Joystick
});
const KanbanSquareDashed = createLucideIcon("KanbanSquareDashed", [
    [
        "path",
        {
            d: "M8 7v7",
            key: "1x2jlm"
        }
    ],
    [
        "path",
        {
            d: "M12 7v4",
            key: "xawao1"
        }
    ],
    [
        "path",
        {
            d: "M16 7v9",
            key: "1hp2iy"
        }
    ],
    [
        "path",
        {
            d: "M5 3a2 2 0 0 0-2 2",
            key: "y57alp"
        }
    ],
    [
        "path",
        {
            d: "M9 3h1",
            key: "1yesri"
        }
    ],
    [
        "path",
        {
            d: "M14 3h1",
            key: "1ec4yj"
        }
    ],
    [
        "path",
        {
            d: "M19 3a2 2 0 0 1 2 2",
            key: "18rm91"
        }
    ],
    [
        "path",
        {
            d: "M21 9v1",
            key: "mxsmne"
        }
    ],
    [
        "path",
        {
            d: "M21 14v1",
            key: "169vum"
        }
    ],
    [
        "path",
        {
            d: "M21 19a2 2 0 0 1-2 2",
            key: "1j7049"
        }
    ],
    [
        "path",
        {
            d: "M14 21h1",
            key: "v9vybs"
        }
    ],
    [
        "path",
        {
            d: "M9 21h1",
            key: "15o7lz"
        }
    ],
    [
        "path",
        {
            d: "M5 21a2 2 0 0 1-2-2",
            key: "sbafld"
        }
    ],
    [
        "path",
        {
            d: "M3 14v1",
            key: "vnatye"
        }
    ],
    [
        "path",
        {
            d: "M3 9v1",
            key: "1r0deq"
        }
    ]
]);
var kanbanSquareDashed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: KanbanSquareDashed
});
const KanbanSquare = createLucideIcon("KanbanSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M8 7v7",
            key: "1x2jlm"
        }
    ],
    [
        "path",
        {
            d: "M12 7v4",
            key: "xawao1"
        }
    ],
    [
        "path",
        {
            d: "M16 7v9",
            key: "1hp2iy"
        }
    ]
]);
var kanbanSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: KanbanSquare
});
const Kanban = createLucideIcon("Kanban", [
    [
        "path",
        {
            d: "M6 5v11",
            key: "mdvv1e"
        }
    ],
    [
        "path",
        {
            d: "M12 5v6",
            key: "14ar3b"
        }
    ],
    [
        "path",
        {
            d: "M18 5v14",
            key: "7ji314"
        }
    ]
]);
var kanban = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Kanban
});
const KeyRound = createLucideIcon("KeyRound", [
    [
        "path",
        {
            d: "M2 18v3c0 .6.4 1 1 1h4v-3h3v-3h2l1.4-1.4a6.5 6.5 0 1 0-4-4Z",
            key: "167ctg"
        }
    ],
    [
        "circle",
        {
            cx: "16.5",
            cy: "7.5",
            r: ".5",
            key: "1kog09"
        }
    ]
]);
var keyRound = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: KeyRound
});
const KeySquare = createLucideIcon("KeySquare", [
    [
        "path",
        {
            d: "M12.4 2.7c.9-.9 2.5-.9 3.4 0l5.5 5.5c.9.9.9 2.5 0 3.4l-3.7 3.7c-.9.9-2.5.9-3.4 0L8.7 9.8c-.9-.9-.9-2.5 0-3.4Z",
            key: "9li5bk"
        }
    ],
    [
        "path",
        {
            d: "m14 7 3 3",
            key: "1r5n42"
        }
    ],
    [
        "path",
        {
            d: "M9.4 10.6 2 18v3c0 .6.4 1 1 1h4v-3h3v-3h2l1.4-1.4",
            key: "1ym3zm"
        }
    ]
]);
var keySquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: KeySquare
});
const Key = createLucideIcon("Key", [
    [
        "circle",
        {
            cx: "7.5",
            cy: "15.5",
            r: "5.5",
            key: "yqb3hr"
        }
    ],
    [
        "path",
        {
            d: "m21 2-9.6 9.6",
            key: "1j0ho8"
        }
    ],
    [
        "path",
        {
            d: "m15.5 7.5 3 3L22 7l-3-3",
            key: "1rn1fs"
        }
    ]
]);
var key = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Key
});
const Keyboard = createLucideIcon("Keyboard", [
    [
        "rect",
        {
            width: "20",
            height: "16",
            x: "2",
            y: "4",
            rx: "2",
            ry: "2",
            key: "15u882"
        }
    ],
    [
        "path",
        {
            d: "M6 8h.001",
            key: "1ej0i3"
        }
    ],
    [
        "path",
        {
            d: "M10 8h.001",
            key: "1x2st2"
        }
    ],
    [
        "path",
        {
            d: "M14 8h.001",
            key: "1vkmyp"
        }
    ],
    [
        "path",
        {
            d: "M18 8h.001",
            key: "kfsenl"
        }
    ],
    [
        "path",
        {
            d: "M8 12h.001",
            key: "1sjpby"
        }
    ],
    [
        "path",
        {
            d: "M12 12h.001",
            key: "al75ts"
        }
    ],
    [
        "path",
        {
            d: "M16 12h.001",
            key: "931bgk"
        }
    ],
    [
        "path",
        {
            d: "M7 16h10",
            key: "wp8him"
        }
    ]
]);
var keyboard = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Keyboard
});
const LampCeiling = createLucideIcon("LampCeiling", [
    [
        "path",
        {
            d: "M12 2v5",
            key: "nd4vlx"
        }
    ],
    [
        "path",
        {
            d: "M6 7h12l4 9H2l4-9Z",
            key: "123d64"
        }
    ],
    [
        "path",
        {
            d: "M9.17 16a3 3 0 1 0 5.66 0",
            key: "1061mw"
        }
    ]
]);
var lampCeiling = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LampCeiling
});
const LampDesk = createLucideIcon("LampDesk", [
    [
        "path",
        {
            d: "m14 5-3 3 2 7 8-8-7-2Z",
            key: "1b0msb"
        }
    ],
    [
        "path",
        {
            d: "m14 5-3 3-3-3 3-3 3 3Z",
            key: "1uemms"
        }
    ],
    [
        "path",
        {
            d: "M9.5 6.5 4 12l3 6",
            key: "1bx08v"
        }
    ],
    [
        "path",
        {
            d: "M3 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H3Z",
            key: "wap775"
        }
    ]
]);
var lampDesk = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LampDesk
});
const LampFloor = createLucideIcon("LampFloor", [
    [
        "path",
        {
            d: "M9 2h6l3 7H6l3-7Z",
            key: "wcx6mj"
        }
    ],
    [
        "path",
        {
            d: "M12 9v13",
            key: "3n1su1"
        }
    ],
    [
        "path",
        {
            d: "M9 22h6",
            key: "1rlq3v"
        }
    ]
]);
var lampFloor = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LampFloor
});
const LampWallDown = createLucideIcon("LampWallDown", [
    [
        "path",
        {
            d: "M11 13h6l3 7H8l3-7Z",
            key: "9n3qlo"
        }
    ],
    [
        "path",
        {
            d: "M14 13V8a2 2 0 0 0-2-2H8",
            key: "1hu4hb"
        }
    ],
    [
        "path",
        {
            d: "M4 9h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4v6Z",
            key: "s053bc"
        }
    ]
]);
var lampWallDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LampWallDown
});
const LampWallUp = createLucideIcon("LampWallUp", [
    [
        "path",
        {
            d: "M11 4h6l3 7H8l3-7Z",
            key: "11x1ee"
        }
    ],
    [
        "path",
        {
            d: "M14 11v5a2 2 0 0 1-2 2H8",
            key: "eutp5o"
        }
    ],
    [
        "path",
        {
            d: "M4 15h2a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H4v-6Z",
            key: "1iuthr"
        }
    ]
]);
var lampWallUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LampWallUp
});
const Lamp = createLucideIcon("Lamp", [
    [
        "path",
        {
            d: "M8 2h8l4 10H4L8 2Z",
            key: "9dma5w"
        }
    ],
    [
        "path",
        {
            d: "M12 12v6",
            key: "3ahymv"
        }
    ],
    [
        "path",
        {
            d: "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z",
            key: "mwf4oh"
        }
    ]
]);
var lamp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Lamp
});
const Landmark = createLucideIcon("Landmark", [
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "22",
            y2: "22",
            key: "j8o0r"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "18",
            y2: "11",
            key: "10tf0k"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "18",
            y2: "11",
            key: "54lgf6"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "14",
            y1: "18",
            y2: "11",
            key: "380y"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "18",
            y1: "18",
            y2: "11",
            key: "1kevvc"
        }
    ],
    [
        "polygon",
        {
            points: "12 2 20 7 4 7",
            key: "jkujk7"
        }
    ]
]);
var landmark = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Landmark
});
const Languages = createLucideIcon("Languages", [
    [
        "path",
        {
            d: "m5 8 6 6",
            key: "1wu5hv"
        }
    ],
    [
        "path",
        {
            d: "m4 14 6-6 2-3",
            key: "1k1g8d"
        }
    ],
    [
        "path",
        {
            d: "M2 5h12",
            key: "or177f"
        }
    ],
    [
        "path",
        {
            d: "M7 2h1",
            key: "1t2jsx"
        }
    ],
    [
        "path",
        {
            d: "m22 22-5-10-5 10",
            key: "don7ne"
        }
    ],
    [
        "path",
        {
            d: "M14 18h6",
            key: "1m8k6r"
        }
    ]
]);
var languages = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Languages
});
const Laptop2 = createLucideIcon("Laptop2", [
    [
        "rect",
        {
            width: "18",
            height: "12",
            x: "3",
            y: "4",
            rx: "2",
            ry: "2",
            key: "1qhy41"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "20",
            y2: "20",
            key: "ni3hll"
        }
    ]
]);
var laptop2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Laptop2
});
const Laptop = createLucideIcon("Laptop", [
    [
        "path",
        {
            d: "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16",
            key: "tarvll"
        }
    ]
]);
var laptop = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Laptop
});
const LassoSelect = createLucideIcon("LassoSelect", [
    [
        "path",
        {
            d: "M7 22a5 5 0 0 1-2-4",
            key: "umushi"
        }
    ],
    [
        "path",
        {
            d: "M7 16.93c.96.43 1.96.74 2.99.91",
            key: "ybbtv3"
        }
    ],
    [
        "path",
        {
            d: "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2",
            key: "gt5e1w"
        }
    ],
    [
        "path",
        {
            d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z",
            key: "bq3ynw"
        }
    ],
    [
        "path",
        {
            d: "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14v0z",
            key: "1bawls"
        }
    ]
]);
var lassoSelect = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LassoSelect
});
const Lasso = createLucideIcon("Lasso", [
    [
        "path",
        {
            d: "M7 22a5 5 0 0 1-2-4",
            key: "umushi"
        }
    ],
    [
        "path",
        {
            d: "M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1",
            key: "146dds"
        }
    ],
    [
        "path",
        {
            d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z",
            key: "bq3ynw"
        }
    ]
]);
var lasso = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Lasso
});
const Laugh = createLucideIcon("Laugh", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z",
            key: "b2q4dd"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9.01",
            y1: "9",
            y2: "9",
            key: "yxxnd0"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "9",
            y2: "9",
            key: "1p4y9e"
        }
    ]
]);
var laugh = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Laugh
});
const Layers = createLucideIcon("Layers", [
    [
        "polygon",
        {
            points: "12 2 2 7 12 12 22 7 12 2",
            key: "1b0ttc"
        }
    ],
    [
        "polyline",
        {
            points: "2 17 12 22 22 17",
            key: "imjtdl"
        }
    ],
    [
        "polyline",
        {
            points: "2 12 12 17 22 12",
            key: "5dexcv"
        }
    ]
]);
var layers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Layers
});
const LayoutDashboard = createLucideIcon("LayoutDashboard", [
    [
        "rect",
        {
            width: "7",
            height: "9",
            x: "3",
            y: "3",
            rx: "1",
            key: "10lvy0"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "5",
            x: "14",
            y: "3",
            rx: "1",
            key: "16une8"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "9",
            x: "14",
            y: "12",
            rx: "1",
            key: "1hutg5"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "5",
            x: "3",
            y: "16",
            rx: "1",
            key: "ldoo1y"
        }
    ]
]);
var layoutDashboard = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LayoutDashboard
});
const LayoutGrid = createLucideIcon("LayoutGrid", [
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "3",
            y: "3",
            rx: "1",
            key: "1g98yp"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "14",
            y: "3",
            rx: "1",
            key: "6d4xhi"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "14",
            y: "14",
            rx: "1",
            key: "nxv5o0"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "3",
            y: "14",
            rx: "1",
            key: "1bb6yr"
        }
    ]
]);
var layoutGrid = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LayoutGrid
});
const LayoutList = createLucideIcon("LayoutList", [
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "3",
            y: "3",
            rx: "1",
            key: "1g98yp"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "3",
            y: "14",
            rx: "1",
            key: "1bb6yr"
        }
    ],
    [
        "path",
        {
            d: "M14 4h7",
            key: "3xa0d5"
        }
    ],
    [
        "path",
        {
            d: "M14 9h7",
            key: "1icrd9"
        }
    ],
    [
        "path",
        {
            d: "M14 15h7",
            key: "1mj8o2"
        }
    ],
    [
        "path",
        {
            d: "M14 20h7",
            key: "11slyb"
        }
    ]
]);
var layoutList = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LayoutList
});
const LayoutPanelLeft = createLucideIcon("LayoutPanelLeft", [
    [
        "rect",
        {
            width: "7",
            height: "18",
            x: "3",
            y: "3",
            rx: "1",
            key: "2obqm"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "14",
            y: "3",
            rx: "1",
            key: "6d4xhi"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "14",
            y: "14",
            rx: "1",
            key: "nxv5o0"
        }
    ]
]);
var layoutPanelLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LayoutPanelLeft
});
const LayoutPanelTop = createLucideIcon("LayoutPanelTop", [
    [
        "rect",
        {
            width: "18",
            height: "7",
            x: "3",
            y: "3",
            rx: "1",
            key: "f1a2em"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "3",
            y: "14",
            rx: "1",
            key: "1bb6yr"
        }
    ],
    [
        "rect",
        {
            width: "7",
            height: "7",
            x: "14",
            y: "14",
            rx: "1",
            key: "nxv5o0"
        }
    ]
]);
var layoutPanelTop = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LayoutPanelTop
});
const LayoutTemplate = createLucideIcon("LayoutTemplate", [
    [
        "rect",
        {
            width: "18",
            height: "7",
            x: "3",
            y: "3",
            rx: "1",
            key: "f1a2em"
        }
    ],
    [
        "rect",
        {
            width: "9",
            height: "7",
            x: "3",
            y: "14",
            rx: "1",
            key: "jqznyg"
        }
    ],
    [
        "rect",
        {
            width: "5",
            height: "7",
            x: "16",
            y: "14",
            rx: "1",
            key: "q5h2i8"
        }
    ]
]);
var layoutTemplate = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LayoutTemplate
});
const Layout = createLucideIcon("Layout", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "9",
            y2: "9",
            key: "1vqk6q"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9",
            y1: "21",
            y2: "9",
            key: "wpwpyp"
        }
    ]
]);
var layout = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Layout
});
const Leaf = createLucideIcon("Leaf", [
    [
        "path",
        {
            d: "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z",
            key: "nnexq3"
        }
    ],
    [
        "path",
        {
            d: "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12",
            key: "mt58a7"
        }
    ]
]);
var leaf = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Leaf
});
const LeafyGreen = createLucideIcon("LeafyGreen", [
    [
        "path",
        {
            d: "M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22",
            key: "1134nt"
        }
    ],
    [
        "path",
        {
            d: "M2 22 17 7",
            key: "1q7jp2"
        }
    ]
]);
var leafyGreen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LeafyGreen
});
const Library = createLucideIcon("Library", [
    [
        "path",
        {
            d: "m16 6 4 14",
            key: "ji33uf"
        }
    ],
    [
        "path",
        {
            d: "M12 6v14",
            key: "1n7gus"
        }
    ],
    [
        "path",
        {
            d: "M8 8v12",
            key: "1gg7y9"
        }
    ],
    [
        "path",
        {
            d: "M4 4v16",
            key: "6qkkli"
        }
    ]
]);
var library = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Library
});
const LifeBuoy = createLucideIcon("LifeBuoy", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m4.93 4.93 4.24 4.24",
            key: "1ymg45"
        }
    ],
    [
        "path",
        {
            d: "m14.83 9.17 4.24-4.24",
            key: "1cb5xl"
        }
    ],
    [
        "path",
        {
            d: "m14.83 14.83 4.24 4.24",
            key: "q42g0n"
        }
    ],
    [
        "path",
        {
            d: "m9.17 14.83-4.24 4.24",
            key: "bqpfvv"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ]
]);
var lifeBuoy = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LifeBuoy
});
const Ligature = createLucideIcon("Ligature", [
    [
        "path",
        {
            d: "M8 20V8c0-2.2 1.8-4 4-4 1.5 0 2.8.8 3.5 2",
            key: "1rtphz"
        }
    ],
    [
        "path",
        {
            d: "M6 12h4",
            key: "a4o3ry"
        }
    ],
    [
        "path",
        {
            d: "M14 12h2v8",
            key: "c1fccl"
        }
    ],
    [
        "path",
        {
            d: "M6 20h4",
            key: "1i6q5t"
        }
    ],
    [
        "path",
        {
            d: "M14 20h4",
            key: "lzx1xo"
        }
    ]
]);
var ligature = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ligature
});
const LightbulbOff = createLucideIcon("LightbulbOff", [
    [
        "path",
        {
            d: "M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5",
            key: "1fkcox"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5",
            key: "10m8kw"
        }
    ],
    [
        "path",
        {
            d: "M9 18h6",
            key: "x1upvd"
        }
    ],
    [
        "path",
        {
            d: "M10 22h4",
            key: "ceow96"
        }
    ]
]);
var lightbulbOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LightbulbOff
});
const Lightbulb = createLucideIcon("Lightbulb", [
    [
        "path",
        {
            d: "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5",
            key: "1gvzjb"
        }
    ],
    [
        "path",
        {
            d: "M9 18h6",
            key: "x1upvd"
        }
    ],
    [
        "path",
        {
            d: "M10 22h4",
            key: "ceow96"
        }
    ]
]);
var lightbulb = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Lightbulb
});
const LineChart = createLucideIcon("LineChart", [
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ],
    [
        "path",
        {
            d: "m19 9-5 5-4-4-3 3",
            key: "2osh9i"
        }
    ]
]);
var lineChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LineChart
});
const Link2Off = createLucideIcon("Link2Off", [
    [
        "path",
        {
            d: "M9 17H7A5 5 0 0 1 7 7",
            key: "10o201"
        }
    ],
    [
        "path",
        {
            d: "M15 7h2a5 5 0 0 1 4 8",
            key: "1d3206"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "12",
            y1: "12",
            y2: "12",
            key: "rvw6j4"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var link2Off = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Link2Off
});
const Link2 = createLucideIcon("Link2", [
    [
        "path",
        {
            d: "M9 17H7A5 5 0 0 1 7 7h2",
            key: "8i5ue5"
        }
    ],
    [
        "path",
        {
            d: "M15 7h2a5 5 0 1 1 0 10h-2",
            key: "1b9ql8"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "12",
            y2: "12",
            key: "1jonct"
        }
    ]
]);
var link2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Link2
});
const Link = createLucideIcon("Link", [
    [
        "path",
        {
            d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71",
            key: "1cjeqo"
        }
    ],
    [
        "path",
        {
            d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71",
            key: "19qd67"
        }
    ]
]);
var link = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Link
});
const Linkedin = createLucideIcon("Linkedin", [
    [
        "path",
        {
            d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",
            key: "c2jq9f"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "12",
            x: "2",
            y: "9",
            key: "mk3on5"
        }
    ],
    [
        "circle",
        {
            cx: "4",
            cy: "4",
            r: "2",
            key: "bt5ra8"
        }
    ]
]);
var linkedin = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Linkedin
});
const ListChecks = createLucideIcon("ListChecks", [
    [
        "path",
        {
            d: "m3 17 2 2 4-4",
            key: "1jhpwq"
        }
    ],
    [
        "path",
        {
            d: "m3 7 2 2 4-4",
            key: "1obspn"
        }
    ],
    [
        "path",
        {
            d: "M13 6h8",
            key: "15sg57"
        }
    ],
    [
        "path",
        {
            d: "M13 12h8",
            key: "h98zly"
        }
    ],
    [
        "path",
        {
            d: "M13 18h8",
            key: "oe0vm4"
        }
    ]
]);
var listChecks = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListChecks
});
const ListEnd = createLucideIcon("ListEnd", [
    [
        "path",
        {
            d: "M16 12H3",
            key: "1a2rj7"
        }
    ],
    [
        "path",
        {
            d: "M16 6H3",
            key: "1wxfjs"
        }
    ],
    [
        "path",
        {
            d: "M10 18H3",
            key: "13769t"
        }
    ],
    [
        "path",
        {
            d: "M21 6v10a2 2 0 0 1-2 2h-5",
            key: "ilrcs8"
        }
    ],
    [
        "path",
        {
            d: "m16 16-2 2 2 2",
            key: "kkc6pm"
        }
    ]
]);
var listEnd = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListEnd
});
const ListFilter = createLucideIcon("ListFilter", [
    [
        "path",
        {
            d: "M3 6h18",
            key: "d0wm0j"
        }
    ],
    [
        "path",
        {
            d: "M7 12h10",
            key: "b7w52i"
        }
    ],
    [
        "path",
        {
            d: "M10 18h4",
            key: "1ulq68"
        }
    ]
]);
var listFilter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListFilter
});
const ListMinus = createLucideIcon("ListMinus", [
    [
        "path",
        {
            d: "M11 12H3",
            key: "51ecnj"
        }
    ],
    [
        "path",
        {
            d: "M16 6H3",
            key: "1wxfjs"
        }
    ],
    [
        "path",
        {
            d: "M16 18H3",
            key: "12xzn7"
        }
    ],
    [
        "path",
        {
            d: "M21 12h-6",
            key: "bt1uis"
        }
    ]
]);
var listMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListMinus
});
const ListMusic = createLucideIcon("ListMusic", [
    [
        "path",
        {
            d: "M21 15V6",
            key: "h1cx4g"
        }
    ],
    [
        "path",
        {
            d: "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z",
            key: "8saifv"
        }
    ],
    [
        "path",
        {
            d: "M12 12H3",
            key: "18klou"
        }
    ],
    [
        "path",
        {
            d: "M16 6H3",
            key: "1wxfjs"
        }
    ],
    [
        "path",
        {
            d: "M12 18H3",
            key: "11ftsu"
        }
    ]
]);
var listMusic = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListMusic
});
const ListOrdered = createLucideIcon("ListOrdered", [
    [
        "line",
        {
            x1: "10",
            x2: "21",
            y1: "6",
            y2: "6",
            key: "76qw6h"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "21",
            y1: "12",
            y2: "12",
            key: "16nom4"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "21",
            y1: "18",
            y2: "18",
            key: "u3jurt"
        }
    ],
    [
        "path",
        {
            d: "M4 6h1v4",
            key: "cnovpq"
        }
    ],
    [
        "path",
        {
            d: "M4 10h2",
            key: "16xx2s"
        }
    ],
    [
        "path",
        {
            d: "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1",
            key: "m9a95d"
        }
    ]
]);
var listOrdered = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListOrdered
});
const ListPlus = createLucideIcon("ListPlus", [
    [
        "path",
        {
            d: "M11 12H3",
            key: "51ecnj"
        }
    ],
    [
        "path",
        {
            d: "M16 6H3",
            key: "1wxfjs"
        }
    ],
    [
        "path",
        {
            d: "M16 18H3",
            key: "12xzn7"
        }
    ],
    [
        "path",
        {
            d: "M18 9v6",
            key: "1twb98"
        }
    ],
    [
        "path",
        {
            d: "M21 12h-6",
            key: "bt1uis"
        }
    ]
]);
var listPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListPlus
});
const ListRestart = createLucideIcon("ListRestart", [
    [
        "path",
        {
            d: "M21 6H3",
            key: "1jwq7v"
        }
    ],
    [
        "path",
        {
            d: "M7 12H3",
            key: "13ou7f"
        }
    ],
    [
        "path",
        {
            d: "M7 18H3",
            key: "1sijw9"
        }
    ],
    [
        "path",
        {
            d: "M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14",
            key: "qth677"
        }
    ],
    [
        "path",
        {
            d: "M11 10v4h4",
            key: "172dkj"
        }
    ]
]);
var listRestart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListRestart
});
const ListStart = createLucideIcon("ListStart", [
    [
        "path",
        {
            d: "M16 12H3",
            key: "1a2rj7"
        }
    ],
    [
        "path",
        {
            d: "M16 18H3",
            key: "12xzn7"
        }
    ],
    [
        "path",
        {
            d: "M10 6H3",
            key: "lf8lx7"
        }
    ],
    [
        "path",
        {
            d: "M21 18V8a2 2 0 0 0-2-2h-5",
            key: "1hghli"
        }
    ],
    [
        "path",
        {
            d: "m16 8-2-2 2-2",
            key: "160uvd"
        }
    ]
]);
var listStart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListStart
});
const ListTodo = createLucideIcon("ListTodo", [
    [
        "rect",
        {
            x: "3",
            y: "5",
            width: "6",
            height: "6",
            rx: "1",
            key: "1defrl"
        }
    ],
    [
        "path",
        {
            d: "m3 17 2 2 4-4",
            key: "1jhpwq"
        }
    ],
    [
        "path",
        {
            d: "M13 6h8",
            key: "15sg57"
        }
    ],
    [
        "path",
        {
            d: "M13 12h8",
            key: "h98zly"
        }
    ],
    [
        "path",
        {
            d: "M13 18h8",
            key: "oe0vm4"
        }
    ]
]);
var listTodo = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListTodo
});
const ListTree = createLucideIcon("ListTree", [
    [
        "path",
        {
            d: "M21 12h-8",
            key: "1bmf0i"
        }
    ],
    [
        "path",
        {
            d: "M21 6H8",
            key: "1pqkrb"
        }
    ],
    [
        "path",
        {
            d: "M21 18h-8",
            key: "1tm79t"
        }
    ],
    [
        "path",
        {
            d: "M3 6v4c0 1.1.9 2 2 2h3",
            key: "1ywdgy"
        }
    ],
    [
        "path",
        {
            d: "M3 10v6c0 1.1.9 2 2 2h3",
            key: "2wc746"
        }
    ]
]);
var listTree = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListTree
});
const ListVideo = createLucideIcon("ListVideo", [
    [
        "path",
        {
            d: "M12 12H3",
            key: "18klou"
        }
    ],
    [
        "path",
        {
            d: "M16 6H3",
            key: "1wxfjs"
        }
    ],
    [
        "path",
        {
            d: "M12 18H3",
            key: "11ftsu"
        }
    ],
    [
        "path",
        {
            d: "m16 12 5 3-5 3v-6Z",
            key: "zpskkp"
        }
    ]
]);
var listVideo = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListVideo
});
const ListX = createLucideIcon("ListX", [
    [
        "path",
        {
            d: "M11 12H3",
            key: "51ecnj"
        }
    ],
    [
        "path",
        {
            d: "M16 6H3",
            key: "1wxfjs"
        }
    ],
    [
        "path",
        {
            d: "M16 18H3",
            key: "12xzn7"
        }
    ],
    [
        "path",
        {
            d: "m19 10-4 4",
            key: "1tz659"
        }
    ],
    [
        "path",
        {
            d: "m15 10 4 4",
            key: "1n7nei"
        }
    ]
]);
var listX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ListX
});
const List = createLucideIcon("List", [
    [
        "line",
        {
            x1: "8",
            x2: "21",
            y1: "6",
            y2: "6",
            key: "7ey8pc"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "21",
            y1: "12",
            y2: "12",
            key: "rjfblc"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "21",
            y1: "18",
            y2: "18",
            key: "c3b1m8"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "3.01",
            y1: "6",
            y2: "6",
            key: "1g7gq3"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "3.01",
            y1: "12",
            y2: "12",
            key: "1pjlvk"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "3.01",
            y1: "18",
            y2: "18",
            key: "28t2mc"
        }
    ]
]);
var list = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: List
});
const Loader2 = createLucideIcon("Loader2", [
    [
        "path",
        {
            d: "M21 12a9 9 0 1 1-6.219-8.56",
            key: "13zald"
        }
    ]
]);
var loader2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Loader2
});
const Loader = createLucideIcon("Loader", [
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "6",
            key: "gza1u7"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "18",
            y2: "22",
            key: "1qhbu9"
        }
    ],
    [
        "line",
        {
            x1: "4.93",
            x2: "7.76",
            y1: "4.93",
            y2: "7.76",
            key: "xae44r"
        }
    ],
    [
        "line",
        {
            x1: "16.24",
            x2: "19.07",
            y1: "16.24",
            y2: "19.07",
            key: "bxnmvf"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "6",
            y1: "12",
            y2: "12",
            key: "89khin"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "pb8tfm"
        }
    ],
    [
        "line",
        {
            x1: "4.93",
            x2: "7.76",
            y1: "19.07",
            y2: "16.24",
            key: "1uxjnu"
        }
    ],
    [
        "line",
        {
            x1: "16.24",
            x2: "19.07",
            y1: "7.76",
            y2: "4.93",
            key: "6duxfx"
        }
    ]
]);
var loader = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Loader
});
const LocateFixed = createLucideIcon("LocateFixed", [
    [
        "line",
        {
            x1: "2",
            x2: "5",
            y1: "12",
            y2: "12",
            key: "bvdh0s"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1tbv5k"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "5",
            key: "11lu5j"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "19",
            y2: "22",
            key: "x3vr5v"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "7",
            key: "fim9np"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ]
]);
var locateFixed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LocateFixed
});
const LocateOff = createLucideIcon("LocateOff", [
    [
        "line",
        {
            x1: "2",
            x2: "5",
            y1: "12",
            y2: "12",
            key: "bvdh0s"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1tbv5k"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "5",
            key: "11lu5j"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "19",
            y2: "22",
            key: "x3vr5v"
        }
    ],
    [
        "path",
        {
            d: "M7.11 7.11C5.83 8.39 5 10.1 5 12c0 3.87 3.13 7 7 7 1.9 0 3.61-.83 4.89-2.11",
            key: "1oh7ia"
        }
    ],
    [
        "path",
        {
            d: "M18.71 13.96c.19-.63.29-1.29.29-1.96 0-3.87-3.13-7-7-7-.67 0-1.33.1-1.96.29",
            key: "3qdecy"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var locateOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LocateOff
});
const Locate = createLucideIcon("Locate", [
    [
        "line",
        {
            x1: "2",
            x2: "5",
            y1: "12",
            y2: "12",
            key: "bvdh0s"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1tbv5k"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "5",
            key: "11lu5j"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "19",
            y2: "22",
            key: "x3vr5v"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "7",
            key: "fim9np"
        }
    ]
]);
var locate = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Locate
});
const Lock = createLucideIcon("Lock", [
    [
        "rect",
        {
            width: "18",
            height: "11",
            x: "3",
            y: "11",
            rx: "2",
            ry: "2",
            key: "1w4ew1"
        }
    ],
    [
        "path",
        {
            d: "M7 11V7a5 5 0 0 1 10 0v4",
            key: "fwvmzm"
        }
    ]
]);
var lock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Lock
});
const LogIn = createLucideIcon("LogIn", [
    [
        "path",
        {
            d: "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4",
            key: "u53s6r"
        }
    ],
    [
        "polyline",
        {
            points: "10 17 15 12 10 7",
            key: "1ail0h"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "3",
            y1: "12",
            y2: "12",
            key: "v6grx8"
        }
    ]
]);
var logIn = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LogIn
});
const LogOut = createLucideIcon("LogOut", [
    [
        "path",
        {
            d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4",
            key: "1uf3rs"
        }
    ],
    [
        "polyline",
        {
            points: "16 17 21 12 16 7",
            key: "1gabdz"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "9",
            y1: "12",
            y2: "12",
            key: "1uyos4"
        }
    ]
]);
var logOut = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: LogOut
});
const Lollipop = createLucideIcon("Lollipop", [
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "path",
        {
            d: "m21 21-4.3-4.3",
            key: "1qie3q"
        }
    ],
    [
        "path",
        {
            d: "M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0",
            key: "107gwy"
        }
    ]
]);
var lollipop = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Lollipop
});
const Luggage = createLucideIcon("Luggage", [
    [
        "path",
        {
            d: "M6 20h0a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h0",
            key: "1h5fkc"
        }
    ],
    [
        "path",
        {
            d: "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14",
            key: "1l99gc"
        }
    ],
    [
        "path",
        {
            d: "M10 20h4",
            key: "ni2waw"
        }
    ],
    [
        "circle",
        {
            cx: "16",
            cy: "20",
            r: "2",
            key: "1vifvg"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "20",
            r: "2",
            key: "ckkr5m"
        }
    ]
]);
var luggage = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Luggage
});
const Magnet = createLucideIcon("Magnet", [
    [
        "path",
        {
            d: "m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15",
            key: "1i3lhw"
        }
    ],
    [
        "path",
        {
            d: "m5 8 4 4",
            key: "j6kj7e"
        }
    ],
    [
        "path",
        {
            d: "m12 15 4 4",
            key: "lnac28"
        }
    ]
]);
var magnet = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Magnet
});
const MailCheck = createLucideIcon("MailCheck", [
    [
        "path",
        {
            d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8",
            key: "12jkf8"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ],
    [
        "path",
        {
            d: "m16 19 2 2 4-4",
            key: "1b14m6"
        }
    ]
]);
var mailCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailCheck
});
const MailMinus = createLucideIcon("MailMinus", [
    [
        "path",
        {
            d: "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8",
            key: "fuxbkv"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ],
    [
        "path",
        {
            d: "M16 19h6",
            key: "xwg31i"
        }
    ]
]);
var mailMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailMinus
});
const MailOpen = createLucideIcon("MailOpen", [
    [
        "path",
        {
            d: "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z",
            key: "1jhwl8"
        }
    ],
    [
        "path",
        {
            d: "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10",
            key: "1qfld7"
        }
    ]
]);
var mailOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailOpen
});
const MailPlus = createLucideIcon("MailPlus", [
    [
        "path",
        {
            d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8",
            key: "12jkf8"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ],
    [
        "path",
        {
            d: "M19 16v6",
            key: "tddt3s"
        }
    ],
    [
        "path",
        {
            d: "M16 19h6",
            key: "xwg31i"
        }
    ]
]);
var mailPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailPlus
});
const MailQuestion = createLucideIcon("MailQuestion", [
    [
        "path",
        {
            d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5",
            key: "e61zoh"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ],
    [
        "path",
        {
            d: "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
            key: "7z9rxb"
        }
    ],
    [
        "path",
        {
            d: "M20 22v.01",
            key: "12bgn6"
        }
    ]
]);
var mailQuestion = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailQuestion
});
const MailSearch = createLucideIcon("MailSearch", [
    [
        "path",
        {
            d: "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5",
            key: "w80f2v"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ],
    [
        "path",
        {
            d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6v0Z",
            key: "mgbru4"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "18",
            r: "3",
            key: "1xkwt0"
        }
    ],
    [
        "path",
        {
            d: "m22 22-1.5-1.5",
            key: "1x83k4"
        }
    ]
]);
var mailSearch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailSearch
});
const MailWarning = createLucideIcon("MailWarning", [
    [
        "path",
        {
            d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5",
            key: "e61zoh"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ],
    [
        "path",
        {
            d: "M20 14v4",
            key: "1hm744"
        }
    ],
    [
        "path",
        {
            d: "M20 22v.01",
            key: "12bgn6"
        }
    ]
]);
var mailWarning = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailWarning
});
const MailX = createLucideIcon("MailX", [
    [
        "path",
        {
            d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9",
            key: "1j9vog"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ],
    [
        "path",
        {
            d: "m17 17 4 4",
            key: "1b3523"
        }
    ],
    [
        "path",
        {
            d: "m21 17-4 4",
            key: "uinynz"
        }
    ]
]);
var mailX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MailX
});
const Mail = createLucideIcon("Mail", [
    [
        "rect",
        {
            width: "20",
            height: "16",
            x: "2",
            y: "4",
            rx: "2",
            key: "18n3k1"
        }
    ],
    [
        "path",
        {
            d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",
            key: "1ocrg3"
        }
    ]
]);
var mail = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Mail
});
const Mailbox = createLucideIcon("Mailbox", [
    [
        "path",
        {
            d: "M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z",
            key: "1lbycx"
        }
    ],
    [
        "polyline",
        {
            points: "15,9 18,9 18,11",
            key: "1pm9c0"
        }
    ],
    [
        "path",
        {
            d: "M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2v0",
            key: "n6nfvi"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "7",
            y1: "10",
            y2: "10",
            key: "1e2scm"
        }
    ]
]);
var mailbox = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Mailbox
});
const Mails = createLucideIcon("Mails", [
    [
        "rect",
        {
            width: "16",
            height: "13",
            x: "6",
            y: "4",
            rx: "2",
            key: "1drq3f"
        }
    ],
    [
        "path",
        {
            d: "m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7",
            key: "xn252p"
        }
    ],
    [
        "path",
        {
            d: "M2 8v11c0 1.1.9 2 2 2h14",
            key: "n13cji"
        }
    ]
]);
var mails = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Mails
});
const MapPinOff = createLucideIcon("MapPinOff", [
    [
        "path",
        {
            d: "M5.43 5.43A8.06 8.06 0 0 0 4 10c0 6 8 12 8 12a29.94 29.94 0 0 0 5-5",
            key: "12a8pk"
        }
    ],
    [
        "path",
        {
            d: "M19.18 13.52A8.66 8.66 0 0 0 20 10a8 8 0 0 0-8-8 7.88 7.88 0 0 0-3.52.82",
            key: "1r9f6y"
        }
    ],
    [
        "path",
        {
            d: "M9.13 9.13A2.78 2.78 0 0 0 9 10a3 3 0 0 0 3 3 2.78 2.78 0 0 0 .87-.13",
            key: "erynq7"
        }
    ],
    [
        "path",
        {
            d: "M14.9 9.25a3 3 0 0 0-2.15-2.16",
            key: "1hwwmx"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var mapPinOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MapPinOff
});
const MapPin = createLucideIcon("MapPin", [
    [
        "path",
        {
            d: "M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z",
            key: "2oe9fu"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "3",
            key: "ilqhr7"
        }
    ]
]);
var mapPin = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MapPin
});
const Map = createLucideIcon("Map", [
    [
        "polygon",
        {
            points: "3 6 9 3 15 6 21 3 21 18 15 21 9 18 3 21",
            key: "ok2ie8"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9",
            y1: "3",
            y2: "18",
            key: "w34qz5"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15",
            y1: "6",
            y2: "21",
            key: "volv9a"
        }
    ]
]);
var map = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Map
});
const Martini = createLucideIcon("Martini", [
    [
        "path",
        {
            d: "M8 22h8",
            key: "rmew8v"
        }
    ],
    [
        "path",
        {
            d: "M12 11v11",
            key: "ur9y6a"
        }
    ],
    [
        "path",
        {
            d: "m19 3-7 8-7-8Z",
            key: "1sgpiw"
        }
    ]
]);
var martini = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Martini
});
const Maximize2 = createLucideIcon("Maximize2", [
    [
        "polyline",
        {
            points: "15 3 21 3 21 9",
            key: "mznyad"
        }
    ],
    [
        "polyline",
        {
            points: "9 21 3 21 3 15",
            key: "1avn1i"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "14",
            y1: "3",
            y2: "10",
            key: "ota7mn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "10",
            y1: "21",
            y2: "14",
            key: "1atl0r"
        }
    ]
]);
var maximize2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Maximize2
});
const Maximize = createLucideIcon("Maximize", [
    [
        "path",
        {
            d: "M8 3H5a2 2 0 0 0-2 2v3",
            key: "1dcmit"
        }
    ],
    [
        "path",
        {
            d: "M21 8V5a2 2 0 0 0-2-2h-3",
            key: "1e4gt3"
        }
    ],
    [
        "path",
        {
            d: "M3 16v3a2 2 0 0 0 2 2h3",
            key: "wsl5sc"
        }
    ],
    [
        "path",
        {
            d: "M16 21h3a2 2 0 0 0 2-2v-3",
            key: "18trek"
        }
    ]
]);
var maximize = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Maximize
});
const Medal = createLucideIcon("Medal", [
    [
        "path",
        {
            d: "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15",
            key: "143lza"
        }
    ],
    [
        "path",
        {
            d: "M11 12 5.12 2.2",
            key: "qhuxz6"
        }
    ],
    [
        "path",
        {
            d: "m13 12 5.88-9.8",
            key: "hbye0f"
        }
    ],
    [
        "path",
        {
            d: "M8 7h8",
            key: "i86dvs"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "17",
            r: "5",
            key: "qbz8iq"
        }
    ],
    [
        "path",
        {
            d: "M12 18v-2h-.5",
            key: "fawc4q"
        }
    ]
]);
var medal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Medal
});
const MegaphoneOff = createLucideIcon("MegaphoneOff", [
    [
        "path",
        {
            d: "M9.26 9.26 3 11v3l14.14 3.14",
            key: "3429n"
        }
    ],
    [
        "path",
        {
            d: "M21 15.34V6l-7.31 2.03",
            key: "4o1dh8"
        }
    ],
    [
        "path",
        {
            d: "M11.6 16.8a3 3 0 1 1-5.8-1.6",
            key: "1yl0tm"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var megaphoneOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MegaphoneOff
});
const Megaphone = createLucideIcon("Megaphone", [
    [
        "path",
        {
            d: "m3 11 18-5v12L3 14v-3z",
            key: "n962bs"
        }
    ],
    [
        "path",
        {
            d: "M11.6 16.8a3 3 0 1 1-5.8-1.6",
            key: "1yl0tm"
        }
    ]
]);
var megaphone = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Megaphone
});
const Meh = createLucideIcon("Meh", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "15",
            y2: "15",
            key: "1xb1d9"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9.01",
            y1: "9",
            y2: "9",
            key: "yxxnd0"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "9",
            y2: "9",
            key: "1p4y9e"
        }
    ]
]);
var meh = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Meh
});
const MemoryStick = createLucideIcon("MemoryStick", [
    [
        "path",
        {
            d: "M6 19v-3",
            key: "1nvgqn"
        }
    ],
    [
        "path",
        {
            d: "M10 19v-3",
            key: "iu8nkm"
        }
    ],
    [
        "path",
        {
            d: "M14 19v-3",
            key: "kcehxu"
        }
    ],
    [
        "path",
        {
            d: "M18 19v-3",
            key: "1vh91z"
        }
    ],
    [
        "path",
        {
            d: "M8 11V9",
            key: "63erz4"
        }
    ],
    [
        "path",
        {
            d: "M16 11V9",
            key: "fru6f3"
        }
    ],
    [
        "path",
        {
            d: "M12 11V9",
            key: "ha00sb"
        }
    ],
    [
        "path",
        {
            d: "M2 15h20",
            key: "16ne18"
        }
    ],
    [
        "path",
        {
            d: "M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z",
            key: "lhddv3"
        }
    ]
]);
var memoryStick = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MemoryStick
});
const MenuSquare = createLucideIcon("MenuSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M7 8h10",
            key: "1jw688"
        }
    ],
    [
        "path",
        {
            d: "M7 12h10",
            key: "b7w52i"
        }
    ],
    [
        "path",
        {
            d: "M7 16h10",
            key: "wp8him"
        }
    ]
]);
var menuSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MenuSquare
});
const Menu = createLucideIcon("Menu", [
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "12",
            y2: "12",
            key: "1e0a9i"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "6",
            y2: "6",
            key: "1owob3"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "18",
            y2: "18",
            key: "yk5zj1"
        }
    ]
]);
var menu = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Menu
});
const Merge = createLucideIcon("Merge", [
    [
        "path",
        {
            d: "m8 6 4-4 4 4",
            key: "ybng9g"
        }
    ],
    [
        "path",
        {
            d: "M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22",
            key: "1hyw0i"
        }
    ],
    [
        "path",
        {
            d: "m20 22-5-5",
            key: "1m27yz"
        }
    ]
]);
var merge = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Merge
});
const MessageCircle = createLucideIcon("MessageCircle", [
    [
        "path",
        {
            d: "m3 21 1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z",
            key: "v2veuj"
        }
    ]
]);
var messageCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MessageCircle
});
const MessageSquareDashed = createLucideIcon("MessageSquareDashed", [
    [
        "path",
        {
            d: "M3 6V5c0-1.1.9-2 2-2h2",
            key: "9usibi"
        }
    ],
    [
        "path",
        {
            d: "M11 3h3",
            key: "1c3ji7"
        }
    ],
    [
        "path",
        {
            d: "M18 3h1c1.1 0 2 .9 2 2",
            key: "19esxn"
        }
    ],
    [
        "path",
        {
            d: "M21 9v2",
            key: "p14lih"
        }
    ],
    [
        "path",
        {
            d: "M21 15c0 1.1-.9 2-2 2h-1",
            key: "1fo1j8"
        }
    ],
    [
        "path",
        {
            d: "M14 17h-3",
            key: "1w4p2m"
        }
    ],
    [
        "path",
        {
            d: "m7 17-4 4v-5",
            key: "ph9x1h"
        }
    ],
    [
        "path",
        {
            d: "M3 12v-2",
            key: "856n1q"
        }
    ]
]);
var messageSquareDashed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MessageSquareDashed
});
const MessageSquarePlus = createLucideIcon("MessageSquarePlus", [
    [
        "path",
        {
            d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",
            key: "1lielz"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "10",
            y2: "10",
            key: "1lj1wd"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "7",
            y2: "13",
            key: "1cppfj"
        }
    ]
]);
var messageSquarePlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MessageSquarePlus
});
const MessageSquare = createLucideIcon("MessageSquare", [
    [
        "path",
        {
            d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",
            key: "1lielz"
        }
    ]
]);
var messageSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MessageSquare
});
const MessagesSquare = createLucideIcon("MessagesSquare", [
    [
        "path",
        {
            d: "M14 9a2 2 0 0 1-2 2H6l-4 4V4c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2v5Z",
            key: "16vlm8"
        }
    ],
    [
        "path",
        {
            d: "M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1",
            key: "1cx29u"
        }
    ]
]);
var messagesSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MessagesSquare
});
const Mic2 = createLucideIcon("Mic2", [
    [
        "path",
        {
            d: "m12 8-9.04 9.06a2.82 2.82 0 1 0 3.98 3.98L16 12",
            key: "zoua8r"
        }
    ],
    [
        "circle",
        {
            cx: "17",
            cy: "7",
            r: "5",
            key: "1fomce"
        }
    ]
]);
var mic2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Mic2
});
const MicOff = createLucideIcon("MicOff", [
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ],
    [
        "path",
        {
            d: "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2",
            key: "80xlxr"
        }
    ],
    [
        "path",
        {
            d: "M5 10v2a7 7 0 0 0 12 5",
            key: "p2k8kg"
        }
    ],
    [
        "path",
        {
            d: "M15 9.34V5a3 3 0 0 0-5.68-1.33",
            key: "1gzdoj"
        }
    ],
    [
        "path",
        {
            d: "M9 9v3a3 3 0 0 0 5.12 2.12",
            key: "r2i35w"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "19",
            y2: "22",
            key: "x3vr5v"
        }
    ]
]);
var micOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MicOff
});
const Mic = createLucideIcon("Mic", [
    [
        "path",
        {
            d: "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z",
            key: "131961"
        }
    ],
    [
        "path",
        {
            d: "M19 10v2a7 7 0 0 1-14 0v-2",
            key: "1vc78b"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "19",
            y2: "22",
            key: "x3vr5v"
        }
    ]
]);
var mic = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Mic
});
const Microscope = createLucideIcon("Microscope", [
    [
        "path",
        {
            d: "M6 18h8",
            key: "1borvv"
        }
    ],
    [
        "path",
        {
            d: "M3 22h18",
            key: "8prr45"
        }
    ],
    [
        "path",
        {
            d: "M14 22a7 7 0 1 0 0-14h-1",
            key: "1jwaiy"
        }
    ],
    [
        "path",
        {
            d: "M9 14h2",
            key: "197e7h"
        }
    ],
    [
        "path",
        {
            d: "M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z",
            key: "1bmzmy"
        }
    ],
    [
        "path",
        {
            d: "M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3",
            key: "1drr47"
        }
    ]
]);
var microscope = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Microscope
});
const Microwave = createLucideIcon("Microwave", [
    [
        "rect",
        {
            width: "20",
            height: "15",
            x: "2",
            y: "4",
            rx: "2",
            key: "2no95f"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "7",
            x: "6",
            y: "8",
            rx: "1",
            key: "zh9wx"
        }
    ],
    [
        "path",
        {
            d: "M18 8v7",
            key: "o5zi4n"
        }
    ],
    [
        "path",
        {
            d: "M6 19v2",
            key: "1loha6"
        }
    ],
    [
        "path",
        {
            d: "M18 19v2",
            key: "1dawf0"
        }
    ]
]);
var microwave = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Microwave
});
const Milestone = createLucideIcon("Milestone", [
    [
        "path",
        {
            d: "M18 6H5a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h13l4-3.5L18 6Z",
            key: "1mp5s7"
        }
    ],
    [
        "path",
        {
            d: "M12 13v8",
            key: "1l5pq0"
        }
    ],
    [
        "path",
        {
            d: "M12 3v3",
            key: "1n5kay"
        }
    ]
]);
var milestone = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Milestone
});
const MilkOff = createLucideIcon("MilkOff", [
    [
        "path",
        {
            d: "M8 2h8",
            key: "1ssgc1"
        }
    ],
    [
        "path",
        {
            d: "M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3",
            key: "y0ejgx"
        }
    ],
    [
        "path",
        {
            d: "M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435",
            key: "iaxqsy"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var milkOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MilkOff
});
const Milk = createLucideIcon("Milk", [
    [
        "path",
        {
            d: "M8 2h8",
            key: "1ssgc1"
        }
    ],
    [
        "path",
        {
            d: "M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2",
            key: "qtp12x"
        }
    ],
    [
        "path",
        {
            d: "M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0",
            key: "ygeh44"
        }
    ]
]);
var milk = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Milk
});
const Minimize2 = createLucideIcon("Minimize2", [
    [
        "polyline",
        {
            points: "4 14 10 14 10 20",
            key: "11kfnr"
        }
    ],
    [
        "polyline",
        {
            points: "20 10 14 10 14 4",
            key: "rlmsce"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "21",
            y1: "10",
            y2: "3",
            key: "o5lafz"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "10",
            y1: "21",
            y2: "14",
            key: "1atl0r"
        }
    ]
]);
var minimize2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Minimize2
});
const Minimize = createLucideIcon("Minimize", [
    [
        "path",
        {
            d: "M8 3v3a2 2 0 0 1-2 2H3",
            key: "hohbtr"
        }
    ],
    [
        "path",
        {
            d: "M21 8h-3a2 2 0 0 1-2-2V3",
            key: "5jw1f3"
        }
    ],
    [
        "path",
        {
            d: "M3 16h3a2 2 0 0 1 2 2v3",
            key: "198tvr"
        }
    ],
    [
        "path",
        {
            d: "M16 21v-3a2 2 0 0 1 2-2h3",
            key: "ph8mxp"
        }
    ]
]);
var minimize = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Minimize
});
const MinusCircle = createLucideIcon("MinusCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ]
]);
var minusCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MinusCircle
});
const MinusSquare = createLucideIcon("MinusSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ]
]);
var minusSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MinusSquare
});
const Minus = createLucideIcon("Minus", [
    [
        "path",
        {
            d: "M5 12h14",
            key: "1ays0h"
        }
    ]
]);
var minus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Minus
});
const MonitorCheck = createLucideIcon("MonitorCheck", [
    [
        "path",
        {
            d: "m9 10 2 2 4-4",
            key: "1gnqz4"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorCheck
});
const MonitorDot = createLucideIcon("MonitorDot", [
    [
        "circle",
        {
            cx: "19",
            cy: "6",
            r: "3",
            key: "108a5v"
        }
    ],
    [
        "path",
        {
            d: "M22 12v3a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h9",
            key: "1fet9y"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorDot
});
const MonitorDown = createLucideIcon("MonitorDown", [
    [
        "path",
        {
            d: "M12 13V7",
            key: "h0r20n"
        }
    ],
    [
        "path",
        {
            d: "m15 10-3 3-3-3",
            key: "lzhmyn"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorDown
});
const MonitorOff = createLucideIcon("MonitorOff", [
    [
        "path",
        {
            d: "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2",
            key: "k0q8oc"
        }
    ],
    [
        "path",
        {
            d: "M22 15V5a2 2 0 0 0-2-2H9",
            key: "cp1ac0"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ]
]);
var monitorOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorOff
});
const MonitorPause = createLucideIcon("MonitorPause", [
    [
        "path",
        {
            d: "M10 13V7",
            key: "1u13u9"
        }
    ],
    [
        "path",
        {
            d: "M14 13V7",
            key: "1vj9om"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorPause = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorPause
});
const MonitorPlay = createLucideIcon("MonitorPlay", [
    [
        "path",
        {
            d: "m10 7 5 3-5 3Z",
            key: "29ljg6"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorPlay = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorPlay
});
const MonitorSmartphone = createLucideIcon("MonitorSmartphone", [
    [
        "path",
        {
            d: "M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8",
            key: "10dyio"
        }
    ],
    [
        "path",
        {
            d: "M10 19v-3.96 3.15",
            key: "1irgej"
        }
    ],
    [
        "path",
        {
            d: "M7 19h5",
            key: "qswx4l"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "10",
            x: "16",
            y: "12",
            rx: "2",
            key: "1egngj"
        }
    ]
]);
var monitorSmartphone = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorSmartphone
});
const MonitorSpeaker = createLucideIcon("MonitorSpeaker", [
    [
        "path",
        {
            d: "M5.5 20H8",
            key: "1k40s5"
        }
    ],
    [
        "path",
        {
            d: "M17 9h.01",
            key: "1j24nn"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "16",
            x: "12",
            y: "4",
            rx: "2",
            key: "ixliua"
        }
    ],
    [
        "path",
        {
            d: "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4",
            key: "1mp6e1"
        }
    ],
    [
        "circle",
        {
            cx: "17",
            cy: "15",
            r: "1",
            key: "tqvash"
        }
    ]
]);
var monitorSpeaker = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorSpeaker
});
const MonitorStop = createLucideIcon("MonitorStop", [
    [
        "rect",
        {
            x: "9",
            y: "7",
            width: "6",
            height: "6",
            key: "4xvc6r"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorStop = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorStop
});
const MonitorUp = createLucideIcon("MonitorUp", [
    [
        "path",
        {
            d: "m9 10 3-3 3 3",
            key: "11gsxs"
        }
    ],
    [
        "path",
        {
            d: "M12 13V7",
            key: "h0r20n"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorUp
});
const MonitorX = createLucideIcon("MonitorX", [
    [
        "path",
        {
            d: "m14.5 12.5-5-5",
            key: "1jahn5"
        }
    ],
    [
        "path",
        {
            d: "m9.5 12.5 5-5",
            key: "1k2t7b"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ]
]);
var monitorX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MonitorX
});
const Monitor = createLucideIcon("Monitor", [
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "16",
            y1: "21",
            y2: "21",
            key: "1svkeh"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "17",
            y2: "21",
            key: "vw1qmm"
        }
    ]
]);
var monitor = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Monitor
});
const MoonStar = createLucideIcon("MoonStar", [
    [
        "path",
        {
            d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z",
            key: "a7tn18"
        }
    ],
    [
        "path",
        {
            d: "M19 3v4",
            key: "vgv24u"
        }
    ],
    [
        "path",
        {
            d: "M21 5h-4",
            key: "1wcg1f"
        }
    ]
]);
var moonStar = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoonStar
});
const Moon = createLucideIcon("Moon", [
    [
        "path",
        {
            d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z",
            key: "a7tn18"
        }
    ]
]);
var moon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Moon
});
const MoreHorizontal = createLucideIcon("MoreHorizontal", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "12",
            r: "1",
            key: "1wjl8i"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "12",
            r: "1",
            key: "1pcz8c"
        }
    ]
]);
var moreHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoreHorizontal
});
const MoreVertical = createLucideIcon("MoreVertical", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "5",
            r: "1",
            key: "gxeob9"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "19",
            r: "1",
            key: "lyex9k"
        }
    ]
]);
var moreVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoreVertical
});
const MountainSnow = createLucideIcon("MountainSnow", [
    [
        "path",
        {
            d: "m8 3 4 8 5-5 5 15H2L8 3z",
            key: "otkl63"
        }
    ],
    [
        "path",
        {
            d: "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19",
            key: "1pvmmp"
        }
    ]
]);
var mountainSnow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MountainSnow
});
const Mountain = createLucideIcon("Mountain", [
    [
        "path",
        {
            d: "m8 3 4 8 5-5 5 15H2L8 3z",
            key: "otkl63"
        }
    ]
]);
var mountain = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Mountain
});
const MousePointer2 = createLucideIcon("MousePointer2", [
    [
        "path",
        {
            d: "m4 4 7.07 17 2.51-7.39L21 11.07z",
            key: "1vqm48"
        }
    ]
]);
var mousePointer2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MousePointer2
});
const MousePointerClick = createLucideIcon("MousePointerClick", [
    [
        "path",
        {
            d: "m9 9 5 12 1.774-5.226L21 14 9 9z",
            key: "1qd44z"
        }
    ],
    [
        "path",
        {
            d: "m16.071 16.071 4.243 4.243",
            key: "wfhsjb"
        }
    ],
    [
        "path",
        {
            d: "m7.188 2.239.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656-2.12 2.122",
            key: "1bk8fz"
        }
    ]
]);
var mousePointerClick = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MousePointerClick
});
const MousePointer = createLucideIcon("MousePointer", [
    [
        "path",
        {
            d: "m3 3 7.07 16.97 2.51-7.39 7.39-2.51L3 3z",
            key: "y2ucgo"
        }
    ],
    [
        "path",
        {
            d: "m13 13 6 6",
            key: "1nhxnf"
        }
    ]
]);
var mousePointer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MousePointer
});
const Mouse = createLucideIcon("Mouse", [
    [
        "rect",
        {
            x: "5",
            y: "2",
            width: "14",
            height: "20",
            rx: "7",
            key: "11ol66"
        }
    ],
    [
        "path",
        {
            d: "M12 6v4",
            key: "16clxf"
        }
    ]
]);
var mouse = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Mouse
});
const Move3d = createLucideIcon("Move3d", [
    [
        "path",
        {
            d: "M5 3v16h16",
            key: "1mqmf9"
        }
    ],
    [
        "path",
        {
            d: "m5 19 6-6",
            key: "jh6hbb"
        }
    ],
    [
        "path",
        {
            d: "m2 6 3-3 3 3",
            key: "tkyvxa"
        }
    ],
    [
        "path",
        {
            d: "m18 16 3 3-3 3",
            key: "1d4glt"
        }
    ]
]);
var move3d = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Move3d
});
const MoveDiagonal2 = createLucideIcon("MoveDiagonal2", [
    [
        "polyline",
        {
            points: "5 11 5 5 11 5",
            key: "ncfzxk"
        }
    ],
    [
        "polyline",
        {
            points: "19 13 19 19 13 19",
            key: "1mk7hk"
        }
    ],
    [
        "line",
        {
            x1: "5",
            x2: "19",
            y1: "5",
            y2: "19",
            key: "mcyte3"
        }
    ]
]);
var moveDiagonal2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveDiagonal2
});
const MoveDiagonal = createLucideIcon("MoveDiagonal", [
    [
        "polyline",
        {
            points: "13 5 19 5 19 11",
            key: "11219e"
        }
    ],
    [
        "polyline",
        {
            points: "11 19 5 19 5 13",
            key: "sfq3wq"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "5",
            y1: "5",
            y2: "19",
            key: "1x9vlm"
        }
    ]
]);
var moveDiagonal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveDiagonal
});
const MoveDownLeft = createLucideIcon("MoveDownLeft", [
    [
        "path",
        {
            d: "M11 19H5V13",
            key: "1akmht"
        }
    ],
    [
        "path",
        {
            d: "M19 5L5 19",
            key: "72u4yj"
        }
    ]
]);
var moveDownLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveDownLeft
});
const MoveDownRight = createLucideIcon("MoveDownRight", [
    [
        "path",
        {
            d: "M19 13V19H13",
            key: "10vkzq"
        }
    ],
    [
        "path",
        {
            d: "M5 5L19 19",
            key: "5zm2fv"
        }
    ]
]);
var moveDownRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveDownRight
});
const MoveDown = createLucideIcon("MoveDown", [
    [
        "path",
        {
            d: "M8 18L12 22L16 18",
            key: "cskvfv"
        }
    ],
    [
        "path",
        {
            d: "M12 2V22",
            key: "r89rzk"
        }
    ]
]);
var moveDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveDown
});
const MoveHorizontal = createLucideIcon("MoveHorizontal", [
    [
        "polyline",
        {
            points: "18 8 22 12 18 16",
            key: "1hqrds"
        }
    ],
    [
        "polyline",
        {
            points: "6 8 2 12 6 16",
            key: "f0ernq"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1dnqot"
        }
    ]
]);
var moveHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveHorizontal
});
const MoveLeft = createLucideIcon("MoveLeft", [
    [
        "path",
        {
            d: "M6 8L2 12L6 16",
            key: "kyvwex"
        }
    ],
    [
        "path",
        {
            d: "M2 12H22",
            key: "1m8cig"
        }
    ]
]);
var moveLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveLeft
});
const MoveRight = createLucideIcon("MoveRight", [
    [
        "path",
        {
            d: "M18 8L22 12L18 16",
            key: "1r0oui"
        }
    ],
    [
        "path",
        {
            d: "M2 12H22",
            key: "1m8cig"
        }
    ]
]);
var moveRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveRight
});
const MoveUpLeft = createLucideIcon("MoveUpLeft", [
    [
        "path",
        {
            d: "M5 11V5H11",
            key: "3q78g9"
        }
    ],
    [
        "path",
        {
            d: "M5 5L19 19",
            key: "5zm2fv"
        }
    ]
]);
var moveUpLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveUpLeft
});
const MoveUpRight = createLucideIcon("MoveUpRight", [
    [
        "path",
        {
            d: "M13 5H19V11",
            key: "1n1gyv"
        }
    ],
    [
        "path",
        {
            d: "M19 5L5 19",
            key: "72u4yj"
        }
    ]
]);
var moveUpRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveUpRight
});
const MoveUp = createLucideIcon("MoveUp", [
    [
        "path",
        {
            d: "M8 6L12 2L16 6",
            key: "1yvkyx"
        }
    ],
    [
        "path",
        {
            d: "M12 2V22",
            key: "r89rzk"
        }
    ]
]);
var moveUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveUp
});
const MoveVertical = createLucideIcon("MoveVertical", [
    [
        "polyline",
        {
            points: "8 18 12 22 16 18",
            key: "1uutw3"
        }
    ],
    [
        "polyline",
        {
            points: "8 6 12 2 16 6",
            key: "d60sxy"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "22",
            key: "7eqyqh"
        }
    ]
]);
var moveVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: MoveVertical
});
const Move = createLucideIcon("Move", [
    [
        "polyline",
        {
            points: "5 9 2 12 5 15",
            key: "1r5uj5"
        }
    ],
    [
        "polyline",
        {
            points: "9 5 12 2 15 5",
            key: "5v383o"
        }
    ],
    [
        "polyline",
        {
            points: "15 19 12 22 9 19",
            key: "g7qi8m"
        }
    ],
    [
        "polyline",
        {
            points: "19 9 22 12 19 15",
            key: "tpp73q"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1dnqot"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "22",
            key: "7eqyqh"
        }
    ]
]);
var move = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Move
});
const Music2 = createLucideIcon("Music2", [
    [
        "circle",
        {
            cx: "8",
            cy: "18",
            r: "4",
            key: "1fc0mg"
        }
    ],
    [
        "path",
        {
            d: "M12 18V2l7 4",
            key: "g04rme"
        }
    ]
]);
var music2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Music2
});
const Music3 = createLucideIcon("Music3", [
    [
        "circle",
        {
            cx: "12",
            cy: "18",
            r: "4",
            key: "m3r9ws"
        }
    ],
    [
        "path",
        {
            d: "M16 18V2",
            key: "40x2m5"
        }
    ]
]);
var music3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Music3
});
const Music4 = createLucideIcon("Music4", [
    [
        "path",
        {
            d: "M9 18V5l12-2v13",
            key: "1jmyc2"
        }
    ],
    [
        "path",
        {
            d: "m9 9 12-2",
            key: "1e64n2"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "18",
            r: "3",
            key: "fqmcym"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "16",
            r: "3",
            key: "1hluhg"
        }
    ]
]);
var music4 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Music4
});
const Music = createLucideIcon("Music", [
    [
        "path",
        {
            d: "M9 18V5l12-2v13",
            key: "1jmyc2"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "18",
            r: "3",
            key: "fqmcym"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "16",
            r: "3",
            key: "1hluhg"
        }
    ]
]);
var music = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Music
});
const Navigation2Off = createLucideIcon("Navigation2Off", [
    [
        "path",
        {
            d: "M9.31 9.31 5 21l7-4 7 4-1.17-3.17",
            key: "qoq2o2"
        }
    ],
    [
        "path",
        {
            d: "M14.53 8.88 12 2l-1.17 3.17",
            key: "k3sjzy"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var navigation2Off = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Navigation2Off
});
const Navigation2 = createLucideIcon("Navigation2", [
    [
        "polygon",
        {
            points: "12 2 19 21 12 17 5 21 12 2",
            key: "x8c0qg"
        }
    ]
]);
var navigation2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Navigation2
});
const NavigationOff = createLucideIcon("NavigationOff", [
    [
        "path",
        {
            d: "M8.43 8.43 3 11l8 2 2 8 2.57-5.43",
            key: "1vdtb7"
        }
    ],
    [
        "path",
        {
            d: "M17.39 11.73 22 2l-9.73 4.61",
            key: "tya3r6"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var navigationOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: NavigationOff
});
const Navigation = createLucideIcon("Navigation", [
    [
        "polygon",
        {
            points: "3 11 22 2 13 21 11 13 3 11",
            key: "1ltx0t"
        }
    ]
]);
var navigation = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Navigation
});
const Network = createLucideIcon("Network", [
    [
        "rect",
        {
            x: "16",
            y: "16",
            width: "6",
            height: "6",
            rx: "1",
            key: "4q2zg0"
        }
    ],
    [
        "rect",
        {
            x: "2",
            y: "16",
            width: "6",
            height: "6",
            rx: "1",
            key: "8cvhb9"
        }
    ],
    [
        "rect",
        {
            x: "9",
            y: "2",
            width: "6",
            height: "6",
            rx: "1",
            key: "1egb70"
        }
    ],
    [
        "path",
        {
            d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3",
            key: "1jsf9p"
        }
    ],
    [
        "path",
        {
            d: "M12 12V8",
            key: "2874zd"
        }
    ]
]);
var network = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Network
});
const Newspaper = createLucideIcon("Newspaper", [
    [
        "path",
        {
            d: "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2",
            key: "7pis2x"
        }
    ],
    [
        "path",
        {
            d: "M18 14h-8",
            key: "sponae"
        }
    ],
    [
        "path",
        {
            d: "M15 18h-5",
            key: "95g1m2"
        }
    ],
    [
        "path",
        {
            d: "M10 6h8v4h-8V6Z",
            key: "smlsk5"
        }
    ]
]);
var newspaper = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Newspaper
});
const Nfc = createLucideIcon("Nfc", [
    [
        "path",
        {
            d: "M6 8.32a7.43 7.43 0 0 1 0 7.36",
            key: "9iaqei"
        }
    ],
    [
        "path",
        {
            d: "M9.46 6.21a11.76 11.76 0 0 1 0 11.58",
            key: "1yha7l"
        }
    ],
    [
        "path",
        {
            d: "M12.91 4.1a15.91 15.91 0 0 1 .01 15.8",
            key: "4iu2gk"
        }
    ],
    [
        "path",
        {
            d: "M16.37 2a20.16 20.16 0 0 1 0 20",
            key: "sap9u2"
        }
    ]
]);
var nfc = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Nfc
});
const NutOff = createLucideIcon("NutOff", [
    [
        "path",
        {
            d: "M12 4V2",
            key: "1k5q1u"
        }
    ],
    [
        "path",
        {
            d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939",
            key: "1xcvy9"
        }
    ],
    [
        "path",
        {
            d: "M19 10v3.343",
            key: "163tfc"
        }
    ],
    [
        "path",
        {
            d: "M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192",
            key: "17914v"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var nutOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: NutOff
});
const Nut = createLucideIcon("Nut", [
    [
        "path",
        {
            d: "M12 4V2",
            key: "1k5q1u"
        }
    ],
    [
        "path",
        {
            d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4",
            key: "1tgyif"
        }
    ],
    [
        "path",
        {
            d: "M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z",
            key: "tnsqj"
        }
    ]
]);
var nut = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Nut
});
const Octagon = createLucideIcon("Octagon", [
    [
        "polygon",
        {
            points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
            key: "h1p8hx"
        }
    ]
]);
var octagon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Octagon
});
const Option = createLucideIcon("Option", [
    [
        "path",
        {
            d: "M3 3h6l6 18h6",
            key: "ph9rgk"
        }
    ],
    [
        "path",
        {
            d: "M14 3h7",
            key: "16f0ms"
        }
    ]
]);
var option = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Option
});
const Orbit = createLucideIcon("Orbit", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "5",
            r: "2",
            key: "mhkx31"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "19",
            r: "2",
            key: "v8kfzx"
        }
    ],
    [
        "path",
        {
            d: "M10.4 21.9a10 10 0 0 0 9.941-15.416",
            key: "eohfx2"
        }
    ],
    [
        "path",
        {
            d: "M13.5 2.1a10 10 0 0 0-9.841 15.416",
            key: "19pvbm"
        }
    ]
]);
var orbit = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Orbit
});
const Outdent = createLucideIcon("Outdent", [
    [
        "polyline",
        {
            points: "7 8 3 12 7 16",
            key: "2j60jr"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "11",
            y1: "12",
            y2: "12",
            key: "1fxxak"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "11",
            y1: "6",
            y2: "6",
            key: "asgu94"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "11",
            y1: "18",
            y2: "18",
            key: "13dsj7"
        }
    ]
]);
var outdent = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Outdent
});
const Package2 = createLucideIcon("Package2", [
    [
        "path",
        {
            d: "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z",
            key: "1ront0"
        }
    ],
    [
        "path",
        {
            d: "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9",
            key: "19h2x1"
        }
    ],
    [
        "path",
        {
            d: "M12 3v6",
            key: "1holv5"
        }
    ]
]);
var package2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Package2
});
const PackageCheck = createLucideIcon("PackageCheck", [
    [
        "path",
        {
            d: "m16 16 2 2 4-4",
            key: "gfu2re"
        }
    ],
    [
        "path",
        {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
        }
    ],
    [
        "path",
        {
            d: "M16.5 9.4 7.55 4.24",
            key: "10qotr"
        }
    ],
    [
        "polyline",
        {
            points: "3.29 7 12 12 20.71 7",
            key: "ousv84"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "12",
            key: "a4e8g8"
        }
    ]
]);
var packageCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PackageCheck
});
const PackageMinus = createLucideIcon("PackageMinus", [
    [
        "path",
        {
            d: "M16 16h6",
            key: "100bgy"
        }
    ],
    [
        "path",
        {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
        }
    ],
    [
        "path",
        {
            d: "M16.5 9.4 7.55 4.24",
            key: "10qotr"
        }
    ],
    [
        "polyline",
        {
            points: "3.29 7 12 12 20.71 7",
            key: "ousv84"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "12",
            key: "a4e8g8"
        }
    ]
]);
var packageMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PackageMinus
});
const PackageOpen = createLucideIcon("PackageOpen", [
    [
        "path",
        {
            d: "M20.91 8.84 8.56 2.23a1.93 1.93 0 0 0-1.81 0L3.1 4.13a2.12 2.12 0 0 0-.05 3.69l12.22 6.93a2 2 0 0 0 1.94 0L21 12.51a2.12 2.12 0 0 0-.09-3.67Z",
            key: "1vy178"
        }
    ],
    [
        "path",
        {
            d: "m3.09 8.84 12.35-6.61a1.93 1.93 0 0 1 1.81 0l3.65 1.9a2.12 2.12 0 0 1 .1 3.69L8.73 14.75a2 2 0 0 1-1.94 0L3 12.51a2.12 2.12 0 0 1 .09-3.67Z",
            key: "s3bv25"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "13",
            key: "1o4xyi"
        }
    ],
    [
        "path",
        {
            d: "M20 13.5v3.37a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13.5",
            key: "1na2nq"
        }
    ]
]);
var packageOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PackageOpen
});
const PackagePlus = createLucideIcon("PackagePlus", [
    [
        "path",
        {
            d: "M16 16h6",
            key: "100bgy"
        }
    ],
    [
        "path",
        {
            d: "M19 13v6",
            key: "85cyf1"
        }
    ],
    [
        "path",
        {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
        }
    ],
    [
        "path",
        {
            d: "M16.5 9.4 7.55 4.24",
            key: "10qotr"
        }
    ],
    [
        "polyline",
        {
            points: "3.29 7 12 12 20.71 7",
            key: "ousv84"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "12",
            key: "a4e8g8"
        }
    ]
]);
var packagePlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PackagePlus
});
const PackageSearch = createLucideIcon("PackageSearch", [
    [
        "path",
        {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
        }
    ],
    [
        "path",
        {
            d: "M16.5 9.4 7.55 4.24",
            key: "10qotr"
        }
    ],
    [
        "polyline",
        {
            points: "3.29 7 12 12 20.71 7",
            key: "ousv84"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "12",
            key: "a4e8g8"
        }
    ],
    [
        "circle",
        {
            cx: "18.5",
            cy: "15.5",
            r: "2.5",
            key: "b5zd12"
        }
    ],
    [
        "path",
        {
            d: "M20.27 17.27 22 19",
            key: "1l4muz"
        }
    ]
]);
var packageSearch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PackageSearch
});
const PackageX = createLucideIcon("PackageX", [
    [
        "path",
        {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
        }
    ],
    [
        "path",
        {
            d: "M16.5 9.4 7.55 4.24",
            key: "10qotr"
        }
    ],
    [
        "polyline",
        {
            points: "3.29 7 12 12 20.71 7",
            key: "ousv84"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "12",
            key: "a4e8g8"
        }
    ],
    [
        "path",
        {
            d: "m17 13 5 5m-5 0 5-5",
            key: "im3w4b"
        }
    ]
]);
var packageX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PackageX
});
const Package = createLucideIcon("Package", [
    [
        "path",
        {
            d: "M16.5 9.4 7.55 4.24",
            key: "10qotr"
        }
    ],
    [
        "path",
        {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
        }
    ],
    [
        "polyline",
        {
            points: "3.29 7 12 12 20.71 7",
            key: "ousv84"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "22",
            y2: "12",
            key: "a4e8g8"
        }
    ]
]);
var _package = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Package
});
const PaintBucket = createLucideIcon("PaintBucket", [
    [
        "path",
        {
            d: "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z",
            key: "irua1i"
        }
    ],
    [
        "path",
        {
            d: "m5 2 5 5",
            key: "1lls2c"
        }
    ],
    [
        "path",
        {
            d: "M2 13h15",
            key: "1hkzvu"
        }
    ],
    [
        "path",
        {
            d: "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z",
            key: "xk76lq"
        }
    ]
]);
var paintBucket = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PaintBucket
});
const Paintbrush2 = createLucideIcon("Paintbrush2", [
    [
        "path",
        {
            d: "M14 19.9V16h3a2 2 0 0 0 2-2v-2H5v2c0 1.1.9 2 2 2h3v3.9a2 2 0 1 0 4 0Z",
            key: "1c8kta"
        }
    ],
    [
        "path",
        {
            d: "M6 12V2h12v10",
            key: "1esbnf"
        }
    ],
    [
        "path",
        {
            d: "M14 2v4",
            key: "qmzblu"
        }
    ],
    [
        "path",
        {
            d: "M10 2v2",
            key: "7u0qdc"
        }
    ]
]);
var paintbrush2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Paintbrush2
});
const Paintbrush = createLucideIcon("Paintbrush", [
    [
        "path",
        {
            d: "M18.37 2.63 14 7l-1.59-1.59a2 2 0 0 0-2.82 0L8 7l9 9 1.59-1.59a2 2 0 0 0 0-2.82L17 10l4.37-4.37a2.12 2.12 0 1 0-3-3Z",
            key: "m6k5sh"
        }
    ],
    [
        "path",
        {
            d: "M9 8c-2 3-4 3.5-7 4l8 10c2-1 6-5 6-7",
            key: "arzq70"
        }
    ],
    [
        "path",
        {
            d: "M14.5 17.5 4.5 15",
            key: "s7fvrz"
        }
    ]
]);
var paintbrush = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Paintbrush
});
const Palette = createLucideIcon("Palette", [
    [
        "circle",
        {
            cx: "13.5",
            cy: "6.5",
            r: ".5",
            key: "1xcu5"
        }
    ],
    [
        "circle",
        {
            cx: "17.5",
            cy: "10.5",
            r: ".5",
            key: "736e4u"
        }
    ],
    [
        "circle",
        {
            cx: "8.5",
            cy: "7.5",
            r: ".5",
            key: "clrty"
        }
    ],
    [
        "circle",
        {
            cx: "6.5",
            cy: "12.5",
            r: ".5",
            key: "1s4xz9"
        }
    ],
    [
        "path",
        {
            d: "M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z",
            key: "12rzf8"
        }
    ]
]);
var palette = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Palette
});
const Palmtree = createLucideIcon("Palmtree", [
    [
        "path",
        {
            d: "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4",
            key: "foxbe7"
        }
    ],
    [
        "path",
        {
            d: "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3",
            key: "18arnh"
        }
    ],
    [
        "path",
        {
            d: "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35z",
            key: "epoumf"
        }
    ],
    [
        "path",
        {
            d: "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14",
            key: "ft0feo"
        }
    ]
]);
var palmtree = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Palmtree
});
const PanelBottomClose = createLucideIcon("PanelBottomClose", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "15",
            y2: "15",
            key: "o2sbyz"
        }
    ],
    [
        "path",
        {
            d: "m15 8-3 3-3-3",
            key: "1oxy1z"
        }
    ]
]);
var panelBottomClose = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelBottomClose
});
const PanelBottomInactive = createLucideIcon("PanelBottomInactive", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M14 15h1",
            key: "171nev"
        }
    ],
    [
        "path",
        {
            d: "M19 15h2",
            key: "1vnucp"
        }
    ],
    [
        "path",
        {
            d: "M3 15h2",
            key: "8bym0q"
        }
    ],
    [
        "path",
        {
            d: "M9 15h1",
            key: "1tg3ks"
        }
    ]
]);
var panelBottomInactive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelBottomInactive
});
const PanelBottomOpen = createLucideIcon("PanelBottomOpen", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "15",
            y2: "15",
            key: "o2sbyz"
        }
    ],
    [
        "path",
        {
            d: "m9 10 3-3 3 3",
            key: "11gsxs"
        }
    ]
]);
var panelBottomOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelBottomOpen
});
const PanelBottom = createLucideIcon("PanelBottom", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "15",
            y2: "15",
            key: "o2sbyz"
        }
    ]
]);
var panelBottom = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelBottom
});
const PanelLeftClose = createLucideIcon("PanelLeftClose", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M9 3v18",
            key: "fh3hqa"
        }
    ],
    [
        "path",
        {
            d: "m16 15-3-3 3-3",
            key: "14y99z"
        }
    ]
]);
var panelLeftClose = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelLeftClose
});
const PanelLeftInactive = createLucideIcon("PanelLeftInactive", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M9 14v1",
            key: "askpd8"
        }
    ],
    [
        "path",
        {
            d: "M9 19v2",
            key: "16tejx"
        }
    ],
    [
        "path",
        {
            d: "M9 3v2",
            key: "1noubl"
        }
    ],
    [
        "path",
        {
            d: "M9 9v1",
            key: "19ebxg"
        }
    ]
]);
var panelLeftInactive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelLeftInactive
});
const PanelLeftOpen = createLucideIcon("PanelLeftOpen", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "M9 3v18",
            key: "fh3hqa"
        }
    ],
    [
        "path",
        {
            d: "m14 9 3 3-3 3",
            key: "8010ee"
        }
    ]
]);
var panelLeftOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelLeftOpen
});
const PanelLeft = createLucideIcon("PanelLeft", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9",
            y1: "3",
            y2: "21",
            key: "13tij5"
        }
    ]
]);
var panelLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelLeft
});
const PanelRightClose = createLucideIcon("PanelRightClose", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15",
            y1: "3",
            y2: "21",
            key: "1hpv9i"
        }
    ],
    [
        "path",
        {
            d: "m8 9 3 3-3 3",
            key: "12hl5m"
        }
    ]
]);
var panelRightClose = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelRightClose
});
const PanelRightInactive = createLucideIcon("PanelRightInactive", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M15 14v1",
            key: "ilsfch"
        }
    ],
    [
        "path",
        {
            d: "M15 19v2",
            key: "1fst2f"
        }
    ],
    [
        "path",
        {
            d: "M15 3v2",
            key: "z204g4"
        }
    ],
    [
        "path",
        {
            d: "M15 9v1",
            key: "z2a8b1"
        }
    ]
]);
var panelRightInactive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelRightInactive
});
const PanelRightOpen = createLucideIcon("PanelRightOpen", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15",
            y1: "3",
            y2: "21",
            key: "1hpv9i"
        }
    ],
    [
        "path",
        {
            d: "m10 15-3-3 3-3",
            key: "1pgupc"
        }
    ]
]);
var panelRightOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelRightOpen
});
const PanelRight = createLucideIcon("PanelRight", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15",
            y1: "3",
            y2: "21",
            key: "1hpv9i"
        }
    ]
]);
var panelRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelRight
});
const PanelTopClose = createLucideIcon("PanelTopClose", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "9",
            y2: "9",
            key: "1vqk6q"
        }
    ],
    [
        "path",
        {
            d: "m9 16 3-3 3 3",
            key: "1idcnm"
        }
    ]
]);
var panelTopClose = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelTopClose
});
const PanelTopInactive = createLucideIcon("PanelTopInactive", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M14 9h1",
            key: "l0svgy"
        }
    ],
    [
        "path",
        {
            d: "M19 9h2",
            key: "te2zfg"
        }
    ],
    [
        "path",
        {
            d: "M3 9h2",
            key: "1h4ldw"
        }
    ],
    [
        "path",
        {
            d: "M9 9h1",
            key: "15jzuz"
        }
    ]
]);
var panelTopInactive = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelTopInactive
});
const PanelTopOpen = createLucideIcon("PanelTopOpen", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "9",
            y2: "9",
            key: "1vqk6q"
        }
    ],
    [
        "path",
        {
            d: "m15 14-3 3-3-3",
            key: "g215vf"
        }
    ]
]);
var panelTopOpen = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelTopOpen
});
const PanelTop = createLucideIcon("PanelTop", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "9",
            y2: "9",
            key: "1vqk6q"
        }
    ]
]);
var panelTop = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PanelTop
});
const Paperclip = createLucideIcon("Paperclip", [
    [
        "path",
        {
            d: "m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48",
            key: "1u3ebp"
        }
    ]
]);
var paperclip = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Paperclip
});
const Parentheses = createLucideIcon("Parentheses", [
    [
        "path",
        {
            d: "M8 21s-4-3-4-9 4-9 4-9",
            key: "uto9ud"
        }
    ],
    [
        "path",
        {
            d: "M16 3s4 3 4 9-4 9-4 9",
            key: "4w2vsq"
        }
    ]
]);
var parentheses = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Parentheses
});
const ParkingCircleOff = createLucideIcon("ParkingCircleOff", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m5 5 14 14",
            key: "11anup"
        }
    ],
    [
        "path",
        {
            d: "M13 13a3 3 0 1 0 0-6H9v2",
            key: "uoagbd"
        }
    ],
    [
        "path",
        {
            d: "M9 17v-2.34",
            key: "a9qo08"
        }
    ]
]);
var parkingCircleOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ParkingCircleOff
});
const ParkingCircle = createLucideIcon("ParkingCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M9 17V7h4a3 3 0 0 1 0 6H9",
            key: "1dfk2c"
        }
    ]
]);
var parkingCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ParkingCircle
});
const ParkingSquareOff = createLucideIcon("ParkingSquareOff", [
    [
        "path",
        {
            d: "M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41",
            key: "9l1ft6"
        }
    ],
    [
        "path",
        {
            d: "M3 8.7V19a2 2 0 0 0 2 2h10.3",
            key: "17knke"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M13 13a3 3 0 1 0 0-6H9v2",
            key: "uoagbd"
        }
    ],
    [
        "path",
        {
            d: "M9 17v-2.3",
            key: "1jxgo2"
        }
    ]
]);
var parkingSquareOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ParkingSquareOff
});
const ParkingSquare = createLucideIcon("ParkingSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M9 17V7h4a3 3 0 0 1 0 6H9",
            key: "1dfk2c"
        }
    ]
]);
var parkingSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ParkingSquare
});
const PartyPopper = createLucideIcon("PartyPopper", [
    [
        "path",
        {
            d: "M5.8 11.3 2 22l10.7-3.79",
            key: "gwxi1d"
        }
    ],
    [
        "path",
        {
            d: "M4 3h.01",
            key: "1vcuye"
        }
    ],
    [
        "path",
        {
            d: "M22 8h.01",
            key: "1mrtc2"
        }
    ],
    [
        "path",
        {
            d: "M15 2h.01",
            key: "1cjtqr"
        }
    ],
    [
        "path",
        {
            d: "M22 20h.01",
            key: "1mrys2"
        }
    ],
    [
        "path",
        {
            d: "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12v0c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10",
            key: "bpx1uq"
        }
    ],
    [
        "path",
        {
            d: "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11v0c-.11.7-.72 1.22-1.43 1.22H17",
            key: "1pd0s7"
        }
    ],
    [
        "path",
        {
            d: "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98v0C9.52 4.9 9 5.52 9 6.23V7",
            key: "zq5xbz"
        }
    ],
    [
        "path",
        {
            d: "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z",
            key: "4kbmks"
        }
    ]
]);
var partyPopper = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PartyPopper
});
const PauseCircle = createLucideIcon("PauseCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "15",
            y2: "9",
            key: "c1nkhi"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "14",
            y1: "15",
            y2: "9",
            key: "h65svq"
        }
    ]
]);
var pauseCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PauseCircle
});
const PauseOctagon = createLucideIcon("PauseOctagon", [
    [
        "path",
        {
            d: "M10 15V9",
            key: "1lckn7"
        }
    ],
    [
        "path",
        {
            d: "M14 15V9",
            key: "1muqhk"
        }
    ],
    [
        "path",
        {
            d: "M7.714 2h8.572L22 7.714v8.572L16.286 22H7.714L2 16.286V7.714L7.714 2z",
            key: "1m7qra"
        }
    ]
]);
var pauseOctagon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PauseOctagon
});
const Pause = createLucideIcon("Pause", [
    [
        "rect",
        {
            width: "4",
            height: "16",
            x: "6",
            y: "4",
            key: "iffhe4"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "16",
            x: "14",
            y: "4",
            key: "sjin7j"
        }
    ]
]);
var pause = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pause
});
const PcCase = createLucideIcon("PcCase", [
    [
        "rect",
        {
            width: "14",
            height: "20",
            x: "5",
            y: "2",
            rx: "2",
            key: "1uq1d7"
        }
    ],
    [
        "path",
        {
            d: "M15 14h.01",
            key: "1kp3bh"
        }
    ],
    [
        "path",
        {
            d: "M9 6h6",
            key: "dgm16u"
        }
    ],
    [
        "path",
        {
            d: "M9 10h6",
            key: "9gxzsh"
        }
    ]
]);
var pcCase = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PcCase
});
const PenTool = createLucideIcon("PenTool", [
    [
        "path",
        {
            d: "m12 19 7-7 3 3-7 7-3-3z",
            key: "rklqx2"
        }
    ],
    [
        "path",
        {
            d: "m18 13-1.5-7.5L2 2l3.5 14.5L13 18l5-5z",
            key: "1et58u"
        }
    ],
    [
        "path",
        {
            d: "m2 2 7.586 7.586",
            key: "etlp93"
        }
    ],
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "2",
            key: "xmgehs"
        }
    ]
]);
var penTool = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PenTool
});
const Pencil = createLucideIcon("Pencil", [
    [
        "line",
        {
            x1: "18",
            x2: "22",
            y1: "2",
            y2: "6",
            key: "1e96e7"
        }
    ],
    [
        "path",
        {
            d: "M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z",
            key: "12iwkt"
        }
    ]
]);
var pencil = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pencil
});
const Percent = createLucideIcon("Percent", [
    [
        "line",
        {
            x1: "19",
            x2: "5",
            y1: "5",
            y2: "19",
            key: "1x9vlm"
        }
    ],
    [
        "circle",
        {
            cx: "6.5",
            cy: "6.5",
            r: "2.5",
            key: "4mh3h7"
        }
    ],
    [
        "circle",
        {
            cx: "17.5",
            cy: "17.5",
            r: "2.5",
            key: "1mdrzq"
        }
    ]
]);
var percent = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Percent
});
const PersonStanding = createLucideIcon("PersonStanding", [
    [
        "circle",
        {
            cx: "12",
            cy: "5",
            r: "1",
            key: "gxeob9"
        }
    ],
    [
        "path",
        {
            d: "m9 20 3-6 3 6",
            key: "se2kox"
        }
    ],
    [
        "path",
        {
            d: "m6 8 6 2 6-2",
            key: "4o3us4"
        }
    ],
    [
        "path",
        {
            d: "M12 10v4",
            key: "1kjpxc"
        }
    ]
]);
var personStanding = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PersonStanding
});
const PhoneCall = createLucideIcon("PhoneCall", [
    [
        "path",
        {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
        }
    ],
    [
        "path",
        {
            d: "M14.05 2a9 9 0 0 1 8 7.94",
            key: "vmijpz"
        }
    ],
    [
        "path",
        {
            d: "M14.05 6A5 5 0 0 1 18 10",
            key: "13nbpp"
        }
    ]
]);
var phoneCall = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PhoneCall
});
const PhoneForwarded = createLucideIcon("PhoneForwarded", [
    [
        "polyline",
        {
            points: "18 2 22 6 18 10",
            key: "6vjanh"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "22",
            y1: "6",
            y2: "6",
            key: "1jsywh"
        }
    ],
    [
        "path",
        {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
        }
    ]
]);
var phoneForwarded = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PhoneForwarded
});
const PhoneIncoming = createLucideIcon("PhoneIncoming", [
    [
        "polyline",
        {
            points: "16 2 16 8 22 8",
            key: "1ygljm"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "16",
            y1: "2",
            y2: "8",
            key: "1xzwqn"
        }
    ],
    [
        "path",
        {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
        }
    ]
]);
var phoneIncoming = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PhoneIncoming
});
const PhoneMissed = createLucideIcon("PhoneMissed", [
    [
        "line",
        {
            x1: "22",
            x2: "16",
            y1: "2",
            y2: "8",
            key: "1xzwqn"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "22",
            y1: "2",
            y2: "8",
            key: "13zxdn"
        }
    ],
    [
        "path",
        {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
        }
    ]
]);
var phoneMissed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PhoneMissed
});
const PhoneOff = createLucideIcon("PhoneOff", [
    [
        "path",
        {
            d: "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91",
            key: "z86iuo"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "2",
            y1: "2",
            y2: "22",
            key: "11kh81"
        }
    ]
]);
var phoneOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PhoneOff
});
const PhoneOutgoing = createLucideIcon("PhoneOutgoing", [
    [
        "polyline",
        {
            points: "22 8 22 2 16 2",
            key: "1g204g"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "22",
            y1: "8",
            y2: "2",
            key: "1ggias"
        }
    ],
    [
        "path",
        {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
        }
    ]
]);
var phoneOutgoing = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PhoneOutgoing
});
const Phone = createLucideIcon("Phone", [
    [
        "path",
        {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
        }
    ]
]);
var phone = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Phone
});
const PiSquare = createLucideIcon("PiSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M7 7h10",
            key: "udp07y"
        }
    ],
    [
        "path",
        {
            d: "M10 7v10",
            key: "i1d9ee"
        }
    ],
    [
        "path",
        {
            d: "M16 17a2 2 0 0 1-2-2V7",
            key: "ftwdc7"
        }
    ]
]);
var piSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PiSquare
});
const Pi = createLucideIcon("Pi", [
    [
        "line",
        {
            x1: "9",
            x2: "9",
            y1: "4",
            y2: "20",
            key: "ovs5a5"
        }
    ],
    [
        "path",
        {
            d: "M4 7c0-1.7 1.3-3 3-3h13",
            key: "10pag4"
        }
    ],
    [
        "path",
        {
            d: "M18 20c-1.7 0-3-1.3-3-3V4",
            key: "1gaosr"
        }
    ]
]);
var pi = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pi
});
const PictureInPicture2 = createLucideIcon("PictureInPicture2", [
    [
        "path",
        {
            d: "M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4",
            key: "daa4of"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "7",
            x: "12",
            y: "13",
            rx: "2",
            key: "1nb8gs"
        }
    ]
]);
var pictureInPicture2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PictureInPicture2
});
const PictureInPicture = createLucideIcon("PictureInPicture", [
    [
        "path",
        {
            d: "M8 4.5v5H3m-1-6 6 6m13 0v-3c0-1.16-.84-2-2-2h-7m-9 9v2c0 1.05.95 2 2 2h3",
            key: "bcd8fb"
        }
    ],
    [
        "rect",
        {
            width: "10",
            height: "7",
            x: "12",
            y: "13.5",
            ry: "2",
            key: "136fx3"
        }
    ]
]);
var pictureInPicture = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PictureInPicture
});
const PieChart = createLucideIcon("PieChart", [
    [
        "path",
        {
            d: "M21.21 15.89A10 10 0 1 1 8 2.83",
            key: "k2fpak"
        }
    ],
    [
        "path",
        {
            d: "M22 12A10 10 0 0 0 12 2v10z",
            key: "1rfc4y"
        }
    ]
]);
var pieChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PieChart
});
const PiggyBank = createLucideIcon("PiggyBank", [
    [
        "path",
        {
            d: "M19 5c-1.5 0-2.8 1.4-3 2-3.5-1.5-11-.3-11 5 0 1.8 0 3 2 4.5V20h4v-2h3v2h4v-4c1-.5 1.7-1 2-2h2v-4h-2c0-1-.5-1.5-1-2h0V5z",
            key: "uf6l00"
        }
    ],
    [
        "path",
        {
            d: "M2 9v1c0 1.1.9 2 2 2h1",
            key: "nm575m"
        }
    ],
    [
        "path",
        {
            d: "M16 11h0",
            key: "k2aug8"
        }
    ]
]);
var piggyBank = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PiggyBank
});
const PilcrowSquare = createLucideIcon("PilcrowSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M12 12H9.5a2.5 2.5 0 0 1 0-5H17",
            key: "1l9586"
        }
    ],
    [
        "path",
        {
            d: "M12 7v10",
            key: "jspqdw"
        }
    ],
    [
        "path",
        {
            d: "M16 7v10",
            key: "lavkr4"
        }
    ]
]);
var pilcrowSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PilcrowSquare
});
const Pilcrow = createLucideIcon("Pilcrow", [
    [
        "path",
        {
            d: "M13 4v16",
            key: "8vvj80"
        }
    ],
    [
        "path",
        {
            d: "M17 4v16",
            key: "7dpous"
        }
    ],
    [
        "path",
        {
            d: "M19 4H9.5a4.5 4.5 0 0 0 0 9H13",
            key: "sh4n9v"
        }
    ]
]);
var pilcrow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pilcrow
});
const Pill = createLucideIcon("Pill", [
    [
        "path",
        {
            d: "m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z",
            key: "wa1lgi"
        }
    ],
    [
        "path",
        {
            d: "m8.5 8.5 7 7",
            key: "rvfmvr"
        }
    ]
]);
var pill = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pill
});
const PinOff = createLucideIcon("PinOff", [
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "17",
            y2: "22",
            key: "1jrz49"
        }
    ],
    [
        "path",
        {
            d: "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V17h12",
            key: "13x2n8"
        }
    ],
    [
        "path",
        {
            d: "M15 9.34V6h1a2 2 0 0 0 0-4H7.89",
            key: "reo3ki"
        }
    ]
]);
var pinOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PinOff
});
const Pin = createLucideIcon("Pin", [
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "17",
            y2: "22",
            key: "1jrz49"
        }
    ],
    [
        "path",
        {
            d: "M5 17h14v-1.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V6h1a2 2 0 0 0 0-4H8a2 2 0 0 0 0 4h1v4.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24Z",
            key: "13yl11"
        }
    ]
]);
var pin = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pin
});
const Pipette = createLucideIcon("Pipette", [
    [
        "path",
        {
            d: "m2 22 1-1h3l9-9",
            key: "1sre89"
        }
    ],
    [
        "path",
        {
            d: "M3 21v-3l9-9",
            key: "hpe2y6"
        }
    ],
    [
        "path",
        {
            d: "m15 6 3.4-3.4a2.1 2.1 0 1 1 3 3L18 9l.4.4a2.1 2.1 0 1 1-3 3l-3.8-3.8a2.1 2.1 0 1 1 3-3l.4.4Z",
            key: "196du1"
        }
    ]
]);
var pipette = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pipette
});
const Pizza = createLucideIcon("Pizza", [
    [
        "path",
        {
            d: "M15 11h.01",
            key: "rns66s"
        }
    ],
    [
        "path",
        {
            d: "M11 15h.01",
            key: "k85uqc"
        }
    ],
    [
        "path",
        {
            d: "M16 16h.01",
            key: "1f9h7w"
        }
    ],
    [
        "path",
        {
            d: "m2 16 20 6-6-20A20 20 0 0 0 2 16",
            key: "e4slt2"
        }
    ],
    [
        "path",
        {
            d: "M5.71 17.11a17.04 17.04 0 0 1 11.4-11.4",
            key: "rerf8f"
        }
    ]
]);
var pizza = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pizza
});
const PlaneLanding = createLucideIcon("PlaneLanding", [
    [
        "path",
        {
            d: "M2 22h20",
            key: "272qi7"
        }
    ],
    [
        "path",
        {
            d: "M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z",
            key: "1ma21e"
        }
    ]
]);
var planeLanding = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlaneLanding
});
const PlaneTakeoff = createLucideIcon("PlaneTakeoff", [
    [
        "path",
        {
            d: "M2 22h20",
            key: "272qi7"
        }
    ],
    [
        "path",
        {
            d: "M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z",
            key: "fkigj9"
        }
    ]
]);
var planeTakeoff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlaneTakeoff
});
const Plane = createLucideIcon("Plane", [
    [
        "path",
        {
            d: "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z",
            key: "1v9wt8"
        }
    ]
]);
var plane = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Plane
});
const PlayCircle = createLucideIcon("PlayCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "polygon",
        {
            points: "10 8 16 12 10 16 10 8",
            key: "1cimsy"
        }
    ]
]);
var playCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlayCircle
});
const PlaySquare = createLucideIcon("PlaySquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m9 8 6 4-6 4Z",
            key: "f1r3lt"
        }
    ]
]);
var playSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlaySquare
});
const Play = createLucideIcon("Play", [
    [
        "polygon",
        {
            points: "5 3 19 12 5 21 5 3",
            key: "191637"
        }
    ]
]);
var play = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Play
});
const Plug2 = createLucideIcon("Plug2", [
    [
        "path",
        {
            d: "M9 2v6",
            key: "17ngun"
        }
    ],
    [
        "path",
        {
            d: "M15 2v6",
            key: "s7yy2p"
        }
    ],
    [
        "path",
        {
            d: "M12 17v5",
            key: "bb1du9"
        }
    ],
    [
        "path",
        {
            d: "M5 8h14",
            key: "pcz4l3"
        }
    ],
    [
        "path",
        {
            d: "M6 11V8h12v3a6 6 0 1 1-12 0v0Z",
            key: "nd4hoy"
        }
    ]
]);
var plug2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Plug2
});
const PlugZap2 = createLucideIcon("PlugZap2", [
    [
        "path",
        {
            d: "m13 2-2 2.5h3L12 7",
            key: "1me98u"
        }
    ],
    [
        "path",
        {
            d: "M10 14v-3",
            key: "1mllf3"
        }
    ],
    [
        "path",
        {
            d: "M14 14v-3",
            key: "1l3fkq"
        }
    ],
    [
        "path",
        {
            d: "M11 19c-1.7 0-3-1.3-3-3v-2h8v2c0 1.7-1.3 3-3 3Z",
            key: "jd5pat"
        }
    ],
    [
        "path",
        {
            d: "M12 22v-3",
            key: "kmzjlo"
        }
    ]
]);
var plugZap2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlugZap2
});
const PlugZap = createLucideIcon("PlugZap", [
    [
        "path",
        {
            d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z",
            key: "goz73y"
        }
    ],
    [
        "path",
        {
            d: "m2 22 3-3",
            key: "19mgm9"
        }
    ],
    [
        "path",
        {
            d: "M7.5 13.5 10 11",
            key: "7xgeeb"
        }
    ],
    [
        "path",
        {
            d: "M10.5 16.5 13 14",
            key: "10btkg"
        }
    ],
    [
        "path",
        {
            d: "m18 3-4 4h6l-4 4",
            key: "16psg9"
        }
    ]
]);
var plugZap = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlugZap
});
const Plug = createLucideIcon("Plug", [
    [
        "path",
        {
            d: "M12 22v-5",
            key: "1ega77"
        }
    ],
    [
        "path",
        {
            d: "M9 8V2",
            key: "14iosj"
        }
    ],
    [
        "path",
        {
            d: "M15 8V2",
            key: "18g5xt"
        }
    ],
    [
        "path",
        {
            d: "M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z",
            key: "osxo6l"
        }
    ]
]);
var plug = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Plug
});
const PlusCircle = createLucideIcon("PlusCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "path",
        {
            d: "M12 8v8",
            key: "napkw2"
        }
    ]
]);
var plusCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlusCircle
});
const PlusSquare = createLucideIcon("PlusSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "path",
        {
            d: "M12 8v8",
            key: "napkw2"
        }
    ]
]);
var plusSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PlusSquare
});
const Plus = createLucideIcon("Plus", [
    [
        "path",
        {
            d: "M5 12h14",
            key: "1ays0h"
        }
    ],
    [
        "path",
        {
            d: "M12 5v14",
            key: "s699le"
        }
    ]
]);
var plus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Plus
});
const PocketKnife = createLucideIcon("PocketKnife", [
    [
        "path",
        {
            d: "M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2",
            key: "19w3oe"
        }
    ],
    [
        "path",
        {
            d: "M18 6h.01",
            key: "1v4wsw"
        }
    ],
    [
        "path",
        {
            d: "M6 18h.01",
            key: "uhywen"
        }
    ],
    [
        "path",
        {
            d: "M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z",
            key: "6fykxj"
        }
    ],
    [
        "path",
        {
            d: "M18 11.66V22a4 4 0 0 0 4-4V6",
            key: "1utzek"
        }
    ]
]);
var pocketKnife = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PocketKnife
});
const Pocket = createLucideIcon("Pocket", [
    [
        "path",
        {
            d: "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z",
            key: "1mz881"
        }
    ],
    [
        "polyline",
        {
            points: "8 10 12 14 16 10",
            key: "w4mbv5"
        }
    ]
]);
var pocket = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pocket
});
const Podcast = createLucideIcon("Podcast", [
    [
        "circle",
        {
            cx: "12",
            cy: "11",
            r: "1",
            key: "1gvufo"
        }
    ],
    [
        "path",
        {
            d: "M11 17a1 1 0 0 1 2 0c0 .5-.34 3-.5 4.5a.5.5 0 0 1-1 0c-.16-1.5-.5-4-.5-4.5Z",
            key: "1n5fvv"
        }
    ],
    [
        "path",
        {
            d: "M8 14a5 5 0 1 1 8 0",
            key: "fc81rn"
        }
    ],
    [
        "path",
        {
            d: "M17 18.5a9 9 0 1 0-10 0",
            key: "jqtxkf"
        }
    ]
]);
var podcast = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Podcast
});
const Pointer = createLucideIcon("Pointer", [
    [
        "path",
        {
            d: "M22 14a8 8 0 0 1-8 8",
            key: "56vcr3"
        }
    ],
    [
        "path",
        {
            d: "M18 11v-1a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0",
            key: "1pp0yd"
        }
    ],
    [
        "path",
        {
            d: "M14 10V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1",
            key: "u654g"
        }
    ],
    [
        "path",
        {
            d: "M10 9.5V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v10",
            key: "1e2dtv"
        }
    ],
    [
        "path",
        {
            d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
            key: "g6ys72"
        }
    ]
]);
var pointer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Pointer
});
const Popcorn = createLucideIcon("Popcorn", [
    [
        "path",
        {
            d: "M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4",
            key: "10td1f"
        }
    ],
    [
        "path",
        {
            d: "M10 22 9 8",
            key: "yjptiv"
        }
    ],
    [
        "path",
        {
            d: "m14 22 1-14",
            key: "8jwc8b"
        }
    ],
    [
        "path",
        {
            d: "M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z",
            key: "1qo33t"
        }
    ]
]);
var popcorn = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Popcorn
});
const Popsicle = createLucideIcon("Popsicle", [
    [
        "path",
        {
            d: "M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z",
            key: "1o68ps"
        }
    ],
    [
        "path",
        {
            d: "m22 22-5.5-5.5",
            key: "17o70y"
        }
    ]
]);
var popsicle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Popsicle
});
const PoundSterling = createLucideIcon("PoundSterling", [
    [
        "path",
        {
            d: "M18 7c0-5.333-8-5.333-8 0",
            key: "1prm2n"
        }
    ],
    [
        "path",
        {
            d: "M10 7v14",
            key: "18tmcs"
        }
    ],
    [
        "path",
        {
            d: "M6 21h12",
            key: "4dkmi1"
        }
    ],
    [
        "path",
        {
            d: "M6 13h10",
            key: "ybwr4a"
        }
    ]
]);
var poundSterling = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PoundSterling
});
const PowerOff = createLucideIcon("PowerOff", [
    [
        "path",
        {
            d: "M18.36 6.64A9 9 0 0 1 20.77 15",
            key: "dxknvb"
        }
    ],
    [
        "path",
        {
            d: "M6.16 6.16a9 9 0 1 0 12.68 12.68",
            key: "1x7qb5"
        }
    ],
    [
        "path",
        {
            d: "M12 2v4",
            key: "3427ic"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ]
]);
var powerOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: PowerOff
});
const Power = createLucideIcon("Power", [
    [
        "path",
        {
            d: "M18.36 6.64a9 9 0 1 1-12.73 0",
            key: "phirl6"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "12",
            key: "aemgbe"
        }
    ]
]);
var power = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Power
});
const Presentation = createLucideIcon("Presentation", [
    [
        "path",
        {
            d: "M2 3h20",
            key: "91anmk"
        }
    ],
    [
        "path",
        {
            d: "M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3",
            key: "2k9sn8"
        }
    ],
    [
        "path",
        {
            d: "m7 21 5-5 5 5",
            key: "bip4we"
        }
    ]
]);
var presentation = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Presentation
});
const Printer = createLucideIcon("Printer", [
    [
        "polyline",
        {
            points: "6 9 6 2 18 2 18 9",
            key: "1306q4"
        }
    ],
    [
        "path",
        {
            d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
            key: "143wyd"
        }
    ],
    [
        "rect",
        {
            width: "12",
            height: "8",
            x: "6",
            y: "14",
            key: "5ipwut"
        }
    ]
]);
var printer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Printer
});
const Projector = createLucideIcon("Projector", [
    [
        "path",
        {
            d: "M5 7 3 5",
            key: "1yys58"
        }
    ],
    [
        "path",
        {
            d: "M9 6V3",
            key: "1ptz9u"
        }
    ],
    [
        "path",
        {
            d: "m13 7 2-2",
            key: "1w3vmq"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "13",
            r: "3",
            key: "1mma13"
        }
    ],
    [
        "path",
        {
            d: "M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17",
            key: "2frwzc"
        }
    ],
    [
        "path",
        {
            d: "M16 16h2",
            key: "dnq2od"
        }
    ]
]);
var projector = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Projector
});
const Puzzle = createLucideIcon("Puzzle", [
    [
        "path",
        {
            d: "M19.439 7.85c-.049.322.059.648.289.878l1.568 1.568c.47.47.706 1.087.706 1.704s-.235 1.233-.706 1.704l-1.611 1.611a.98.98 0 0 1-.837.276c-.47-.07-.802-.48-.968-.925a2.501 2.501 0 1 0-3.214 3.214c.446.166.855.497.925.968a.979.979 0 0 1-.276.837l-1.61 1.61a2.404 2.404 0 0 1-1.705.707 2.402 2.402 0 0 1-1.704-.706l-1.568-1.568a1.026 1.026 0 0 0-.877-.29c-.493.074-.84.504-1.02.968a2.5 2.5 0 1 1-3.237-3.237c.464-.18.894-.527.967-1.02a1.026 1.026 0 0 0-.289-.877l-1.568-1.568A2.402 2.402 0 0 1 1.998 12c0-.617.236-1.234.706-1.704L4.23 8.77c.24-.24.581-.353.917-.303.515.077.877.528 1.073 1.01a2.5 2.5 0 1 0 3.259-3.259c-.482-.196-.933-.558-1.01-1.073-.05-.336.062-.676.303-.917l1.525-1.525A2.402 2.402 0 0 1 12 1.998c.617 0 1.234.236 1.704.706l1.568 1.568c.23.23.556.338.877.29.493-.074.84-.504 1.02-.968a2.5 2.5 0 1 1 3.237 3.237c-.464.18-.894.527-.967 1.02Z",
            key: "i0oyt7"
        }
    ]
]);
var puzzle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Puzzle
});
const QrCode = createLucideIcon("QrCode", [
    [
        "rect",
        {
            width: "5",
            height: "5",
            x: "3",
            y: "3",
            rx: "1",
            key: "1tu5fj"
        }
    ],
    [
        "rect",
        {
            width: "5",
            height: "5",
            x: "16",
            y: "3",
            rx: "1",
            key: "1v8r4q"
        }
    ],
    [
        "rect",
        {
            width: "5",
            height: "5",
            x: "3",
            y: "16",
            rx: "1",
            key: "1x03jg"
        }
    ],
    [
        "path",
        {
            d: "M21 16h-3a2 2 0 0 0-2 2v3",
            key: "177gqh"
        }
    ],
    [
        "path",
        {
            d: "M21 21v.01",
            key: "ents32"
        }
    ],
    [
        "path",
        {
            d: "M12 7v3a2 2 0 0 1-2 2H7",
            key: "8crl2c"
        }
    ],
    [
        "path",
        {
            d: "M3 12h.01",
            key: "nlz23k"
        }
    ],
    [
        "path",
        {
            d: "M12 3h.01",
            key: "n36tog"
        }
    ],
    [
        "path",
        {
            d: "M12 16v.01",
            key: "133mhm"
        }
    ],
    [
        "path",
        {
            d: "M16 12h1",
            key: "1slzba"
        }
    ],
    [
        "path",
        {
            d: "M21 12v.01",
            key: "1lwtk9"
        }
    ],
    [
        "path",
        {
            d: "M12 21v-1",
            key: "1880an"
        }
    ]
]);
var qrCode = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: QrCode
});
const Quote = createLucideIcon("Quote", [
    [
        "path",
        {
            d: "M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z",
            key: "4rm80e"
        }
    ],
    [
        "path",
        {
            d: "M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z",
            key: "10za9r"
        }
    ]
]);
var quote = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Quote
});
const Radar = createLucideIcon("Radar", [
    [
        "path",
        {
            d: "M19.07 4.93A10 10 0 0 0 6.99 3.34",
            key: "z3du51"
        }
    ],
    [
        "path",
        {
            d: "M4 6h.01",
            key: "oypzma"
        }
    ],
    [
        "path",
        {
            d: "M2.29 9.62A10 10 0 1 0 21.31 8.35",
            key: "qzzz0"
        }
    ],
    [
        "path",
        {
            d: "M16.24 7.76A6 6 0 1 0 8.23 16.67",
            key: "1yjesh"
        }
    ],
    [
        "path",
        {
            d: "M12 18h.01",
            key: "mhygvu"
        }
    ],
    [
        "path",
        {
            d: "M17.99 11.66A6 6 0 0 1 15.77 16.67",
            key: "1u2y91"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ],
    [
        "path",
        {
            d: "m13.41 10.59 5.66-5.66",
            key: "mhq4k0"
        }
    ]
]);
var radar = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Radar
});
const Radiation = createLucideIcon("Radiation", [
    [
        "path",
        {
            d: "M12 12h0",
            key: "1tz7lj"
        }
    ],
    [
        "path",
        {
            d: "M7.5 4.2c-.3-.5-.9-.7-1.3-.4C3.9 5.5 2.3 8.1 2 11c-.1.5.4 1 1 1h5c0-1.5.8-2.8 2-3.4-1.1-1.9-2-3.5-2.5-4.4z",
            key: "wy49g3"
        }
    ],
    [
        "path",
        {
            d: "M21 12c.6 0 1-.4 1-1-.3-2.9-1.8-5.5-4.1-7.1-.4-.3-1.1-.2-1.3.3-.6.9-1.5 2.5-2.6 4.3 1.2.7 2 2 2 3.5h5z",
            key: "vklnvr"
        }
    ],
    [
        "path",
        {
            d: "M7.5 19.8c-.3.5-.1 1.1.4 1.3 2.6 1.2 5.6 1.2 8.2 0 .5-.2.7-.8.4-1.3-.5-.9-1.4-2.5-2.5-4.3-1.2.7-2.8.7-4 0-1.1 1.8-2 3.4-2.5 4.3z",
            key: "wkdf1o"
        }
    ]
]);
var radiation = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Radiation
});
const RadioReceiver = createLucideIcon("RadioReceiver", [
    [
        "path",
        {
            d: "M5 16v2",
            key: "g5qcv5"
        }
    ],
    [
        "path",
        {
            d: "M19 16v2",
            key: "1gbaio"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "8",
            x: "2",
            y: "8",
            rx: "2",
            key: "vjsjur"
        }
    ],
    [
        "path",
        {
            d: "M18 12h0",
            key: "1ucjzd"
        }
    ]
]);
var radioReceiver = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RadioReceiver
});
const RadioTower = createLucideIcon("RadioTower", [
    [
        "path",
        {
            d: "M4.9 16.1C1 12.2 1 5.8 4.9 1.9",
            key: "s0qx1y"
        }
    ],
    [
        "path",
        {
            d: "M7.8 4.7a6.14 6.14 0 0 0-.8 7.5",
            key: "1idnkw"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "9",
            r: "2",
            key: "1092wv"
        }
    ],
    [
        "path",
        {
            d: "M16.2 4.8c2 2 2.26 5.11.8 7.47",
            key: "ojru2q"
        }
    ],
    [
        "path",
        {
            d: "M19.1 1.9a9.96 9.96 0 0 1 0 14.1",
            key: "rhi7fg"
        }
    ],
    [
        "path",
        {
            d: "M9.5 18h5",
            key: "mfy3pd"
        }
    ],
    [
        "path",
        {
            d: "m8 22 4-11 4 11",
            key: "25yftu"
        }
    ]
]);
var radioTower = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RadioTower
});
const Radio = createLucideIcon("Radio", [
    [
        "path",
        {
            d: "M4.9 19.1C1 15.2 1 8.8 4.9 4.9",
            key: "1vaf9d"
        }
    ],
    [
        "path",
        {
            d: "M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5",
            key: "u1ii0m"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ],
    [
        "path",
        {
            d: "M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5",
            key: "1j5fej"
        }
    ],
    [
        "path",
        {
            d: "M19.1 4.9C23 8.8 23 15.1 19.1 19",
            key: "10b0cb"
        }
    ]
]);
var radio = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Radio
});
const Rainbow = createLucideIcon("Rainbow", [
    [
        "path",
        {
            d: "M22 17a10 10 0 0 0-20 0",
            key: "ozegv"
        }
    ],
    [
        "path",
        {
            d: "M6 17a6 6 0 0 1 12 0",
            key: "5giftw"
        }
    ],
    [
        "path",
        {
            d: "M10 17a2 2 0 0 1 4 0",
            key: "gnsikk"
        }
    ]
]);
var rainbow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Rainbow
});
const Rat = createLucideIcon("Rat", [
    [
        "path",
        {
            d: "M17 5c0-1.7-1.3-3-3-3s-3 1.3-3 3c0 .8.3 1.5.8 2H11c-3.9 0-7 3.1-7 7v0c0 2.2 1.8 4 4 4",
            key: "16aj0u"
        }
    ],
    [
        "path",
        {
            d: "M16.8 3.9c.3-.3.6-.5 1-.7 1.5-.6 3.3.1 3.9 1.6.6 1.5-.1 3.3-1.6 3.9l1.6 2.8c.2.3.2.7.2 1-.2.8-.9 1.2-1.7 1.1 0 0-1.6-.3-2.7-.6H17c-1.7 0-3 1.3-3 3",
            key: "1crdmb"
        }
    ],
    [
        "path",
        {
            d: "M13.2 18a3 3 0 0 0-2.2-5",
            key: "1ol3lk"
        }
    ],
    [
        "path",
        {
            d: "M13 22H4a2 2 0 0 1 0-4h12",
            key: "bt3f23"
        }
    ],
    [
        "path",
        {
            d: "M16 9h.01",
            key: "1bdo4e"
        }
    ]
]);
var rat = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Rat
});
const Receipt = createLucideIcon("Receipt", [
    [
        "path",
        {
            d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1-2-1Z",
            key: "wqdwcb"
        }
    ],
    [
        "path",
        {
            d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8",
            key: "1h4pet"
        }
    ],
    [
        "path",
        {
            d: "M12 17V7",
            key: "pyj7ub"
        }
    ]
]);
var receipt = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Receipt
});
const RectangleHorizontal = createLucideIcon("RectangleHorizontal", [
    [
        "rect",
        {
            width: "20",
            height: "12",
            x: "2",
            y: "6",
            rx: "2",
            key: "9lu3g6"
        }
    ]
]);
var rectangleHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RectangleHorizontal
});
const RectangleVertical = createLucideIcon("RectangleVertical", [
    [
        "rect",
        {
            width: "12",
            height: "20",
            x: "6",
            y: "2",
            rx: "2",
            key: "1oxtiu"
        }
    ]
]);
var rectangleVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RectangleVertical
});
const Recycle = createLucideIcon("Recycle", [
    [
        "path",
        {
            d: "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5",
            key: "x6z5xu"
        }
    ],
    [
        "path",
        {
            d: "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12",
            key: "1x4zh5"
        }
    ],
    [
        "path",
        {
            d: "m14 16-3 3 3 3",
            key: "f6jyew"
        }
    ],
    [
        "path",
        {
            d: "M8.293 13.596 7.196 9.5 3.1 10.598",
            key: "wf1obh"
        }
    ],
    [
        "path",
        {
            d: "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843",
            key: "9tzpgr"
        }
    ],
    [
        "path",
        {
            d: "m13.378 9.633 4.096 1.098 1.097-4.096",
            key: "1oe83g"
        }
    ]
]);
var recycle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Recycle
});
const Redo2 = createLucideIcon("Redo2", [
    [
        "path",
        {
            d: "m15 14 5-5-5-5",
            key: "12vg1m"
        }
    ],
    [
        "path",
        {
            d: "M20 9H9.5A5.5 5.5 0 0 0 4 14.5v0A5.5 5.5 0 0 0 9.5 20H13",
            key: "19mnr4"
        }
    ]
]);
var redo2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Redo2
});
const RedoDot = createLucideIcon("RedoDot", [
    [
        "circle",
        {
            cx: "12",
            cy: "17",
            r: "1",
            key: "1ixnty"
        }
    ],
    [
        "path",
        {
            d: "M21 7v6h-6",
            key: "3ptur4"
        }
    ],
    [
        "path",
        {
            d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7",
            key: "1kgawr"
        }
    ]
]);
var redoDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RedoDot
});
const Redo = createLucideIcon("Redo", [
    [
        "path",
        {
            d: "M21 7v6h-6",
            key: "3ptur4"
        }
    ],
    [
        "path",
        {
            d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7",
            key: "1kgawr"
        }
    ]
]);
var redo = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Redo
});
const RefreshCcwDot = createLucideIcon("RefreshCcwDot", [
    [
        "path",
        {
            d: "M3 2v6h6",
            key: "18ldww"
        }
    ],
    [
        "path",
        {
            d: "M21 12A9 9 0 0 0 6 5.3L3 8",
            key: "1pbrqz"
        }
    ],
    [
        "path",
        {
            d: "M21 22v-6h-6",
            key: "usdfbe"
        }
    ],
    [
        "path",
        {
            d: "M3 12a9 9 0 0 0 15 6.7l3-2.7",
            key: "1hosoe"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ]
]);
var refreshCcwDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RefreshCcwDot
});
const RefreshCcw = createLucideIcon("RefreshCcw", [
    [
        "path",
        {
            d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8",
            key: "14sxne"
        }
    ],
    [
        "path",
        {
            d: "M3 3v5h5",
            key: "1xhq8a"
        }
    ],
    [
        "path",
        {
            d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16",
            key: "1hlbsb"
        }
    ],
    [
        "path",
        {
            d: "M16 16h5v5",
            key: "ccwih5"
        }
    ]
]);
var refreshCcw = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RefreshCcw
});
const RefreshCwOff = createLucideIcon("RefreshCwOff", [
    [
        "path",
        {
            d: "M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47",
            key: "1krf6h"
        }
    ],
    [
        "path",
        {
            d: "M8 16H3v5",
            key: "1cv678"
        }
    ],
    [
        "path",
        {
            d: "M3 12C3 9.51 4 7.26 5.64 5.64",
            key: "ruvoct"
        }
    ],
    [
        "path",
        {
            d: "m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64",
            key: "19q130"
        }
    ],
    [
        "path",
        {
            d: "M21 12c0 1-.16 1.97-.47 2.87",
            key: "4w8emr"
        }
    ],
    [
        "path",
        {
            d: "M21 3v5h-5",
            key: "1q7to0"
        }
    ],
    [
        "path",
        {
            d: "M22 22 2 2",
            key: "1r8tn9"
        }
    ]
]);
var refreshCwOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RefreshCwOff
});
const RefreshCw = createLucideIcon("RefreshCw", [
    [
        "path",
        {
            d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",
            key: "v9h5vc"
        }
    ],
    [
        "path",
        {
            d: "M21 3v5h-5",
            key: "1q7to0"
        }
    ],
    [
        "path",
        {
            d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",
            key: "3uifl3"
        }
    ],
    [
        "path",
        {
            d: "M8 16H3v5",
            key: "1cv678"
        }
    ]
]);
var refreshCw = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RefreshCw
});
const Refrigerator = createLucideIcon("Refrigerator", [
    [
        "path",
        {
            d: "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z",
            key: "fpq118"
        }
    ],
    [
        "path",
        {
            d: "M5 10h14",
            key: "elsbfy"
        }
    ],
    [
        "path",
        {
            d: "M15 7v6",
            key: "1nx30x"
        }
    ]
]);
var refrigerator = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Refrigerator
});
const Regex = createLucideIcon("Regex", [
    [
        "path",
        {
            d: "M17 3v10",
            key: "15fgeh"
        }
    ],
    [
        "path",
        {
            d: "m12.67 5.5 8.66 5",
            key: "1gpheq"
        }
    ],
    [
        "path",
        {
            d: "m12.67 10.5 8.66-5",
            key: "1dkfa6"
        }
    ],
    [
        "path",
        {
            d: "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z",
            key: "swwfx4"
        }
    ]
]);
var regex = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Regex
});
const RemoveFormatting = createLucideIcon("RemoveFormatting", [
    [
        "path",
        {
            d: "M4 7V4h16v3",
            key: "9msm58"
        }
    ],
    [
        "path",
        {
            d: "M5 20h6",
            key: "1h6pxn"
        }
    ],
    [
        "path",
        {
            d: "M13 4 8 20",
            key: "kqq6aj"
        }
    ],
    [
        "path",
        {
            d: "m15 15 5 5",
            key: "me55sn"
        }
    ],
    [
        "path",
        {
            d: "m20 15-5 5",
            key: "11p7ol"
        }
    ]
]);
var removeFormatting = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RemoveFormatting
});
const Repeat1 = createLucideIcon("Repeat1", [
    [
        "path",
        {
            d: "m17 2 4 4-4 4",
            key: "nntrym"
        }
    ],
    [
        "path",
        {
            d: "M3 11v-1a4 4 0 0 1 4-4h14",
            key: "84bu3i"
        }
    ],
    [
        "path",
        {
            d: "m7 22-4-4 4-4",
            key: "1wqhfi"
        }
    ],
    [
        "path",
        {
            d: "M21 13v1a4 4 0 0 1-4 4H3",
            key: "1rx37r"
        }
    ],
    [
        "path",
        {
            d: "M11 10h1v4",
            key: "70cz1p"
        }
    ]
]);
var repeat1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Repeat1
});
const Repeat2 = createLucideIcon("Repeat2", [
    [
        "path",
        {
            d: "m2 9 3-3 3 3",
            key: "1ltn5i"
        }
    ],
    [
        "path",
        {
            d: "M13 18H7a2 2 0 0 1-2-2V6",
            key: "1r6tfw"
        }
    ],
    [
        "path",
        {
            d: "m22 15-3 3-3-3",
            key: "4rnwn2"
        }
    ],
    [
        "path",
        {
            d: "M11 6h6a2 2 0 0 1 2 2v10",
            key: "2f72bc"
        }
    ]
]);
var repeat2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Repeat2
});
const Repeat = createLucideIcon("Repeat", [
    [
        "path",
        {
            d: "m17 2 4 4-4 4",
            key: "nntrym"
        }
    ],
    [
        "path",
        {
            d: "M3 11v-1a4 4 0 0 1 4-4h14",
            key: "84bu3i"
        }
    ],
    [
        "path",
        {
            d: "m7 22-4-4 4-4",
            key: "1wqhfi"
        }
    ],
    [
        "path",
        {
            d: "M21 13v1a4 4 0 0 1-4 4H3",
            key: "1rx37r"
        }
    ]
]);
var repeat = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Repeat
});
const ReplaceAll = createLucideIcon("ReplaceAll", [
    [
        "path",
        {
            d: "M14 4c0-1.1.9-2 2-2",
            key: "1mvvbw"
        }
    ],
    [
        "path",
        {
            d: "M20 2c1.1 0 2 .9 2 2",
            key: "1mj6oe"
        }
    ],
    [
        "path",
        {
            d: "M22 8c0 1.1-.9 2-2 2",
            key: "v1wql3"
        }
    ],
    [
        "path",
        {
            d: "M16 10c-1.1 0-2-.9-2-2",
            key: "821ux0"
        }
    ],
    [
        "path",
        {
            d: "m3 7 3 3 3-3",
            key: "x25e72"
        }
    ],
    [
        "path",
        {
            d: "M6 10V5c0-1.7 1.3-3 3-3h1",
            key: "13af7h"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "2",
            y: "14",
            rx: "2",
            key: "17ihk4"
        }
    ],
    [
        "path",
        {
            d: "M14 14c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2",
            key: "1w9p8c"
        }
    ],
    [
        "path",
        {
            d: "M20 14c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2",
            key: "m45eaa"
        }
    ]
]);
var replaceAll = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ReplaceAll
});
const Replace = createLucideIcon("Replace", [
    [
        "path",
        {
            d: "M14 4c0-1.1.9-2 2-2",
            key: "1mvvbw"
        }
    ],
    [
        "path",
        {
            d: "M20 2c1.1 0 2 .9 2 2",
            key: "1mj6oe"
        }
    ],
    [
        "path",
        {
            d: "M22 8c0 1.1-.9 2-2 2",
            key: "v1wql3"
        }
    ],
    [
        "path",
        {
            d: "M16 10c-1.1 0-2-.9-2-2",
            key: "821ux0"
        }
    ],
    [
        "path",
        {
            d: "m3 7 3 3 3-3",
            key: "x25e72"
        }
    ],
    [
        "path",
        {
            d: "M6 10V5c0-1.7 1.3-3 3-3h1",
            key: "13af7h"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "2",
            y: "14",
            rx: "2",
            key: "17ihk4"
        }
    ]
]);
var replace = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Replace
});
const ReplyAll = createLucideIcon("ReplyAll", [
    [
        "polyline",
        {
            points: "7 17 2 12 7 7",
            key: "t83bqg"
        }
    ],
    [
        "polyline",
        {
            points: "12 17 7 12 12 7",
            key: "1g4ajm"
        }
    ],
    [
        "path",
        {
            d: "M22 18v-2a4 4 0 0 0-4-4H7",
            key: "1fcyog"
        }
    ]
]);
var replyAll = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ReplyAll
});
const Reply = createLucideIcon("Reply", [
    [
        "polyline",
        {
            points: "9 17 4 12 9 7",
            key: "hvgpf2"
        }
    ],
    [
        "path",
        {
            d: "M20 18v-2a4 4 0 0 0-4-4H4",
            key: "5vmcpk"
        }
    ]
]);
var reply = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Reply
});
const Rewind = createLucideIcon("Rewind", [
    [
        "polygon",
        {
            points: "11 19 2 12 11 5 11 19",
            key: "14yba5"
        }
    ],
    [
        "polygon",
        {
            points: "22 19 13 12 22 5 22 19",
            key: "1pi1cj"
        }
    ]
]);
var rewind = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Rewind
});
const Rocket = createLucideIcon("Rocket", [
    [
        "path",
        {
            d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z",
            key: "m3kijz"
        }
    ],
    [
        "path",
        {
            d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z",
            key: "1fmvmk"
        }
    ],
    [
        "path",
        {
            d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0",
            key: "1f8sc4"
        }
    ],
    [
        "path",
        {
            d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5",
            key: "qeys4"
        }
    ]
]);
var rocket = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Rocket
});
const RockingChair = createLucideIcon("RockingChair", [
    [
        "polyline",
        {
            points: "3.5 2 6.5 12.5 18 12.5",
            key: "y3iy52"
        }
    ],
    [
        "line",
        {
            x1: "9.5",
            x2: "5.5",
            y1: "12.5",
            y2: "20",
            key: "19vg5i"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "18.5",
            y1: "12.5",
            y2: "20",
            key: "1inpmv"
        }
    ],
    [
        "path",
        {
            d: "M2.75 18a13 13 0 0 0 18.5 0",
            key: "1nquas"
        }
    ]
]);
var rockingChair = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RockingChair
});
const RollerCoaster = createLucideIcon("RollerCoaster", [
    [
        "path",
        {
            d: "M6 19V5",
            key: "1r845m"
        }
    ],
    [
        "path",
        {
            d: "M10 19V6.8",
            key: "9j2tfs"
        }
    ],
    [
        "path",
        {
            d: "M14 19v-7.8",
            key: "10s8qv"
        }
    ],
    [
        "path",
        {
            d: "M18 5v4",
            key: "1tajlv"
        }
    ],
    [
        "path",
        {
            d: "M18 19v-6",
            key: "ielfq3"
        }
    ],
    [
        "path",
        {
            d: "M22 19V9",
            key: "158nzp"
        }
    ],
    [
        "path",
        {
            d: "M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65",
            key: "1930oh"
        }
    ]
]);
var rollerCoaster = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RollerCoaster
});
const Rotate3d = createLucideIcon("Rotate3d", [
    [
        "path",
        {
            d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2",
            key: "10n0gc"
        }
    ],
    [
        "path",
        {
            d: "m15.194 13.707 3.814 1.86-1.86 3.814",
            key: "16shm9"
        }
    ],
    [
        "path",
        {
            d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4",
            key: "1lxi77"
        }
    ]
]);
var rotate3d = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Rotate3d
});
const RotateCcw = createLucideIcon("RotateCcw", [
    [
        "path",
        {
            d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8",
            key: "1357e3"
        }
    ],
    [
        "path",
        {
            d: "M3 3v5h5",
            key: "1xhq8a"
        }
    ]
]);
var rotateCcw = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RotateCcw
});
const RotateCw = createLucideIcon("RotateCw", [
    [
        "path",
        {
            d: "M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8",
            key: "1p45f6"
        }
    ],
    [
        "path",
        {
            d: "M21 3v5h-5",
            key: "1q7to0"
        }
    ]
]);
var rotateCw = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RotateCw
});
const Router = createLucideIcon("Router", [
    [
        "rect",
        {
            width: "20",
            height: "8",
            x: "2",
            y: "14",
            rx: "2",
            key: "w68u3i"
        }
    ],
    [
        "path",
        {
            d: "M6.01 18H6",
            key: "19vcac"
        }
    ],
    [
        "path",
        {
            d: "M10.01 18H10",
            key: "uamcmx"
        }
    ],
    [
        "path",
        {
            d: "M15 10v4",
            key: "qjz1xs"
        }
    ],
    [
        "path",
        {
            d: "M17.84 7.17a4 4 0 0 0-5.66 0",
            key: "1rif40"
        }
    ],
    [
        "path",
        {
            d: "M20.66 4.34a8 8 0 0 0-11.31 0",
            key: "6a5xfq"
        }
    ]
]);
var router = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Router
});
const Rows = createLucideIcon("Rows", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "12",
            y2: "12",
            key: "10d38w"
        }
    ]
]);
var rows = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Rows
});
const Rss = createLucideIcon("Rss", [
    [
        "path",
        {
            d: "M4 11a9 9 0 0 1 9 9",
            key: "pv89mb"
        }
    ],
    [
        "path",
        {
            d: "M4 4a16 16 0 0 1 16 16",
            key: "k0647b"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "19",
            r: "1",
            key: "bfqh0e"
        }
    ]
]);
var rss = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Rss
});
const Ruler = createLucideIcon("Ruler", [
    [
        "path",
        {
            d: "M21.3 8.7 8.7 21.3c-1 1-2.5 1-3.4 0l-2.6-2.6c-1-1-1-2.5 0-3.4L15.3 2.7c1-1 2.5-1 3.4 0l2.6 2.6c1 1 1 2.5 0 3.4Z",
            key: "14xb44"
        }
    ],
    [
        "path",
        {
            d: "m7.5 10.5 2 2",
            key: "3h1c69"
        }
    ],
    [
        "path",
        {
            d: "m10.5 7.5 2 2",
            key: "1lvsmz"
        }
    ],
    [
        "path",
        {
            d: "m13.5 4.5 2 2",
            key: "1i616n"
        }
    ],
    [
        "path",
        {
            d: "m4.5 13.5 2 2",
            key: "16iojn"
        }
    ]
]);
var ruler = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ruler
});
const RussianRuble = createLucideIcon("RussianRuble", [
    [
        "path",
        {
            d: "M14 11c5.333 0 5.333-8 0-8",
            key: "92e629"
        }
    ],
    [
        "path",
        {
            d: "M6 11h8",
            key: "1cr2u4"
        }
    ],
    [
        "path",
        {
            d: "M6 15h8",
            key: "1y8f6l"
        }
    ],
    [
        "path",
        {
            d: "M9 21V3",
            key: "1jd2g6"
        }
    ],
    [
        "path",
        {
            d: "M9 3h5",
            key: "8bgvcw"
        }
    ]
]);
var russianRuble = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: RussianRuble
});
const Sailboat = createLucideIcon("Sailboat", [
    [
        "path",
        {
            d: "M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z",
            key: "1404fh"
        }
    ],
    [
        "path",
        {
            d: "M21 14 10 2 3 14h18Z",
            key: "1nzg7v"
        }
    ],
    [
        "path",
        {
            d: "M10 2v16",
            key: "1labyt"
        }
    ]
]);
var sailboat = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sailboat
});
const Salad = createLucideIcon("Salad", [
    [
        "path",
        {
            d: "M7 21h10",
            key: "1b0cd5"
        }
    ],
    [
        "path",
        {
            d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z",
            key: "4rw317"
        }
    ],
    [
        "path",
        {
            d: "M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1",
            key: "10xrj0"
        }
    ],
    [
        "path",
        {
            d: "m13 12 4-4",
            key: "1hckqy"
        }
    ],
    [
        "path",
        {
            d: "M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2",
            key: "1p4srx"
        }
    ]
]);
var salad = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Salad
});
const Sandwich = createLucideIcon("Sandwich", [
    [
        "path",
        {
            d: "M3 11v3a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-3",
            key: "34v9d7"
        }
    ],
    [
        "path",
        {
            d: "M12 19H4a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3.83",
            key: "1k5vfb"
        }
    ],
    [
        "path",
        {
            d: "m3 11 7.77-6.04a2 2 0 0 1 2.46 0L21 11H3Z",
            key: "1oe7l6"
        }
    ],
    [
        "path",
        {
            d: "M12.97 19.77 7 15h12.5l-3.75 4.5a2 2 0 0 1-2.78.27Z",
            key: "1ts2ri"
        }
    ]
]);
var sandwich = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sandwich
});
const SatelliteDish = createLucideIcon("SatelliteDish", [
    [
        "path",
        {
            d: "M4 10a7.31 7.31 0 0 0 10 10Z",
            key: "1fzpp3"
        }
    ],
    [
        "path",
        {
            d: "m9 15 3-3",
            key: "88sc13"
        }
    ],
    [
        "path",
        {
            d: "M17 13a6 6 0 0 0-6-6",
            key: "15cc6u"
        }
    ],
    [
        "path",
        {
            d: "M21 13A10 10 0 0 0 11 3",
            key: "11nf8s"
        }
    ]
]);
var satelliteDish = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SatelliteDish
});
const Satellite = createLucideIcon("Satellite", [
    [
        "path",
        {
            d: "M13 7 9 3 5 7l4 4",
            key: "vyckw6"
        }
    ],
    [
        "path",
        {
            d: "m17 11 4 4-4 4-4-4",
            key: "rchckc"
        }
    ],
    [
        "path",
        {
            d: "m8 12 4 4 6-6-4-4Z",
            key: "1sshf7"
        }
    ],
    [
        "path",
        {
            d: "m16 8 3-3",
            key: "x428zp"
        }
    ],
    [
        "path",
        {
            d: "M9 21a6 6 0 0 0-6-6",
            key: "1iajcf"
        }
    ]
]);
var satellite = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Satellite
});
const SaveAll = createLucideIcon("SaveAll", [
    [
        "path",
        {
            d: "M6 4a2 2 0 0 1 2-2h10l4 4v10.2a2 2 0 0 1-2 1.8H8a2 2 0 0 1-2-2Z",
            key: "1unput"
        }
    ],
    [
        "path",
        {
            d: "M10 2v4h6",
            key: "1p5sg6"
        }
    ],
    [
        "path",
        {
            d: "M18 18v-7h-8v7",
            key: "1oniuk"
        }
    ],
    [
        "path",
        {
            d: "M18 22H4a2 2 0 0 1-2-2V6",
            key: "pblm9e"
        }
    ]
]);
var saveAll = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SaveAll
});
const Save = createLucideIcon("Save", [
    [
        "path",
        {
            d: "M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z",
            key: "1owoqh"
        }
    ],
    [
        "polyline",
        {
            points: "17 21 17 13 7 13 7 21",
            key: "1md35c"
        }
    ],
    [
        "polyline",
        {
            points: "7 3 7 8 15 8",
            key: "8nz8an"
        }
    ]
]);
var save = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Save
});
const Scale3d = createLucideIcon("Scale3d", [
    [
        "circle",
        {
            cx: "19",
            cy: "19",
            r: "2",
            key: "17f5cg"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "5",
            r: "2",
            key: "1gwv83"
        }
    ],
    [
        "path",
        {
            d: "M5 7v12h12",
            key: "vtaa4r"
        }
    ],
    [
        "path",
        {
            d: "m5 19 6-6",
            key: "jh6hbb"
        }
    ]
]);
var scale3d = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Scale3d
});
const Scale = createLucideIcon("Scale", [
    [
        "path",
        {
            d: "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z",
            key: "7g6ntu"
        }
    ],
    [
        "path",
        {
            d: "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z",
            key: "ijws7r"
        }
    ],
    [
        "path",
        {
            d: "M7 21h10",
            key: "1b0cd5"
        }
    ],
    [
        "path",
        {
            d: "M12 3v18",
            key: "108xh3"
        }
    ],
    [
        "path",
        {
            d: "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2",
            key: "3gwbw2"
        }
    ]
]);
var scale = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Scale
});
const Scaling = createLucideIcon("Scaling", [
    [
        "path",
        {
            d: "M21 3 9 15",
            key: "15kdhq"
        }
    ],
    [
        "path",
        {
            d: "M12 3H3v18h18v-9",
            key: "8suug0"
        }
    ],
    [
        "path",
        {
            d: "M16 3h5v5",
            key: "1806ms"
        }
    ],
    [
        "path",
        {
            d: "M14 15H9v-5",
            key: "pi4jk9"
        }
    ]
]);
var scaling = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Scaling
});
const ScanFace = createLucideIcon("ScanFace", [
    [
        "path",
        {
            d: "M3 7V5a2 2 0 0 1 2-2h2",
            key: "aa7l1z"
        }
    ],
    [
        "path",
        {
            d: "M17 3h2a2 2 0 0 1 2 2v2",
            key: "4qcy5o"
        }
    ],
    [
        "path",
        {
            d: "M21 17v2a2 2 0 0 1-2 2h-2",
            key: "6vwrx8"
        }
    ],
    [
        "path",
        {
            d: "M7 21H5a2 2 0 0 1-2-2v-2",
            key: "ioqczr"
        }
    ],
    [
        "path",
        {
            d: "M8 14s1.5 2 4 2 4-2 4-2",
            key: "1y1vjs"
        }
    ],
    [
        "path",
        {
            d: "M9 9h.01",
            key: "1q5me6"
        }
    ],
    [
        "path",
        {
            d: "M15 9h.01",
            key: "x1ddxp"
        }
    ]
]);
var scanFace = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ScanFace
});
const ScanLine = createLucideIcon("ScanLine", [
    [
        "path",
        {
            d: "M3 7V5a2 2 0 0 1 2-2h2",
            key: "aa7l1z"
        }
    ],
    [
        "path",
        {
            d: "M17 3h2a2 2 0 0 1 2 2v2",
            key: "4qcy5o"
        }
    ],
    [
        "path",
        {
            d: "M21 17v2a2 2 0 0 1-2 2h-2",
            key: "6vwrx8"
        }
    ],
    [
        "path",
        {
            d: "M7 21H5a2 2 0 0 1-2-2v-2",
            key: "ioqczr"
        }
    ],
    [
        "line",
        {
            x1: "7",
            x2: "17",
            y1: "12",
            y2: "12",
            key: "197423"
        }
    ]
]);
var scanLine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ScanLine
});
const Scan = createLucideIcon("Scan", [
    [
        "path",
        {
            d: "M3 7V5a2 2 0 0 1 2-2h2",
            key: "aa7l1z"
        }
    ],
    [
        "path",
        {
            d: "M17 3h2a2 2 0 0 1 2 2v2",
            key: "4qcy5o"
        }
    ],
    [
        "path",
        {
            d: "M21 17v2a2 2 0 0 1-2 2h-2",
            key: "6vwrx8"
        }
    ],
    [
        "path",
        {
            d: "M7 21H5a2 2 0 0 1-2-2v-2",
            key: "ioqczr"
        }
    ]
]);
var scan = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Scan
});
const ScatterChart = createLucideIcon("ScatterChart", [
    [
        "circle",
        {
            cx: "7.5",
            cy: "7.5",
            r: ".5",
            key: "1x97lo"
        }
    ],
    [
        "circle",
        {
            cx: "18.5",
            cy: "5.5",
            r: ".5",
            key: "56iowl"
        }
    ],
    [
        "circle",
        {
            cx: "11.5",
            cy: "11.5",
            r: ".5",
            key: "m9xkw9"
        }
    ],
    [
        "circle",
        {
            cx: "7.5",
            cy: "16.5",
            r: ".5",
            key: "14ln9z"
        }
    ],
    [
        "circle",
        {
            cx: "17.5",
            cy: "14.5",
            r: ".5",
            key: "14qxqt"
        }
    ],
    [
        "path",
        {
            d: "M3 3v18h18",
            key: "1s2lah"
        }
    ]
]);
var scatterChart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ScatterChart
});
const School2 = createLucideIcon("School2", [
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "1",
            key: "1gnqs8"
        }
    ],
    [
        "path",
        {
            d: "M22 20V8h-4l-6-4-6 4H2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z",
            key: "8z0lq4"
        }
    ],
    [
        "path",
        {
            d: "M6 17v.01",
            key: "roodi6"
        }
    ],
    [
        "path",
        {
            d: "M6 13v.01",
            key: "67c122"
        }
    ],
    [
        "path",
        {
            d: "M18 17v.01",
            key: "12ktxm"
        }
    ],
    [
        "path",
        {
            d: "M18 13v.01",
            key: "tn1rt1"
        }
    ],
    [
        "path",
        {
            d: "M14 22v-5a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v5",
            key: "jfgdp0"
        }
    ]
]);
var school2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: School2
});
const School = createLucideIcon("School", [
    [
        "path",
        {
            d: "m4 6 8-4 8 4",
            key: "1q0ilc"
        }
    ],
    [
        "path",
        {
            d: "m18 10 4 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-8l4-2",
            key: "1vwozw"
        }
    ],
    [
        "path",
        {
            d: "M14 22v-4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v4",
            key: "cpkuc4"
        }
    ],
    [
        "path",
        {
            d: "M18 5v17",
            key: "1sw6gf"
        }
    ],
    [
        "path",
        {
            d: "M6 5v17",
            key: "1xfsm0"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "9",
            r: "2",
            key: "1092wv"
        }
    ]
]);
var school = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: School
});
const Scissors = createLucideIcon("Scissors", [
    [
        "circle",
        {
            cx: "6",
            cy: "6",
            r: "3",
            key: "1lh9wr"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "18",
            r: "3",
            key: "fqmcym"
        }
    ],
    [
        "line",
        {
            x1: "20",
            x2: "8.12",
            y1: "4",
            y2: "15.88",
            key: "3m06te"
        }
    ],
    [
        "line",
        {
            x1: "14.47",
            x2: "20",
            y1: "14.48",
            y2: "20",
            key: "117692"
        }
    ],
    [
        "line",
        {
            x1: "8.12",
            x2: "12",
            y1: "8.12",
            y2: "12",
            key: "1oaf4y"
        }
    ]
]);
var scissors = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Scissors
});
const ScreenShareOff = createLucideIcon("ScreenShareOff", [
    [
        "path",
        {
            d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3",
            key: "i8wdob"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "m22 3-5 5",
            key: "12jva0"
        }
    ],
    [
        "path",
        {
            d: "m17 3 5 5",
            key: "k36vhe"
        }
    ]
]);
var screenShareOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ScreenShareOff
});
const ScreenShare = createLucideIcon("ScreenShare", [
    [
        "path",
        {
            d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3",
            key: "i8wdob"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ],
    [
        "path",
        {
            d: "m17 8 5-5",
            key: "fqif7o"
        }
    ],
    [
        "path",
        {
            d: "M17 3h5v5",
            key: "1o3tu8"
        }
    ]
]);
var screenShare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ScreenShare
});
const ScrollText = createLucideIcon("ScrollText", [
    [
        "path",
        {
            d: "M8 21h12a2 2 0 0 0 2-2v-2H10v2a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v3h4",
            key: "13a6an"
        }
    ],
    [
        "path",
        {
            d: "M19 17V5a2 2 0 0 0-2-2H4",
            key: "zz82l3"
        }
    ],
    [
        "path",
        {
            d: "M15 8h-5",
            key: "1khuty"
        }
    ],
    [
        "path",
        {
            d: "M15 12h-5",
            key: "r7krc0"
        }
    ]
]);
var scrollText = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ScrollText
});
const Scroll = createLucideIcon("Scroll", [
    [
        "path",
        {
            d: "M8 21h12a2 2 0 0 0 2-2v-2H10v2a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v3h4",
            key: "13a6an"
        }
    ],
    [
        "path",
        {
            d: "M19 17V5a2 2 0 0 0-2-2H4",
            key: "zz82l3"
        }
    ]
]);
var scroll = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Scroll
});
const SearchCheck = createLucideIcon("SearchCheck", [
    [
        "path",
        {
            d: "m8 11 2 2 4-4",
            key: "1sed1v"
        }
    ],
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "path",
        {
            d: "m21 21-4.3-4.3",
            key: "1qie3q"
        }
    ]
]);
var searchCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SearchCheck
});
const SearchCode = createLucideIcon("SearchCode", [
    [
        "path",
        {
            d: "m9 9-2 2 2 2",
            key: "17gsfh"
        }
    ],
    [
        "path",
        {
            d: "m13 13 2-2-2-2",
            key: "186z8k"
        }
    ],
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "path",
        {
            d: "m21 21-4.3-4.3",
            key: "1qie3q"
        }
    ]
]);
var searchCode = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SearchCode
});
const SearchSlash = createLucideIcon("SearchSlash", [
    [
        "path",
        {
            d: "m13.5 8.5-5 5",
            key: "1cs55j"
        }
    ],
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "path",
        {
            d: "m21 21-4.3-4.3",
            key: "1qie3q"
        }
    ]
]);
var searchSlash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SearchSlash
});
const SearchX = createLucideIcon("SearchX", [
    [
        "path",
        {
            d: "m13.5 8.5-5 5",
            key: "1cs55j"
        }
    ],
    [
        "path",
        {
            d: "m8.5 8.5 5 5",
            key: "a8mexj"
        }
    ],
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "path",
        {
            d: "m21 21-4.3-4.3",
            key: "1qie3q"
        }
    ]
]);
var searchX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SearchX
});
const Search = createLucideIcon("Search", [
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "path",
        {
            d: "m21 21-4.3-4.3",
            key: "1qie3q"
        }
    ]
]);
var search = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Search
});
const Send = createLucideIcon("Send", [
    [
        "line",
        {
            x1: "22",
            x2: "11",
            y1: "2",
            y2: "13",
            key: "2qtwb"
        }
    ],
    [
        "polygon",
        {
            points: "22 2 15 22 11 13 2 9 22 2",
            key: "12uapv"
        }
    ]
]);
var send = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Send
});
const SeparatorHorizontal = createLucideIcon("SeparatorHorizontal", [
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "12",
            y2: "12",
            key: "10d38w"
        }
    ],
    [
        "polyline",
        {
            points: "8 8 12 4 16 8",
            key: "zo8t4w"
        }
    ],
    [
        "polyline",
        {
            points: "16 16 12 20 8 16",
            key: "1oyrid"
        }
    ]
]);
var separatorHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SeparatorHorizontal
});
const SeparatorVertical = createLucideIcon("SeparatorVertical", [
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "3",
            y2: "21",
            key: "1efggb"
        }
    ],
    [
        "polyline",
        {
            points: "8 8 4 12 8 16",
            key: "bnfmv4"
        }
    ],
    [
        "polyline",
        {
            points: "16 16 20 12 16 8",
            key: "u90052"
        }
    ]
]);
var separatorVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SeparatorVertical
});
const ServerCog = createLucideIcon("ServerCog", [
    [
        "path",
        {
            d: "M5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-1",
            key: "1qm4no"
        }
    ],
    [
        "path",
        {
            d: "M5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-1",
            key: "1lpaho"
        }
    ],
    [
        "path",
        {
            d: "M6 6h.01",
            key: "1utrut"
        }
    ],
    [
        "path",
        {
            d: "M6 18h.01",
            key: "uhywen"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ],
    [
        "path",
        {
            d: "M12 8v1",
            key: "1rj8u4"
        }
    ],
    [
        "path",
        {
            d: "M12 15v1",
            key: "1ovrzm"
        }
    ],
    [
        "path",
        {
            d: "M16 12h-1",
            key: "1qpdyp"
        }
    ],
    [
        "path",
        {
            d: "M9 12H8",
            key: "1l15iv"
        }
    ],
    [
        "path",
        {
            d: "m15 9-.88.88",
            key: "3hwatj"
        }
    ],
    [
        "path",
        {
            d: "M9.88 14.12 9 15",
            key: "13ldc9"
        }
    ],
    [
        "path",
        {
            d: "m15 15-.88-.88",
            key: "45priv"
        }
    ],
    [
        "path",
        {
            d: "M9.88 9.88 9 9",
            key: "1ladhj"
        }
    ]
]);
var serverCog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ServerCog
});
const ServerCrash = createLucideIcon("ServerCrash", [
    [
        "path",
        {
            d: "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2",
            key: "4b9dqc"
        }
    ],
    [
        "path",
        {
            d: "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2",
            key: "22nnkd"
        }
    ],
    [
        "path",
        {
            d: "M6 6h.01",
            key: "1utrut"
        }
    ],
    [
        "path",
        {
            d: "M6 18h.01",
            key: "uhywen"
        }
    ],
    [
        "path",
        {
            d: "m13 6-4 6h6l-4 6",
            key: "14hqih"
        }
    ]
]);
var serverCrash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ServerCrash
});
const ServerOff = createLucideIcon("ServerOff", [
    [
        "path",
        {
            d: "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5",
            key: "bt2siv"
        }
    ],
    [
        "path",
        {
            d: "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z",
            key: "1hjrv1"
        }
    ],
    [
        "path",
        {
            d: "M22 17v-1a2 2 0 0 0-2-2h-1",
            key: "1iynyr"
        }
    ],
    [
        "path",
        {
            d: "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z",
            key: "161ggg"
        }
    ],
    [
        "path",
        {
            d: "M6 18h.01",
            key: "uhywen"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ]
]);
var serverOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ServerOff
});
const Server = createLucideIcon("Server", [
    [
        "rect",
        {
            width: "20",
            height: "8",
            x: "2",
            y: "2",
            rx: "2",
            ry: "2",
            key: "ngkwjq"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "8",
            x: "2",
            y: "14",
            rx: "2",
            ry: "2",
            key: "iecqi9"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6.01",
            y1: "6",
            y2: "6",
            key: "16zg32"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "6.01",
            y1: "18",
            y2: "18",
            key: "nzw8ys"
        }
    ]
]);
var server = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Server
});
const Settings2 = createLucideIcon("Settings2", [
    [
        "path",
        {
            d: "M20 7h-9",
            key: "3s1dr2"
        }
    ],
    [
        "path",
        {
            d: "M14 17H5",
            key: "gfn3mx"
        }
    ],
    [
        "circle",
        {
            cx: "17",
            cy: "17",
            r: "3",
            key: "18b49y"
        }
    ],
    [
        "circle",
        {
            cx: "7",
            cy: "7",
            r: "3",
            key: "dfmy0x"
        }
    ]
]);
var settings2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Settings2
});
const Settings = createLucideIcon("Settings", [
    [
        "path",
        {
            d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
            key: "1qme2f"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ]
]);
var settings = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Settings
});
const Shapes = createLucideIcon("Shapes", [
    [
        "path",
        {
            d: "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z",
            key: "1bo67w"
        }
    ],
    [
        "rect",
        {
            x: "3",
            y: "14",
            width: "7",
            height: "7",
            rx: "1",
            key: "1bkyp8"
        }
    ],
    [
        "circle",
        {
            cx: "17.5",
            cy: "17.5",
            r: "3.5",
            key: "w3z12y"
        }
    ]
]);
var shapes = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Shapes
});
const Share2 = createLucideIcon("Share2", [
    [
        "circle",
        {
            cx: "18",
            cy: "5",
            r: "3",
            key: "gq8acd"
        }
    ],
    [
        "circle",
        {
            cx: "6",
            cy: "12",
            r: "3",
            key: "w7nqdw"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "19",
            r: "3",
            key: "1xt0gg"
        }
    ],
    [
        "line",
        {
            x1: "8.59",
            x2: "15.42",
            y1: "13.51",
            y2: "17.49",
            key: "47mynk"
        }
    ],
    [
        "line",
        {
            x1: "15.41",
            x2: "8.59",
            y1: "6.51",
            y2: "10.49",
            key: "1n3mei"
        }
    ]
]);
var share2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Share2
});
const Share = createLucideIcon("Share", [
    [
        "path",
        {
            d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8",
            key: "1b2hhj"
        }
    ],
    [
        "polyline",
        {
            points: "16 6 12 2 8 6",
            key: "m901s6"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "15",
            key: "1p0rca"
        }
    ]
]);
var share = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Share
});
const Sheet = createLucideIcon("Sheet", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "9",
            y2: "9",
            key: "1vqk6q"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "15",
            y2: "15",
            key: "o2sbyz"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9",
            y1: "9",
            y2: "21",
            key: "1ib60c"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15",
            y1: "9",
            y2: "21",
            key: "1n26ft"
        }
    ]
]);
var sheet = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sheet
});
const ShieldAlert = createLucideIcon("ShieldAlert", [
    [
        "path",
        {
            d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z",
            key: "3xmgem"
        }
    ],
    [
        "path",
        {
            d: "M12 8v4",
            key: "1got3b"
        }
    ],
    [
        "path",
        {
            d: "M12 16h.01",
            key: "1drbdi"
        }
    ]
]);
var shieldAlert = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShieldAlert
});
const ShieldCheck = createLucideIcon("ShieldCheck", [
    [
        "path",
        {
            d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z",
            key: "3xmgem"
        }
    ],
    [
        "path",
        {
            d: "m9 12 2 2 4-4",
            key: "dzmm74"
        }
    ]
]);
var shieldCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShieldCheck
});
const ShieldClose = createLucideIcon("ShieldClose", [
    [
        "path",
        {
            d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z",
            key: "3xmgem"
        }
    ],
    [
        "line",
        {
            x1: "9.5",
            x2: "14.5",
            y1: "9",
            y2: "14",
            key: "10ywql"
        }
    ],
    [
        "line",
        {
            x1: "14.5",
            x2: "9.5",
            y1: "9",
            y2: "14",
            key: "n3a697"
        }
    ]
]);
var shieldClose = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShieldClose
});
const ShieldOff = createLucideIcon("ShieldOff", [
    [
        "path",
        {
            d: "M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18",
            key: "ungvgc"
        }
    ],
    [
        "path",
        {
            d: "M4.73 4.73 4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38",
            key: "1qf5yw"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var shieldOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShieldOff
});
const ShieldQuestion = createLucideIcon("ShieldQuestion", [
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ],
    [
        "path",
        {
            d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10",
            key: "1irkt0"
        }
    ],
    [
        "path",
        {
            d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3",
            key: "mhlwft"
        }
    ]
]);
var shieldQuestion = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShieldQuestion
});
const Shield = createLucideIcon("Shield", [
    [
        "path",
        {
            d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z",
            key: "3xmgem"
        }
    ]
]);
var shield = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Shield
});
const Ship = createLucideIcon("Ship", [
    [
        "path",
        {
            d: "M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1 .6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "iegodh"
        }
    ],
    [
        "path",
        {
            d: "M19.38 20A11.6 11.6 0 0 0 21 14l-9-4-9 4c0 2.9.94 5.34 2.81 7.76",
            key: "fp8vka"
        }
    ],
    [
        "path",
        {
            d: "M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6",
            key: "qpkstq"
        }
    ],
    [
        "path",
        {
            d: "M12 10v4",
            key: "1kjpxc"
        }
    ],
    [
        "path",
        {
            d: "M12 2v3",
            key: "qbqxhf"
        }
    ]
]);
var ship = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ship
});
const Shirt = createLucideIcon("Shirt", [
    [
        "path",
        {
            d: "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z",
            key: "1wgbhj"
        }
    ]
]);
var shirt = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Shirt
});
const ShoppingBag = createLucideIcon("ShoppingBag", [
    [
        "path",
        {
            d: "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z",
            key: "14a4hr"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "6",
            y2: "6",
            key: "4m8b97"
        }
    ],
    [
        "path",
        {
            d: "M16 10a4 4 0 0 1-8 0",
            key: "1ltviw"
        }
    ]
]);
var shoppingBag = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShoppingBag
});
const ShoppingCart = createLucideIcon("ShoppingCart", [
    [
        "circle",
        {
            cx: "8",
            cy: "21",
            r: "1",
            key: "jimo8o"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "21",
            r: "1",
            key: "13723u"
        }
    ],
    [
        "path",
        {
            d: "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12",
            key: "9zh506"
        }
    ]
]);
var shoppingCart = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShoppingCart
});
const Shovel = createLucideIcon("Shovel", [
    [
        "path",
        {
            d: "M2 22v-5l5-5 5 5-5 5z",
            key: "1fh25c"
        }
    ],
    [
        "path",
        {
            d: "M9.5 14.5 16 8",
            key: "1smz5x"
        }
    ],
    [
        "path",
        {
            d: "m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2",
            key: "1q8uv5"
        }
    ]
]);
var shovel = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Shovel
});
const ShowerHead = createLucideIcon("ShowerHead", [
    [
        "path",
        {
            d: "m4 4 2.5 2.5",
            key: "uv2vmf"
        }
    ],
    [
        "path",
        {
            d: "M13.5 6.5a4.95 4.95 0 0 0-7 7",
            key: "frdkwv"
        }
    ],
    [
        "path",
        {
            d: "M15 5 5 15",
            key: "1ag8rq"
        }
    ],
    [
        "path",
        {
            d: "M14 17v.01",
            key: "eokfpp"
        }
    ],
    [
        "path",
        {
            d: "M10 16v.01",
            key: "14uyyl"
        }
    ],
    [
        "path",
        {
            d: "M13 13v.01",
            key: "1v1k97"
        }
    ],
    [
        "path",
        {
            d: "M16 10v.01",
            key: "5169yg"
        }
    ],
    [
        "path",
        {
            d: "M11 20v.01",
            key: "cj92p8"
        }
    ],
    [
        "path",
        {
            d: "M17 14v.01",
            key: "11cswd"
        }
    ],
    [
        "path",
        {
            d: "M20 11v.01",
            key: "19e0od"
        }
    ]
]);
var showerHead = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ShowerHead
});
const Shrink = createLucideIcon("Shrink", [
    [
        "path",
        {
            d: "m15 15 6 6m-6-6v4.8m0-4.8h4.8",
            key: "17vawe"
        }
    ],
    [
        "path",
        {
            d: "M9 19.8V15m0 0H4.2M9 15l-6 6",
            key: "chjx8e"
        }
    ],
    [
        "path",
        {
            d: "M15 4.2V9m0 0h4.8M15 9l6-6",
            key: "lav6yq"
        }
    ],
    [
        "path",
        {
            d: "M9 4.2V9m0 0H4.2M9 9 3 3",
            key: "1pxi2q"
        }
    ]
]);
var shrink = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Shrink
});
const Shrub = createLucideIcon("Shrub", [
    [
        "path",
        {
            d: "M12 22v-7l-2-2",
            key: "eqv9mc"
        }
    ],
    [
        "path",
        {
            d: "M17 8v.8A6 6 0 0 1 13.8 20v0H10v0A6.5 6.5 0 0 1 7 8h0a5 5 0 0 1 10 0Z",
            key: "12jcau"
        }
    ],
    [
        "path",
        {
            d: "m14 14-2 2",
            key: "847xa2"
        }
    ]
]);
var shrub = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Shrub
});
const Shuffle = createLucideIcon("Shuffle", [
    [
        "path",
        {
            d: "M2 18h1.4c1.3 0 2.5-.6 3.3-1.7l6.1-8.6c.7-1.1 2-1.7 3.3-1.7H22",
            key: "1wmou1"
        }
    ],
    [
        "path",
        {
            d: "m18 2 4 4-4 4",
            key: "pucp1d"
        }
    ],
    [
        "path",
        {
            d: "M2 6h1.9c1.5 0 2.9.9 3.6 2.2",
            key: "10bdb2"
        }
    ],
    [
        "path",
        {
            d: "M22 18h-5.9c-1.3 0-2.6-.7-3.3-1.8l-.5-.8",
            key: "vgxac0"
        }
    ],
    [
        "path",
        {
            d: "m18 14 4 4-4 4",
            key: "10pe0f"
        }
    ]
]);
var shuffle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Shuffle
});
const SigmaSquare = createLucideIcon("SigmaSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M16 8.9V7H8l4 5-4 5h8v-1.9",
            key: "9nih0i"
        }
    ]
]);
var sigmaSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SigmaSquare
});
const Sigma = createLucideIcon("Sigma", [
    [
        "path",
        {
            d: "M18 7V4H6l6 8-6 8h12v-3",
            key: "zis8ev"
        }
    ]
]);
var sigma = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sigma
});
const SignalHigh = createLucideIcon("SignalHigh", [
    [
        "path",
        {
            d: "M2 20h.01",
            key: "4haj6o"
        }
    ],
    [
        "path",
        {
            d: "M7 20v-4",
            key: "j294jx"
        }
    ],
    [
        "path",
        {
            d: "M12 20v-8",
            key: "i3yub9"
        }
    ],
    [
        "path",
        {
            d: "M17 20V8",
            key: "1tkaf5"
        }
    ]
]);
var signalHigh = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SignalHigh
});
const SignalLow = createLucideIcon("SignalLow", [
    [
        "path",
        {
            d: "M2 20h.01",
            key: "4haj6o"
        }
    ],
    [
        "path",
        {
            d: "M7 20v-4",
            key: "j294jx"
        }
    ]
]);
var signalLow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SignalLow
});
const SignalMedium = createLucideIcon("SignalMedium", [
    [
        "path",
        {
            d: "M2 20h.01",
            key: "4haj6o"
        }
    ],
    [
        "path",
        {
            d: "M7 20v-4",
            key: "j294jx"
        }
    ],
    [
        "path",
        {
            d: "M12 20v-8",
            key: "i3yub9"
        }
    ]
]);
var signalMedium = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SignalMedium
});
const SignalZero = createLucideIcon("SignalZero", [
    [
        "path",
        {
            d: "M2 20h.01",
            key: "4haj6o"
        }
    ]
]);
var signalZero = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SignalZero
});
const Signal = createLucideIcon("Signal", [
    [
        "path",
        {
            d: "M2 20h.01",
            key: "4haj6o"
        }
    ],
    [
        "path",
        {
            d: "M7 20v-4",
            key: "j294jx"
        }
    ],
    [
        "path",
        {
            d: "M12 20v-8",
            key: "i3yub9"
        }
    ],
    [
        "path",
        {
            d: "M17 20V8",
            key: "1tkaf5"
        }
    ],
    [
        "path",
        {
            d: "M22 4v16",
            key: "sih9yq"
        }
    ]
]);
var signal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Signal
});
const Siren = createLucideIcon("Siren", [
    [
        "path",
        {
            d: "M7 12a5 5 0 0 1 5-5v0a5 5 0 0 1 5 5v6H7v-6Z",
            key: "rmc51c"
        }
    ],
    [
        "path",
        {
            d: "M5 20a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v2H5v-2Z",
            key: "yyvmjy"
        }
    ],
    [
        "path",
        {
            d: "M21 12h1",
            key: "jtio3y"
        }
    ],
    [
        "path",
        {
            d: "M18.5 4.5 18 5",
            key: "g5sp9y"
        }
    ],
    [
        "path",
        {
            d: "M2 12h1",
            key: "1uaihz"
        }
    ],
    [
        "path",
        {
            d: "M12 2v1",
            key: "11qlp1"
        }
    ],
    [
        "path",
        {
            d: "m4.929 4.929.707.707",
            key: "1i51kw"
        }
    ],
    [
        "path",
        {
            d: "M12 12v6",
            key: "3ahymv"
        }
    ]
]);
var siren = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Siren
});
const SkipBack = createLucideIcon("SkipBack", [
    [
        "polygon",
        {
            points: "19 20 9 12 19 4 19 20",
            key: "o2sva"
        }
    ],
    [
        "line",
        {
            x1: "5",
            x2: "5",
            y1: "19",
            y2: "5",
            key: "1ocqjk"
        }
    ]
]);
var skipBack = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SkipBack
});
const SkipForward = createLucideIcon("SkipForward", [
    [
        "polygon",
        {
            points: "5 4 15 12 5 20 5 4",
            key: "16p6eg"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "19",
            y1: "5",
            y2: "19",
            key: "futhcm"
        }
    ]
]);
var skipForward = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SkipForward
});
const Skull = createLucideIcon("Skull", [
    [
        "circle",
        {
            cx: "9",
            cy: "12",
            r: "1",
            key: "1vctgf"
        }
    ],
    [
        "circle",
        {
            cx: "15",
            cy: "12",
            r: "1",
            key: "1tmaij"
        }
    ],
    [
        "path",
        {
            d: "M8 20v2h8v-2",
            key: "ded4og"
        }
    ],
    [
        "path",
        {
            d: "m12.5 17-.5-1-.5 1h1z",
            key: "3me087"
        }
    ],
    [
        "path",
        {
            d: "M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20",
            key: "xq9p5u"
        }
    ]
]);
var skull = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Skull
});
const Slack = createLucideIcon("Slack", [
    [
        "rect",
        {
            width: "3",
            height: "8",
            x: "13",
            y: "2",
            rx: "1.5",
            key: "diqz80"
        }
    ],
    [
        "path",
        {
            d: "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5",
            key: "183iwg"
        }
    ],
    [
        "rect",
        {
            width: "3",
            height: "8",
            x: "8",
            y: "14",
            rx: "1.5",
            key: "hqg7r1"
        }
    ],
    [
        "path",
        {
            d: "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5",
            key: "76g71w"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "3",
            x: "14",
            y: "13",
            rx: "1.5",
            key: "1kmz0a"
        }
    ],
    [
        "path",
        {
            d: "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5",
            key: "jc4sz0"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "3",
            x: "2",
            y: "8",
            rx: "1.5",
            key: "1omvl4"
        }
    ],
    [
        "path",
        {
            d: "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5",
            key: "16f3cl"
        }
    ]
]);
var slack = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Slack
});
const Slice = createLucideIcon("Slice", [
    [
        "path",
        {
            d: "m8 14-6 6h9v-3",
            key: "zo3j9a"
        }
    ],
    [
        "path",
        {
            d: "M18.37 3.63 8 14l3 3L21.37 6.63a2.12 2.12 0 1 0-3-3Z",
            key: "1dzx0j"
        }
    ]
]);
var slice = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Slice
});
const SlidersHorizontal = createLucideIcon("SlidersHorizontal", [
    [
        "line",
        {
            x1: "21",
            x2: "14",
            y1: "4",
            y2: "4",
            key: "obuewd"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "3",
            y1: "4",
            y2: "4",
            key: "1q6298"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "12",
            y1: "12",
            y2: "12",
            key: "1iu8h1"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "3",
            y1: "12",
            y2: "12",
            key: "ntss68"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "16",
            y1: "20",
            y2: "20",
            key: "14d8ph"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "3",
            y1: "20",
            y2: "20",
            key: "m0wm8r"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "14",
            y1: "2",
            y2: "6",
            key: "14e1ph"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "10",
            y2: "14",
            key: "1i6ji0"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "18",
            y2: "22",
            key: "1lctlv"
        }
    ]
]);
var slidersHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SlidersHorizontal
});
const Sliders = createLucideIcon("Sliders", [
    [
        "line",
        {
            x1: "4",
            x2: "4",
            y1: "21",
            y2: "14",
            key: "1p332r"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "4",
            y1: "10",
            y2: "3",
            key: "gb41h5"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "21",
            y2: "12",
            key: "hf2csr"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "3",
            key: "1kfi7u"
        }
    ],
    [
        "line",
        {
            x1: "20",
            x2: "20",
            y1: "21",
            y2: "16",
            key: "1lhrwl"
        }
    ],
    [
        "line",
        {
            x1: "20",
            x2: "20",
            y1: "12",
            y2: "3",
            key: "16vvfq"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "6",
            y1: "14",
            y2: "14",
            key: "1uebub"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "14",
            y1: "8",
            y2: "8",
            key: "1yglbp"
        }
    ],
    [
        "line",
        {
            x1: "18",
            x2: "22",
            y1: "16",
            y2: "16",
            key: "1jxqpz"
        }
    ]
]);
var sliders = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sliders
});
const SmartphoneCharging = createLucideIcon("SmartphoneCharging", [
    [
        "rect",
        {
            width: "14",
            height: "20",
            x: "5",
            y: "2",
            rx: "2",
            ry: "2",
            key: "1yt0o3"
        }
    ],
    [
        "path",
        {
            d: "M12.667 8 10 12h4l-2.667 4",
            key: "h9lk2d"
        }
    ]
]);
var smartphoneCharging = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SmartphoneCharging
});
const SmartphoneNfc = createLucideIcon("SmartphoneNfc", [
    [
        "rect",
        {
            width: "7",
            height: "12",
            x: "2",
            y: "6",
            rx: "1",
            key: "5nje8w"
        }
    ],
    [
        "path",
        {
            d: "M13 8.32a7.43 7.43 0 0 1 0 7.36",
            key: "1g306n"
        }
    ],
    [
        "path",
        {
            d: "M16.46 6.21a11.76 11.76 0 0 1 0 11.58",
            key: "uqvjvo"
        }
    ],
    [
        "path",
        {
            d: "M19.91 4.1a15.91 15.91 0 0 1 .01 15.8",
            key: "ujntz3"
        }
    ]
]);
var smartphoneNfc = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SmartphoneNfc
});
const Smartphone = createLucideIcon("Smartphone", [
    [
        "rect",
        {
            width: "14",
            height: "20",
            x: "5",
            y: "2",
            rx: "2",
            ry: "2",
            key: "1yt0o3"
        }
    ],
    [
        "path",
        {
            d: "M12 18h.01",
            key: "mhygvu"
        }
    ]
]);
var smartphone = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Smartphone
});
const SmilePlus = createLucideIcon("SmilePlus", [
    [
        "path",
        {
            d: "M22 11v1a10 10 0 1 1-9-10",
            key: "ew0xw9"
        }
    ],
    [
        "path",
        {
            d: "M8 14s1.5 2 4 2 4-2 4-2",
            key: "1y1vjs"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9.01",
            y1: "9",
            y2: "9",
            key: "yxxnd0"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "9",
            y2: "9",
            key: "1p4y9e"
        }
    ],
    [
        "path",
        {
            d: "M16 5h6",
            key: "1vod17"
        }
    ],
    [
        "path",
        {
            d: "M19 2v6",
            key: "4bpg5p"
        }
    ]
]);
var smilePlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SmilePlus
});
const Smile = createLucideIcon("Smile", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M8 14s1.5 2 4 2 4-2 4-2",
            key: "1y1vjs"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9.01",
            y1: "9",
            y2: "9",
            key: "yxxnd0"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "9",
            y2: "9",
            key: "1p4y9e"
        }
    ]
]);
var smile = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Smile
});
const Snowflake = createLucideIcon("Snowflake", [
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "12",
            y2: "12",
            key: "1dnqot"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "2",
            y2: "22",
            key: "7eqyqh"
        }
    ],
    [
        "path",
        {
            d: "m20 16-4-4 4-4",
            key: "rquw4f"
        }
    ],
    [
        "path",
        {
            d: "m4 8 4 4-4 4",
            key: "12s3z9"
        }
    ],
    [
        "path",
        {
            d: "m16 4-4 4-4-4",
            key: "1tumq1"
        }
    ],
    [
        "path",
        {
            d: "m8 20 4-4 4 4",
            key: "9p200w"
        }
    ]
]);
var snowflake = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Snowflake
});
const Sofa = createLucideIcon("Sofa", [
    [
        "path",
        {
            d: "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3",
            key: "1dgpiv"
        }
    ],
    [
        "path",
        {
            d: "M2 11v5a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H6v-2a2 2 0 0 0-4 0Z",
            key: "u5qfb7"
        }
    ],
    [
        "path",
        {
            d: "M4 18v2",
            key: "jwo5n2"
        }
    ],
    [
        "path",
        {
            d: "M20 18v2",
            key: "1ar1qi"
        }
    ],
    [
        "path",
        {
            d: "M12 4v9",
            key: "oqhhn3"
        }
    ]
]);
var sofa = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sofa
});
const Soup = createLucideIcon("Soup", [
    [
        "path",
        {
            d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z",
            key: "4rw317"
        }
    ],
    [
        "path",
        {
            d: "M7 21h10",
            key: "1b0cd5"
        }
    ],
    [
        "path",
        {
            d: "M19.5 12 22 6",
            key: "shfsr5"
        }
    ],
    [
        "path",
        {
            d: "M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62",
            key: "rpc6vp"
        }
    ],
    [
        "path",
        {
            d: "M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62",
            key: "1lf63m"
        }
    ],
    [
        "path",
        {
            d: "M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62",
            key: "97tijn"
        }
    ]
]);
var soup = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Soup
});
const Space = createLucideIcon("Space", [
    [
        "path",
        {
            d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1",
            key: "lt2kga"
        }
    ]
]);
var space = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Space
});
const Spade = createLucideIcon("Spade", [
    [
        "path",
        {
            d: "M5 9c-1.5 1.5-3 3.2-3 5.5A5.5 5.5 0 0 0 7.5 20c1.8 0 3-.5 4.5-2 1.5 1.5 2.7 2 4.5 2a5.5 5.5 0 0 0 5.5-5.5c0-2.3-1.5-4-3-5.5l-7-7-7 7Z",
            key: "40bo9n"
        }
    ],
    [
        "path",
        {
            d: "M12 18v4",
            key: "jadmvz"
        }
    ]
]);
var spade = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Spade
});
const Sparkle = createLucideIcon("Sparkle", [
    [
        "path",
        {
            d: "m12 3-1.9 5.8a2 2 0 0 1-1.287 1.288L3 12l5.8 1.9a2 2 0 0 1 1.288 1.287L12 21l1.9-5.8a2 2 0 0 1 1.287-1.288L21 12l-5.8-1.9a2 2 0 0 1-1.288-1.287Z",
            key: "nraa5p"
        }
    ]
]);
var sparkle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sparkle
});
const Sparkles = createLucideIcon("Sparkles", [
    [
        "path",
        {
            d: "m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z",
            key: "17u4zn"
        }
    ],
    [
        "path",
        {
            d: "M5 3v4",
            key: "bklmnn"
        }
    ],
    [
        "path",
        {
            d: "M19 17v4",
            key: "iiml17"
        }
    ],
    [
        "path",
        {
            d: "M3 5h4",
            key: "nem4j1"
        }
    ],
    [
        "path",
        {
            d: "M17 19h4",
            key: "lbex7p"
        }
    ]
]);
var sparkles = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sparkles
});
const Speaker = createLucideIcon("Speaker", [
    [
        "rect",
        {
            width: "16",
            height: "20",
            x: "4",
            y: "2",
            rx: "2",
            ry: "2",
            key: "76otgf"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "14",
            r: "4",
            key: "1jruaj"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "6",
            y2: "6",
            key: "16cbga"
        }
    ]
]);
var speaker = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Speaker
});
const SpellCheck2 = createLucideIcon("SpellCheck2", [
    [
        "path",
        {
            d: "m6 16 6-12 6 12",
            key: "1b4byz"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "path",
        {
            d: "M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1",
            key: "8mdmtu"
        }
    ]
]);
var spellCheck2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SpellCheck2
});
const SpellCheck = createLucideIcon("SpellCheck", [
    [
        "path",
        {
            d: "m6 16 6-12 6 12",
            key: "1b4byz"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "path",
        {
            d: "m16 20 2 2 4-4",
            key: "13tcca"
        }
    ]
]);
var spellCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SpellCheck
});
const Spline = createLucideIcon("Spline", [
    [
        "circle",
        {
            cx: "19",
            cy: "5",
            r: "2",
            key: "mhkx31"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "19",
            r: "2",
            key: "v8kfzx"
        }
    ],
    [
        "path",
        {
            d: "M5 17A12 12 0 0 1 17 5",
            key: "1okkup"
        }
    ]
]);
var spline = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Spline
});
const SplitSquareHorizontal = createLucideIcon("SplitSquareHorizontal", [
    [
        "path",
        {
            d: "M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3",
            key: "lubmu8"
        }
    ],
    [
        "path",
        {
            d: "M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3",
            key: "1ag34g"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "4",
            y2: "20",
            key: "1tx1rr"
        }
    ]
]);
var splitSquareHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SplitSquareHorizontal
});
const SplitSquareVertical = createLucideIcon("SplitSquareVertical", [
    [
        "path",
        {
            d: "M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3",
            key: "1pi83i"
        }
    ],
    [
        "path",
        {
            d: "M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3",
            key: "ido5k7"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "12",
            y2: "12",
            key: "1e0a9i"
        }
    ]
]);
var splitSquareVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SplitSquareVertical
});
const Split = createLucideIcon("Split", [
    [
        "path",
        {
            d: "M16 3h5v5",
            key: "1806ms"
        }
    ],
    [
        "path",
        {
            d: "M8 3H3v5",
            key: "15dfkv"
        }
    ],
    [
        "path",
        {
            d: "M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3",
            key: "1qrqzj"
        }
    ],
    [
        "path",
        {
            d: "m15 9 6-6",
            key: "ko1vev"
        }
    ]
]);
var split = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Split
});
const SprayCan = createLucideIcon("SprayCan", [
    [
        "path",
        {
            d: "M3 3h.01",
            key: "159qn6"
        }
    ],
    [
        "path",
        {
            d: "M7 5h.01",
            key: "1hq22a"
        }
    ],
    [
        "path",
        {
            d: "M11 7h.01",
            key: "1osv80"
        }
    ],
    [
        "path",
        {
            d: "M3 7h.01",
            key: "1xzrh3"
        }
    ],
    [
        "path",
        {
            d: "M7 9h.01",
            key: "19b3jx"
        }
    ],
    [
        "path",
        {
            d: "M3 11h.01",
            key: "1eifu7"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "4",
            x: "15",
            y: "5",
            key: "mri9e4"
        }
    ],
    [
        "path",
        {
            d: "m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2",
            key: "aib6hk"
        }
    ],
    [
        "path",
        {
            d: "m13 14 8-2",
            key: "1d7bmk"
        }
    ],
    [
        "path",
        {
            d: "m13 19 8-2",
            key: "1y2vml"
        }
    ]
]);
var sprayCan = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SprayCan
});
const Sprout = createLucideIcon("Sprout", [
    [
        "path",
        {
            d: "M7 20h10",
            key: "e6iznv"
        }
    ],
    [
        "path",
        {
            d: "M10 20c5.5-2.5.8-6.4 3-10",
            key: "161w41"
        }
    ],
    [
        "path",
        {
            d: "M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z",
            key: "9gtqwd"
        }
    ],
    [
        "path",
        {
            d: "M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z",
            key: "bkxnd2"
        }
    ]
]);
var sprout = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sprout
});
const SquareAsterisk = createLucideIcon("SquareAsterisk", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M12 8v8",
            key: "napkw2"
        }
    ],
    [
        "path",
        {
            d: "m8.5 14 7-4",
            key: "12hpby"
        }
    ],
    [
        "path",
        {
            d: "m8.5 10 7 4",
            key: "wwy2dy"
        }
    ]
]);
var squareAsterisk = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareAsterisk
});
const SquareCode = createLucideIcon("SquareCode", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "m10 10-2 2 2 2",
            key: "p6et6i"
        }
    ],
    [
        "path",
        {
            d: "m14 14 2-2-2-2",
            key: "m075q2"
        }
    ]
]);
var squareCode = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareCode
});
const SquareDashedBottomCode = createLucideIcon("SquareDashedBottomCode", [
    [
        "path",
        {
            d: "m10 10-2 2 2 2",
            key: "p6et6i"
        }
    ],
    [
        "path",
        {
            d: "m14 14 2-2-2-2",
            key: "m075q2"
        }
    ],
    [
        "path",
        {
            d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2",
            key: "as5y1o"
        }
    ],
    [
        "path",
        {
            d: "M9 21h1",
            key: "15o7lz"
        }
    ],
    [
        "path",
        {
            d: "M14 21h1",
            key: "v9vybs"
        }
    ]
]);
var squareDashedBottomCode = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareDashedBottomCode
});
const SquareDashedBottom = createLucideIcon("SquareDashedBottom", [
    [
        "path",
        {
            d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2",
            key: "as5y1o"
        }
    ],
    [
        "path",
        {
            d: "M9 21h1",
            key: "15o7lz"
        }
    ],
    [
        "path",
        {
            d: "M14 21h1",
            key: "v9vybs"
        }
    ]
]);
var squareDashedBottom = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareDashedBottom
});
const SquareDot = createLucideIcon("SquareDot", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ]
]);
var squareDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareDot
});
const SquareEqual = createLucideIcon("SquareEqual", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M7 10h10",
            key: "1101jm"
        }
    ],
    [
        "path",
        {
            d: "M7 14h10",
            key: "1mhdw3"
        }
    ]
]);
var squareEqual = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareEqual
});
const SquareSlash = createLucideIcon("SquareSlash", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "15",
            y2: "9",
            key: "1dfufj"
        }
    ]
]);
var squareSlash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareSlash
});
const SquareStack = createLucideIcon("SquareStack", [
    [
        "path",
        {
            d: "M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2",
            key: "4i38lg"
        }
    ],
    [
        "path",
        {
            d: "M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2",
            key: "mlte4a"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "14",
            y: "14",
            rx: "2",
            key: "1fa9i4"
        }
    ]
]);
var squareStack = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SquareStack
});
const Square = createLucideIcon("Square", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ]
]);
var square = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Square
});
const Squirrel = createLucideIcon("Squirrel", [
    [
        "path",
        {
            d: "M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10",
            key: "980v8a"
        }
    ],
    [
        "path",
        {
            d: "M16 20c0-1.7 1.3-3 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4",
            key: "19wibc"
        }
    ],
    [
        "path",
        {
            d: "M15.2 22a3 3 0 0 0-2.2-5",
            key: "13bpac"
        }
    ],
    [
        "path",
        {
            d: "M18 13h.01",
            key: "9veqaj"
        }
    ]
]);
var squirrel = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Squirrel
});
const Stamp = createLucideIcon("Stamp", [
    [
        "path",
        {
            d: "M5 22h14",
            key: "ehvnwv"
        }
    ],
    [
        "path",
        {
            d: "M19.27 13.73A2.5 2.5 0 0 0 17.5 13h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-1.5c0-.66-.26-1.3-.73-1.77Z",
            key: "1sy9ra"
        }
    ],
    [
        "path",
        {
            d: "M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-3-3c-1.66 0-3 1-3 3s1 2 1 3.5V13",
            key: "cnxgux"
        }
    ]
]);
var stamp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Stamp
});
const StarHalf = createLucideIcon("StarHalf", [
    [
        "path",
        {
            d: "M12 17.8 5.8 21 7 14.1 2 9.3l7-1L12 2",
            key: "nare05"
        }
    ]
]);
var starHalf = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StarHalf
});
const StarOff = createLucideIcon("StarOff", [
    [
        "path",
        {
            d: "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43",
            key: "16m0ql"
        }
    ],
    [
        "path",
        {
            d: "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91",
            key: "1vt8nq"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var starOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StarOff
});
const Star = createLucideIcon("Star", [
    [
        "polygon",
        {
            points: "12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2",
            key: "8f66p6"
        }
    ]
]);
var star = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Star
});
const StepBack = createLucideIcon("StepBack", [
    [
        "line",
        {
            x1: "18",
            x2: "18",
            y1: "20",
            y2: "4",
            key: "cun8e5"
        }
    ],
    [
        "polygon",
        {
            points: "14,20 4,12 14,4",
            key: "ypakod"
        }
    ]
]);
var stepBack = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StepBack
});
const StepForward = createLucideIcon("StepForward", [
    [
        "line",
        {
            x1: "6",
            x2: "6",
            y1: "4",
            y2: "20",
            key: "fy8qot"
        }
    ],
    [
        "polygon",
        {
            points: "10,4 20,12 10,20",
            key: "1mc1pf"
        }
    ]
]);
var stepForward = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StepForward
});
const Stethoscope = createLucideIcon("Stethoscope", [
    [
        "path",
        {
            d: "M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3",
            key: "1jd90r"
        }
    ],
    [
        "path",
        {
            d: "M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4",
            key: "126ukv"
        }
    ],
    [
        "circle",
        {
            cx: "20",
            cy: "10",
            r: "2",
            key: "ts1r5v"
        }
    ]
]);
var stethoscope = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Stethoscope
});
const Sticker = createLucideIcon("Sticker", [
    [
        "path",
        {
            d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z",
            key: "1wis1t"
        }
    ],
    [
        "path",
        {
            d: "M15 3v6h6",
            key: "edgan2"
        }
    ],
    [
        "path",
        {
            d: "M10 16s.8 1 2 1c1.3 0 2-1 2-1",
            key: "1vvgv3"
        }
    ],
    [
        "path",
        {
            d: "M8 13h0",
            key: "jdup5h"
        }
    ],
    [
        "path",
        {
            d: "M16 13h0",
            key: "l4i2ga"
        }
    ]
]);
var sticker = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sticker
});
const StickyNote = createLucideIcon("StickyNote", [
    [
        "path",
        {
            d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z",
            key: "1wis1t"
        }
    ],
    [
        "path",
        {
            d: "M15 3v6h6",
            key: "edgan2"
        }
    ]
]);
var stickyNote = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StickyNote
});
const StopCircle = createLucideIcon("StopCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "6",
            x: "9",
            y: "9",
            key: "1wrtvo"
        }
    ]
]);
var stopCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StopCircle
});
const Store = createLucideIcon("Store", [
    [
        "path",
        {
            d: "m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7",
            key: "ztvudi"
        }
    ],
    [
        "path",
        {
            d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8",
            key: "1b2hhj"
        }
    ],
    [
        "path",
        {
            d: "M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4",
            key: "2ebpfo"
        }
    ],
    [
        "path",
        {
            d: "M2 7h20",
            key: "1fcdvo"
        }
    ],
    [
        "path",
        {
            d: "M22 7v3a2 2 0 0 1-2 2v0a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12v0a2 2 0 0 1-2-2V7",
            key: "jon5kx"
        }
    ]
]);
var store = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Store
});
const StretchHorizontal = createLucideIcon("StretchHorizontal", [
    [
        "rect",
        {
            width: "20",
            height: "6",
            x: "2",
            y: "4",
            rx: "2",
            key: "qdearl"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "6",
            x: "2",
            y: "14",
            rx: "2",
            key: "1xrn6j"
        }
    ]
]);
var stretchHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StretchHorizontal
});
const StretchVertical = createLucideIcon("StretchVertical", [
    [
        "rect",
        {
            width: "6",
            height: "20",
            x: "4",
            y: "2",
            rx: "2",
            key: "19qu7m"
        }
    ],
    [
        "rect",
        {
            width: "6",
            height: "20",
            x: "14",
            y: "2",
            rx: "2",
            key: "24v0nk"
        }
    ]
]);
var stretchVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: StretchVertical
});
const Strikethrough = createLucideIcon("Strikethrough", [
    [
        "path",
        {
            d: "M16 4H9a3 3 0 0 0-2.83 4",
            key: "43sutm"
        }
    ],
    [
        "path",
        {
            d: "M14 12a4 4 0 0 1 0 8H6",
            key: "nlfj13"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "12",
            y2: "12",
            key: "1e0a9i"
        }
    ]
]);
var strikethrough = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Strikethrough
});
const Subscript = createLucideIcon("Subscript", [
    [
        "path",
        {
            d: "m4 5 8 8",
            key: "1eunvl"
        }
    ],
    [
        "path",
        {
            d: "m12 5-8 8",
            key: "1ah0jp"
        }
    ],
    [
        "path",
        {
            d: "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07",
            key: "e8ta8j"
        }
    ]
]);
var subscript = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Subscript
});
const Subtitles = createLucideIcon("Subtitles", [
    [
        "path",
        {
            d: "M7 13h4",
            key: "1m1xj0"
        }
    ],
    [
        "path",
        {
            d: "M15 13h2",
            key: "vgjay3"
        }
    ],
    [
        "path",
        {
            d: "M7 9h2",
            key: "1q072n"
        }
    ],
    [
        "path",
        {
            d: "M13 9h4",
            key: "o7fxw0"
        }
    ],
    [
        "path",
        {
            d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10Z",
            key: "12yqn6"
        }
    ]
]);
var subtitles = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Subtitles
});
const SunDim = createLucideIcon("SunDim", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ],
    [
        "path",
        {
            d: "M12 4h.01",
            key: "1ujb9j"
        }
    ],
    [
        "path",
        {
            d: "M20 12h.01",
            key: "1ykeid"
        }
    ],
    [
        "path",
        {
            d: "M12 20h.01",
            key: "zekei9"
        }
    ],
    [
        "path",
        {
            d: "M4 12h.01",
            key: "158zrr"
        }
    ],
    [
        "path",
        {
            d: "M17.657 6.343h.01",
            key: "31pqzk"
        }
    ],
    [
        "path",
        {
            d: "M17.657 17.657h.01",
            key: "jehnf4"
        }
    ],
    [
        "path",
        {
            d: "M6.343 17.657h.01",
            key: "gdk6ow"
        }
    ],
    [
        "path",
        {
            d: "M6.343 6.343h.01",
            key: "1uurf0"
        }
    ]
]);
var sunDim = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SunDim
});
const SunMedium = createLucideIcon("SunMedium", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ],
    [
        "path",
        {
            d: "M12 3v1",
            key: "1asbbs"
        }
    ],
    [
        "path",
        {
            d: "M12 20v1",
            key: "1wcdkc"
        }
    ],
    [
        "path",
        {
            d: "M3 12h1",
            key: "lp3yf2"
        }
    ],
    [
        "path",
        {
            d: "M20 12h1",
            key: "1vloll"
        }
    ],
    [
        "path",
        {
            d: "m18.364 5.636-.707.707",
            key: "1hakh0"
        }
    ],
    [
        "path",
        {
            d: "m6.343 17.657-.707.707",
            key: "18m9nf"
        }
    ],
    [
        "path",
        {
            d: "m5.636 5.636.707.707",
            key: "1xv1c5"
        }
    ],
    [
        "path",
        {
            d: "m17.657 17.657.707.707",
            key: "vl76zb"
        }
    ]
]);
var sunMedium = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SunMedium
});
const SunMoon = createLucideIcon("SunMoon", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ],
    [
        "path",
        {
            d: "M12 8a2 2 0 1 0 4 4",
            key: "10c5vg"
        }
    ],
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ],
    [
        "path",
        {
            d: "M12 20v2",
            key: "1lh1kg"
        }
    ],
    [
        "path",
        {
            d: "m4.93 4.93 1.41 1.41",
            key: "149t6j"
        }
    ],
    [
        "path",
        {
            d: "m17.66 17.66 1.41 1.41",
            key: "ptbguv"
        }
    ],
    [
        "path",
        {
            d: "M2 12h2",
            key: "1t8f8n"
        }
    ],
    [
        "path",
        {
            d: "M20 12h2",
            key: "1q8mjw"
        }
    ],
    [
        "path",
        {
            d: "m6.34 17.66-1.41 1.41",
            key: "1m8zz5"
        }
    ],
    [
        "path",
        {
            d: "m19.07 4.93-1.41 1.41",
            key: "1shlcs"
        }
    ]
]);
var sunMoon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SunMoon
});
const SunSnow = createLucideIcon("SunSnow", [
    [
        "path",
        {
            d: "M10 9a3 3 0 1 0 0 6",
            key: "6zmtdl"
        }
    ],
    [
        "path",
        {
            d: "M2 12h1",
            key: "1uaihz"
        }
    ],
    [
        "path",
        {
            d: "M14 21V3",
            key: "1llu3z"
        }
    ],
    [
        "path",
        {
            d: "M10 4V3",
            key: "pkzwkn"
        }
    ],
    [
        "path",
        {
            d: "M10 21v-1",
            key: "1u8rkd"
        }
    ],
    [
        "path",
        {
            d: "m3.64 18.36.7-.7",
            key: "105rm9"
        }
    ],
    [
        "path",
        {
            d: "m4.34 6.34-.7-.7",
            key: "d3unjp"
        }
    ],
    [
        "path",
        {
            d: "M14 12h8",
            key: "4f43i9"
        }
    ],
    [
        "path",
        {
            d: "m17 4-3 3",
            key: "15jcng"
        }
    ],
    [
        "path",
        {
            d: "m14 17 3 3",
            key: "6tlq38"
        }
    ],
    [
        "path",
        {
            d: "m21 15-3-3 3-3",
            key: "1nlnje"
        }
    ]
]);
var sunSnow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SunSnow
});
const Sun = createLucideIcon("Sun", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "4",
            key: "4exip2"
        }
    ],
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ],
    [
        "path",
        {
            d: "M12 20v2",
            key: "1lh1kg"
        }
    ],
    [
        "path",
        {
            d: "m4.93 4.93 1.41 1.41",
            key: "149t6j"
        }
    ],
    [
        "path",
        {
            d: "m17.66 17.66 1.41 1.41",
            key: "ptbguv"
        }
    ],
    [
        "path",
        {
            d: "M2 12h2",
            key: "1t8f8n"
        }
    ],
    [
        "path",
        {
            d: "M20 12h2",
            key: "1q8mjw"
        }
    ],
    [
        "path",
        {
            d: "m6.34 17.66-1.41 1.41",
            key: "1m8zz5"
        }
    ],
    [
        "path",
        {
            d: "m19.07 4.93-1.41 1.41",
            key: "1shlcs"
        }
    ]
]);
var sun = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sun
});
const Sunrise = createLucideIcon("Sunrise", [
    [
        "path",
        {
            d: "M12 2v8",
            key: "1q4o3n"
        }
    ],
    [
        "path",
        {
            d: "m4.93 10.93 1.41 1.41",
            key: "2a7f42"
        }
    ],
    [
        "path",
        {
            d: "M2 18h2",
            key: "j10viu"
        }
    ],
    [
        "path",
        {
            d: "M20 18h2",
            key: "wocana"
        }
    ],
    [
        "path",
        {
            d: "m19.07 10.93-1.41 1.41",
            key: "15zs5n"
        }
    ],
    [
        "path",
        {
            d: "M22 22H2",
            key: "19qnx5"
        }
    ],
    [
        "path",
        {
            d: "m8 6 4-4 4 4",
            key: "ybng9g"
        }
    ],
    [
        "path",
        {
            d: "M16 18a4 4 0 0 0-8 0",
            key: "1lzouq"
        }
    ]
]);
var sunrise = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sunrise
});
const Sunset = createLucideIcon("Sunset", [
    [
        "path",
        {
            d: "M12 10V2",
            key: "16sf7g"
        }
    ],
    [
        "path",
        {
            d: "m4.93 10.93 1.41 1.41",
            key: "2a7f42"
        }
    ],
    [
        "path",
        {
            d: "M2 18h2",
            key: "j10viu"
        }
    ],
    [
        "path",
        {
            d: "M20 18h2",
            key: "wocana"
        }
    ],
    [
        "path",
        {
            d: "m19.07 10.93-1.41 1.41",
            key: "15zs5n"
        }
    ],
    [
        "path",
        {
            d: "M22 22H2",
            key: "19qnx5"
        }
    ],
    [
        "path",
        {
            d: "m16 6-4 4-4-4",
            key: "6wukr"
        }
    ],
    [
        "path",
        {
            d: "M16 18a4 4 0 0 0-8 0",
            key: "1lzouq"
        }
    ]
]);
var sunset = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sunset
});
const Superscript = createLucideIcon("Superscript", [
    [
        "path",
        {
            d: "m4 19 8-8",
            key: "hr47gm"
        }
    ],
    [
        "path",
        {
            d: "m12 19-8-8",
            key: "1dhhmo"
        }
    ],
    [
        "path",
        {
            d: "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06",
            key: "1dfcux"
        }
    ]
]);
var superscript = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Superscript
});
const SwissFranc = createLucideIcon("SwissFranc", [
    [
        "path",
        {
            d: "M10 21V3h8",
            key: "br2l0g"
        }
    ],
    [
        "path",
        {
            d: "M6 16h9",
            key: "2py0wn"
        }
    ],
    [
        "path",
        {
            d: "M10 9.5h7",
            key: "13dmhz"
        }
    ]
]);
var swissFranc = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SwissFranc
});
const SwitchCamera = createLucideIcon("SwitchCamera", [
    [
        "path",
        {
            d: "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5",
            key: "mtk2lu"
        }
    ],
    [
        "path",
        {
            d: "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5",
            key: "120jsl"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ],
    [
        "path",
        {
            d: "m18 22-3-3 3-3",
            key: "kgdoj7"
        }
    ],
    [
        "path",
        {
            d: "m6 2 3 3-3 3",
            key: "1fnbkv"
        }
    ]
]);
var switchCamera = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: SwitchCamera
});
const Sword = createLucideIcon("Sword", [
    [
        "polyline",
        {
            points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5",
            key: "1hfsw2"
        }
    ],
    [
        "line",
        {
            x1: "13",
            x2: "19",
            y1: "19",
            y2: "13",
            key: "1vrmhu"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "20",
            y1: "16",
            y2: "20",
            key: "1bron3"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "21",
            y1: "21",
            y2: "19",
            key: "13pww6"
        }
    ]
]);
var sword = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Sword
});
const Swords = createLucideIcon("Swords", [
    [
        "polyline",
        {
            points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5",
            key: "1hfsw2"
        }
    ],
    [
        "line",
        {
            x1: "13",
            x2: "19",
            y1: "19",
            y2: "13",
            key: "1vrmhu"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "20",
            y1: "16",
            y2: "20",
            key: "1bron3"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "21",
            y1: "21",
            y2: "19",
            key: "13pww6"
        }
    ],
    [
        "polyline",
        {
            points: "14.5 6.5 18 3 21 3 21 6 17.5 9.5",
            key: "hbey2j"
        }
    ],
    [
        "line",
        {
            x1: "5",
            x2: "9",
            y1: "14",
            y2: "18",
            key: "1hf58s"
        }
    ],
    [
        "line",
        {
            x1: "7",
            x2: "4",
            y1: "17",
            y2: "20",
            key: "pidxm4"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "5",
            y1: "19",
            y2: "21",
            key: "1pehsh"
        }
    ]
]);
var swords = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Swords
});
const Syringe = createLucideIcon("Syringe", [
    [
        "path",
        {
            d: "m18 2 4 4",
            key: "22kx64"
        }
    ],
    [
        "path",
        {
            d: "m17 7 3-3",
            key: "1w1zoj"
        }
    ],
    [
        "path",
        {
            d: "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5",
            key: "1exhtz"
        }
    ],
    [
        "path",
        {
            d: "m9 11 4 4",
            key: "rovt3i"
        }
    ],
    [
        "path",
        {
            d: "m5 19-3 3",
            key: "59f2uf"
        }
    ],
    [
        "path",
        {
            d: "m14 4 6 6",
            key: "yqp9t2"
        }
    ]
]);
var syringe = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Syringe
});
const Table2 = createLucideIcon("Table2", [
    [
        "path",
        {
            d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18",
            key: "gugj83"
        }
    ]
]);
var table2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Table2
});
const TableProperties = createLucideIcon("TableProperties", [
    [
        "path",
        {
            d: "M15 3v18",
            key: "14nvp0"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M21 9H3",
            key: "1338ky"
        }
    ],
    [
        "path",
        {
            d: "M21 15H3",
            key: "9uk58r"
        }
    ]
]);
var tableProperties = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TableProperties
});
const Table = createLucideIcon("Table", [
    [
        "path",
        {
            d: "M12 3v18",
            key: "108xh3"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M3 9h18",
            key: "1pudct"
        }
    ],
    [
        "path",
        {
            d: "M3 15h18",
            key: "5xshup"
        }
    ]
]);
var table = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Table
});
const Tablet = createLucideIcon("Tablet", [
    [
        "rect",
        {
            width: "16",
            height: "20",
            x: "4",
            y: "2",
            rx: "2",
            ry: "2",
            key: "76otgf"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "18",
            y2: "18",
            key: "1dp563"
        }
    ]
]);
var tablet = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tablet
});
const Tablets = createLucideIcon("Tablets", [
    [
        "circle",
        {
            cx: "7",
            cy: "7",
            r: "5",
            key: "x29byf"
        }
    ],
    [
        "circle",
        {
            cx: "17",
            cy: "17",
            r: "5",
            key: "1op1d2"
        }
    ],
    [
        "path",
        {
            d: "M12 17h10",
            key: "ls21zv"
        }
    ],
    [
        "path",
        {
            d: "m3.46 10.54 7.08-7.08",
            key: "1rehiu"
        }
    ]
]);
var tablets = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tablets
});
const Tag = createLucideIcon("Tag", [
    [
        "path",
        {
            d: "M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z",
            key: "14b2ls"
        }
    ],
    [
        "path",
        {
            d: "M7 7h.01",
            key: "7u93v4"
        }
    ]
]);
var tag = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tag
});
const Tags = createLucideIcon("Tags", [
    [
        "path",
        {
            d: "M9 5H2v7l6.29 6.29c.94.94 2.48.94 3.42 0l3.58-3.58c.94-.94.94-2.48 0-3.42L9 5Z",
            key: "gt587u"
        }
    ],
    [
        "path",
        {
            d: "M6 9.01V9",
            key: "1flxpt"
        }
    ],
    [
        "path",
        {
            d: "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19",
            key: "1cbfv1"
        }
    ]
]);
var tags = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tags
});
const Tally1 = createLucideIcon("Tally1", [
    [
        "path",
        {
            d: "M4 4v16",
            key: "6qkkli"
        }
    ]
]);
var tally1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tally1
});
const Tally2 = createLucideIcon("Tally2", [
    [
        "path",
        {
            d: "M4 4v16",
            key: "6qkkli"
        }
    ],
    [
        "path",
        {
            d: "M9 4v16",
            key: "81ygyz"
        }
    ]
]);
var tally2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tally2
});
const Tally3 = createLucideIcon("Tally3", [
    [
        "path",
        {
            d: "M4 4v16",
            key: "6qkkli"
        }
    ],
    [
        "path",
        {
            d: "M9 4v16",
            key: "81ygyz"
        }
    ],
    [
        "path",
        {
            d: "M14 4v16",
            key: "12vmem"
        }
    ]
]);
var tally3 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tally3
});
const Tally4 = createLucideIcon("Tally4", [
    [
        "path",
        {
            d: "M4 4v16",
            key: "6qkkli"
        }
    ],
    [
        "path",
        {
            d: "M9 4v16",
            key: "81ygyz"
        }
    ],
    [
        "path",
        {
            d: "M14 4v16",
            key: "12vmem"
        }
    ],
    [
        "path",
        {
            d: "M19 4v16",
            key: "8ij5ei"
        }
    ]
]);
var tally4 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tally4
});
const Tally5 = createLucideIcon("Tally5", [
    [
        "path",
        {
            d: "M4 4v16",
            key: "6qkkli"
        }
    ],
    [
        "path",
        {
            d: "M9 4v16",
            key: "81ygyz"
        }
    ],
    [
        "path",
        {
            d: "M14 4v16",
            key: "12vmem"
        }
    ],
    [
        "path",
        {
            d: "M19 4v16",
            key: "8ij5ei"
        }
    ],
    [
        "path",
        {
            d: "M22 6 2 18",
            key: "h9moai"
        }
    ]
]);
var tally5 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tally5
});
const Target = createLucideIcon("Target", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "6",
            key: "1vlfrh"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "2",
            key: "1c9p78"
        }
    ]
]);
var target = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Target
});
const Tent = createLucideIcon("Tent", [
    [
        "path",
        {
            d: "M19 20 10 4",
            key: "1ak541"
        }
    ],
    [
        "path",
        {
            d: "m5 20 9-16",
            key: "11dtj9"
        }
    ],
    [
        "path",
        {
            d: "M3 20h18",
            key: "1l19wn"
        }
    ],
    [
        "path",
        {
            d: "m12 15-3 5",
            key: "1c5kej"
        }
    ],
    [
        "path",
        {
            d: "m12 15 3 5",
            key: "odkmhi"
        }
    ]
]);
var tent = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tent
});
const TerminalSquare = createLucideIcon("TerminalSquare", [
    [
        "path",
        {
            d: "m7 11 2-2-2-2",
            key: "1lz0vl"
        }
    ],
    [
        "path",
        {
            d: "M11 13h4",
            key: "1p7l4v"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ]
]);
var terminalSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TerminalSquare
});
const Terminal = createLucideIcon("Terminal", [
    [
        "polyline",
        {
            points: "4 17 10 11 4 5",
            key: "akl6gq"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "20",
            y1: "19",
            y2: "19",
            key: "q2wloq"
        }
    ]
]);
var terminal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Terminal
});
const TestTube2 = createLucideIcon("TestTube2", [
    [
        "path",
        {
            d: "M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01v0a2.83 2.83 0 0 1 0-4L17 3",
            key: "dg8b2p"
        }
    ],
    [
        "path",
        {
            d: "m16 2 6 6",
            key: "1gw87d"
        }
    ],
    [
        "path",
        {
            d: "M12 16H4",
            key: "1cjfip"
        }
    ]
]);
var testTube2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TestTube2
});
const TestTube = createLucideIcon("TestTube", [
    [
        "path",
        {
            d: "M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5h0c-1.4 0-2.5-1.1-2.5-2.5V2",
            key: "187lwq"
        }
    ],
    [
        "path",
        {
            d: "M8.5 2h7",
            key: "csnxdl"
        }
    ],
    [
        "path",
        {
            d: "M14.5 16h-5",
            key: "1ox875"
        }
    ]
]);
var testTube = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TestTube
});
const TestTubes = createLucideIcon("TestTubes", [
    [
        "path",
        {
            d: "M9 2v17.5A2.5 2.5 0 0 1 6.5 22v0A2.5 2.5 0 0 1 4 19.5V2",
            key: "12z67u"
        }
    ],
    [
        "path",
        {
            d: "M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5v0a2.5 2.5 0 0 1-2.5-2.5V2",
            key: "1q2nfy"
        }
    ],
    [
        "path",
        {
            d: "M3 2h7",
            key: "7s29d5"
        }
    ],
    [
        "path",
        {
            d: "M14 2h7",
            key: "7sicin"
        }
    ],
    [
        "path",
        {
            d: "M9 16H4",
            key: "1bfye3"
        }
    ],
    [
        "path",
        {
            d: "M20 16h-5",
            key: "ddnjpe"
        }
    ]
]);
var testTubes = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TestTubes
});
const TextCursorInput = createLucideIcon("TextCursorInput", [
    [
        "path",
        {
            d: "M5 4h1a3 3 0 0 1 3 3 3 3 0 0 1 3-3h1",
            key: "18xjzo"
        }
    ],
    [
        "path",
        {
            d: "M13 20h-1a3 3 0 0 1-3-3 3 3 0 0 1-3 3H5",
            key: "fj48gi"
        }
    ],
    [
        "path",
        {
            d: "M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1",
            key: "1n9rhb"
        }
    ],
    [
        "path",
        {
            d: "M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7",
            key: "13ksps"
        }
    ],
    [
        "path",
        {
            d: "M9 7v10",
            key: "1vc8ob"
        }
    ]
]);
var textCursorInput = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TextCursorInput
});
const TextCursor = createLucideIcon("TextCursor", [
    [
        "path",
        {
            d: "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1",
            key: "uvaxm9"
        }
    ],
    [
        "path",
        {
            d: "M7 22h1a4 4 0 0 0 4-4v-1",
            key: "11xy8d"
        }
    ],
    [
        "path",
        {
            d: "M7 2h1a4 4 0 0 1 4 4v1",
            key: "1uw06m"
        }
    ]
]);
var textCursor = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TextCursor
});
const TextQuote = createLucideIcon("TextQuote", [
    [
        "path",
        {
            d: "M17 6H3",
            key: "16j9eg"
        }
    ],
    [
        "path",
        {
            d: "M21 12H8",
            key: "scolzb"
        }
    ],
    [
        "path",
        {
            d: "M21 18H8",
            key: "1wfozv"
        }
    ],
    [
        "path",
        {
            d: "M3 12v6",
            key: "fv4c87"
        }
    ]
]);
var textQuote = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TextQuote
});
const TextSelect = createLucideIcon("TextSelect", [
    [
        "path",
        {
            d: "M5 3a2 2 0 0 0-2 2",
            key: "y57alp"
        }
    ],
    [
        "path",
        {
            d: "M19 3a2 2 0 0 1 2 2",
            key: "18rm91"
        }
    ],
    [
        "path",
        {
            d: "M21 19a2 2 0 0 1-2 2",
            key: "1j7049"
        }
    ],
    [
        "path",
        {
            d: "M5 21a2 2 0 0 1-2-2",
            key: "sbafld"
        }
    ],
    [
        "path",
        {
            d: "M9 3h1",
            key: "1yesri"
        }
    ],
    [
        "path",
        {
            d: "M9 21h1",
            key: "15o7lz"
        }
    ],
    [
        "path",
        {
            d: "M14 3h1",
            key: "1ec4yj"
        }
    ],
    [
        "path",
        {
            d: "M14 21h1",
            key: "v9vybs"
        }
    ],
    [
        "path",
        {
            d: "M3 9v1",
            key: "1r0deq"
        }
    ],
    [
        "path",
        {
            d: "M21 9v1",
            key: "mxsmne"
        }
    ],
    [
        "path",
        {
            d: "M3 14v1",
            key: "vnatye"
        }
    ],
    [
        "path",
        {
            d: "M21 14v1",
            key: "169vum"
        }
    ],
    [
        "line",
        {
            x1: "7",
            x2: "15",
            y1: "8",
            y2: "8",
            key: "1758g8"
        }
    ],
    [
        "line",
        {
            x1: "7",
            x2: "17",
            y1: "12",
            y2: "12",
            key: "197423"
        }
    ],
    [
        "line",
        {
            x1: "7",
            x2: "13",
            y1: "16",
            y2: "16",
            key: "37cgm6"
        }
    ]
]);
var textSelect = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TextSelect
});
const Text = createLucideIcon("Text", [
    [
        "path",
        {
            d: "M17 6.1H3",
            key: "wptmhv"
        }
    ],
    [
        "path",
        {
            d: "M21 12.1H3",
            key: "1j38uz"
        }
    ],
    [
        "path",
        {
            d: "M15.1 18H3",
            key: "1nb16a"
        }
    ]
]);
var text = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Text
});
const ThermometerSnowflake = createLucideIcon("ThermometerSnowflake", [
    [
        "path",
        {
            d: "M2 12h10",
            key: "19562f"
        }
    ],
    [
        "path",
        {
            d: "M9 4v16",
            key: "81ygyz"
        }
    ],
    [
        "path",
        {
            d: "m3 9 3 3-3 3",
            key: "1sas0l"
        }
    ],
    [
        "path",
        {
            d: "M12 6 9 9 6 6",
            key: "pfrgxu"
        }
    ],
    [
        "path",
        {
            d: "m6 18 3-3 1.5 1.5",
            key: "1e277p"
        }
    ],
    [
        "path",
        {
            d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z",
            key: "iof6y5"
        }
    ]
]);
var thermometerSnowflake = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ThermometerSnowflake
});
const ThermometerSun = createLucideIcon("ThermometerSun", [
    [
        "path",
        {
            d: "M12 9a4 4 0 0 0-2 7.5",
            key: "1jvsq6"
        }
    ],
    [
        "path",
        {
            d: "M12 3v2",
            key: "1w22ol"
        }
    ],
    [
        "path",
        {
            d: "m6.6 18.4-1.4 1.4",
            key: "w2yidj"
        }
    ],
    [
        "path",
        {
            d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z",
            key: "iof6y5"
        }
    ],
    [
        "path",
        {
            d: "M4 13H2",
            key: "118le4"
        }
    ],
    [
        "path",
        {
            d: "M6.34 7.34 4.93 5.93",
            key: "1brd51"
        }
    ]
]);
var thermometerSun = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ThermometerSun
});
const Thermometer = createLucideIcon("Thermometer", [
    [
        "path",
        {
            d: "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z",
            key: "17jzev"
        }
    ]
]);
var thermometer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Thermometer
});
const ThumbsDown = createLucideIcon("ThumbsDown", [
    [
        "path",
        {
            d: "M17 14V2",
            key: "8ymqnk"
        }
    ],
    [
        "path",
        {
            d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z",
            key: "s6e0r"
        }
    ]
]);
var thumbsDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ThumbsDown
});
const ThumbsUp = createLucideIcon("ThumbsUp", [
    [
        "path",
        {
            d: "M7 10v12",
            key: "1qc93n"
        }
    ],
    [
        "path",
        {
            d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z",
            key: "y3tblf"
        }
    ]
]);
var thumbsUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ThumbsUp
});
const Ticket = createLucideIcon("Ticket", [
    [
        "path",
        {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
        }
    ],
    [
        "path",
        {
            d: "M13 5v2",
            key: "dyzc3o"
        }
    ],
    [
        "path",
        {
            d: "M13 17v2",
            key: "1ont0d"
        }
    ],
    [
        "path",
        {
            d: "M13 11v2",
            key: "1wjjxi"
        }
    ]
]);
var ticket = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ticket
});
const TimerOff = createLucideIcon("TimerOff", [
    [
        "path",
        {
            d: "M10 2h4",
            key: "n1abiw"
        }
    ],
    [
        "path",
        {
            d: "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7",
            key: "10he05"
        }
    ],
    [
        "path",
        {
            d: "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2",
            key: "15f7sh"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M12 12v-2",
            key: "fwoke6"
        }
    ]
]);
var timerOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TimerOff
});
const TimerReset = createLucideIcon("TimerReset", [
    [
        "path",
        {
            d: "M10 2h4",
            key: "n1abiw"
        }
    ],
    [
        "path",
        {
            d: "M12 14v-4",
            key: "1evpnu"
        }
    ],
    [
        "path",
        {
            d: "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6",
            key: "1ts96g"
        }
    ],
    [
        "path",
        {
            d: "M9 17H4v5",
            key: "8t5av"
        }
    ]
]);
var timerReset = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TimerReset
});
const Timer = createLucideIcon("Timer", [
    [
        "line",
        {
            x1: "10",
            x2: "14",
            y1: "2",
            y2: "2",
            key: "14vaq8"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "15",
            y1: "14",
            y2: "11",
            key: "17fdiu"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "14",
            r: "8",
            key: "1e1u0o"
        }
    ]
]);
var timer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Timer
});
const ToggleLeft = createLucideIcon("ToggleLeft", [
    [
        "rect",
        {
            width: "20",
            height: "12",
            x: "2",
            y: "6",
            rx: "6",
            ry: "6",
            key: "f2vt7d"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "12",
            r: "2",
            key: "1nvbw3"
        }
    ]
]);
var toggleLeft = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ToggleLeft
});
const ToggleRight = createLucideIcon("ToggleRight", [
    [
        "rect",
        {
            width: "20",
            height: "12",
            x: "2",
            y: "6",
            rx: "6",
            ry: "6",
            key: "f2vt7d"
        }
    ],
    [
        "circle",
        {
            cx: "16",
            cy: "12",
            r: "2",
            key: "4ma0v8"
        }
    ]
]);
var toggleRight = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ToggleRight
});
const Tornado = createLucideIcon("Tornado", [
    [
        "path",
        {
            d: "M21 4H3",
            key: "1hwok0"
        }
    ],
    [
        "path",
        {
            d: "M18 8H6",
            key: "41n648"
        }
    ],
    [
        "path",
        {
            d: "M19 12H9",
            key: "1g4lpz"
        }
    ],
    [
        "path",
        {
            d: "M16 16h-6",
            key: "1j5d54"
        }
    ],
    [
        "path",
        {
            d: "M11 20H9",
            key: "39obr8"
        }
    ]
]);
var tornado = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tornado
});
const TouchpadOff = createLucideIcon("TouchpadOff", [
    [
        "path",
        {
            d: "M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16",
            key: "lnt0bk"
        }
    ],
    [
        "path",
        {
            d: "M2 14h12",
            key: "d8icqz"
        }
    ],
    [
        "path",
        {
            d: "M22 14h-2",
            key: "jrx26d"
        }
    ],
    [
        "path",
        {
            d: "M12 20v-6",
            key: "1rm09r"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ],
    [
        "path",
        {
            d: "M22 16V6a2 2 0 0 0-2-2H10",
            key: "11y8e4"
        }
    ]
]);
var touchpadOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TouchpadOff
});
const Touchpad = createLucideIcon("Touchpad", [
    [
        "rect",
        {
            width: "20",
            height: "16",
            x: "2",
            y: "4",
            rx: "2",
            key: "18n3k1"
        }
    ],
    [
        "path",
        {
            d: "M2 14h20",
            key: "myj16y"
        }
    ],
    [
        "path",
        {
            d: "M12 20v-6",
            key: "1rm09r"
        }
    ]
]);
var touchpad = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Touchpad
});
const TowerControl = createLucideIcon("TowerControl", [
    [
        "path",
        {
            d: "M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z",
            key: "1pledb"
        }
    ],
    [
        "path",
        {
            d: "M8 13v9",
            key: "hmv0ci"
        }
    ],
    [
        "path",
        {
            d: "M16 22v-9",
            key: "ylnf1u"
        }
    ],
    [
        "path",
        {
            d: "m9 6 1 7",
            key: "dpdgam"
        }
    ],
    [
        "path",
        {
            d: "m15 6-1 7",
            key: "ls7zgu"
        }
    ],
    [
        "path",
        {
            d: "M12 6V2",
            key: "1pj48d"
        }
    ],
    [
        "path",
        {
            d: "M13 2h-2",
            key: "mj6ths"
        }
    ]
]);
var towerControl = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TowerControl
});
const ToyBrick = createLucideIcon("ToyBrick", [
    [
        "rect",
        {
            width: "18",
            height: "12",
            x: "3",
            y: "8",
            rx: "1",
            key: "158fvp"
        }
    ],
    [
        "path",
        {
            d: "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3",
            key: "s0042v"
        }
    ],
    [
        "path",
        {
            d: "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3",
            key: "9wmeh2"
        }
    ]
]);
var toyBrick = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ToyBrick
});
const Train = createLucideIcon("Train", [
    [
        "rect",
        {
            width: "16",
            height: "16",
            x: "4",
            y: "3",
            rx: "2",
            key: "1wxw4b"
        }
    ],
    [
        "path",
        {
            d: "M4 11h16",
            key: "mpoxn0"
        }
    ],
    [
        "path",
        {
            d: "M12 3v8",
            key: "1h2ygw"
        }
    ],
    [
        "path",
        {
            d: "m8 19-2 3",
            key: "13i0xs"
        }
    ],
    [
        "path",
        {
            d: "m18 22-2-3",
            key: "1p0ohu"
        }
    ],
    [
        "path",
        {
            d: "M8 15h0",
            key: "q9eq1f"
        }
    ],
    [
        "path",
        {
            d: "M16 15h0",
            key: "pzrbjg"
        }
    ]
]);
var train = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Train
});
const Trash2 = createLucideIcon("Trash2", [
    [
        "path",
        {
            d: "M3 6h18",
            key: "d0wm0j"
        }
    ],
    [
        "path",
        {
            d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",
            key: "4alrt4"
        }
    ],
    [
        "path",
        {
            d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",
            key: "v07s0e"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "11",
            y2: "17",
            key: "1uufr5"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "14",
            y1: "11",
            y2: "17",
            key: "xtxkd"
        }
    ]
]);
var trash2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Trash2
});
const Trash = createLucideIcon("Trash", [
    [
        "path",
        {
            d: "M3 6h18",
            key: "d0wm0j"
        }
    ],
    [
        "path",
        {
            d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",
            key: "4alrt4"
        }
    ],
    [
        "path",
        {
            d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",
            key: "v07s0e"
        }
    ]
]);
var trash = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Trash
});
const TreeDeciduous = createLucideIcon("TreeDeciduous", [
    [
        "path",
        {
            d: "M8 19h8a4 4 0 0 0 3.8-2.8 4 4 0 0 0-1.6-4.5c1-1.1 1-2.7.4-4-.7-1.2-2.2-2-3.6-1.7a3 3 0 0 0-3-3 3 3 0 0 0-3 3c-1.4-.2-2.9.5-3.6 1.7-.7 1.3-.5 2.9.4 4a4 4 0 0 0-1.6 4.5A4 4 0 0 0 8 19Z",
            key: "12ivfl"
        }
    ],
    [
        "path",
        {
            d: "M12 19v3",
            key: "npa21l"
        }
    ]
]);
var treeDeciduous = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TreeDeciduous
});
const TreePine = createLucideIcon("TreePine", [
    [
        "path",
        {
            d: "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z",
            key: "cpyugq"
        }
    ],
    [
        "path",
        {
            d: "M12 22v-3",
            key: "kmzjlo"
        }
    ]
]);
var treePine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TreePine
});
const Trees = createLucideIcon("Trees", [
    [
        "path",
        {
            d: "M10 10v.2A3 3 0 0 1 8.9 16v0H5v0h0a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z",
            key: "yh07w9"
        }
    ],
    [
        "path",
        {
            d: "M7 16v6",
            key: "1a82de"
        }
    ],
    [
        "path",
        {
            d: "M13 19v3",
            key: "13sx9i"
        }
    ],
    [
        "path",
        {
            d: "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5",
            key: "1sj9kv"
        }
    ]
]);
var trees = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Trees
});
const Trello = createLucideIcon("Trello", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "rect",
        {
            width: "3",
            height: "9",
            x: "7",
            y: "7",
            key: "14n3xi"
        }
    ],
    [
        "rect",
        {
            width: "3",
            height: "5",
            x: "14",
            y: "7",
            key: "s4azjd"
        }
    ]
]);
var trello = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Trello
});
const TrendingDown = createLucideIcon("TrendingDown", [
    [
        "polyline",
        {
            points: "22 17 13.5 8.5 8.5 13.5 2 7",
            key: "1r2t7k"
        }
    ],
    [
        "polyline",
        {
            points: "16 17 22 17 22 11",
            key: "11uiuu"
        }
    ]
]);
var trendingDown = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TrendingDown
});
const TrendingUp = createLucideIcon("TrendingUp", [
    [
        "polyline",
        {
            points: "22 7 13.5 15.5 8.5 10.5 2 17",
            key: "126l90"
        }
    ],
    [
        "polyline",
        {
            points: "16 7 22 7 22 13",
            key: "kwv8wd"
        }
    ]
]);
var trendingUp = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: TrendingUp
});
const Triangle = createLucideIcon("Triangle", [
    [
        "path",
        {
            d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z",
            key: "c3ski4"
        }
    ]
]);
var triangle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Triangle
});
const Trophy = createLucideIcon("Trophy", [
    [
        "path",
        {
            d: "M6 9H4.5a2.5 2.5 0 0 1 0-5H6",
            key: "17hqa7"
        }
    ],
    [
        "path",
        {
            d: "M18 9h1.5a2.5 2.5 0 0 0 0-5H18",
            key: "lmptdp"
        }
    ],
    [
        "path",
        {
            d: "M4 22h16",
            key: "57wxv0"
        }
    ],
    [
        "path",
        {
            d: "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22",
            key: "1nw9bq"
        }
    ],
    [
        "path",
        {
            d: "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22",
            key: "1np0yb"
        }
    ],
    [
        "path",
        {
            d: "M18 2H6v7a6 6 0 0 0 12 0V2Z",
            key: "u46fv3"
        }
    ]
]);
var trophy = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Trophy
});
const Truck = createLucideIcon("Truck", [
    [
        "path",
        {
            d: "M10 17h4V5H2v12h3",
            key: "1jq12e"
        }
    ],
    [
        "path",
        {
            d: "M20 17h2v-3.34a4 4 0 0 0-1.17-2.83L19 9h-5",
            key: "1xb3ft"
        }
    ],
    [
        "path",
        {
            d: "M14 17h1",
            key: "nufu4t"
        }
    ],
    [
        "circle",
        {
            cx: "7.5",
            cy: "17.5",
            r: "2.5",
            key: "a7aife"
        }
    ],
    [
        "circle",
        {
            cx: "17.5",
            cy: "17.5",
            r: "2.5",
            key: "1mdrzq"
        }
    ]
]);
var truck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Truck
});
const Tv2 = createLucideIcon("Tv2", [
    [
        "path",
        {
            d: "M7 21h10",
            key: "1b0cd5"
        }
    ],
    [
        "rect",
        {
            width: "20",
            height: "14",
            x: "2",
            y: "3",
            rx: "2",
            key: "48i651"
        }
    ]
]);
var tv2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tv2
});
const Tv = createLucideIcon("Tv", [
    [
        "rect",
        {
            width: "20",
            height: "15",
            x: "2",
            y: "7",
            rx: "2",
            ry: "2",
            key: "10ag99"
        }
    ],
    [
        "polyline",
        {
            points: "17 2 12 7 7 2",
            key: "11pgbg"
        }
    ]
]);
var tv = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Tv
});
const Twitch = createLucideIcon("Twitch", [
    [
        "path",
        {
            d: "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7",
            key: "c0yzno"
        }
    ]
]);
var twitch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Twitch
});
const Twitter = createLucideIcon("Twitter", [
    [
        "path",
        {
            d: "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z",
            key: "pff0z6"
        }
    ]
]);
var twitter = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Twitter
});
const Type = createLucideIcon("Type", [
    [
        "polyline",
        {
            points: "4 7 4 4 20 4 20 7",
            key: "1nosan"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "20",
            y2: "20",
            key: "swin9y"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "4",
            y2: "20",
            key: "1tx1rr"
        }
    ]
]);
var type = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Type
});
const Umbrella = createLucideIcon("Umbrella", [
    [
        "path",
        {
            d: "M22 12a10.06 10.06 1 0 0-20 0Z",
            key: "1teyop"
        }
    ],
    [
        "path",
        {
            d: "M12 12v8a2 2 0 0 0 4 0",
            key: "ulpmoc"
        }
    ],
    [
        "path",
        {
            d: "M12 2v1",
            key: "11qlp1"
        }
    ]
]);
var umbrella = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Umbrella
});
const Underline = createLucideIcon("Underline", [
    [
        "path",
        {
            d: "M6 4v6a6 6 0 0 0 12 0V4",
            key: "9kb039"
        }
    ],
    [
        "line",
        {
            x1: "4",
            x2: "20",
            y1: "20",
            y2: "20",
            key: "nun2al"
        }
    ]
]);
var underline = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Underline
});
const Undo2 = createLucideIcon("Undo2", [
    [
        "path",
        {
            d: "M9 14 4 9l5-5",
            key: "102s5s"
        }
    ],
    [
        "path",
        {
            d: "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11",
            key: "llx8ln"
        }
    ]
]);
var undo2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Undo2
});
const UndoDot = createLucideIcon("UndoDot", [
    [
        "circle",
        {
            cx: "12",
            cy: "17",
            r: "1",
            key: "1ixnty"
        }
    ],
    [
        "path",
        {
            d: "M3 7v6h6",
            key: "1v2h90"
        }
    ],
    [
        "path",
        {
            d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13",
            key: "1r6uu6"
        }
    ]
]);
var undoDot = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UndoDot
});
const Undo = createLucideIcon("Undo", [
    [
        "path",
        {
            d: "M3 7v6h6",
            key: "1v2h90"
        }
    ],
    [
        "path",
        {
            d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13",
            key: "1r6uu6"
        }
    ]
]);
var undo = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Undo
});
const UnfoldHorizontal = createLucideIcon("UnfoldHorizontal", [
    [
        "path",
        {
            d: "M16 12h6",
            key: "15xry1"
        }
    ],
    [
        "path",
        {
            d: "M8 12H2",
            key: "1jqql6"
        }
    ],
    [
        "path",
        {
            d: "M12 2v2",
            key: "tus03m"
        }
    ],
    [
        "path",
        {
            d: "M12 8v2",
            key: "1woqiv"
        }
    ],
    [
        "path",
        {
            d: "M12 14v2",
            key: "8jcxud"
        }
    ],
    [
        "path",
        {
            d: "M12 20v2",
            key: "1lh1kg"
        }
    ],
    [
        "path",
        {
            d: "m19 15 3-3-3-3",
            key: "wjy7rq"
        }
    ],
    [
        "path",
        {
            d: "m5 9-3 3 3 3",
            key: "j64kie"
        }
    ]
]);
var unfoldHorizontal = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UnfoldHorizontal
});
const UnfoldVertical = createLucideIcon("UnfoldVertical", [
    [
        "path",
        {
            d: "M12 22v-6",
            key: "6o8u61"
        }
    ],
    [
        "path",
        {
            d: "M12 8V2",
            key: "1wkif3"
        }
    ],
    [
        "path",
        {
            d: "M4 12H2",
            key: "rhcxmi"
        }
    ],
    [
        "path",
        {
            d: "M10 12H8",
            key: "s88cx1"
        }
    ],
    [
        "path",
        {
            d: "M16 12h-2",
            key: "10asgb"
        }
    ],
    [
        "path",
        {
            d: "M22 12h-2",
            key: "14jgyd"
        }
    ],
    [
        "path",
        {
            d: "m15 19-3 3-3-3",
            key: "11eu04"
        }
    ],
    [
        "path",
        {
            d: "m15 5-3-3-3 3",
            key: "itvq4r"
        }
    ]
]);
var unfoldVertical = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UnfoldVertical
});
const Ungroup = createLucideIcon("Ungroup", [
    [
        "rect",
        {
            width: "8",
            height: "6",
            x: "5",
            y: "4",
            rx: "1",
            key: "nzclkv"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "6",
            x: "11",
            y: "14",
            rx: "1",
            key: "4tytwb"
        }
    ]
]);
var ungroup = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Ungroup
});
const Unlink2 = createLucideIcon("Unlink2", [
    [
        "path",
        {
            d: "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2",
            key: "1re2ne"
        }
    ]
]);
var unlink2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Unlink2
});
const Unlink = createLucideIcon("Unlink", [
    [
        "path",
        {
            d: "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71",
            key: "yqzxt4"
        }
    ],
    [
        "path",
        {
            d: "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71",
            key: "4qinb0"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "8",
            y1: "2",
            y2: "5",
            key: "1041cp"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "5",
            y1: "8",
            y2: "8",
            key: "14m1p5"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "16",
            y1: "19",
            y2: "22",
            key: "rzdirn"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "22",
            y1: "16",
            y2: "16",
            key: "ox905f"
        }
    ]
]);
var unlink = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Unlink
});
const Unlock = createLucideIcon("Unlock", [
    [
        "rect",
        {
            width: "18",
            height: "11",
            x: "3",
            y: "11",
            rx: "2",
            ry: "2",
            key: "1w4ew1"
        }
    ],
    [
        "path",
        {
            d: "M7 11V7a5 5 0 0 1 9.9-1",
            key: "1mm8w8"
        }
    ]
]);
var unlock = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Unlock
});
const Unplug = createLucideIcon("Unplug", [
    [
        "path",
        {
            d: "m19 5 3-3",
            key: "yk6iyv"
        }
    ],
    [
        "path",
        {
            d: "m2 22 3-3",
            key: "19mgm9"
        }
    ],
    [
        "path",
        {
            d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z",
            key: "goz73y"
        }
    ],
    [
        "path",
        {
            d: "M7.5 13.5 10 11",
            key: "7xgeeb"
        }
    ],
    [
        "path",
        {
            d: "M10.5 16.5 13 14",
            key: "10btkg"
        }
    ],
    [
        "path",
        {
            d: "m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z",
            key: "1snsnr"
        }
    ]
]);
var unplug = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Unplug
});
const UploadCloud = createLucideIcon("UploadCloud", [
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "M12 12v9",
            key: "192myk"
        }
    ],
    [
        "path",
        {
            d: "m16 16-4-4-4 4",
            key: "119tzi"
        }
    ]
]);
var uploadCloud = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UploadCloud
});
const Upload = createLucideIcon("Upload", [
    [
        "path",
        {
            d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",
            key: "ih7n3h"
        }
    ],
    [
        "polyline",
        {
            points: "17 8 12 3 7 8",
            key: "t8dd8p"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "3",
            y2: "15",
            key: "widbto"
        }
    ]
]);
var upload = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Upload
});
const Usb = createLucideIcon("Usb", [
    [
        "circle",
        {
            cx: "10",
            cy: "7",
            r: "1",
            key: "dypaad"
        }
    ],
    [
        "circle",
        {
            cx: "4",
            cy: "20",
            r: "1",
            key: "22iqad"
        }
    ],
    [
        "path",
        {
            d: "M4.7 19.3 19 5",
            key: "1enqfc"
        }
    ],
    [
        "path",
        {
            d: "m21 3-3 1 2 2Z",
            key: "d3ov82"
        }
    ],
    [
        "path",
        {
            d: "M9.26 7.68 5 12l2 5",
            key: "1esawj"
        }
    ],
    [
        "path",
        {
            d: "m10 14 5 2 3.5-3.5",
            key: "v8oal5"
        }
    ],
    [
        "path",
        {
            d: "m18 12 1-1 1 1-1 1Z",
            key: "1bh22v"
        }
    ]
]);
var usb = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Usb
});
const User2 = createLucideIcon("User2", [
    [
        "circle",
        {
            cx: "12",
            cy: "8",
            r: "5",
            key: "1hypcn"
        }
    ],
    [
        "path",
        {
            d: "M20 21a8 8 0 1 0-16 0",
            key: "199sx2"
        }
    ]
]);
var user2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: User2
});
const UserCheck2 = createLucideIcon("UserCheck2", [
    [
        "path",
        {
            d: "M14 19a6 6 0 0 0-12 0",
            key: "vej9p1"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "9",
            r: "4",
            key: "143rtg"
        }
    ],
    [
        "polyline",
        {
            points: "16 11 18 13 22 9",
            key: "1pwet4"
        }
    ]
]);
var userCheck2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserCheck2
});
const UserCheck = createLucideIcon("UserCheck", [
    [
        "path",
        {
            d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
            key: "1yyitq"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "7",
            r: "4",
            key: "nufk8"
        }
    ],
    [
        "polyline",
        {
            points: "16 11 18 13 22 9",
            key: "1pwet4"
        }
    ]
]);
var userCheck = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserCheck
});
const UserCircle2 = createLucideIcon("UserCircle2", [
    [
        "path",
        {
            d: "M18 20a6 6 0 0 0-12 0",
            key: "1qehca"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "4",
            key: "1h16sb"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ]
]);
var userCircle2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserCircle2
});
const UserCircle = createLucideIcon("UserCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "3",
            key: "ilqhr7"
        }
    ],
    [
        "path",
        {
            d: "M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662",
            key: "154egf"
        }
    ]
]);
var userCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserCircle
});
const UserCog2 = createLucideIcon("UserCog2", [
    [
        "path",
        {
            d: "M14 19a6 6 0 0 0-12 0",
            key: "vej9p1"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "9",
            r: "4",
            key: "143rtg"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "11",
            r: "2",
            key: "1rxg02"
        }
    ],
    [
        "path",
        {
            d: "M19 8v1",
            key: "1iffrw"
        }
    ],
    [
        "path",
        {
            d: "M19 13v1",
            key: "z4xc62"
        }
    ],
    [
        "path",
        {
            d: "m21.6 9.5-.87.5",
            key: "6lxupl"
        }
    ],
    [
        "path",
        {
            d: "m17.27 12-.87.5",
            key: "1rwhxx"
        }
    ],
    [
        "path",
        {
            d: "m21.6 12.5-.87-.5",
            key: "agvc9a"
        }
    ],
    [
        "path",
        {
            d: "m17.27 10-.87-.5",
            key: "12d57s"
        }
    ]
]);
var userCog2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserCog2
});
const UserCog = createLucideIcon("UserCog", [
    [
        "path",
        {
            d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
            key: "1yyitq"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "7",
            r: "4",
            key: "nufk8"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "11",
            r: "2",
            key: "1rxg02"
        }
    ],
    [
        "path",
        {
            d: "M19 8v1",
            key: "1iffrw"
        }
    ],
    [
        "path",
        {
            d: "M19 13v1",
            key: "z4xc62"
        }
    ],
    [
        "path",
        {
            d: "m21.6 9.5-.87.5",
            key: "6lxupl"
        }
    ],
    [
        "path",
        {
            d: "m17.27 12-.87.5",
            key: "1rwhxx"
        }
    ],
    [
        "path",
        {
            d: "m21.6 12.5-.87-.5",
            key: "agvc9a"
        }
    ],
    [
        "path",
        {
            d: "m17.27 10-.87-.5",
            key: "12d57s"
        }
    ]
]);
var userCog = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserCog
});
const UserMinus2 = createLucideIcon("UserMinus2", [
    [
        "path",
        {
            d: "M14 19a6 6 0 0 0-12 0",
            key: "vej9p1"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "9",
            r: "4",
            key: "143rtg"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "16",
            y1: "11",
            y2: "11",
            key: "1shjgl"
        }
    ]
]);
var userMinus2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserMinus2
});
const UserMinus = createLucideIcon("UserMinus", [
    [
        "path",
        {
            d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
            key: "1yyitq"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "7",
            r: "4",
            key: "nufk8"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "16",
            y1: "11",
            y2: "11",
            key: "1shjgl"
        }
    ]
]);
var userMinus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserMinus
});
const UserPlus2 = createLucideIcon("UserPlus2", [
    [
        "path",
        {
            d: "M14 19a6 6 0 0 0-12 0",
            key: "vej9p1"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "9",
            r: "4",
            key: "143rtg"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "19",
            y1: "8",
            y2: "14",
            key: "1bvyxn"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "16",
            y1: "11",
            y2: "11",
            key: "1shjgl"
        }
    ]
]);
var userPlus2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserPlus2
});
const UserPlus = createLucideIcon("UserPlus", [
    [
        "path",
        {
            d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
            key: "1yyitq"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "7",
            r: "4",
            key: "nufk8"
        }
    ],
    [
        "line",
        {
            x1: "19",
            x2: "19",
            y1: "8",
            y2: "14",
            key: "1bvyxn"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "16",
            y1: "11",
            y2: "11",
            key: "1shjgl"
        }
    ]
]);
var userPlus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserPlus
});
const UserSquare2 = createLucideIcon("UserSquare2", [
    [
        "path",
        {
            d: "M18 21a6 6 0 0 0-12 0",
            key: "kaz2du"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "11",
            r: "4",
            key: "1gt34v"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ]
]);
var userSquare2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserSquare2
});
const UserSquare = createLucideIcon("UserSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "3",
            key: "ilqhr7"
        }
    ],
    [
        "path",
        {
            d: "M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2",
            key: "1m6ac2"
        }
    ]
]);
var userSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserSquare
});
const UserX2 = createLucideIcon("UserX2", [
    [
        "path",
        {
            d: "M14 19a6 6 0 0 0-12 0",
            key: "vej9p1"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "9",
            r: "4",
            key: "143rtg"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "22",
            y1: "8",
            y2: "13",
            key: "3nzzx3"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "17",
            y1: "8",
            y2: "13",
            key: "1swrse"
        }
    ]
]);
var userX2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserX2
});
const UserX = createLucideIcon("UserX", [
    [
        "path",
        {
            d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
            key: "1yyitq"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "7",
            r: "4",
            key: "nufk8"
        }
    ],
    [
        "line",
        {
            x1: "17",
            x2: "22",
            y1: "8",
            y2: "13",
            key: "3nzzx3"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "17",
            y1: "8",
            y2: "13",
            key: "1swrse"
        }
    ]
]);
var userX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UserX
});
const User = createLucideIcon("User", [
    [
        "path",
        {
            d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",
            key: "975kel"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "7",
            r: "4",
            key: "17ys0d"
        }
    ]
]);
var user = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: User
});
const Users2 = createLucideIcon("Users2", [
    [
        "path",
        {
            d: "M14 19a6 6 0 0 0-12 0",
            key: "vej9p1"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "9",
            r: "4",
            key: "143rtg"
        }
    ],
    [
        "path",
        {
            d: "M22 19a6 6 0 0 0-6-6 4 4 0 1 0 0-8",
            key: "hqbn22"
        }
    ]
]);
var users2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Users2
});
const Users = createLucideIcon("Users", [
    [
        "path",
        {
            d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
            key: "1yyitq"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "7",
            r: "4",
            key: "nufk8"
        }
    ],
    [
        "path",
        {
            d: "M22 21v-2a4 4 0 0 0-3-3.87",
            key: "kshegd"
        }
    ],
    [
        "path",
        {
            d: "M16 3.13a4 4 0 0 1 0 7.75",
            key: "1da9ce"
        }
    ]
]);
var users = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Users
});
const UtensilsCrossed = createLucideIcon("UtensilsCrossed", [
    [
        "path",
        {
            d: "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8",
            key: "n7qcjb"
        }
    ],
    [
        "path",
        {
            d: "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7",
            key: "d0u48b"
        }
    ],
    [
        "path",
        {
            d: "m2.1 21.8 6.4-6.3",
            key: "yn04lh"
        }
    ],
    [
        "path",
        {
            d: "m19 5-7 7",
            key: "194lzd"
        }
    ]
]);
var utensilsCrossed = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UtensilsCrossed
});
const Utensils = createLucideIcon("Utensils", [
    [
        "path",
        {
            d: "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2",
            key: "cjf0a3"
        }
    ],
    [
        "path",
        {
            d: "M7 2v20",
            key: "1473qp"
        }
    ],
    [
        "path",
        {
            d: "M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7",
            key: "1ogz0v"
        }
    ]
]);
var utensils = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Utensils
});
const UtilityPole = createLucideIcon("UtilityPole", [
    [
        "path",
        {
            d: "M12 2v20",
            key: "t6zp3m"
        }
    ],
    [
        "path",
        {
            d: "M2 5h20",
            key: "1fs1ex"
        }
    ],
    [
        "path",
        {
            d: "M3 3v2",
            key: "9imdir"
        }
    ],
    [
        "path",
        {
            d: "M7 3v2",
            key: "n0os7"
        }
    ],
    [
        "path",
        {
            d: "M17 3v2",
            key: "1l2re6"
        }
    ],
    [
        "path",
        {
            d: "M21 3v2",
            key: "1duuac"
        }
    ],
    [
        "path",
        {
            d: "m19 5-7 7-7-7",
            key: "133zxf"
        }
    ]
]);
var utilityPole = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: UtilityPole
});
const Variable = createLucideIcon("Variable", [
    [
        "path",
        {
            d: "M8 21s-4-3-4-9 4-9 4-9",
            key: "uto9ud"
        }
    ],
    [
        "path",
        {
            d: "M16 3s4 3 4 9-4 9-4 9",
            key: "4w2vsq"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "9",
            y1: "9",
            y2: "15",
            key: "f7djnv"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "15",
            y1: "9",
            y2: "15",
            key: "1shsy8"
        }
    ]
]);
var variable = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Variable
});
const Vegan = createLucideIcon("Vegan", [
    [
        "path",
        {
            d: "M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14",
            key: "qiv7li"
        }
    ],
    [
        "path",
        {
            d: "M16 8c4 0 6-2 6-6-4 0-6 2-6 6",
            key: "n7eohy"
        }
    ],
    [
        "path",
        {
            d: "M17.41 3.6a10 10 0 1 0 3 3",
            key: "1dion0"
        }
    ]
]);
var vegan = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Vegan
});
const VenetianMask = createLucideIcon("VenetianMask", [
    [
        "path",
        {
            d: "M2 12a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V7h-5a8 8 0 0 0-5 2 8 8 0 0 0-5-2H2Z",
            key: "1g6z3j"
        }
    ],
    [
        "path",
        {
            d: "M6 11c1.5 0 3 .5 3 2-2 0-3 0-3-2Z",
            key: "c2lwnf"
        }
    ],
    [
        "path",
        {
            d: "M18 11c-1.5 0-3 .5-3 2 2 0 3 0 3-2Z",
            key: "njd9zo"
        }
    ]
]);
var venetianMask = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: VenetianMask
});
const VibrateOff = createLucideIcon("VibrateOff", [
    [
        "path",
        {
            d: "m2 8 2 2-2 2 2 2-2 2",
            key: "sv1b1"
        }
    ],
    [
        "path",
        {
            d: "m22 8-2 2 2 2-2 2 2 2",
            key: "101i4y"
        }
    ],
    [
        "path",
        {
            d: "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2",
            key: "1hbad5"
        }
    ],
    [
        "path",
        {
            d: "M16 10.34V6c0-.55-.45-1-1-1h-4.34",
            key: "1x5tf0"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var vibrateOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: VibrateOff
});
const Vibrate = createLucideIcon("Vibrate", [
    [
        "path",
        {
            d: "m2 8 2 2-2 2 2 2-2 2",
            key: "sv1b1"
        }
    ],
    [
        "path",
        {
            d: "m22 8-2 2 2 2-2 2 2 2",
            key: "101i4y"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "14",
            x: "8",
            y: "5",
            rx: "1",
            key: "1oyrl4"
        }
    ]
]);
var vibrate = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Vibrate
});
const VideoOff = createLucideIcon("VideoOff", [
    [
        "path",
        {
            d: "M10.66 6H14a2 2 0 0 1 2 2v2.34l1 1L22 8v8",
            key: "ubwiq0"
        }
    ],
    [
        "path",
        {
            d: "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2l10 10Z",
            key: "1l10zd"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var videoOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: VideoOff
});
const Video = createLucideIcon("Video", [
    [
        "path",
        {
            d: "m22 8-6 4 6 4V8Z",
            key: "50v9me"
        }
    ],
    [
        "rect",
        {
            width: "14",
            height: "12",
            x: "2",
            y: "6",
            rx: "2",
            ry: "2",
            key: "1rqjg6"
        }
    ]
]);
var video = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Video
});
const Videotape = createLucideIcon("Videotape", [
    [
        "rect",
        {
            width: "20",
            height: "16",
            x: "2",
            y: "4",
            rx: "2",
            key: "18n3k1"
        }
    ],
    [
        "path",
        {
            d: "M2 8h20",
            key: "d11cs7"
        }
    ],
    [
        "circle",
        {
            cx: "8",
            cy: "14",
            r: "2",
            key: "1k2qr5"
        }
    ],
    [
        "path",
        {
            d: "M8 12h8",
            key: "1wcyev"
        }
    ],
    [
        "circle",
        {
            cx: "16",
            cy: "14",
            r: "2",
            key: "14k7lr"
        }
    ]
]);
var videotape = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Videotape
});
const View = createLucideIcon("View", [
    [
        "path",
        {
            d: "M5 12s2.545-5 7-5c4.454 0 7 5 7 5s-2.546 5-7 5c-4.455 0-7-5-7-5z",
            key: "vptub8"
        }
    ],
    [
        "path",
        {
            d: "M12 13a1 1 0 1 0 0-2 1 1 0 0 0 0 2z",
            key: "10lhjs"
        }
    ],
    [
        "path",
        {
            d: "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2",
            key: "mrq65r"
        }
    ],
    [
        "path",
        {
            d: "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2",
            key: "be3xqs"
        }
    ]
]);
var view = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: View
});
const Voicemail = createLucideIcon("Voicemail", [
    [
        "circle",
        {
            cx: "6",
            cy: "12",
            r: "4",
            key: "1ehtga"
        }
    ],
    [
        "circle",
        {
            cx: "18",
            cy: "12",
            r: "4",
            key: "4vafl8"
        }
    ],
    [
        "line",
        {
            x1: "6",
            x2: "18",
            y1: "16",
            y2: "16",
            key: "pmt8us"
        }
    ]
]);
var voicemail = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Voicemail
});
const Volume1 = createLucideIcon("Volume1", [
    [
        "polygon",
        {
            points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5",
            key: "16drj5"
        }
    ],
    [
        "path",
        {
            d: "M15.54 8.46a5 5 0 0 1 0 7.07",
            key: "ltjumu"
        }
    ]
]);
var volume1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Volume1
});
const Volume2 = createLucideIcon("Volume2", [
    [
        "polygon",
        {
            points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5",
            key: "16drj5"
        }
    ],
    [
        "path",
        {
            d: "M15.54 8.46a5 5 0 0 1 0 7.07",
            key: "ltjumu"
        }
    ],
    [
        "path",
        {
            d: "M19.07 4.93a10 10 0 0 1 0 14.14",
            key: "1kegas"
        }
    ]
]);
var volume2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Volume2
});
const VolumeX = createLucideIcon("VolumeX", [
    [
        "polygon",
        {
            points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5",
            key: "16drj5"
        }
    ],
    [
        "line",
        {
            x1: "22",
            x2: "16",
            y1: "9",
            y2: "15",
            key: "1ewh16"
        }
    ],
    [
        "line",
        {
            x1: "16",
            x2: "22",
            y1: "9",
            y2: "15",
            key: "5ykzw1"
        }
    ]
]);
var volumeX = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: VolumeX
});
const Volume = createLucideIcon("Volume", [
    [
        "polygon",
        {
            points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5",
            key: "16drj5"
        }
    ]
]);
var volume = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Volume
});
const Vote = createLucideIcon("Vote", [
    [
        "path",
        {
            d: "m9 12 2 2 4-4",
            key: "dzmm74"
        }
    ],
    [
        "path",
        {
            d: "M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z",
            key: "1ezoue"
        }
    ],
    [
        "path",
        {
            d: "M22 19H2",
            key: "nuriw5"
        }
    ]
]);
var vote = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Vote
});
const Wallet2 = createLucideIcon("Wallet2", [
    [
        "path",
        {
            d: "M17 14h.01",
            key: "7oqj8z"
        }
    ],
    [
        "path",
        {
            d: "M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14",
            key: "u1rqew"
        }
    ]
]);
var wallet2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wallet2
});
const WalletCards = createLucideIcon("WalletCards", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            key: "afitv7"
        }
    ],
    [
        "path",
        {
            d: "M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2",
            key: "4125el"
        }
    ],
    [
        "path",
        {
            d: "M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21",
            key: "1dpki6"
        }
    ]
]);
var walletCards = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: WalletCards
});
const Wallet = createLucideIcon("Wallet", [
    [
        "path",
        {
            d: "M21 12V7H5a2 2 0 0 1 0-4h14v4",
            key: "195gfw"
        }
    ],
    [
        "path",
        {
            d: "M3 5v14a2 2 0 0 0 2 2h16v-5",
            key: "195n9w"
        }
    ],
    [
        "path",
        {
            d: "M18 12a2 2 0 0 0 0 4h4v-4Z",
            key: "vllfpd"
        }
    ]
]);
var wallet = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wallet
});
const Wallpaper = createLucideIcon("Wallpaper", [
    [
        "circle",
        {
            cx: "8",
            cy: "9",
            r: "2",
            key: "gjzl9d"
        }
    ],
    [
        "path",
        {
            d: "m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2",
            key: "69xh40"
        }
    ],
    [
        "path",
        {
            d: "M8 21h8",
            key: "1ev6f3"
        }
    ],
    [
        "path",
        {
            d: "M12 17v4",
            key: "1riwvh"
        }
    ]
]);
var wallpaper = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wallpaper
});
const Wand2 = createLucideIcon("Wand2", [
    [
        "path",
        {
            d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72Z",
            key: "1bcowg"
        }
    ],
    [
        "path",
        {
            d: "m14 7 3 3",
            key: "1r5n42"
        }
    ],
    [
        "path",
        {
            d: "M5 6v4",
            key: "ilb8ba"
        }
    ],
    [
        "path",
        {
            d: "M19 14v4",
            key: "blhpug"
        }
    ],
    [
        "path",
        {
            d: "M10 2v2",
            key: "7u0qdc"
        }
    ],
    [
        "path",
        {
            d: "M7 8H3",
            key: "zfb6yr"
        }
    ],
    [
        "path",
        {
            d: "M21 16h-4",
            key: "1cnmox"
        }
    ],
    [
        "path",
        {
            d: "M11 3H9",
            key: "1obp7u"
        }
    ]
]);
var wand2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wand2
});
const Wand = createLucideIcon("Wand", [
    [
        "path",
        {
            d: "M15 4V2",
            key: "z1p9b7"
        }
    ],
    [
        "path",
        {
            d: "M15 16v-2",
            key: "px0unx"
        }
    ],
    [
        "path",
        {
            d: "M8 9h2",
            key: "1g203m"
        }
    ],
    [
        "path",
        {
            d: "M20 9h2",
            key: "19tzq7"
        }
    ],
    [
        "path",
        {
            d: "M17.8 11.8 19 13",
            key: "yihg8r"
        }
    ],
    [
        "path",
        {
            d: "M15 9h0",
            key: "kg5t1u"
        }
    ],
    [
        "path",
        {
            d: "M17.8 6.2 19 5",
            key: "fd4us0"
        }
    ],
    [
        "path",
        {
            d: "m3 21 9-9",
            key: "1jfql5"
        }
    ],
    [
        "path",
        {
            d: "M12.2 6.2 11 5",
            key: "i3da3b"
        }
    ]
]);
var wand = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wand
});
const Warehouse = createLucideIcon("Warehouse", [
    [
        "path",
        {
            d: "M22 8.35V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8.35A2 2 0 0 1 3.26 6.5l8-3.2a2 2 0 0 1 1.48 0l8 3.2A2 2 0 0 1 22 8.35Z",
            key: "gksnxg"
        }
    ],
    [
        "path",
        {
            d: "M6 18h12",
            key: "9pbo8z"
        }
    ],
    [
        "path",
        {
            d: "M6 14h12",
            key: "4cwo0f"
        }
    ],
    [
        "rect",
        {
            width: "12",
            height: "12",
            x: "6",
            y: "10",
            key: "apd30q"
        }
    ]
]);
var warehouse = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Warehouse
});
const Watch = createLucideIcon("Watch", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "6",
            key: "1vlfrh"
        }
    ],
    [
        "polyline",
        {
            points: "12 10 12 12 13 13",
            key: "19dquz"
        }
    ],
    [
        "path",
        {
            d: "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05",
            key: "18k57s"
        }
    ],
    [
        "path",
        {
            d: "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05",
            key: "16ny36"
        }
    ]
]);
var watch = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Watch
});
const Waves = createLucideIcon("Waves", [
    [
        "path",
        {
            d: "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "knzxuh"
        }
    ],
    [
        "path",
        {
            d: "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "2jd2cc"
        }
    ],
    [
        "path",
        {
            d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "rd2r6e"
        }
    ]
]);
var waves = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Waves
});
const Webcam = createLucideIcon("Webcam", [
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "8",
            key: "1gshiw"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "10",
            r: "3",
            key: "ilqhr7"
        }
    ],
    [
        "path",
        {
            d: "M7 22h10",
            key: "10w4w3"
        }
    ],
    [
        "path",
        {
            d: "M12 22v-4",
            key: "1utk9m"
        }
    ]
]);
var webcam = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Webcam
});
const Webhook = createLucideIcon("Webhook", [
    [
        "path",
        {
            d: "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2",
            key: "q3hayz"
        }
    ],
    [
        "path",
        {
            d: "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06",
            key: "1go1hn"
        }
    ],
    [
        "path",
        {
            d: "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8",
            key: "qlwsc0"
        }
    ]
]);
var webhook = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Webhook
});
const WheatOff = createLucideIcon("WheatOff", [
    [
        "path",
        {
            d: "m2 22 10-10",
            key: "28ilpk"
        }
    ],
    [
        "path",
        {
            d: "m16 8-1.17 1.17",
            key: "1qqm82"
        }
    ],
    [
        "path",
        {
            d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1rdhi6"
        }
    ],
    [
        "path",
        {
            d: "m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97",
            key: "4wz8re"
        }
    ],
    [
        "path",
        {
            d: "M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62",
            key: "rves66"
        }
    ],
    [
        "path",
        {
            d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z",
            key: "19rau1"
        }
    ],
    [
        "path",
        {
            d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "tc8ph9"
        }
    ],
    [
        "path",
        {
            d: "m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98",
            key: "ak46r"
        }
    ],
    [
        "path",
        {
            d: "M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28",
            key: "1tw520"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var wheatOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: WheatOff
});
const Wheat = createLucideIcon("Wheat", [
    [
        "path",
        {
            d: "M2 22 16 8",
            key: "60hf96"
        }
    ],
    [
        "path",
        {
            d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1rdhi6"
        }
    ],
    [
        "path",
        {
            d: "M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1sdzmb"
        }
    ],
    [
        "path",
        {
            d: "M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "eoatbi"
        }
    ],
    [
        "path",
        {
            d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z",
            key: "19rau1"
        }
    ],
    [
        "path",
        {
            d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "tc8ph9"
        }
    ],
    [
        "path",
        {
            d: "M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "2m8kc5"
        }
    ],
    [
        "path",
        {
            d: "M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "vex3ng"
        }
    ]
]);
var wheat = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wheat
});
const WholeWord = createLucideIcon("WholeWord", [
    [
        "circle",
        {
            cx: "7",
            cy: "12",
            r: "3",
            key: "12clwm"
        }
    ],
    [
        "path",
        {
            d: "M10 9v6",
            key: "17i7lo"
        }
    ],
    [
        "circle",
        {
            cx: "17",
            cy: "12",
            r: "3",
            key: "gl7c2s"
        }
    ],
    [
        "path",
        {
            d: "M14 7v8",
            key: "dl84cr"
        }
    ],
    [
        "path",
        {
            d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1",
            key: "lt2kga"
        }
    ]
]);
var wholeWord = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: WholeWord
});
const WifiOff = createLucideIcon("WifiOff", [
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ],
    [
        "path",
        {
            d: "M8.5 16.5a5 5 0 0 1 7 0",
            key: "sej527"
        }
    ],
    [
        "path",
        {
            d: "M2 8.82a15 15 0 0 1 4.17-2.65",
            key: "11utq1"
        }
    ],
    [
        "path",
        {
            d: "M10.66 5c4.01-.36 8.14.9 11.34 3.76",
            key: "hxefdu"
        }
    ],
    [
        "path",
        {
            d: "M16.85 11.25a10 10 0 0 1 2.22 1.68",
            key: "q734kn"
        }
    ],
    [
        "path",
        {
            d: "M5 13a10 10 0 0 1 5.24-2.76",
            key: "piq4yl"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "20",
            y2: "20",
            key: "of4bc4"
        }
    ]
]);
var wifiOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: WifiOff
});
const Wifi = createLucideIcon("Wifi", [
    [
        "path",
        {
            d: "M5 13a10 10 0 0 1 14 0",
            key: "6v8j51"
        }
    ],
    [
        "path",
        {
            d: "M8.5 16.5a5 5 0 0 1 7 0",
            key: "sej527"
        }
    ],
    [
        "path",
        {
            d: "M2 8.82a15 15 0 0 1 20 0",
            key: "dnpr2z"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "20",
            y2: "20",
            key: "of4bc4"
        }
    ]
]);
var wifi = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wifi
});
const Wind = createLucideIcon("Wind", [
    [
        "path",
        {
            d: "M17.7 7.7a2.5 2.5 0 1 1 1.8 4.3H2",
            key: "1k4u03"
        }
    ],
    [
        "path",
        {
            d: "M9.6 4.6A2 2 0 1 1 11 8H2",
            key: "b7d0fd"
        }
    ],
    [
        "path",
        {
            d: "M12.6 19.4A2 2 0 1 0 14 16H2",
            key: "1p5cb3"
        }
    ]
]);
var wind = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wind
});
const WineOff = createLucideIcon("WineOff", [
    [
        "path",
        {
            d: "M8 22h8",
            key: "rmew8v"
        }
    ],
    [
        "path",
        {
            d: "M7 10h3m7 0h-1.343",
            key: "v48bem"
        }
    ],
    [
        "path",
        {
            d: "M12 15v7",
            key: "t2xh3l"
        }
    ],
    [
        "path",
        {
            d: "M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198",
            key: "1ymjlu"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var wineOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: WineOff
});
const Wine = createLucideIcon("Wine", [
    [
        "path",
        {
            d: "M8 22h8",
            key: "rmew8v"
        }
    ],
    [
        "path",
        {
            d: "M7 10h10",
            key: "1101jm"
        }
    ],
    [
        "path",
        {
            d: "M12 15v7",
            key: "t2xh3l"
        }
    ],
    [
        "path",
        {
            d: "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z",
            key: "10ffi3"
        }
    ]
]);
var wine = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wine
});
const Workflow = createLucideIcon("Workflow", [
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "3",
            y: "3",
            rx: "2",
            key: "by2w9f"
        }
    ],
    [
        "path",
        {
            d: "M7 11v4a2 2 0 0 0 2 2h4",
            key: "xkn7yn"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "13",
            y: "13",
            rx: "2",
            key: "1cgmvn"
        }
    ]
]);
var workflow = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Workflow
});
const WrapText = createLucideIcon("WrapText", [
    [
        "line",
        {
            x1: "3",
            x2: "21",
            y1: "6",
            y2: "6",
            key: "4m8b97"
        }
    ],
    [
        "path",
        {
            d: "M3 12h15a3 3 0 1 1 0 6h-4",
            key: "1cl7v7"
        }
    ],
    [
        "polyline",
        {
            points: "16 16 14 18 16 20",
            key: "1jznyi"
        }
    ],
    [
        "line",
        {
            x1: "3",
            x2: "10",
            y1: "18",
            y2: "18",
            key: "1h33wv"
        }
    ]
]);
var wrapText = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: WrapText
});
const Wrench = createLucideIcon("Wrench", [
    [
        "path",
        {
            d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z",
            key: "cbrjhi"
        }
    ]
]);
var wrench = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Wrench
});
const XCircle = createLucideIcon("XCircle", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m15 9-6 6",
            key: "1uzhvr"
        }
    ],
    [
        "path",
        {
            d: "m9 9 6 6",
            key: "z0biqf"
        }
    ]
]);
var xCircle = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: XCircle
});
const XOctagon = createLucideIcon("XOctagon", [
    [
        "polygon",
        {
            points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
            key: "h1p8hx"
        }
    ],
    [
        "path",
        {
            d: "m15 9-6 6",
            key: "1uzhvr"
        }
    ],
    [
        "path",
        {
            d: "m9 9 6 6",
            key: "z0biqf"
        }
    ]
]);
var xOctagon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: XOctagon
});
const XSquare = createLucideIcon("XSquare", [
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "3",
            rx: "2",
            ry: "2",
            key: "1m3agn"
        }
    ],
    [
        "path",
        {
            d: "m15 9-6 6",
            key: "1uzhvr"
        }
    ],
    [
        "path",
        {
            d: "m9 9 6 6",
            key: "z0biqf"
        }
    ]
]);
var xSquare = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: XSquare
});
const X = createLucideIcon("X", [
    [
        "path",
        {
            d: "M18 6 6 18",
            key: "1bl5f8"
        }
    ],
    [
        "path",
        {
            d: "m6 6 12 12",
            key: "d8bk6v"
        }
    ]
]);
var x = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: X
});
const Youtube = createLucideIcon("Youtube", [
    [
        "path",
        {
            d: "M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17",
            key: "1q2vi4"
        }
    ],
    [
        "path",
        {
            d: "m10 15 5-3-5-3z",
            key: "1jp15x"
        }
    ]
]);
var youtube = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Youtube
});
const ZapOff = createLucideIcon("ZapOff", [
    [
        "polyline",
        {
            points: "12.41 6.75 13 2 10.57 4.92",
            key: "122m05"
        }
    ],
    [
        "polyline",
        {
            points: "18.57 12.91 21 10 15.66 10",
            key: "16r43o"
        }
    ],
    [
        "polyline",
        {
            points: "8 8 3 14 12 14 11 22 16 16",
            key: "tmh4bc"
        }
    ],
    [
        "line",
        {
            x1: "2",
            x2: "22",
            y1: "2",
            y2: "22",
            key: "a6p6uj"
        }
    ]
]);
var zapOff = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ZapOff
});
const Zap = createLucideIcon("Zap", [
    [
        "polygon",
        {
            points: "13 2 3 14 12 14 11 22 21 10 12 10 13 2",
            key: "45s27k"
        }
    ]
]);
var zap = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: Zap
});
const ZoomIn = createLucideIcon("ZoomIn", [
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "16.65",
            y1: "21",
            y2: "16.65",
            key: "13gj7c"
        }
    ],
    [
        "line",
        {
            x1: "11",
            x2: "11",
            y1: "8",
            y2: "14",
            key: "1vmskp"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "14",
            y1: "11",
            y2: "11",
            key: "durymu"
        }
    ]
]);
var zoomIn = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ZoomIn
});
const ZoomOut = createLucideIcon("ZoomOut", [
    [
        "circle",
        {
            cx: "11",
            cy: "11",
            r: "8",
            key: "4ej97u"
        }
    ],
    [
        "line",
        {
            x1: "21",
            x2: "16.65",
            y1: "21",
            y2: "16.65",
            key: "13gj7c"
        }
    ],
    [
        "line",
        {
            x1: "8",
            x2: "14",
            y1: "11",
            y2: "11",
            key: "durymu"
        }
    ]
]);
var zoomOut = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    default: ZoomOut
});
var index = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Accessibility: Accessibility,
    Activity: Activity,
    ActivitySquare: ActivitySquare,
    AirVent: AirVent,
    Airplay: Airplay,
    AlarmCheck: AlarmCheck,
    AlarmClock: AlarmClock,
    AlarmClockOff: AlarmClockOff,
    AlarmMinus: AlarmMinus,
    AlarmPlus: AlarmPlus,
    Album: Album,
    AlertCircle: AlertCircle,
    AlertOctagon: AlertOctagon,
    AlertTriangle: AlertTriangle,
    AlignCenter: AlignCenter,
    AlignCenterHorizontal: AlignCenterHorizontal,
    AlignCenterVertical: AlignCenterVertical,
    AlignEndHorizontal: AlignEndHorizontal,
    AlignEndVertical: AlignEndVertical,
    AlignHorizontalDistributeCenter: AlignHorizontalDistributeCenter,
    AlignHorizontalDistributeEnd: AlignHorizontalDistributeEnd,
    AlignHorizontalDistributeStart: AlignHorizontalDistributeStart,
    AlignHorizontalJustifyCenter: AlignHorizontalJustifyCenter,
    AlignHorizontalJustifyEnd: AlignHorizontalJustifyEnd,
    AlignHorizontalJustifyStart: AlignHorizontalJustifyStart,
    AlignHorizontalSpaceAround: AlignHorizontalSpaceAround,
    AlignHorizontalSpaceBetween: AlignHorizontalSpaceBetween,
    AlignJustify: AlignJustify,
    AlignLeft: AlignLeft,
    AlignRight: AlignRight,
    AlignStartHorizontal: AlignStartHorizontal,
    AlignStartVertical: AlignStartVertical,
    AlignVerticalDistributeCenter: AlignVerticalDistributeCenter,
    AlignVerticalDistributeEnd: AlignVerticalDistributeEnd,
    AlignVerticalDistributeStart: AlignVerticalDistributeStart,
    AlignVerticalJustifyCenter: AlignVerticalJustifyCenter,
    AlignVerticalJustifyEnd: AlignVerticalJustifyEnd,
    AlignVerticalJustifyStart: AlignVerticalJustifyStart,
    AlignVerticalSpaceAround: AlignVerticalSpaceAround,
    AlignVerticalSpaceBetween: AlignVerticalSpaceBetween,
    Ampersand: Ampersand,
    Ampersands: Ampersands,
    Anchor: Anchor,
    Angry: Angry,
    Annoyed: Annoyed,
    Aperture: Aperture,
    AppWindow: AppWindow,
    Apple: Apple,
    Archive: Archive,
    ArchiveRestore: ArchiveRestore,
    AreaChart: AreaChart,
    Armchair: Armchair,
    ArrowBigDown: ArrowBigDown,
    ArrowBigDownDash: ArrowBigDownDash,
    ArrowBigLeft: ArrowBigLeft,
    ArrowBigLeftDash: ArrowBigLeftDash,
    ArrowBigRight: ArrowBigRight,
    ArrowBigRightDash: ArrowBigRightDash,
    ArrowBigUp: ArrowBigUp,
    ArrowBigUpDash: ArrowBigUpDash,
    ArrowDown: ArrowDown,
    ArrowDown01: ArrowDown01,
    ArrowDown10: ArrowDown10,
    ArrowDownAZ: ArrowDownAZ,
    ArrowDownCircle: ArrowDownCircle,
    ArrowDownFromLine: ArrowDownFromLine,
    ArrowDownLeft: ArrowDownLeft,
    ArrowDownLeftFromCircle: ArrowDownLeftFromCircle,
    ArrowDownLeftSquare: ArrowDownLeftSquare,
    ArrowDownNarrowWide: ArrowDownNarrowWide,
    ArrowDownRight: ArrowDownRight,
    ArrowDownRightFromCircle: ArrowDownRightFromCircle,
    ArrowDownRightSquare: ArrowDownRightSquare,
    ArrowDownSquare: ArrowDownSquare,
    ArrowDownToDot: ArrowDownToDot,
    ArrowDownToLine: ArrowDownToLine,
    ArrowDownUp: ArrowDownUp,
    ArrowDownWideNarrow: ArrowDownWideNarrow,
    ArrowDownZA: ArrowDownZA,
    ArrowLeft: ArrowLeft,
    ArrowLeftCircle: ArrowLeftCircle,
    ArrowLeftFromLine: ArrowLeftFromLine,
    ArrowLeftRight: ArrowLeftRight,
    ArrowLeftSquare: ArrowLeftSquare,
    ArrowLeftToLine: ArrowLeftToLine,
    ArrowRight: ArrowRight,
    ArrowRightCircle: ArrowRightCircle,
    ArrowRightFromLine: ArrowRightFromLine,
    ArrowRightLeft: ArrowRightLeft,
    ArrowRightSquare: ArrowRightSquare,
    ArrowRightToLine: ArrowRightToLine,
    ArrowUp: ArrowUp,
    ArrowUp01: ArrowUp01,
    ArrowUp10: ArrowUp10,
    ArrowUpAZ: ArrowUpAZ,
    ArrowUpCircle: ArrowUpCircle,
    ArrowUpDown: ArrowUpDown,
    ArrowUpFromDot: ArrowUpFromDot,
    ArrowUpFromLine: ArrowUpFromLine,
    ArrowUpLeft: ArrowUpLeft,
    ArrowUpLeftFromCircle: ArrowUpLeftFromCircle,
    ArrowUpLeftSquare: ArrowUpLeftSquare,
    ArrowUpNarrowWide: ArrowUpNarrowWide,
    ArrowUpRight: ArrowUpRight,
    ArrowUpRightFromCircle: ArrowUpRightFromCircle,
    ArrowUpRightSquare: ArrowUpRightSquare,
    ArrowUpSquare: ArrowUpSquare,
    ArrowUpToLine: ArrowUpToLine,
    ArrowUpWideNarrow: ArrowUpWideNarrow,
    ArrowUpZA: ArrowUpZA,
    ArrowsUpFromLine: ArrowsUpFromLine,
    Asterisk: Asterisk,
    AtSign: AtSign,
    Atom: Atom,
    Award: Award,
    Axe: Axe,
    Axis3d: Axis3d,
    Baby: Baby,
    Backpack: Backpack,
    Badge: Badge,
    BadgeAlert: BadgeAlert,
    BadgeCheck: BadgeCheck,
    BadgeDollarSign: BadgeDollarSign,
    BadgeHelp: BadgeHelp,
    BadgeInfo: BadgeInfo,
    BadgeMinus: BadgeMinus,
    BadgePercent: BadgePercent,
    BadgePlus: BadgePlus,
    BadgeX: BadgeX,
    BaggageClaim: BaggageClaim,
    Ban: Ban,
    Banana: Banana,
    Banknote: Banknote,
    BarChart: BarChart,
    BarChart2: BarChart2,
    BarChart3: BarChart3,
    BarChart4: BarChart4,
    BarChartBig: BarChartBig,
    BarChartHorizontal: BarChartHorizontal,
    BarChartHorizontalBig: BarChartHorizontalBig,
    Baseline: Baseline,
    Bath: Bath,
    Battery: Battery,
    BatteryCharging: BatteryCharging,
    BatteryFull: BatteryFull,
    BatteryLow: BatteryLow,
    BatteryMedium: BatteryMedium,
    BatteryWarning: BatteryWarning,
    Beaker: Beaker,
    Bean: Bean,
    BeanOff: BeanOff,
    Bed: Bed,
    BedDouble: BedDouble,
    BedSingle: BedSingle,
    Beef: Beef,
    Beer: Beer,
    Bell: Bell,
    BellDot: BellDot,
    BellMinus: BellMinus,
    BellOff: BellOff,
    BellPlus: BellPlus,
    BellRing: BellRing,
    Bike: Bike,
    Binary: Binary,
    Biohazard: Biohazard,
    Bird: Bird,
    Bitcoin: Bitcoin,
    Blinds: Blinds,
    Bluetooth: Bluetooth,
    BluetoothConnected: BluetoothConnected,
    BluetoothOff: BluetoothOff,
    BluetoothSearching: BluetoothSearching,
    Bold: Bold,
    Bomb: Bomb,
    Bone: Bone,
    Book: Book,
    BookCopy: BookCopy,
    BookDown: BookDown,
    BookKey: BookKey,
    BookLock: BookLock,
    BookMarked: BookMarked,
    BookMinus: BookMinus,
    BookOpen: BookOpen,
    BookOpenCheck: BookOpenCheck,
    BookPlus: BookPlus,
    BookTemplate: BookTemplate,
    BookUp: BookUp,
    BookUp2: BookUp2,
    BookX: BookX,
    Bookmark: Bookmark,
    BookmarkMinus: BookmarkMinus,
    BookmarkPlus: BookmarkPlus,
    Bot: Bot,
    Box: Box,
    BoxSelect: BoxSelect,
    Boxes: Boxes,
    Braces: Braces,
    Brackets: Brackets,
    Brain: Brain,
    BrainCircuit: BrainCircuit,
    BrainCog: BrainCog,
    Briefcase: Briefcase,
    Brush: Brush,
    Bug: Bug,
    Building: Building,
    Building2: Building2,
    Bus: Bus,
    Cake: Cake,
    CakeSlice: CakeSlice,
    Calculator: Calculator,
    Calendar: Calendar,
    CalendarCheck: CalendarCheck,
    CalendarCheck2: CalendarCheck2,
    CalendarClock: CalendarClock,
    CalendarDays: CalendarDays,
    CalendarHeart: CalendarHeart,
    CalendarMinus: CalendarMinus,
    CalendarOff: CalendarOff,
    CalendarPlus: CalendarPlus,
    CalendarRange: CalendarRange,
    CalendarSearch: CalendarSearch,
    CalendarX: CalendarX,
    CalendarX2: CalendarX2,
    Camera: Camera,
    CameraOff: CameraOff,
    CandlestickChart: CandlestickChart,
    Candy: Candy,
    CandyCane: CandyCane,
    CandyOff: CandyOff,
    Car: Car,
    Carrot: Carrot,
    CaseLower: CaseLower,
    CaseSensitive: CaseSensitive,
    CaseUpper: CaseUpper,
    CassetteTape: CassetteTape,
    Cast: Cast,
    Castle: Castle,
    Cat: Cat,
    Check: Check,
    CheckCheck: CheckCheck,
    CheckCircle: CheckCircle,
    CheckCircle2: CheckCircle2,
    CheckSquare: CheckSquare,
    ChefHat: ChefHat,
    Cherry: Cherry,
    ChevronDown: ChevronDown,
    ChevronDownCircle: ChevronDownCircle,
    ChevronDownSquare: ChevronDownSquare,
    ChevronFirst: ChevronFirst,
    ChevronLast: ChevronLast,
    ChevronLeft: ChevronLeft,
    ChevronLeftCircle: ChevronLeftCircle,
    ChevronLeftSquare: ChevronLeftSquare,
    ChevronRight: ChevronRight,
    ChevronRightCircle: ChevronRightCircle,
    ChevronRightSquare: ChevronRightSquare,
    ChevronUp: ChevronUp,
    ChevronUpCircle: ChevronUpCircle,
    ChevronUpSquare: ChevronUpSquare,
    ChevronsDown: ChevronsDown,
    ChevronsDownUp: ChevronsDownUp,
    ChevronsLeft: ChevronsLeft,
    ChevronsLeftRight: ChevronsLeftRight,
    ChevronsRight: ChevronsRight,
    ChevronsRightLeft: ChevronsRightLeft,
    ChevronsUp: ChevronsUp,
    ChevronsUpDown: ChevronsUpDown,
    Chrome: Chrome,
    Church: Church,
    Cigarette: Cigarette,
    CigaretteOff: CigaretteOff,
    Circle: Circle,
    CircleDashed: CircleDashed,
    CircleDollarSign: CircleDollarSign,
    CircleDot: CircleDot,
    CircleDotDashed: CircleDotDashed,
    CircleEllipsis: CircleEllipsis,
    CircleEqual: CircleEqual,
    CircleOff: CircleOff,
    CircleSlash: CircleSlash,
    CircleSlash2: CircleSlash2,
    CircuitBoard: CircuitBoard,
    Citrus: Citrus,
    Clapperboard: Clapperboard,
    Clipboard: Clipboard,
    ClipboardCheck: ClipboardCheck,
    ClipboardCopy: ClipboardCopy,
    ClipboardEdit: ClipboardEdit,
    ClipboardList: ClipboardList,
    ClipboardPaste: ClipboardPaste,
    ClipboardSignature: ClipboardSignature,
    ClipboardType: ClipboardType,
    ClipboardX: ClipboardX,
    Clock: Clock,
    Clock1: Clock1,
    Clock10: Clock10,
    Clock11: Clock11,
    Clock12: Clock12,
    Clock2: Clock2,
    Clock3: Clock3,
    Clock4: Clock4,
    Clock5: Clock5,
    Clock6: Clock6,
    Clock7: Clock7,
    Clock8: Clock8,
    Clock9: Clock9,
    Cloud: Cloud,
    CloudCog: CloudCog,
    CloudDrizzle: CloudDrizzle,
    CloudFog: CloudFog,
    CloudHail: CloudHail,
    CloudLightning: CloudLightning,
    CloudMoon: CloudMoon,
    CloudMoonRain: CloudMoonRain,
    CloudOff: CloudOff,
    CloudRain: CloudRain,
    CloudRainWind: CloudRainWind,
    CloudSnow: CloudSnow,
    CloudSun: CloudSun,
    CloudSunRain: CloudSunRain,
    Cloudy: Cloudy,
    Clover: Clover,
    Club: Club,
    Code: Code,
    Code2: Code2,
    Codepen: Codepen,
    Codesandbox: Codesandbox,
    Coffee: Coffee,
    Cog: Cog,
    Coins: Coins,
    Columns: Columns,
    Combine: Combine,
    Command: Command,
    Compass: Compass,
    Component: Component,
    ConciergeBell: ConciergeBell,
    Construction: Construction,
    Contact: Contact,
    Contact2: Contact2,
    Container: Container,
    Contrast: Contrast,
    Cookie: Cookie,
    Copy: Copy,
    CopyCheck: CopyCheck,
    CopyMinus: CopyMinus,
    CopyPlus: CopyPlus,
    CopySlash: CopySlash,
    CopyX: CopyX,
    Copyleft: Copyleft,
    Copyright: Copyright,
    CornerDownLeft: CornerDownLeft,
    CornerDownRight: CornerDownRight,
    CornerLeftDown: CornerLeftDown,
    CornerLeftUp: CornerLeftUp,
    CornerRightDown: CornerRightDown,
    CornerRightUp: CornerRightUp,
    CornerUpLeft: CornerUpLeft,
    CornerUpRight: CornerUpRight,
    Cpu: Cpu,
    CreativeCommons: CreativeCommons,
    CreditCard: CreditCard,
    Croissant: Croissant,
    Crop: Crop,
    Cross: Cross,
    Crosshair: Crosshair,
    Crown: Crown,
    CupSoda: CupSoda,
    Currency: Currency,
    Database: Database,
    DatabaseBackup: DatabaseBackup,
    Delete: Delete,
    Dessert: Dessert,
    Diamond: Diamond,
    Dice1: Dice1,
    Dice2: Dice2,
    Dice3: Dice3,
    Dice4: Dice4,
    Dice5: Dice5,
    Dice6: Dice6,
    Dices: Dices,
    Diff: Diff,
    Disc: Disc,
    Disc2: Disc2,
    Disc3: Disc3,
    Divide: Divide,
    DivideCircle: DivideCircle,
    DivideSquare: DivideSquare,
    Dna: Dna,
    DnaOff: DnaOff,
    Dog: Dog,
    DollarSign: DollarSign,
    Donut: Donut,
    DoorClosed: DoorClosed,
    DoorOpen: DoorOpen,
    Dot: Dot,
    Download: Download,
    DownloadCloud: DownloadCloud,
    Dribbble: Dribbble,
    Droplet: Droplet,
    Droplets: Droplets,
    Drumstick: Drumstick,
    Dumbbell: Dumbbell,
    Ear: Ear,
    EarOff: EarOff,
    Edit: Edit,
    Edit2: Edit2,
    Edit3: Edit3,
    Egg: Egg,
    EggFried: EggFried,
    EggOff: EggOff,
    Equal: Equal,
    EqualNot: EqualNot,
    Eraser: Eraser,
    Euro: Euro,
    Expand: Expand,
    ExternalLink: ExternalLink,
    Eye: Eye,
    EyeOff: EyeOff,
    Facebook: Facebook,
    Factory: Factory,
    Fan: Fan,
    FastForward: FastForward,
    Feather: Feather,
    FerrisWheel: FerrisWheel,
    Figma: Figma,
    File: File,
    FileArchive: FileArchive,
    FileAudio: FileAudio,
    FileAudio2: FileAudio2,
    FileAxis3d: FileAxis3d,
    FileBadge: FileBadge,
    FileBadge2: FileBadge2,
    FileBarChart: FileBarChart,
    FileBarChart2: FileBarChart2,
    FileBox: FileBox,
    FileCheck: FileCheck,
    FileCheck2: FileCheck2,
    FileClock: FileClock,
    FileCode: FileCode,
    FileCode2: FileCode2,
    FileCog: FileCog,
    FileCog2: FileCog2,
    FileDiff: FileDiff,
    FileDigit: FileDigit,
    FileDown: FileDown,
    FileEdit: FileEdit,
    FileHeart: FileHeart,
    FileImage: FileImage,
    FileInput: FileInput,
    FileJson: FileJson,
    FileJson2: FileJson2,
    FileKey: FileKey,
    FileKey2: FileKey2,
    FileLineChart: FileLineChart,
    FileLock: FileLock,
    FileLock2: FileLock2,
    FileMinus: FileMinus,
    FileMinus2: FileMinus2,
    FileOutput: FileOutput,
    FilePieChart: FilePieChart,
    FilePlus: FilePlus,
    FilePlus2: FilePlus2,
    FileQuestion: FileQuestion,
    FileScan: FileScan,
    FileSearch: FileSearch,
    FileSearch2: FileSearch2,
    FileSignature: FileSignature,
    FileSpreadsheet: FileSpreadsheet,
    FileStack: FileStack,
    FileSymlink: FileSymlink,
    FileTerminal: FileTerminal,
    FileText: FileText,
    FileType: FileType,
    FileType2: FileType2,
    FileUp: FileUp,
    FileVideo: FileVideo,
    FileVideo2: FileVideo2,
    FileVolume: FileVolume,
    FileVolume2: FileVolume2,
    FileWarning: FileWarning,
    FileX: FileX,
    FileX2: FileX2,
    Files: Files,
    Film: Film,
    Filter: Filter,
    FilterX: FilterX,
    Fingerprint: Fingerprint,
    Fish: Fish,
    FishOff: FishOff,
    Flag: Flag,
    FlagOff: FlagOff,
    FlagTriangleLeft: FlagTriangleLeft,
    FlagTriangleRight: FlagTriangleRight,
    Flame: Flame,
    Flashlight: Flashlight,
    FlashlightOff: FlashlightOff,
    FlaskConical: FlaskConical,
    FlaskConicalOff: FlaskConicalOff,
    FlaskRound: FlaskRound,
    FlipHorizontal: FlipHorizontal,
    FlipHorizontal2: FlipHorizontal2,
    FlipVertical: FlipVertical,
    FlipVertical2: FlipVertical2,
    Flower: Flower,
    Flower2: Flower2,
    Focus: Focus,
    FoldHorizontal: FoldHorizontal,
    FoldVertical: FoldVertical,
    Folder: Folder,
    FolderArchive: FolderArchive,
    FolderCheck: FolderCheck,
    FolderClock: FolderClock,
    FolderClosed: FolderClosed,
    FolderCog: FolderCog,
    FolderCog2: FolderCog2,
    FolderDot: FolderDot,
    FolderDown: FolderDown,
    FolderEdit: FolderEdit,
    FolderGit: FolderGit,
    FolderGit2: FolderGit2,
    FolderHeart: FolderHeart,
    FolderInput: FolderInput,
    FolderKanban: FolderKanban,
    FolderKey: FolderKey,
    FolderLock: FolderLock,
    FolderMinus: FolderMinus,
    FolderOpen: FolderOpen,
    FolderOpenDot: FolderOpenDot,
    FolderOutput: FolderOutput,
    FolderPlus: FolderPlus,
    FolderRoot: FolderRoot,
    FolderSearch: FolderSearch,
    FolderSearch2: FolderSearch2,
    FolderSymlink: FolderSymlink,
    FolderSync: FolderSync,
    FolderTree: FolderTree,
    FolderUp: FolderUp,
    FolderX: FolderX,
    Folders: Folders,
    Footprints: Footprints,
    Forklift: Forklift,
    FormInput: FormInput,
    Forward: Forward,
    Frame: Frame,
    Framer: Framer,
    Frown: Frown,
    Fuel: Fuel,
    FunctionSquare: FunctionSquare,
    GalleryHorizontal: GalleryHorizontal,
    GalleryHorizontalEnd: GalleryHorizontalEnd,
    GalleryThumbnails: GalleryThumbnails,
    GalleryVertical: GalleryVertical,
    GalleryVerticalEnd: GalleryVerticalEnd,
    Gamepad: Gamepad,
    Gamepad2: Gamepad2,
    GanttChart: GanttChart,
    GanttChartSquare: GanttChartSquare,
    Gauge: Gauge,
    GaugeCircle: GaugeCircle,
    Gavel: Gavel,
    Gem: Gem,
    Ghost: Ghost,
    Gift: Gift,
    GitBranch: GitBranch,
    GitBranchPlus: GitBranchPlus,
    GitCommit: GitCommit,
    GitCompare: GitCompare,
    GitFork: GitFork,
    GitMerge: GitMerge,
    GitPullRequest: GitPullRequest,
    GitPullRequestClosed: GitPullRequestClosed,
    GitPullRequestDraft: GitPullRequestDraft,
    Github: Github,
    Gitlab: Gitlab,
    GlassWater: GlassWater,
    Glasses: Glasses,
    Globe: Globe,
    Globe2: Globe2,
    Goal: Goal,
    Grab: Grab,
    GraduationCap: GraduationCap,
    Grape: Grape,
    Grid: Grid,
    Grip: Grip,
    GripHorizontal: GripHorizontal,
    GripVertical: GripVertical,
    Group: Group,
    Hammer: Hammer,
    Hand: Hand,
    HandMetal: HandMetal,
    HardDrive: HardDrive,
    HardHat: HardHat,
    Hash: Hash,
    Haze: Haze,
    Heading: Heading,
    Heading1: Heading1,
    Heading2: Heading2,
    Heading3: Heading3,
    Heading4: Heading4,
    Heading5: Heading5,
    Heading6: Heading6,
    Headphones: Headphones,
    Heart: Heart,
    HeartCrack: HeartCrack,
    HeartHandshake: HeartHandshake,
    HeartOff: HeartOff,
    HeartPulse: HeartPulse,
    HelpCircle: HelpCircle,
    HelpingHand: HelpingHand,
    Hexagon: Hexagon,
    Highlighter: Highlighter,
    History: History,
    Home: Home,
    Hop: Hop,
    HopOff: HopOff,
    Hotel: Hotel,
    Hourglass: Hourglass,
    IceCream: IceCream,
    IceCream2: IceCream2,
    Image: Image,
    ImageMinus: ImageMinus,
    ImageOff: ImageOff,
    ImagePlus: ImagePlus,
    Import: Import,
    Inbox: Inbox,
    Indent: Indent,
    IndianRupee: IndianRupee,
    Infinity: Infinity,
    Info: Info,
    Inspect: Inspect,
    Instagram: Instagram,
    Italic: Italic,
    IterationCcw: IterationCcw,
    IterationCw: IterationCw,
    JapaneseYen: JapaneseYen,
    Joystick: Joystick,
    Kanban: Kanban,
    KanbanSquare: KanbanSquare,
    KanbanSquareDashed: KanbanSquareDashed,
    Key: Key,
    KeyRound: KeyRound,
    KeySquare: KeySquare,
    Keyboard: Keyboard,
    Lamp: Lamp,
    LampCeiling: LampCeiling,
    LampDesk: LampDesk,
    LampFloor: LampFloor,
    LampWallDown: LampWallDown,
    LampWallUp: LampWallUp,
    Landmark: Landmark,
    Languages: Languages,
    Laptop: Laptop,
    Laptop2: Laptop2,
    Lasso: Lasso,
    LassoSelect: LassoSelect,
    Laugh: Laugh,
    Layers: Layers,
    Layout: Layout,
    LayoutDashboard: LayoutDashboard,
    LayoutGrid: LayoutGrid,
    LayoutList: LayoutList,
    LayoutPanelLeft: LayoutPanelLeft,
    LayoutPanelTop: LayoutPanelTop,
    LayoutTemplate: LayoutTemplate,
    Leaf: Leaf,
    LeafyGreen: LeafyGreen,
    Library: Library,
    LifeBuoy: LifeBuoy,
    Ligature: Ligature,
    Lightbulb: Lightbulb,
    LightbulbOff: LightbulbOff,
    LineChart: LineChart,
    Link: Link,
    Link2: Link2,
    Link2Off: Link2Off,
    Linkedin: Linkedin,
    List: List,
    ListChecks: ListChecks,
    ListEnd: ListEnd,
    ListFilter: ListFilter,
    ListMinus: ListMinus,
    ListMusic: ListMusic,
    ListOrdered: ListOrdered,
    ListPlus: ListPlus,
    ListRestart: ListRestart,
    ListStart: ListStart,
    ListTodo: ListTodo,
    ListTree: ListTree,
    ListVideo: ListVideo,
    ListX: ListX,
    Loader: Loader,
    Loader2: Loader2,
    Locate: Locate,
    LocateFixed: LocateFixed,
    LocateOff: LocateOff,
    Lock: Lock,
    LogIn: LogIn,
    LogOut: LogOut,
    Lollipop: Lollipop,
    Luggage: Luggage,
    Magnet: Magnet,
    Mail: Mail,
    MailCheck: MailCheck,
    MailMinus: MailMinus,
    MailOpen: MailOpen,
    MailPlus: MailPlus,
    MailQuestion: MailQuestion,
    MailSearch: MailSearch,
    MailWarning: MailWarning,
    MailX: MailX,
    Mailbox: Mailbox,
    Mails: Mails,
    Map: Map,
    MapPin: MapPin,
    MapPinOff: MapPinOff,
    Martini: Martini,
    Maximize: Maximize,
    Maximize2: Maximize2,
    Medal: Medal,
    Megaphone: Megaphone,
    MegaphoneOff: MegaphoneOff,
    Meh: Meh,
    MemoryStick: MemoryStick,
    Menu: Menu,
    MenuSquare: MenuSquare,
    Merge: Merge,
    MessageCircle: MessageCircle,
    MessageSquare: MessageSquare,
    MessageSquareDashed: MessageSquareDashed,
    MessageSquarePlus: MessageSquarePlus,
    MessagesSquare: MessagesSquare,
    Mic: Mic,
    Mic2: Mic2,
    MicOff: MicOff,
    Microscope: Microscope,
    Microwave: Microwave,
    Milestone: Milestone,
    Milk: Milk,
    MilkOff: MilkOff,
    Minimize: Minimize,
    Minimize2: Minimize2,
    Minus: Minus,
    MinusCircle: MinusCircle,
    MinusSquare: MinusSquare,
    Monitor: Monitor,
    MonitorCheck: MonitorCheck,
    MonitorDot: MonitorDot,
    MonitorDown: MonitorDown,
    MonitorOff: MonitorOff,
    MonitorPause: MonitorPause,
    MonitorPlay: MonitorPlay,
    MonitorSmartphone: MonitorSmartphone,
    MonitorSpeaker: MonitorSpeaker,
    MonitorStop: MonitorStop,
    MonitorUp: MonitorUp,
    MonitorX: MonitorX,
    Moon: Moon,
    MoonStar: MoonStar,
    MoreHorizontal: MoreHorizontal,
    MoreVertical: MoreVertical,
    Mountain: Mountain,
    MountainSnow: MountainSnow,
    Mouse: Mouse,
    MousePointer: MousePointer,
    MousePointer2: MousePointer2,
    MousePointerClick: MousePointerClick,
    Move: Move,
    Move3d: Move3d,
    MoveDiagonal: MoveDiagonal,
    MoveDiagonal2: MoveDiagonal2,
    MoveDown: MoveDown,
    MoveDownLeft: MoveDownLeft,
    MoveDownRight: MoveDownRight,
    MoveHorizontal: MoveHorizontal,
    MoveLeft: MoveLeft,
    MoveRight: MoveRight,
    MoveUp: MoveUp,
    MoveUpLeft: MoveUpLeft,
    MoveUpRight: MoveUpRight,
    MoveVertical: MoveVertical,
    Music: Music,
    Music2: Music2,
    Music3: Music3,
    Music4: Music4,
    Navigation: Navigation,
    Navigation2: Navigation2,
    Navigation2Off: Navigation2Off,
    NavigationOff: NavigationOff,
    Network: Network,
    Newspaper: Newspaper,
    Nfc: Nfc,
    Nut: Nut,
    NutOff: NutOff,
    Octagon: Octagon,
    Option: Option,
    Orbit: Orbit,
    Outdent: Outdent,
    Package: Package,
    Package2: Package2,
    PackageCheck: PackageCheck,
    PackageMinus: PackageMinus,
    PackageOpen: PackageOpen,
    PackagePlus: PackagePlus,
    PackageSearch: PackageSearch,
    PackageX: PackageX,
    PaintBucket: PaintBucket,
    Paintbrush: Paintbrush,
    Paintbrush2: Paintbrush2,
    Palette: Palette,
    Palmtree: Palmtree,
    PanelBottom: PanelBottom,
    PanelBottomClose: PanelBottomClose,
    PanelBottomInactive: PanelBottomInactive,
    PanelBottomOpen: PanelBottomOpen,
    PanelLeft: PanelLeft,
    PanelLeftClose: PanelLeftClose,
    PanelLeftInactive: PanelLeftInactive,
    PanelLeftOpen: PanelLeftOpen,
    PanelRight: PanelRight,
    PanelRightClose: PanelRightClose,
    PanelRightInactive: PanelRightInactive,
    PanelRightOpen: PanelRightOpen,
    PanelTop: PanelTop,
    PanelTopClose: PanelTopClose,
    PanelTopInactive: PanelTopInactive,
    PanelTopOpen: PanelTopOpen,
    Paperclip: Paperclip,
    Parentheses: Parentheses,
    ParkingCircle: ParkingCircle,
    ParkingCircleOff: ParkingCircleOff,
    ParkingSquare: ParkingSquare,
    ParkingSquareOff: ParkingSquareOff,
    PartyPopper: PartyPopper,
    Pause: Pause,
    PauseCircle: PauseCircle,
    PauseOctagon: PauseOctagon,
    PcCase: PcCase,
    PenTool: PenTool,
    Pencil: Pencil,
    Percent: Percent,
    PersonStanding: PersonStanding,
    Phone: Phone,
    PhoneCall: PhoneCall,
    PhoneForwarded: PhoneForwarded,
    PhoneIncoming: PhoneIncoming,
    PhoneMissed: PhoneMissed,
    PhoneOff: PhoneOff,
    PhoneOutgoing: PhoneOutgoing,
    Pi: Pi,
    PiSquare: PiSquare,
    PictureInPicture: PictureInPicture,
    PictureInPicture2: PictureInPicture2,
    PieChart: PieChart,
    PiggyBank: PiggyBank,
    Pilcrow: Pilcrow,
    PilcrowSquare: PilcrowSquare,
    Pill: Pill,
    Pin: Pin,
    PinOff: PinOff,
    Pipette: Pipette,
    Pizza: Pizza,
    Plane: Plane,
    PlaneLanding: PlaneLanding,
    PlaneTakeoff: PlaneTakeoff,
    Play: Play,
    PlayCircle: PlayCircle,
    PlaySquare: PlaySquare,
    Plug: Plug,
    Plug2: Plug2,
    PlugZap: PlugZap,
    PlugZap2: PlugZap2,
    Plus: Plus,
    PlusCircle: PlusCircle,
    PlusSquare: PlusSquare,
    Pocket: Pocket,
    PocketKnife: PocketKnife,
    Podcast: Podcast,
    Pointer: Pointer,
    Popcorn: Popcorn,
    Popsicle: Popsicle,
    PoundSterling: PoundSterling,
    Power: Power,
    PowerOff: PowerOff,
    Presentation: Presentation,
    Printer: Printer,
    Projector: Projector,
    Puzzle: Puzzle,
    QrCode: QrCode,
    Quote: Quote,
    Radar: Radar,
    Radiation: Radiation,
    Radio: Radio,
    RadioReceiver: RadioReceiver,
    RadioTower: RadioTower,
    Rainbow: Rainbow,
    Rat: Rat,
    Receipt: Receipt,
    RectangleHorizontal: RectangleHorizontal,
    RectangleVertical: RectangleVertical,
    Recycle: Recycle,
    Redo: Redo,
    Redo2: Redo2,
    RedoDot: RedoDot,
    RefreshCcw: RefreshCcw,
    RefreshCcwDot: RefreshCcwDot,
    RefreshCw: RefreshCw,
    RefreshCwOff: RefreshCwOff,
    Refrigerator: Refrigerator,
    Regex: Regex,
    RemoveFormatting: RemoveFormatting,
    Repeat: Repeat,
    Repeat1: Repeat1,
    Repeat2: Repeat2,
    Replace: Replace,
    ReplaceAll: ReplaceAll,
    Reply: Reply,
    ReplyAll: ReplyAll,
    Rewind: Rewind,
    Rocket: Rocket,
    RockingChair: RockingChair,
    RollerCoaster: RollerCoaster,
    Rotate3d: Rotate3d,
    RotateCcw: RotateCcw,
    RotateCw: RotateCw,
    Router: Router,
    Rows: Rows,
    Rss: Rss,
    Ruler: Ruler,
    RussianRuble: RussianRuble,
    Sailboat: Sailboat,
    Salad: Salad,
    Sandwich: Sandwich,
    Satellite: Satellite,
    SatelliteDish: SatelliteDish,
    Save: Save,
    SaveAll: SaveAll,
    Scale: Scale,
    Scale3d: Scale3d,
    Scaling: Scaling,
    Scan: Scan,
    ScanFace: ScanFace,
    ScanLine: ScanLine,
    ScatterChart: ScatterChart,
    School: School,
    School2: School2,
    Scissors: Scissors,
    ScreenShare: ScreenShare,
    ScreenShareOff: ScreenShareOff,
    Scroll: Scroll,
    ScrollText: ScrollText,
    Search: Search,
    SearchCheck: SearchCheck,
    SearchCode: SearchCode,
    SearchSlash: SearchSlash,
    SearchX: SearchX,
    Send: Send,
    SeparatorHorizontal: SeparatorHorizontal,
    SeparatorVertical: SeparatorVertical,
    Server: Server,
    ServerCog: ServerCog,
    ServerCrash: ServerCrash,
    ServerOff: ServerOff,
    Settings: Settings,
    Settings2: Settings2,
    Shapes: Shapes,
    Share: Share,
    Share2: Share2,
    Sheet: Sheet,
    Shield: Shield,
    ShieldAlert: ShieldAlert,
    ShieldCheck: ShieldCheck,
    ShieldClose: ShieldClose,
    ShieldOff: ShieldOff,
    ShieldQuestion: ShieldQuestion,
    Ship: Ship,
    Shirt: Shirt,
    ShoppingBag: ShoppingBag,
    ShoppingCart: ShoppingCart,
    Shovel: Shovel,
    ShowerHead: ShowerHead,
    Shrink: Shrink,
    Shrub: Shrub,
    Shuffle: Shuffle,
    Sigma: Sigma,
    SigmaSquare: SigmaSquare,
    Signal: Signal,
    SignalHigh: SignalHigh,
    SignalLow: SignalLow,
    SignalMedium: SignalMedium,
    SignalZero: SignalZero,
    Siren: Siren,
    SkipBack: SkipBack,
    SkipForward: SkipForward,
    Skull: Skull,
    Slack: Slack,
    Slice: Slice,
    Sliders: Sliders,
    SlidersHorizontal: SlidersHorizontal,
    Smartphone: Smartphone,
    SmartphoneCharging: SmartphoneCharging,
    SmartphoneNfc: SmartphoneNfc,
    Smile: Smile,
    SmilePlus: SmilePlus,
    Snowflake: Snowflake,
    Sofa: Sofa,
    Soup: Soup,
    Space: Space,
    Spade: Spade,
    Sparkle: Sparkle,
    Sparkles: Sparkles,
    Speaker: Speaker,
    SpellCheck: SpellCheck,
    SpellCheck2: SpellCheck2,
    Spline: Spline,
    Split: Split,
    SplitSquareHorizontal: SplitSquareHorizontal,
    SplitSquareVertical: SplitSquareVertical,
    SprayCan: SprayCan,
    Sprout: Sprout,
    Square: Square,
    SquareAsterisk: SquareAsterisk,
    SquareCode: SquareCode,
    SquareDashedBottom: SquareDashedBottom,
    SquareDashedBottomCode: SquareDashedBottomCode,
    SquareDot: SquareDot,
    SquareEqual: SquareEqual,
    SquareSlash: SquareSlash,
    SquareStack: SquareStack,
    Squirrel: Squirrel,
    Stamp: Stamp,
    Star: Star,
    StarHalf: StarHalf,
    StarOff: StarOff,
    StepBack: StepBack,
    StepForward: StepForward,
    Stethoscope: Stethoscope,
    Sticker: Sticker,
    StickyNote: StickyNote,
    StopCircle: StopCircle,
    Store: Store,
    StretchHorizontal: StretchHorizontal,
    StretchVertical: StretchVertical,
    Strikethrough: Strikethrough,
    Subscript: Subscript,
    Subtitles: Subtitles,
    Sun: Sun,
    SunDim: SunDim,
    SunMedium: SunMedium,
    SunMoon: SunMoon,
    SunSnow: SunSnow,
    Sunrise: Sunrise,
    Sunset: Sunset,
    Superscript: Superscript,
    SwissFranc: SwissFranc,
    SwitchCamera: SwitchCamera,
    Sword: Sword,
    Swords: Swords,
    Syringe: Syringe,
    Table: Table,
    Table2: Table2,
    TableProperties: TableProperties,
    Tablet: Tablet,
    Tablets: Tablets,
    Tag: Tag,
    Tags: Tags,
    Tally1: Tally1,
    Tally2: Tally2,
    Tally3: Tally3,
    Tally4: Tally4,
    Tally5: Tally5,
    Target: Target,
    Tent: Tent,
    Terminal: Terminal,
    TerminalSquare: TerminalSquare,
    TestTube: TestTube,
    TestTube2: TestTube2,
    TestTubes: TestTubes,
    Text: Text,
    TextCursor: TextCursor,
    TextCursorInput: TextCursorInput,
    TextQuote: TextQuote,
    TextSelect: TextSelect,
    Thermometer: Thermometer,
    ThermometerSnowflake: ThermometerSnowflake,
    ThermometerSun: ThermometerSun,
    ThumbsDown: ThumbsDown,
    ThumbsUp: ThumbsUp,
    Ticket: Ticket,
    Timer: Timer,
    TimerOff: TimerOff,
    TimerReset: TimerReset,
    ToggleLeft: ToggleLeft,
    ToggleRight: ToggleRight,
    Tornado: Tornado,
    Touchpad: Touchpad,
    TouchpadOff: TouchpadOff,
    TowerControl: TowerControl,
    ToyBrick: ToyBrick,
    Train: Train,
    Trash: Trash,
    Trash2: Trash2,
    TreeDeciduous: TreeDeciduous,
    TreePine: TreePine,
    Trees: Trees,
    Trello: Trello,
    TrendingDown: TrendingDown,
    TrendingUp: TrendingUp,
    Triangle: Triangle,
    Trophy: Trophy,
    Truck: Truck,
    Tv: Tv,
    Tv2: Tv2,
    Twitch: Twitch,
    Twitter: Twitter,
    Type: Type,
    Umbrella: Umbrella,
    Underline: Underline,
    Undo: Undo,
    Undo2: Undo2,
    UndoDot: UndoDot,
    UnfoldHorizontal: UnfoldHorizontal,
    UnfoldVertical: UnfoldVertical,
    Ungroup: Ungroup,
    Unlink: Unlink,
    Unlink2: Unlink2,
    Unlock: Unlock,
    Unplug: Unplug,
    Upload: Upload,
    UploadCloud: UploadCloud,
    Usb: Usb,
    User: User,
    User2: User2,
    UserCheck: UserCheck,
    UserCheck2: UserCheck2,
    UserCircle: UserCircle,
    UserCircle2: UserCircle2,
    UserCog: UserCog,
    UserCog2: UserCog2,
    UserMinus: UserMinus,
    UserMinus2: UserMinus2,
    UserPlus: UserPlus,
    UserPlus2: UserPlus2,
    UserSquare: UserSquare,
    UserSquare2: UserSquare2,
    UserX: UserX,
    UserX2: UserX2,
    Users: Users,
    Users2: Users2,
    Utensils: Utensils,
    UtensilsCrossed: UtensilsCrossed,
    UtilityPole: UtilityPole,
    Variable: Variable,
    Vegan: Vegan,
    VenetianMask: VenetianMask,
    Vibrate: Vibrate,
    VibrateOff: VibrateOff,
    Video: Video,
    VideoOff: VideoOff,
    Videotape: Videotape,
    View: View,
    Voicemail: Voicemail,
    Volume: Volume,
    Volume1: Volume1,
    Volume2: Volume2,
    VolumeX: VolumeX,
    Vote: Vote,
    Wallet: Wallet,
    Wallet2: Wallet2,
    WalletCards: WalletCards,
    Wallpaper: Wallpaper,
    Wand: Wand,
    Wand2: Wand2,
    Warehouse: Warehouse,
    Watch: Watch,
    Waves: Waves,
    Webcam: Webcam,
    Webhook: Webhook,
    Wheat: Wheat,
    WheatOff: WheatOff,
    WholeWord: WholeWord,
    Wifi: Wifi,
    WifiOff: WifiOff,
    Wind: Wind,
    Wine: Wine,
    WineOff: WineOff,
    Workflow: Workflow,
    WrapText: WrapText,
    Wrench: Wrench,
    X: X,
    XCircle: XCircle,
    XOctagon: XOctagon,
    XSquare: XSquare,
    Youtube: Youtube,
    Zap: Zap,
    ZapOff: ZapOff,
    ZoomIn: ZoomIn,
    ZoomOut: ZoomOut
});
const dynamicIconImports = {
    "accessibility": ()=>Promise.resolve().then(function() {
            return accessibility;
        }),
    "activity-square": ()=>Promise.resolve().then(function() {
            return activitySquare;
        }),
    "activity": ()=>Promise.resolve().then(function() {
            return activity;
        }),
    "air-vent": ()=>Promise.resolve().then(function() {
            return airVent;
        }),
    "airplay": ()=>Promise.resolve().then(function() {
            return airplay;
        }),
    "alarm-check": ()=>Promise.resolve().then(function() {
            return alarmCheck;
        }),
    "alarm-clock-off": ()=>Promise.resolve().then(function() {
            return alarmClockOff;
        }),
    "alarm-clock": ()=>Promise.resolve().then(function() {
            return alarmClock;
        }),
    "alarm-minus": ()=>Promise.resolve().then(function() {
            return alarmMinus;
        }),
    "alarm-plus": ()=>Promise.resolve().then(function() {
            return alarmPlus;
        }),
    "album": ()=>Promise.resolve().then(function() {
            return album;
        }),
    "alert-circle": ()=>Promise.resolve().then(function() {
            return alertCircle;
        }),
    "alert-octagon": ()=>Promise.resolve().then(function() {
            return alertOctagon;
        }),
    "alert-triangle": ()=>Promise.resolve().then(function() {
            return alertTriangle;
        }),
    "align-center-horizontal": ()=>Promise.resolve().then(function() {
            return alignCenterHorizontal;
        }),
    "align-center-vertical": ()=>Promise.resolve().then(function() {
            return alignCenterVertical;
        }),
    "align-center": ()=>Promise.resolve().then(function() {
            return alignCenter;
        }),
    "align-end-horizontal": ()=>Promise.resolve().then(function() {
            return alignEndHorizontal;
        }),
    "align-end-vertical": ()=>Promise.resolve().then(function() {
            return alignEndVertical;
        }),
    "align-horizontal-distribute-center": ()=>Promise.resolve().then(function() {
            return alignHorizontalDistributeCenter;
        }),
    "align-horizontal-distribute-end": ()=>Promise.resolve().then(function() {
            return alignHorizontalDistributeEnd;
        }),
    "align-horizontal-distribute-start": ()=>Promise.resolve().then(function() {
            return alignHorizontalDistributeStart;
        }),
    "align-horizontal-justify-center": ()=>Promise.resolve().then(function() {
            return alignHorizontalJustifyCenter;
        }),
    "align-horizontal-justify-end": ()=>Promise.resolve().then(function() {
            return alignHorizontalJustifyEnd;
        }),
    "align-horizontal-justify-start": ()=>Promise.resolve().then(function() {
            return alignHorizontalJustifyStart;
        }),
    "align-horizontal-space-around": ()=>Promise.resolve().then(function() {
            return alignHorizontalSpaceAround;
        }),
    "align-horizontal-space-between": ()=>Promise.resolve().then(function() {
            return alignHorizontalSpaceBetween;
        }),
    "align-justify": ()=>Promise.resolve().then(function() {
            return alignJustify;
        }),
    "align-left": ()=>Promise.resolve().then(function() {
            return alignLeft;
        }),
    "align-right": ()=>Promise.resolve().then(function() {
            return alignRight;
        }),
    "align-start-horizontal": ()=>Promise.resolve().then(function() {
            return alignStartHorizontal;
        }),
    "align-start-vertical": ()=>Promise.resolve().then(function() {
            return alignStartVertical;
        }),
    "align-vertical-distribute-center": ()=>Promise.resolve().then(function() {
            return alignVerticalDistributeCenter;
        }),
    "align-vertical-distribute-end": ()=>Promise.resolve().then(function() {
            return alignVerticalDistributeEnd;
        }),
    "align-vertical-distribute-start": ()=>Promise.resolve().then(function() {
            return alignVerticalDistributeStart;
        }),
    "align-vertical-justify-center": ()=>Promise.resolve().then(function() {
            return alignVerticalJustifyCenter;
        }),
    "align-vertical-justify-end": ()=>Promise.resolve().then(function() {
            return alignVerticalJustifyEnd;
        }),
    "align-vertical-justify-start": ()=>Promise.resolve().then(function() {
            return alignVerticalJustifyStart;
        }),
    "align-vertical-space-around": ()=>Promise.resolve().then(function() {
            return alignVerticalSpaceAround;
        }),
    "align-vertical-space-between": ()=>Promise.resolve().then(function() {
            return alignVerticalSpaceBetween;
        }),
    "ampersand": ()=>Promise.resolve().then(function() {
            return ampersand;
        }),
    "ampersands": ()=>Promise.resolve().then(function() {
            return ampersands;
        }),
    "anchor": ()=>Promise.resolve().then(function() {
            return anchor;
        }),
    "angry": ()=>Promise.resolve().then(function() {
            return angry;
        }),
    "annoyed": ()=>Promise.resolve().then(function() {
            return annoyed;
        }),
    "aperture": ()=>Promise.resolve().then(function() {
            return aperture;
        }),
    "app-window": ()=>Promise.resolve().then(function() {
            return appWindow;
        }),
    "apple": ()=>Promise.resolve().then(function() {
            return apple;
        }),
    "archive-restore": ()=>Promise.resolve().then(function() {
            return archiveRestore;
        }),
    "archive": ()=>Promise.resolve().then(function() {
            return archive;
        }),
    "area-chart": ()=>Promise.resolve().then(function() {
            return areaChart;
        }),
    "armchair": ()=>Promise.resolve().then(function() {
            return armchair;
        }),
    "arrow-big-down-dash": ()=>Promise.resolve().then(function() {
            return arrowBigDownDash;
        }),
    "arrow-big-down": ()=>Promise.resolve().then(function() {
            return arrowBigDown;
        }),
    "arrow-big-left-dash": ()=>Promise.resolve().then(function() {
            return arrowBigLeftDash;
        }),
    "arrow-big-left": ()=>Promise.resolve().then(function() {
            return arrowBigLeft;
        }),
    "arrow-big-right-dash": ()=>Promise.resolve().then(function() {
            return arrowBigRightDash;
        }),
    "arrow-big-right": ()=>Promise.resolve().then(function() {
            return arrowBigRight;
        }),
    "arrow-big-up-dash": ()=>Promise.resolve().then(function() {
            return arrowBigUpDash;
        }),
    "arrow-big-up": ()=>Promise.resolve().then(function() {
            return arrowBigUp;
        }),
    "arrow-down-0-1": ()=>Promise.resolve().then(function() {
            return arrowDown01;
        }),
    "arrow-down-1-0": ()=>Promise.resolve().then(function() {
            return arrowDown10;
        }),
    "arrow-down-a-z": ()=>Promise.resolve().then(function() {
            return arrowDownAZ;
        }),
    "arrow-down-circle": ()=>Promise.resolve().then(function() {
            return arrowDownCircle;
        }),
    "arrow-down-from-line": ()=>Promise.resolve().then(function() {
            return arrowDownFromLine;
        }),
    "arrow-down-left-from-circle": ()=>Promise.resolve().then(function() {
            return arrowDownLeftFromCircle;
        }),
    "arrow-down-left-square": ()=>Promise.resolve().then(function() {
            return arrowDownLeftSquare;
        }),
    "arrow-down-left": ()=>Promise.resolve().then(function() {
            return arrowDownLeft;
        }),
    "arrow-down-narrow-wide": ()=>Promise.resolve().then(function() {
            return arrowDownNarrowWide;
        }),
    "arrow-down-right-from-circle": ()=>Promise.resolve().then(function() {
            return arrowDownRightFromCircle;
        }),
    "arrow-down-right-square": ()=>Promise.resolve().then(function() {
            return arrowDownRightSquare;
        }),
    "arrow-down-right": ()=>Promise.resolve().then(function() {
            return arrowDownRight;
        }),
    "arrow-down-square": ()=>Promise.resolve().then(function() {
            return arrowDownSquare;
        }),
    "arrow-down-to-dot": ()=>Promise.resolve().then(function() {
            return arrowDownToDot;
        }),
    "arrow-down-to-line": ()=>Promise.resolve().then(function() {
            return arrowDownToLine;
        }),
    "arrow-down-up": ()=>Promise.resolve().then(function() {
            return arrowDownUp;
        }),
    "arrow-down-wide-narrow": ()=>Promise.resolve().then(function() {
            return arrowDownWideNarrow;
        }),
    "arrow-down-z-a": ()=>Promise.resolve().then(function() {
            return arrowDownZA;
        }),
    "arrow-down": ()=>Promise.resolve().then(function() {
            return arrowDown;
        }),
    "arrow-left-circle": ()=>Promise.resolve().then(function() {
            return arrowLeftCircle;
        }),
    "arrow-left-from-line": ()=>Promise.resolve().then(function() {
            return arrowLeftFromLine;
        }),
    "arrow-left-right": ()=>Promise.resolve().then(function() {
            return arrowLeftRight;
        }),
    "arrow-left-square": ()=>Promise.resolve().then(function() {
            return arrowLeftSquare;
        }),
    "arrow-left-to-line": ()=>Promise.resolve().then(function() {
            return arrowLeftToLine;
        }),
    "arrow-left": ()=>Promise.resolve().then(function() {
            return arrowLeft;
        }),
    "arrow-right-circle": ()=>Promise.resolve().then(function() {
            return arrowRightCircle;
        }),
    "arrow-right-from-line": ()=>Promise.resolve().then(function() {
            return arrowRightFromLine;
        }),
    "arrow-right-left": ()=>Promise.resolve().then(function() {
            return arrowRightLeft;
        }),
    "arrow-right-square": ()=>Promise.resolve().then(function() {
            return arrowRightSquare;
        }),
    "arrow-right-to-line": ()=>Promise.resolve().then(function() {
            return arrowRightToLine;
        }),
    "arrow-right": ()=>Promise.resolve().then(function() {
            return arrowRight;
        }),
    "arrow-up-0-1": ()=>Promise.resolve().then(function() {
            return arrowUp01;
        }),
    "arrow-up-1-0": ()=>Promise.resolve().then(function() {
            return arrowUp10;
        }),
    "arrow-up-a-z": ()=>Promise.resolve().then(function() {
            return arrowUpAZ;
        }),
    "arrow-up-circle": ()=>Promise.resolve().then(function() {
            return arrowUpCircle;
        }),
    "arrow-up-down": ()=>Promise.resolve().then(function() {
            return arrowUpDown;
        }),
    "arrow-up-from-dot": ()=>Promise.resolve().then(function() {
            return arrowUpFromDot;
        }),
    "arrow-up-from-line": ()=>Promise.resolve().then(function() {
            return arrowUpFromLine;
        }),
    "arrow-up-left-from-circle": ()=>Promise.resolve().then(function() {
            return arrowUpLeftFromCircle;
        }),
    "arrow-up-left-square": ()=>Promise.resolve().then(function() {
            return arrowUpLeftSquare;
        }),
    "arrow-up-left": ()=>Promise.resolve().then(function() {
            return arrowUpLeft;
        }),
    "arrow-up-narrow-wide": ()=>Promise.resolve().then(function() {
            return arrowUpNarrowWide;
        }),
    "arrow-up-right-from-circle": ()=>Promise.resolve().then(function() {
            return arrowUpRightFromCircle;
        }),
    "arrow-up-right-square": ()=>Promise.resolve().then(function() {
            return arrowUpRightSquare;
        }),
    "arrow-up-right": ()=>Promise.resolve().then(function() {
            return arrowUpRight;
        }),
    "arrow-up-square": ()=>Promise.resolve().then(function() {
            return arrowUpSquare;
        }),
    "arrow-up-to-line": ()=>Promise.resolve().then(function() {
            return arrowUpToLine;
        }),
    "arrow-up-wide-narrow": ()=>Promise.resolve().then(function() {
            return arrowUpWideNarrow;
        }),
    "arrow-up-z-a": ()=>Promise.resolve().then(function() {
            return arrowUpZA;
        }),
    "arrow-up": ()=>Promise.resolve().then(function() {
            return arrowUp;
        }),
    "arrows-up-from-line": ()=>Promise.resolve().then(function() {
            return arrowsUpFromLine;
        }),
    "asterisk": ()=>Promise.resolve().then(function() {
            return asterisk;
        }),
    "at-sign": ()=>Promise.resolve().then(function() {
            return atSign;
        }),
    "atom": ()=>Promise.resolve().then(function() {
            return atom;
        }),
    "award": ()=>Promise.resolve().then(function() {
            return award;
        }),
    "axe": ()=>Promise.resolve().then(function() {
            return axe;
        }),
    "axis-3d": ()=>Promise.resolve().then(function() {
            return axis3d;
        }),
    "baby": ()=>Promise.resolve().then(function() {
            return baby;
        }),
    "backpack": ()=>Promise.resolve().then(function() {
            return backpack;
        }),
    "badge-alert": ()=>Promise.resolve().then(function() {
            return badgeAlert;
        }),
    "badge-check": ()=>Promise.resolve().then(function() {
            return badgeCheck;
        }),
    "badge-dollar-sign": ()=>Promise.resolve().then(function() {
            return badgeDollarSign;
        }),
    "badge-help": ()=>Promise.resolve().then(function() {
            return badgeHelp;
        }),
    "badge-info": ()=>Promise.resolve().then(function() {
            return badgeInfo;
        }),
    "badge-minus": ()=>Promise.resolve().then(function() {
            return badgeMinus;
        }),
    "badge-percent": ()=>Promise.resolve().then(function() {
            return badgePercent;
        }),
    "badge-plus": ()=>Promise.resolve().then(function() {
            return badgePlus;
        }),
    "badge-x": ()=>Promise.resolve().then(function() {
            return badgeX;
        }),
    "badge": ()=>Promise.resolve().then(function() {
            return badge;
        }),
    "baggage-claim": ()=>Promise.resolve().then(function() {
            return baggageClaim;
        }),
    "ban": ()=>Promise.resolve().then(function() {
            return ban;
        }),
    "banana": ()=>Promise.resolve().then(function() {
            return banana;
        }),
    "banknote": ()=>Promise.resolve().then(function() {
            return banknote;
        }),
    "bar-chart-2": ()=>Promise.resolve().then(function() {
            return barChart2;
        }),
    "bar-chart-3": ()=>Promise.resolve().then(function() {
            return barChart3;
        }),
    "bar-chart-4": ()=>Promise.resolve().then(function() {
            return barChart4;
        }),
    "bar-chart-big": ()=>Promise.resolve().then(function() {
            return barChartBig;
        }),
    "bar-chart-horizontal-big": ()=>Promise.resolve().then(function() {
            return barChartHorizontalBig;
        }),
    "bar-chart-horizontal": ()=>Promise.resolve().then(function() {
            return barChartHorizontal;
        }),
    "bar-chart": ()=>Promise.resolve().then(function() {
            return barChart;
        }),
    "baseline": ()=>Promise.resolve().then(function() {
            return baseline;
        }),
    "bath": ()=>Promise.resolve().then(function() {
            return bath;
        }),
    "battery-charging": ()=>Promise.resolve().then(function() {
            return batteryCharging;
        }),
    "battery-full": ()=>Promise.resolve().then(function() {
            return batteryFull;
        }),
    "battery-low": ()=>Promise.resolve().then(function() {
            return batteryLow;
        }),
    "battery-medium": ()=>Promise.resolve().then(function() {
            return batteryMedium;
        }),
    "battery-warning": ()=>Promise.resolve().then(function() {
            return batteryWarning;
        }),
    "battery": ()=>Promise.resolve().then(function() {
            return battery;
        }),
    "beaker": ()=>Promise.resolve().then(function() {
            return beaker;
        }),
    "bean-off": ()=>Promise.resolve().then(function() {
            return beanOff;
        }),
    "bean": ()=>Promise.resolve().then(function() {
            return bean;
        }),
    "bed-double": ()=>Promise.resolve().then(function() {
            return bedDouble;
        }),
    "bed-single": ()=>Promise.resolve().then(function() {
            return bedSingle;
        }),
    "bed": ()=>Promise.resolve().then(function() {
            return bed;
        }),
    "beef": ()=>Promise.resolve().then(function() {
            return beef;
        }),
    "beer": ()=>Promise.resolve().then(function() {
            return beer;
        }),
    "bell-dot": ()=>Promise.resolve().then(function() {
            return bellDot;
        }),
    "bell-minus": ()=>Promise.resolve().then(function() {
            return bellMinus;
        }),
    "bell-off": ()=>Promise.resolve().then(function() {
            return bellOff;
        }),
    "bell-plus": ()=>Promise.resolve().then(function() {
            return bellPlus;
        }),
    "bell-ring": ()=>Promise.resolve().then(function() {
            return bellRing;
        }),
    "bell": ()=>Promise.resolve().then(function() {
            return bell;
        }),
    "bike": ()=>Promise.resolve().then(function() {
            return bike;
        }),
    "binary": ()=>Promise.resolve().then(function() {
            return binary;
        }),
    "biohazard": ()=>Promise.resolve().then(function() {
            return biohazard;
        }),
    "bird": ()=>Promise.resolve().then(function() {
            return bird;
        }),
    "bitcoin": ()=>Promise.resolve().then(function() {
            return bitcoin;
        }),
    "blinds": ()=>Promise.resolve().then(function() {
            return blinds;
        }),
    "bluetooth-connected": ()=>Promise.resolve().then(function() {
            return bluetoothConnected;
        }),
    "bluetooth-off": ()=>Promise.resolve().then(function() {
            return bluetoothOff;
        }),
    "bluetooth-searching": ()=>Promise.resolve().then(function() {
            return bluetoothSearching;
        }),
    "bluetooth": ()=>Promise.resolve().then(function() {
            return bluetooth;
        }),
    "bold": ()=>Promise.resolve().then(function() {
            return bold;
        }),
    "bomb": ()=>Promise.resolve().then(function() {
            return bomb;
        }),
    "bone": ()=>Promise.resolve().then(function() {
            return bone;
        }),
    "book-copy": ()=>Promise.resolve().then(function() {
            return bookCopy;
        }),
    "book-down": ()=>Promise.resolve().then(function() {
            return bookDown;
        }),
    "book-key": ()=>Promise.resolve().then(function() {
            return bookKey;
        }),
    "book-lock": ()=>Promise.resolve().then(function() {
            return bookLock;
        }),
    "book-marked": ()=>Promise.resolve().then(function() {
            return bookMarked;
        }),
    "book-minus": ()=>Promise.resolve().then(function() {
            return bookMinus;
        }),
    "book-open-check": ()=>Promise.resolve().then(function() {
            return bookOpenCheck;
        }),
    "book-open": ()=>Promise.resolve().then(function() {
            return bookOpen;
        }),
    "book-plus": ()=>Promise.resolve().then(function() {
            return bookPlus;
        }),
    "book-template": ()=>Promise.resolve().then(function() {
            return bookTemplate;
        }),
    "book-up-2": ()=>Promise.resolve().then(function() {
            return bookUp2;
        }),
    "book-up": ()=>Promise.resolve().then(function() {
            return bookUp;
        }),
    "book-x": ()=>Promise.resolve().then(function() {
            return bookX;
        }),
    "book": ()=>Promise.resolve().then(function() {
            return book;
        }),
    "bookmark-minus": ()=>Promise.resolve().then(function() {
            return bookmarkMinus;
        }),
    "bookmark-plus": ()=>Promise.resolve().then(function() {
            return bookmarkPlus;
        }),
    "bookmark": ()=>Promise.resolve().then(function() {
            return bookmark;
        }),
    "bot": ()=>Promise.resolve().then(function() {
            return bot;
        }),
    "box-select": ()=>Promise.resolve().then(function() {
            return boxSelect;
        }),
    "box": ()=>Promise.resolve().then(function() {
            return box;
        }),
    "boxes": ()=>Promise.resolve().then(function() {
            return boxes;
        }),
    "braces": ()=>Promise.resolve().then(function() {
            return braces;
        }),
    "brackets": ()=>Promise.resolve().then(function() {
            return brackets;
        }),
    "brain-circuit": ()=>Promise.resolve().then(function() {
            return brainCircuit;
        }),
    "brain-cog": ()=>Promise.resolve().then(function() {
            return brainCog;
        }),
    "brain": ()=>Promise.resolve().then(function() {
            return brain;
        }),
    "briefcase": ()=>Promise.resolve().then(function() {
            return briefcase;
        }),
    "brush": ()=>Promise.resolve().then(function() {
            return brush;
        }),
    "bug": ()=>Promise.resolve().then(function() {
            return bug;
        }),
    "building-2": ()=>Promise.resolve().then(function() {
            return building2;
        }),
    "building": ()=>Promise.resolve().then(function() {
            return building;
        }),
    "bus": ()=>Promise.resolve().then(function() {
            return bus;
        }),
    "cake-slice": ()=>Promise.resolve().then(function() {
            return cakeSlice;
        }),
    "cake": ()=>Promise.resolve().then(function() {
            return cake;
        }),
    "calculator": ()=>Promise.resolve().then(function() {
            return calculator;
        }),
    "calendar-check-2": ()=>Promise.resolve().then(function() {
            return calendarCheck2;
        }),
    "calendar-check": ()=>Promise.resolve().then(function() {
            return calendarCheck;
        }),
    "calendar-clock": ()=>Promise.resolve().then(function() {
            return calendarClock;
        }),
    "calendar-days": ()=>Promise.resolve().then(function() {
            return calendarDays;
        }),
    "calendar-heart": ()=>Promise.resolve().then(function() {
            return calendarHeart;
        }),
    "calendar-minus": ()=>Promise.resolve().then(function() {
            return calendarMinus;
        }),
    "calendar-off": ()=>Promise.resolve().then(function() {
            return calendarOff;
        }),
    "calendar-plus": ()=>Promise.resolve().then(function() {
            return calendarPlus;
        }),
    "calendar-range": ()=>Promise.resolve().then(function() {
            return calendarRange;
        }),
    "calendar-search": ()=>Promise.resolve().then(function() {
            return calendarSearch;
        }),
    "calendar-x-2": ()=>Promise.resolve().then(function() {
            return calendarX2;
        }),
    "calendar-x": ()=>Promise.resolve().then(function() {
            return calendarX;
        }),
    "calendar": ()=>Promise.resolve().then(function() {
            return calendar;
        }),
    "camera-off": ()=>Promise.resolve().then(function() {
            return cameraOff;
        }),
    "camera": ()=>Promise.resolve().then(function() {
            return camera;
        }),
    "candlestick-chart": ()=>Promise.resolve().then(function() {
            return candlestickChart;
        }),
    "candy-cane": ()=>Promise.resolve().then(function() {
            return candyCane;
        }),
    "candy-off": ()=>Promise.resolve().then(function() {
            return candyOff;
        }),
    "candy": ()=>Promise.resolve().then(function() {
            return candy;
        }),
    "car": ()=>Promise.resolve().then(function() {
            return car;
        }),
    "carrot": ()=>Promise.resolve().then(function() {
            return carrot;
        }),
    "case-lower": ()=>Promise.resolve().then(function() {
            return caseLower;
        }),
    "case-sensitive": ()=>Promise.resolve().then(function() {
            return caseSensitive;
        }),
    "case-upper": ()=>Promise.resolve().then(function() {
            return caseUpper;
        }),
    "cassette-tape": ()=>Promise.resolve().then(function() {
            return cassetteTape;
        }),
    "cast": ()=>Promise.resolve().then(function() {
            return cast;
        }),
    "castle": ()=>Promise.resolve().then(function() {
            return castle;
        }),
    "cat": ()=>Promise.resolve().then(function() {
            return cat;
        }),
    "check-check": ()=>Promise.resolve().then(function() {
            return checkCheck;
        }),
    "check-circle-2": ()=>Promise.resolve().then(function() {
            return checkCircle2;
        }),
    "check-circle": ()=>Promise.resolve().then(function() {
            return checkCircle;
        }),
    "check-square": ()=>Promise.resolve().then(function() {
            return checkSquare;
        }),
    "check": ()=>Promise.resolve().then(function() {
            return check;
        }),
    "chef-hat": ()=>Promise.resolve().then(function() {
            return chefHat;
        }),
    "cherry": ()=>Promise.resolve().then(function() {
            return cherry;
        }),
    "chevron-down-circle": ()=>Promise.resolve().then(function() {
            return chevronDownCircle;
        }),
    "chevron-down-square": ()=>Promise.resolve().then(function() {
            return chevronDownSquare;
        }),
    "chevron-down": ()=>Promise.resolve().then(function() {
            return chevronDown;
        }),
    "chevron-first": ()=>Promise.resolve().then(function() {
            return chevronFirst;
        }),
    "chevron-last": ()=>Promise.resolve().then(function() {
            return chevronLast;
        }),
    "chevron-left-circle": ()=>Promise.resolve().then(function() {
            return chevronLeftCircle;
        }),
    "chevron-left-square": ()=>Promise.resolve().then(function() {
            return chevronLeftSquare;
        }),
    "chevron-left": ()=>Promise.resolve().then(function() {
            return chevronLeft;
        }),
    "chevron-right-circle": ()=>Promise.resolve().then(function() {
            return chevronRightCircle;
        }),
    "chevron-right-square": ()=>Promise.resolve().then(function() {
            return chevronRightSquare;
        }),
    "chevron-right": ()=>Promise.resolve().then(function() {
            return chevronRight;
        }),
    "chevron-up-circle": ()=>Promise.resolve().then(function() {
            return chevronUpCircle;
        }),
    "chevron-up-square": ()=>Promise.resolve().then(function() {
            return chevronUpSquare;
        }),
    "chevron-up": ()=>Promise.resolve().then(function() {
            return chevronUp;
        }),
    "chevrons-down-up": ()=>Promise.resolve().then(function() {
            return chevronsDownUp;
        }),
    "chevrons-down": ()=>Promise.resolve().then(function() {
            return chevronsDown;
        }),
    "chevrons-left-right": ()=>Promise.resolve().then(function() {
            return chevronsLeftRight;
        }),
    "chevrons-left": ()=>Promise.resolve().then(function() {
            return chevronsLeft;
        }),
    "chevrons-right-left": ()=>Promise.resolve().then(function() {
            return chevronsRightLeft;
        }),
    "chevrons-right": ()=>Promise.resolve().then(function() {
            return chevronsRight;
        }),
    "chevrons-up-down": ()=>Promise.resolve().then(function() {
            return chevronsUpDown;
        }),
    "chevrons-up": ()=>Promise.resolve().then(function() {
            return chevronsUp;
        }),
    "chrome": ()=>Promise.resolve().then(function() {
            return chrome;
        }),
    "church": ()=>Promise.resolve().then(function() {
            return church;
        }),
    "cigarette-off": ()=>Promise.resolve().then(function() {
            return cigaretteOff;
        }),
    "cigarette": ()=>Promise.resolve().then(function() {
            return cigarette;
        }),
    "circle-dashed": ()=>Promise.resolve().then(function() {
            return circleDashed;
        }),
    "circle-dollar-sign": ()=>Promise.resolve().then(function() {
            return circleDollarSign;
        }),
    "circle-dot-dashed": ()=>Promise.resolve().then(function() {
            return circleDotDashed;
        }),
    "circle-dot": ()=>Promise.resolve().then(function() {
            return circleDot;
        }),
    "circle-ellipsis": ()=>Promise.resolve().then(function() {
            return circleEllipsis;
        }),
    "circle-equal": ()=>Promise.resolve().then(function() {
            return circleEqual;
        }),
    "circle-off": ()=>Promise.resolve().then(function() {
            return circleOff;
        }),
    "circle-slash-2": ()=>Promise.resolve().then(function() {
            return circleSlash2;
        }),
    "circle-slash": ()=>Promise.resolve().then(function() {
            return circleSlash;
        }),
    "circle": ()=>Promise.resolve().then(function() {
            return circle;
        }),
    "circuit-board": ()=>Promise.resolve().then(function() {
            return circuitBoard;
        }),
    "citrus": ()=>Promise.resolve().then(function() {
            return citrus;
        }),
    "clapperboard": ()=>Promise.resolve().then(function() {
            return clapperboard;
        }),
    "clipboard-check": ()=>Promise.resolve().then(function() {
            return clipboardCheck;
        }),
    "clipboard-copy": ()=>Promise.resolve().then(function() {
            return clipboardCopy;
        }),
    "clipboard-edit": ()=>Promise.resolve().then(function() {
            return clipboardEdit;
        }),
    "clipboard-list": ()=>Promise.resolve().then(function() {
            return clipboardList;
        }),
    "clipboard-paste": ()=>Promise.resolve().then(function() {
            return clipboardPaste;
        }),
    "clipboard-signature": ()=>Promise.resolve().then(function() {
            return clipboardSignature;
        }),
    "clipboard-type": ()=>Promise.resolve().then(function() {
            return clipboardType;
        }),
    "clipboard-x": ()=>Promise.resolve().then(function() {
            return clipboardX;
        }),
    "clipboard": ()=>Promise.resolve().then(function() {
            return clipboard;
        }),
    "clock-1": ()=>Promise.resolve().then(function() {
            return clock1;
        }),
    "clock-10": ()=>Promise.resolve().then(function() {
            return clock10;
        }),
    "clock-11": ()=>Promise.resolve().then(function() {
            return clock11;
        }),
    "clock-12": ()=>Promise.resolve().then(function() {
            return clock12;
        }),
    "clock-2": ()=>Promise.resolve().then(function() {
            return clock2;
        }),
    "clock-3": ()=>Promise.resolve().then(function() {
            return clock3;
        }),
    "clock-4": ()=>Promise.resolve().then(function() {
            return clock4;
        }),
    "clock-5": ()=>Promise.resolve().then(function() {
            return clock5;
        }),
    "clock-6": ()=>Promise.resolve().then(function() {
            return clock6;
        }),
    "clock-7": ()=>Promise.resolve().then(function() {
            return clock7;
        }),
    "clock-8": ()=>Promise.resolve().then(function() {
            return clock8;
        }),
    "clock-9": ()=>Promise.resolve().then(function() {
            return clock9;
        }),
    "clock": ()=>Promise.resolve().then(function() {
            return clock;
        }),
    "cloud-cog": ()=>Promise.resolve().then(function() {
            return cloudCog;
        }),
    "cloud-drizzle": ()=>Promise.resolve().then(function() {
            return cloudDrizzle;
        }),
    "cloud-fog": ()=>Promise.resolve().then(function() {
            return cloudFog;
        }),
    "cloud-hail": ()=>Promise.resolve().then(function() {
            return cloudHail;
        }),
    "cloud-lightning": ()=>Promise.resolve().then(function() {
            return cloudLightning;
        }),
    "cloud-moon-rain": ()=>Promise.resolve().then(function() {
            return cloudMoonRain;
        }),
    "cloud-moon": ()=>Promise.resolve().then(function() {
            return cloudMoon;
        }),
    "cloud-off": ()=>Promise.resolve().then(function() {
            return cloudOff;
        }),
    "cloud-rain-wind": ()=>Promise.resolve().then(function() {
            return cloudRainWind;
        }),
    "cloud-rain": ()=>Promise.resolve().then(function() {
            return cloudRain;
        }),
    "cloud-snow": ()=>Promise.resolve().then(function() {
            return cloudSnow;
        }),
    "cloud-sun-rain": ()=>Promise.resolve().then(function() {
            return cloudSunRain;
        }),
    "cloud-sun": ()=>Promise.resolve().then(function() {
            return cloudSun;
        }),
    "cloud": ()=>Promise.resolve().then(function() {
            return cloud;
        }),
    "cloudy": ()=>Promise.resolve().then(function() {
            return cloudy;
        }),
    "clover": ()=>Promise.resolve().then(function() {
            return clover;
        }),
    "club": ()=>Promise.resolve().then(function() {
            return club;
        }),
    "code-2": ()=>Promise.resolve().then(function() {
            return code2;
        }),
    "code": ()=>Promise.resolve().then(function() {
            return code;
        }),
    "codepen": ()=>Promise.resolve().then(function() {
            return codepen;
        }),
    "codesandbox": ()=>Promise.resolve().then(function() {
            return codesandbox;
        }),
    "coffee": ()=>Promise.resolve().then(function() {
            return coffee;
        }),
    "cog": ()=>Promise.resolve().then(function() {
            return cog;
        }),
    "coins": ()=>Promise.resolve().then(function() {
            return coins;
        }),
    "columns": ()=>Promise.resolve().then(function() {
            return columns;
        }),
    "combine": ()=>Promise.resolve().then(function() {
            return combine;
        }),
    "command": ()=>Promise.resolve().then(function() {
            return command;
        }),
    "compass": ()=>Promise.resolve().then(function() {
            return compass;
        }),
    "component": ()=>Promise.resolve().then(function() {
            return component;
        }),
    "concierge-bell": ()=>Promise.resolve().then(function() {
            return conciergeBell;
        }),
    "construction": ()=>Promise.resolve().then(function() {
            return construction;
        }),
    "contact-2": ()=>Promise.resolve().then(function() {
            return contact2;
        }),
    "contact": ()=>Promise.resolve().then(function() {
            return contact;
        }),
    "container": ()=>Promise.resolve().then(function() {
            return container;
        }),
    "contrast": ()=>Promise.resolve().then(function() {
            return contrast;
        }),
    "cookie": ()=>Promise.resolve().then(function() {
            return cookie;
        }),
    "copy-check": ()=>Promise.resolve().then(function() {
            return copyCheck;
        }),
    "copy-minus": ()=>Promise.resolve().then(function() {
            return copyMinus;
        }),
    "copy-plus": ()=>Promise.resolve().then(function() {
            return copyPlus;
        }),
    "copy-slash": ()=>Promise.resolve().then(function() {
            return copySlash;
        }),
    "copy-x": ()=>Promise.resolve().then(function() {
            return copyX;
        }),
    "copy": ()=>Promise.resolve().then(function() {
            return copy;
        }),
    "copyleft": ()=>Promise.resolve().then(function() {
            return copyleft;
        }),
    "copyright": ()=>Promise.resolve().then(function() {
            return copyright;
        }),
    "corner-down-left": ()=>Promise.resolve().then(function() {
            return cornerDownLeft;
        }),
    "corner-down-right": ()=>Promise.resolve().then(function() {
            return cornerDownRight;
        }),
    "corner-left-down": ()=>Promise.resolve().then(function() {
            return cornerLeftDown;
        }),
    "corner-left-up": ()=>Promise.resolve().then(function() {
            return cornerLeftUp;
        }),
    "corner-right-down": ()=>Promise.resolve().then(function() {
            return cornerRightDown;
        }),
    "corner-right-up": ()=>Promise.resolve().then(function() {
            return cornerRightUp;
        }),
    "corner-up-left": ()=>Promise.resolve().then(function() {
            return cornerUpLeft;
        }),
    "corner-up-right": ()=>Promise.resolve().then(function() {
            return cornerUpRight;
        }),
    "cpu": ()=>Promise.resolve().then(function() {
            return cpu;
        }),
    "creative-commons": ()=>Promise.resolve().then(function() {
            return creativeCommons;
        }),
    "credit-card": ()=>Promise.resolve().then(function() {
            return creditCard;
        }),
    "croissant": ()=>Promise.resolve().then(function() {
            return croissant;
        }),
    "crop": ()=>Promise.resolve().then(function() {
            return crop;
        }),
    "cross": ()=>Promise.resolve().then(function() {
            return cross;
        }),
    "crosshair": ()=>Promise.resolve().then(function() {
            return crosshair;
        }),
    "crown": ()=>Promise.resolve().then(function() {
            return crown;
        }),
    "cup-soda": ()=>Promise.resolve().then(function() {
            return cupSoda;
        }),
    "currency": ()=>Promise.resolve().then(function() {
            return currency;
        }),
    "database-backup": ()=>Promise.resolve().then(function() {
            return databaseBackup;
        }),
    "database": ()=>Promise.resolve().then(function() {
            return database;
        }),
    "delete": ()=>Promise.resolve().then(function() {
            return _delete;
        }),
    "dessert": ()=>Promise.resolve().then(function() {
            return dessert;
        }),
    "diamond": ()=>Promise.resolve().then(function() {
            return diamond;
        }),
    "dice-1": ()=>Promise.resolve().then(function() {
            return dice1;
        }),
    "dice-2": ()=>Promise.resolve().then(function() {
            return dice2;
        }),
    "dice-3": ()=>Promise.resolve().then(function() {
            return dice3;
        }),
    "dice-4": ()=>Promise.resolve().then(function() {
            return dice4;
        }),
    "dice-5": ()=>Promise.resolve().then(function() {
            return dice5;
        }),
    "dice-6": ()=>Promise.resolve().then(function() {
            return dice6;
        }),
    "dices": ()=>Promise.resolve().then(function() {
            return dices;
        }),
    "diff": ()=>Promise.resolve().then(function() {
            return diff;
        }),
    "disc-2": ()=>Promise.resolve().then(function() {
            return disc2;
        }),
    "disc-3": ()=>Promise.resolve().then(function() {
            return disc3;
        }),
    "disc": ()=>Promise.resolve().then(function() {
            return disc;
        }),
    "divide-circle": ()=>Promise.resolve().then(function() {
            return divideCircle;
        }),
    "divide-square": ()=>Promise.resolve().then(function() {
            return divideSquare;
        }),
    "divide": ()=>Promise.resolve().then(function() {
            return divide;
        }),
    "dna-off": ()=>Promise.resolve().then(function() {
            return dnaOff;
        }),
    "dna": ()=>Promise.resolve().then(function() {
            return dna;
        }),
    "dog": ()=>Promise.resolve().then(function() {
            return dog;
        }),
    "dollar-sign": ()=>Promise.resolve().then(function() {
            return dollarSign;
        }),
    "donut": ()=>Promise.resolve().then(function() {
            return donut;
        }),
    "door-closed": ()=>Promise.resolve().then(function() {
            return doorClosed;
        }),
    "door-open": ()=>Promise.resolve().then(function() {
            return doorOpen;
        }),
    "dot": ()=>Promise.resolve().then(function() {
            return dot;
        }),
    "download-cloud": ()=>Promise.resolve().then(function() {
            return downloadCloud;
        }),
    "download": ()=>Promise.resolve().then(function() {
            return download;
        }),
    "dribbble": ()=>Promise.resolve().then(function() {
            return dribbble;
        }),
    "droplet": ()=>Promise.resolve().then(function() {
            return droplet;
        }),
    "droplets": ()=>Promise.resolve().then(function() {
            return droplets;
        }),
    "drumstick": ()=>Promise.resolve().then(function() {
            return drumstick;
        }),
    "dumbbell": ()=>Promise.resolve().then(function() {
            return dumbbell;
        }),
    "ear-off": ()=>Promise.resolve().then(function() {
            return earOff;
        }),
    "ear": ()=>Promise.resolve().then(function() {
            return ear;
        }),
    "edit-2": ()=>Promise.resolve().then(function() {
            return edit2;
        }),
    "edit-3": ()=>Promise.resolve().then(function() {
            return edit3;
        }),
    "edit": ()=>Promise.resolve().then(function() {
            return edit;
        }),
    "egg-fried": ()=>Promise.resolve().then(function() {
            return eggFried;
        }),
    "egg-off": ()=>Promise.resolve().then(function() {
            return eggOff;
        }),
    "egg": ()=>Promise.resolve().then(function() {
            return egg;
        }),
    "equal-not": ()=>Promise.resolve().then(function() {
            return equalNot;
        }),
    "equal": ()=>Promise.resolve().then(function() {
            return equal;
        }),
    "eraser": ()=>Promise.resolve().then(function() {
            return eraser;
        }),
    "euro": ()=>Promise.resolve().then(function() {
            return euro;
        }),
    "expand": ()=>Promise.resolve().then(function() {
            return expand;
        }),
    "external-link": ()=>Promise.resolve().then(function() {
            return externalLink;
        }),
    "eye-off": ()=>Promise.resolve().then(function() {
            return eyeOff;
        }),
    "eye": ()=>Promise.resolve().then(function() {
            return eye;
        }),
    "facebook": ()=>Promise.resolve().then(function() {
            return facebook;
        }),
    "factory": ()=>Promise.resolve().then(function() {
            return factory;
        }),
    "fan": ()=>Promise.resolve().then(function() {
            return fan;
        }),
    "fast-forward": ()=>Promise.resolve().then(function() {
            return fastForward;
        }),
    "feather": ()=>Promise.resolve().then(function() {
            return feather;
        }),
    "ferris-wheel": ()=>Promise.resolve().then(function() {
            return ferrisWheel;
        }),
    "figma": ()=>Promise.resolve().then(function() {
            return figma;
        }),
    "file-archive": ()=>Promise.resolve().then(function() {
            return fileArchive;
        }),
    "file-audio-2": ()=>Promise.resolve().then(function() {
            return fileAudio2;
        }),
    "file-audio": ()=>Promise.resolve().then(function() {
            return fileAudio;
        }),
    "file-axis-3d": ()=>Promise.resolve().then(function() {
            return fileAxis3d;
        }),
    "file-badge-2": ()=>Promise.resolve().then(function() {
            return fileBadge2;
        }),
    "file-badge": ()=>Promise.resolve().then(function() {
            return fileBadge;
        }),
    "file-bar-chart-2": ()=>Promise.resolve().then(function() {
            return fileBarChart2;
        }),
    "file-bar-chart": ()=>Promise.resolve().then(function() {
            return fileBarChart;
        }),
    "file-box": ()=>Promise.resolve().then(function() {
            return fileBox;
        }),
    "file-check-2": ()=>Promise.resolve().then(function() {
            return fileCheck2;
        }),
    "file-check": ()=>Promise.resolve().then(function() {
            return fileCheck;
        }),
    "file-clock": ()=>Promise.resolve().then(function() {
            return fileClock;
        }),
    "file-code-2": ()=>Promise.resolve().then(function() {
            return fileCode2;
        }),
    "file-code": ()=>Promise.resolve().then(function() {
            return fileCode;
        }),
    "file-cog-2": ()=>Promise.resolve().then(function() {
            return fileCog2;
        }),
    "file-cog": ()=>Promise.resolve().then(function() {
            return fileCog;
        }),
    "file-diff": ()=>Promise.resolve().then(function() {
            return fileDiff;
        }),
    "file-digit": ()=>Promise.resolve().then(function() {
            return fileDigit;
        }),
    "file-down": ()=>Promise.resolve().then(function() {
            return fileDown;
        }),
    "file-edit": ()=>Promise.resolve().then(function() {
            return fileEdit;
        }),
    "file-heart": ()=>Promise.resolve().then(function() {
            return fileHeart;
        }),
    "file-image": ()=>Promise.resolve().then(function() {
            return fileImage;
        }),
    "file-input": ()=>Promise.resolve().then(function() {
            return fileInput;
        }),
    "file-json-2": ()=>Promise.resolve().then(function() {
            return fileJson2;
        }),
    "file-json": ()=>Promise.resolve().then(function() {
            return fileJson;
        }),
    "file-key-2": ()=>Promise.resolve().then(function() {
            return fileKey2;
        }),
    "file-key": ()=>Promise.resolve().then(function() {
            return fileKey;
        }),
    "file-line-chart": ()=>Promise.resolve().then(function() {
            return fileLineChart;
        }),
    "file-lock-2": ()=>Promise.resolve().then(function() {
            return fileLock2;
        }),
    "file-lock": ()=>Promise.resolve().then(function() {
            return fileLock;
        }),
    "file-minus-2": ()=>Promise.resolve().then(function() {
            return fileMinus2;
        }),
    "file-minus": ()=>Promise.resolve().then(function() {
            return fileMinus;
        }),
    "file-output": ()=>Promise.resolve().then(function() {
            return fileOutput;
        }),
    "file-pie-chart": ()=>Promise.resolve().then(function() {
            return filePieChart;
        }),
    "file-plus-2": ()=>Promise.resolve().then(function() {
            return filePlus2;
        }),
    "file-plus": ()=>Promise.resolve().then(function() {
            return filePlus;
        }),
    "file-question": ()=>Promise.resolve().then(function() {
            return fileQuestion;
        }),
    "file-scan": ()=>Promise.resolve().then(function() {
            return fileScan;
        }),
    "file-search-2": ()=>Promise.resolve().then(function() {
            return fileSearch2;
        }),
    "file-search": ()=>Promise.resolve().then(function() {
            return fileSearch;
        }),
    "file-signature": ()=>Promise.resolve().then(function() {
            return fileSignature;
        }),
    "file-spreadsheet": ()=>Promise.resolve().then(function() {
            return fileSpreadsheet;
        }),
    "file-stack": ()=>Promise.resolve().then(function() {
            return fileStack;
        }),
    "file-symlink": ()=>Promise.resolve().then(function() {
            return fileSymlink;
        }),
    "file-terminal": ()=>Promise.resolve().then(function() {
            return fileTerminal;
        }),
    "file-text": ()=>Promise.resolve().then(function() {
            return fileText;
        }),
    "file-type-2": ()=>Promise.resolve().then(function() {
            return fileType2;
        }),
    "file-type": ()=>Promise.resolve().then(function() {
            return fileType;
        }),
    "file-up": ()=>Promise.resolve().then(function() {
            return fileUp;
        }),
    "file-video-2": ()=>Promise.resolve().then(function() {
            return fileVideo2;
        }),
    "file-video": ()=>Promise.resolve().then(function() {
            return fileVideo;
        }),
    "file-volume-2": ()=>Promise.resolve().then(function() {
            return fileVolume2;
        }),
    "file-volume": ()=>Promise.resolve().then(function() {
            return fileVolume;
        }),
    "file-warning": ()=>Promise.resolve().then(function() {
            return fileWarning;
        }),
    "file-x-2": ()=>Promise.resolve().then(function() {
            return fileX2;
        }),
    "file-x": ()=>Promise.resolve().then(function() {
            return fileX;
        }),
    "file": ()=>Promise.resolve().then(function() {
            return file;
        }),
    "files": ()=>Promise.resolve().then(function() {
            return files;
        }),
    "film": ()=>Promise.resolve().then(function() {
            return film;
        }),
    "filter-x": ()=>Promise.resolve().then(function() {
            return filterX;
        }),
    "filter": ()=>Promise.resolve().then(function() {
            return filter;
        }),
    "fingerprint": ()=>Promise.resolve().then(function() {
            return fingerprint;
        }),
    "fish-off": ()=>Promise.resolve().then(function() {
            return fishOff;
        }),
    "fish": ()=>Promise.resolve().then(function() {
            return fish;
        }),
    "flag-off": ()=>Promise.resolve().then(function() {
            return flagOff;
        }),
    "flag-triangle-left": ()=>Promise.resolve().then(function() {
            return flagTriangleLeft;
        }),
    "flag-triangle-right": ()=>Promise.resolve().then(function() {
            return flagTriangleRight;
        }),
    "flag": ()=>Promise.resolve().then(function() {
            return flag;
        }),
    "flame": ()=>Promise.resolve().then(function() {
            return flame;
        }),
    "flashlight-off": ()=>Promise.resolve().then(function() {
            return flashlightOff;
        }),
    "flashlight": ()=>Promise.resolve().then(function() {
            return flashlight;
        }),
    "flask-conical-off": ()=>Promise.resolve().then(function() {
            return flaskConicalOff;
        }),
    "flask-conical": ()=>Promise.resolve().then(function() {
            return flaskConical;
        }),
    "flask-round": ()=>Promise.resolve().then(function() {
            return flaskRound;
        }),
    "flip-horizontal-2": ()=>Promise.resolve().then(function() {
            return flipHorizontal2;
        }),
    "flip-horizontal": ()=>Promise.resolve().then(function() {
            return flipHorizontal;
        }),
    "flip-vertical-2": ()=>Promise.resolve().then(function() {
            return flipVertical2;
        }),
    "flip-vertical": ()=>Promise.resolve().then(function() {
            return flipVertical;
        }),
    "flower-2": ()=>Promise.resolve().then(function() {
            return flower2;
        }),
    "flower": ()=>Promise.resolve().then(function() {
            return flower;
        }),
    "focus": ()=>Promise.resolve().then(function() {
            return focus;
        }),
    "fold-horizontal": ()=>Promise.resolve().then(function() {
            return foldHorizontal;
        }),
    "fold-vertical": ()=>Promise.resolve().then(function() {
            return foldVertical;
        }),
    "folder-archive": ()=>Promise.resolve().then(function() {
            return folderArchive;
        }),
    "folder-check": ()=>Promise.resolve().then(function() {
            return folderCheck;
        }),
    "folder-clock": ()=>Promise.resolve().then(function() {
            return folderClock;
        }),
    "folder-closed": ()=>Promise.resolve().then(function() {
            return folderClosed;
        }),
    "folder-cog-2": ()=>Promise.resolve().then(function() {
            return folderCog2;
        }),
    "folder-cog": ()=>Promise.resolve().then(function() {
            return folderCog;
        }),
    "folder-dot": ()=>Promise.resolve().then(function() {
            return folderDot;
        }),
    "folder-down": ()=>Promise.resolve().then(function() {
            return folderDown;
        }),
    "folder-edit": ()=>Promise.resolve().then(function() {
            return folderEdit;
        }),
    "folder-git-2": ()=>Promise.resolve().then(function() {
            return folderGit2;
        }),
    "folder-git": ()=>Promise.resolve().then(function() {
            return folderGit;
        }),
    "folder-heart": ()=>Promise.resolve().then(function() {
            return folderHeart;
        }),
    "folder-input": ()=>Promise.resolve().then(function() {
            return folderInput;
        }),
    "folder-kanban": ()=>Promise.resolve().then(function() {
            return folderKanban;
        }),
    "folder-key": ()=>Promise.resolve().then(function() {
            return folderKey;
        }),
    "folder-lock": ()=>Promise.resolve().then(function() {
            return folderLock;
        }),
    "folder-minus": ()=>Promise.resolve().then(function() {
            return folderMinus;
        }),
    "folder-open-dot": ()=>Promise.resolve().then(function() {
            return folderOpenDot;
        }),
    "folder-open": ()=>Promise.resolve().then(function() {
            return folderOpen;
        }),
    "folder-output": ()=>Promise.resolve().then(function() {
            return folderOutput;
        }),
    "folder-plus": ()=>Promise.resolve().then(function() {
            return folderPlus;
        }),
    "folder-root": ()=>Promise.resolve().then(function() {
            return folderRoot;
        }),
    "folder-search-2": ()=>Promise.resolve().then(function() {
            return folderSearch2;
        }),
    "folder-search": ()=>Promise.resolve().then(function() {
            return folderSearch;
        }),
    "folder-symlink": ()=>Promise.resolve().then(function() {
            return folderSymlink;
        }),
    "folder-sync": ()=>Promise.resolve().then(function() {
            return folderSync;
        }),
    "folder-tree": ()=>Promise.resolve().then(function() {
            return folderTree;
        }),
    "folder-up": ()=>Promise.resolve().then(function() {
            return folderUp;
        }),
    "folder-x": ()=>Promise.resolve().then(function() {
            return folderX;
        }),
    "folder": ()=>Promise.resolve().then(function() {
            return folder;
        }),
    "folders": ()=>Promise.resolve().then(function() {
            return folders;
        }),
    "footprints": ()=>Promise.resolve().then(function() {
            return footprints;
        }),
    "forklift": ()=>Promise.resolve().then(function() {
            return forklift;
        }),
    "form-input": ()=>Promise.resolve().then(function() {
            return formInput;
        }),
    "forward": ()=>Promise.resolve().then(function() {
            return forward;
        }),
    "frame": ()=>Promise.resolve().then(function() {
            return frame;
        }),
    "framer": ()=>Promise.resolve().then(function() {
            return framer;
        }),
    "frown": ()=>Promise.resolve().then(function() {
            return frown;
        }),
    "fuel": ()=>Promise.resolve().then(function() {
            return fuel;
        }),
    "function-square": ()=>Promise.resolve().then(function() {
            return functionSquare;
        }),
    "gallery-horizontal-end": ()=>Promise.resolve().then(function() {
            return galleryHorizontalEnd;
        }),
    "gallery-horizontal": ()=>Promise.resolve().then(function() {
            return galleryHorizontal;
        }),
    "gallery-thumbnails": ()=>Promise.resolve().then(function() {
            return galleryThumbnails;
        }),
    "gallery-vertical-end": ()=>Promise.resolve().then(function() {
            return galleryVerticalEnd;
        }),
    "gallery-vertical": ()=>Promise.resolve().then(function() {
            return galleryVertical;
        }),
    "gamepad-2": ()=>Promise.resolve().then(function() {
            return gamepad2;
        }),
    "gamepad": ()=>Promise.resolve().then(function() {
            return gamepad;
        }),
    "gantt-chart-square": ()=>Promise.resolve().then(function() {
            return ganttChartSquare;
        }),
    "gantt-chart": ()=>Promise.resolve().then(function() {
            return ganttChart;
        }),
    "gauge-circle": ()=>Promise.resolve().then(function() {
            return gaugeCircle;
        }),
    "gauge": ()=>Promise.resolve().then(function() {
            return gauge;
        }),
    "gavel": ()=>Promise.resolve().then(function() {
            return gavel;
        }),
    "gem": ()=>Promise.resolve().then(function() {
            return gem;
        }),
    "ghost": ()=>Promise.resolve().then(function() {
            return ghost;
        }),
    "gift": ()=>Promise.resolve().then(function() {
            return gift;
        }),
    "git-branch-plus": ()=>Promise.resolve().then(function() {
            return gitBranchPlus;
        }),
    "git-branch": ()=>Promise.resolve().then(function() {
            return gitBranch;
        }),
    "git-commit": ()=>Promise.resolve().then(function() {
            return gitCommit;
        }),
    "git-compare": ()=>Promise.resolve().then(function() {
            return gitCompare;
        }),
    "git-fork": ()=>Promise.resolve().then(function() {
            return gitFork;
        }),
    "git-merge": ()=>Promise.resolve().then(function() {
            return gitMerge;
        }),
    "git-pull-request-closed": ()=>Promise.resolve().then(function() {
            return gitPullRequestClosed;
        }),
    "git-pull-request-draft": ()=>Promise.resolve().then(function() {
            return gitPullRequestDraft;
        }),
    "git-pull-request": ()=>Promise.resolve().then(function() {
            return gitPullRequest;
        }),
    "github": ()=>Promise.resolve().then(function() {
            return github;
        }),
    "gitlab": ()=>Promise.resolve().then(function() {
            return gitlab;
        }),
    "glass-water": ()=>Promise.resolve().then(function() {
            return glassWater;
        }),
    "glasses": ()=>Promise.resolve().then(function() {
            return glasses;
        }),
    "globe-2": ()=>Promise.resolve().then(function() {
            return globe2;
        }),
    "globe": ()=>Promise.resolve().then(function() {
            return globe;
        }),
    "goal": ()=>Promise.resolve().then(function() {
            return goal;
        }),
    "grab": ()=>Promise.resolve().then(function() {
            return grab;
        }),
    "graduation-cap": ()=>Promise.resolve().then(function() {
            return graduationCap;
        }),
    "grape": ()=>Promise.resolve().then(function() {
            return grape;
        }),
    "grid": ()=>Promise.resolve().then(function() {
            return grid;
        }),
    "grip-horizontal": ()=>Promise.resolve().then(function() {
            return gripHorizontal;
        }),
    "grip-vertical": ()=>Promise.resolve().then(function() {
            return gripVertical;
        }),
    "grip": ()=>Promise.resolve().then(function() {
            return grip;
        }),
    "group": ()=>Promise.resolve().then(function() {
            return group;
        }),
    "hammer": ()=>Promise.resolve().then(function() {
            return hammer;
        }),
    "hand-metal": ()=>Promise.resolve().then(function() {
            return handMetal;
        }),
    "hand": ()=>Promise.resolve().then(function() {
            return hand;
        }),
    "hard-drive": ()=>Promise.resolve().then(function() {
            return hardDrive;
        }),
    "hard-hat": ()=>Promise.resolve().then(function() {
            return hardHat;
        }),
    "hash": ()=>Promise.resolve().then(function() {
            return hash;
        }),
    "haze": ()=>Promise.resolve().then(function() {
            return haze;
        }),
    "heading-1": ()=>Promise.resolve().then(function() {
            return heading1;
        }),
    "heading-2": ()=>Promise.resolve().then(function() {
            return heading2;
        }),
    "heading-3": ()=>Promise.resolve().then(function() {
            return heading3;
        }),
    "heading-4": ()=>Promise.resolve().then(function() {
            return heading4;
        }),
    "heading-5": ()=>Promise.resolve().then(function() {
            return heading5;
        }),
    "heading-6": ()=>Promise.resolve().then(function() {
            return heading6;
        }),
    "heading": ()=>Promise.resolve().then(function() {
            return heading;
        }),
    "headphones": ()=>Promise.resolve().then(function() {
            return headphones;
        }),
    "heart-crack": ()=>Promise.resolve().then(function() {
            return heartCrack;
        }),
    "heart-handshake": ()=>Promise.resolve().then(function() {
            return heartHandshake;
        }),
    "heart-off": ()=>Promise.resolve().then(function() {
            return heartOff;
        }),
    "heart-pulse": ()=>Promise.resolve().then(function() {
            return heartPulse;
        }),
    "heart": ()=>Promise.resolve().then(function() {
            return heart;
        }),
    "help-circle": ()=>Promise.resolve().then(function() {
            return helpCircle;
        }),
    "helping-hand": ()=>Promise.resolve().then(function() {
            return helpingHand;
        }),
    "hexagon": ()=>Promise.resolve().then(function() {
            return hexagon;
        }),
    "highlighter": ()=>Promise.resolve().then(function() {
            return highlighter;
        }),
    "history": ()=>Promise.resolve().then(function() {
            return history;
        }),
    "home": ()=>Promise.resolve().then(function() {
            return home;
        }),
    "hop-off": ()=>Promise.resolve().then(function() {
            return hopOff;
        }),
    "hop": ()=>Promise.resolve().then(function() {
            return hop;
        }),
    "hotel": ()=>Promise.resolve().then(function() {
            return hotel;
        }),
    "hourglass": ()=>Promise.resolve().then(function() {
            return hourglass;
        }),
    "ice-cream-2": ()=>Promise.resolve().then(function() {
            return iceCream2;
        }),
    "ice-cream": ()=>Promise.resolve().then(function() {
            return iceCream;
        }),
    "image-minus": ()=>Promise.resolve().then(function() {
            return imageMinus;
        }),
    "image-off": ()=>Promise.resolve().then(function() {
            return imageOff;
        }),
    "image-plus": ()=>Promise.resolve().then(function() {
            return imagePlus;
        }),
    "image": ()=>Promise.resolve().then(function() {
            return image;
        }),
    "import": ()=>Promise.resolve().then(function() {
            return _import;
        }),
    "inbox": ()=>Promise.resolve().then(function() {
            return inbox;
        }),
    "indent": ()=>Promise.resolve().then(function() {
            return indent;
        }),
    "indian-rupee": ()=>Promise.resolve().then(function() {
            return indianRupee;
        }),
    "infinity": ()=>Promise.resolve().then(function() {
            return infinity;
        }),
    "info": ()=>Promise.resolve().then(function() {
            return info;
        }),
    "inspect": ()=>Promise.resolve().then(function() {
            return inspect;
        }),
    "instagram": ()=>Promise.resolve().then(function() {
            return instagram;
        }),
    "italic": ()=>Promise.resolve().then(function() {
            return italic;
        }),
    "iteration-ccw": ()=>Promise.resolve().then(function() {
            return iterationCcw;
        }),
    "iteration-cw": ()=>Promise.resolve().then(function() {
            return iterationCw;
        }),
    "japanese-yen": ()=>Promise.resolve().then(function() {
            return japaneseYen;
        }),
    "joystick": ()=>Promise.resolve().then(function() {
            return joystick;
        }),
    "kanban-square-dashed": ()=>Promise.resolve().then(function() {
            return kanbanSquareDashed;
        }),
    "kanban-square": ()=>Promise.resolve().then(function() {
            return kanbanSquare;
        }),
    "kanban": ()=>Promise.resolve().then(function() {
            return kanban;
        }),
    "key-round": ()=>Promise.resolve().then(function() {
            return keyRound;
        }),
    "key-square": ()=>Promise.resolve().then(function() {
            return keySquare;
        }),
    "key": ()=>Promise.resolve().then(function() {
            return key;
        }),
    "keyboard": ()=>Promise.resolve().then(function() {
            return keyboard;
        }),
    "lamp-ceiling": ()=>Promise.resolve().then(function() {
            return lampCeiling;
        }),
    "lamp-desk": ()=>Promise.resolve().then(function() {
            return lampDesk;
        }),
    "lamp-floor": ()=>Promise.resolve().then(function() {
            return lampFloor;
        }),
    "lamp-wall-down": ()=>Promise.resolve().then(function() {
            return lampWallDown;
        }),
    "lamp-wall-up": ()=>Promise.resolve().then(function() {
            return lampWallUp;
        }),
    "lamp": ()=>Promise.resolve().then(function() {
            return lamp;
        }),
    "landmark": ()=>Promise.resolve().then(function() {
            return landmark;
        }),
    "languages": ()=>Promise.resolve().then(function() {
            return languages;
        }),
    "laptop-2": ()=>Promise.resolve().then(function() {
            return laptop2;
        }),
    "laptop": ()=>Promise.resolve().then(function() {
            return laptop;
        }),
    "lasso-select": ()=>Promise.resolve().then(function() {
            return lassoSelect;
        }),
    "lasso": ()=>Promise.resolve().then(function() {
            return lasso;
        }),
    "laugh": ()=>Promise.resolve().then(function() {
            return laugh;
        }),
    "layers": ()=>Promise.resolve().then(function() {
            return layers;
        }),
    "layout-dashboard": ()=>Promise.resolve().then(function() {
            return layoutDashboard;
        }),
    "layout-grid": ()=>Promise.resolve().then(function() {
            return layoutGrid;
        }),
    "layout-list": ()=>Promise.resolve().then(function() {
            return layoutList;
        }),
    "layout-panel-left": ()=>Promise.resolve().then(function() {
            return layoutPanelLeft;
        }),
    "layout-panel-top": ()=>Promise.resolve().then(function() {
            return layoutPanelTop;
        }),
    "layout-template": ()=>Promise.resolve().then(function() {
            return layoutTemplate;
        }),
    "layout": ()=>Promise.resolve().then(function() {
            return layout;
        }),
    "leaf": ()=>Promise.resolve().then(function() {
            return leaf;
        }),
    "leafy-green": ()=>Promise.resolve().then(function() {
            return leafyGreen;
        }),
    "library": ()=>Promise.resolve().then(function() {
            return library;
        }),
    "life-buoy": ()=>Promise.resolve().then(function() {
            return lifeBuoy;
        }),
    "ligature": ()=>Promise.resolve().then(function() {
            return ligature;
        }),
    "lightbulb-off": ()=>Promise.resolve().then(function() {
            return lightbulbOff;
        }),
    "lightbulb": ()=>Promise.resolve().then(function() {
            return lightbulb;
        }),
    "line-chart": ()=>Promise.resolve().then(function() {
            return lineChart;
        }),
    "link-2-off": ()=>Promise.resolve().then(function() {
            return link2Off;
        }),
    "link-2": ()=>Promise.resolve().then(function() {
            return link2;
        }),
    "link": ()=>Promise.resolve().then(function() {
            return link;
        }),
    "linkedin": ()=>Promise.resolve().then(function() {
            return linkedin;
        }),
    "list-checks": ()=>Promise.resolve().then(function() {
            return listChecks;
        }),
    "list-end": ()=>Promise.resolve().then(function() {
            return listEnd;
        }),
    "list-filter": ()=>Promise.resolve().then(function() {
            return listFilter;
        }),
    "list-minus": ()=>Promise.resolve().then(function() {
            return listMinus;
        }),
    "list-music": ()=>Promise.resolve().then(function() {
            return listMusic;
        }),
    "list-ordered": ()=>Promise.resolve().then(function() {
            return listOrdered;
        }),
    "list-plus": ()=>Promise.resolve().then(function() {
            return listPlus;
        }),
    "list-restart": ()=>Promise.resolve().then(function() {
            return listRestart;
        }),
    "list-start": ()=>Promise.resolve().then(function() {
            return listStart;
        }),
    "list-todo": ()=>Promise.resolve().then(function() {
            return listTodo;
        }),
    "list-tree": ()=>Promise.resolve().then(function() {
            return listTree;
        }),
    "list-video": ()=>Promise.resolve().then(function() {
            return listVideo;
        }),
    "list-x": ()=>Promise.resolve().then(function() {
            return listX;
        }),
    "list": ()=>Promise.resolve().then(function() {
            return list;
        }),
    "loader-2": ()=>Promise.resolve().then(function() {
            return loader2;
        }),
    "loader": ()=>Promise.resolve().then(function() {
            return loader;
        }),
    "locate-fixed": ()=>Promise.resolve().then(function() {
            return locateFixed;
        }),
    "locate-off": ()=>Promise.resolve().then(function() {
            return locateOff;
        }),
    "locate": ()=>Promise.resolve().then(function() {
            return locate;
        }),
    "lock": ()=>Promise.resolve().then(function() {
            return lock;
        }),
    "log-in": ()=>Promise.resolve().then(function() {
            return logIn;
        }),
    "log-out": ()=>Promise.resolve().then(function() {
            return logOut;
        }),
    "lollipop": ()=>Promise.resolve().then(function() {
            return lollipop;
        }),
    "luggage": ()=>Promise.resolve().then(function() {
            return luggage;
        }),
    "magnet": ()=>Promise.resolve().then(function() {
            return magnet;
        }),
    "mail-check": ()=>Promise.resolve().then(function() {
            return mailCheck;
        }),
    "mail-minus": ()=>Promise.resolve().then(function() {
            return mailMinus;
        }),
    "mail-open": ()=>Promise.resolve().then(function() {
            return mailOpen;
        }),
    "mail-plus": ()=>Promise.resolve().then(function() {
            return mailPlus;
        }),
    "mail-question": ()=>Promise.resolve().then(function() {
            return mailQuestion;
        }),
    "mail-search": ()=>Promise.resolve().then(function() {
            return mailSearch;
        }),
    "mail-warning": ()=>Promise.resolve().then(function() {
            return mailWarning;
        }),
    "mail-x": ()=>Promise.resolve().then(function() {
            return mailX;
        }),
    "mail": ()=>Promise.resolve().then(function() {
            return mail;
        }),
    "mailbox": ()=>Promise.resolve().then(function() {
            return mailbox;
        }),
    "mails": ()=>Promise.resolve().then(function() {
            return mails;
        }),
    "map-pin-off": ()=>Promise.resolve().then(function() {
            return mapPinOff;
        }),
    "map-pin": ()=>Promise.resolve().then(function() {
            return mapPin;
        }),
    "map": ()=>Promise.resolve().then(function() {
            return map;
        }),
    "martini": ()=>Promise.resolve().then(function() {
            return martini;
        }),
    "maximize-2": ()=>Promise.resolve().then(function() {
            return maximize2;
        }),
    "maximize": ()=>Promise.resolve().then(function() {
            return maximize;
        }),
    "medal": ()=>Promise.resolve().then(function() {
            return medal;
        }),
    "megaphone-off": ()=>Promise.resolve().then(function() {
            return megaphoneOff;
        }),
    "megaphone": ()=>Promise.resolve().then(function() {
            return megaphone;
        }),
    "meh": ()=>Promise.resolve().then(function() {
            return meh;
        }),
    "memory-stick": ()=>Promise.resolve().then(function() {
            return memoryStick;
        }),
    "menu-square": ()=>Promise.resolve().then(function() {
            return menuSquare;
        }),
    "menu": ()=>Promise.resolve().then(function() {
            return menu;
        }),
    "merge": ()=>Promise.resolve().then(function() {
            return merge;
        }),
    "message-circle": ()=>Promise.resolve().then(function() {
            return messageCircle;
        }),
    "message-square-dashed": ()=>Promise.resolve().then(function() {
            return messageSquareDashed;
        }),
    "message-square-plus": ()=>Promise.resolve().then(function() {
            return messageSquarePlus;
        }),
    "message-square": ()=>Promise.resolve().then(function() {
            return messageSquare;
        }),
    "messages-square": ()=>Promise.resolve().then(function() {
            return messagesSquare;
        }),
    "mic-2": ()=>Promise.resolve().then(function() {
            return mic2;
        }),
    "mic-off": ()=>Promise.resolve().then(function() {
            return micOff;
        }),
    "mic": ()=>Promise.resolve().then(function() {
            return mic;
        }),
    "microscope": ()=>Promise.resolve().then(function() {
            return microscope;
        }),
    "microwave": ()=>Promise.resolve().then(function() {
            return microwave;
        }),
    "milestone": ()=>Promise.resolve().then(function() {
            return milestone;
        }),
    "milk-off": ()=>Promise.resolve().then(function() {
            return milkOff;
        }),
    "milk": ()=>Promise.resolve().then(function() {
            return milk;
        }),
    "minimize-2": ()=>Promise.resolve().then(function() {
            return minimize2;
        }),
    "minimize": ()=>Promise.resolve().then(function() {
            return minimize;
        }),
    "minus-circle": ()=>Promise.resolve().then(function() {
            return minusCircle;
        }),
    "minus-square": ()=>Promise.resolve().then(function() {
            return minusSquare;
        }),
    "minus": ()=>Promise.resolve().then(function() {
            return minus;
        }),
    "monitor-check": ()=>Promise.resolve().then(function() {
            return monitorCheck;
        }),
    "monitor-dot": ()=>Promise.resolve().then(function() {
            return monitorDot;
        }),
    "monitor-down": ()=>Promise.resolve().then(function() {
            return monitorDown;
        }),
    "monitor-off": ()=>Promise.resolve().then(function() {
            return monitorOff;
        }),
    "monitor-pause": ()=>Promise.resolve().then(function() {
            return monitorPause;
        }),
    "monitor-play": ()=>Promise.resolve().then(function() {
            return monitorPlay;
        }),
    "monitor-smartphone": ()=>Promise.resolve().then(function() {
            return monitorSmartphone;
        }),
    "monitor-speaker": ()=>Promise.resolve().then(function() {
            return monitorSpeaker;
        }),
    "monitor-stop": ()=>Promise.resolve().then(function() {
            return monitorStop;
        }),
    "monitor-up": ()=>Promise.resolve().then(function() {
            return monitorUp;
        }),
    "monitor-x": ()=>Promise.resolve().then(function() {
            return monitorX;
        }),
    "monitor": ()=>Promise.resolve().then(function() {
            return monitor;
        }),
    "moon-star": ()=>Promise.resolve().then(function() {
            return moonStar;
        }),
    "moon": ()=>Promise.resolve().then(function() {
            return moon;
        }),
    "more-horizontal": ()=>Promise.resolve().then(function() {
            return moreHorizontal;
        }),
    "more-vertical": ()=>Promise.resolve().then(function() {
            return moreVertical;
        }),
    "mountain-snow": ()=>Promise.resolve().then(function() {
            return mountainSnow;
        }),
    "mountain": ()=>Promise.resolve().then(function() {
            return mountain;
        }),
    "mouse-pointer-2": ()=>Promise.resolve().then(function() {
            return mousePointer2;
        }),
    "mouse-pointer-click": ()=>Promise.resolve().then(function() {
            return mousePointerClick;
        }),
    "mouse-pointer": ()=>Promise.resolve().then(function() {
            return mousePointer;
        }),
    "mouse": ()=>Promise.resolve().then(function() {
            return mouse;
        }),
    "move-3d": ()=>Promise.resolve().then(function() {
            return move3d;
        }),
    "move-diagonal-2": ()=>Promise.resolve().then(function() {
            return moveDiagonal2;
        }),
    "move-diagonal": ()=>Promise.resolve().then(function() {
            return moveDiagonal;
        }),
    "move-down-left": ()=>Promise.resolve().then(function() {
            return moveDownLeft;
        }),
    "move-down-right": ()=>Promise.resolve().then(function() {
            return moveDownRight;
        }),
    "move-down": ()=>Promise.resolve().then(function() {
            return moveDown;
        }),
    "move-horizontal": ()=>Promise.resolve().then(function() {
            return moveHorizontal;
        }),
    "move-left": ()=>Promise.resolve().then(function() {
            return moveLeft;
        }),
    "move-right": ()=>Promise.resolve().then(function() {
            return moveRight;
        }),
    "move-up-left": ()=>Promise.resolve().then(function() {
            return moveUpLeft;
        }),
    "move-up-right": ()=>Promise.resolve().then(function() {
            return moveUpRight;
        }),
    "move-up": ()=>Promise.resolve().then(function() {
            return moveUp;
        }),
    "move-vertical": ()=>Promise.resolve().then(function() {
            return moveVertical;
        }),
    "move": ()=>Promise.resolve().then(function() {
            return move;
        }),
    "music-2": ()=>Promise.resolve().then(function() {
            return music2;
        }),
    "music-3": ()=>Promise.resolve().then(function() {
            return music3;
        }),
    "music-4": ()=>Promise.resolve().then(function() {
            return music4;
        }),
    "music": ()=>Promise.resolve().then(function() {
            return music;
        }),
    "navigation-2-off": ()=>Promise.resolve().then(function() {
            return navigation2Off;
        }),
    "navigation-2": ()=>Promise.resolve().then(function() {
            return navigation2;
        }),
    "navigation-off": ()=>Promise.resolve().then(function() {
            return navigationOff;
        }),
    "navigation": ()=>Promise.resolve().then(function() {
            return navigation;
        }),
    "network": ()=>Promise.resolve().then(function() {
            return network;
        }),
    "newspaper": ()=>Promise.resolve().then(function() {
            return newspaper;
        }),
    "nfc": ()=>Promise.resolve().then(function() {
            return nfc;
        }),
    "nut-off": ()=>Promise.resolve().then(function() {
            return nutOff;
        }),
    "nut": ()=>Promise.resolve().then(function() {
            return nut;
        }),
    "octagon": ()=>Promise.resolve().then(function() {
            return octagon;
        }),
    "option": ()=>Promise.resolve().then(function() {
            return option;
        }),
    "orbit": ()=>Promise.resolve().then(function() {
            return orbit;
        }),
    "outdent": ()=>Promise.resolve().then(function() {
            return outdent;
        }),
    "package-2": ()=>Promise.resolve().then(function() {
            return package2;
        }),
    "package-check": ()=>Promise.resolve().then(function() {
            return packageCheck;
        }),
    "package-minus": ()=>Promise.resolve().then(function() {
            return packageMinus;
        }),
    "package-open": ()=>Promise.resolve().then(function() {
            return packageOpen;
        }),
    "package-plus": ()=>Promise.resolve().then(function() {
            return packagePlus;
        }),
    "package-search": ()=>Promise.resolve().then(function() {
            return packageSearch;
        }),
    "package-x": ()=>Promise.resolve().then(function() {
            return packageX;
        }),
    "package": ()=>Promise.resolve().then(function() {
            return _package;
        }),
    "paint-bucket": ()=>Promise.resolve().then(function() {
            return paintBucket;
        }),
    "paintbrush-2": ()=>Promise.resolve().then(function() {
            return paintbrush2;
        }),
    "paintbrush": ()=>Promise.resolve().then(function() {
            return paintbrush;
        }),
    "palette": ()=>Promise.resolve().then(function() {
            return palette;
        }),
    "palmtree": ()=>Promise.resolve().then(function() {
            return palmtree;
        }),
    "panel-bottom-close": ()=>Promise.resolve().then(function() {
            return panelBottomClose;
        }),
    "panel-bottom-inactive": ()=>Promise.resolve().then(function() {
            return panelBottomInactive;
        }),
    "panel-bottom-open": ()=>Promise.resolve().then(function() {
            return panelBottomOpen;
        }),
    "panel-bottom": ()=>Promise.resolve().then(function() {
            return panelBottom;
        }),
    "panel-left-close": ()=>Promise.resolve().then(function() {
            return panelLeftClose;
        }),
    "panel-left-inactive": ()=>Promise.resolve().then(function() {
            return panelLeftInactive;
        }),
    "panel-left-open": ()=>Promise.resolve().then(function() {
            return panelLeftOpen;
        }),
    "panel-left": ()=>Promise.resolve().then(function() {
            return panelLeft;
        }),
    "panel-right-close": ()=>Promise.resolve().then(function() {
            return panelRightClose;
        }),
    "panel-right-inactive": ()=>Promise.resolve().then(function() {
            return panelRightInactive;
        }),
    "panel-right-open": ()=>Promise.resolve().then(function() {
            return panelRightOpen;
        }),
    "panel-right": ()=>Promise.resolve().then(function() {
            return panelRight;
        }),
    "panel-top-close": ()=>Promise.resolve().then(function() {
            return panelTopClose;
        }),
    "panel-top-inactive": ()=>Promise.resolve().then(function() {
            return panelTopInactive;
        }),
    "panel-top-open": ()=>Promise.resolve().then(function() {
            return panelTopOpen;
        }),
    "panel-top": ()=>Promise.resolve().then(function() {
            return panelTop;
        }),
    "paperclip": ()=>Promise.resolve().then(function() {
            return paperclip;
        }),
    "parentheses": ()=>Promise.resolve().then(function() {
            return parentheses;
        }),
    "parking-circle-off": ()=>Promise.resolve().then(function() {
            return parkingCircleOff;
        }),
    "parking-circle": ()=>Promise.resolve().then(function() {
            return parkingCircle;
        }),
    "parking-square-off": ()=>Promise.resolve().then(function() {
            return parkingSquareOff;
        }),
    "parking-square": ()=>Promise.resolve().then(function() {
            return parkingSquare;
        }),
    "party-popper": ()=>Promise.resolve().then(function() {
            return partyPopper;
        }),
    "pause-circle": ()=>Promise.resolve().then(function() {
            return pauseCircle;
        }),
    "pause-octagon": ()=>Promise.resolve().then(function() {
            return pauseOctagon;
        }),
    "pause": ()=>Promise.resolve().then(function() {
            return pause;
        }),
    "pc-case": ()=>Promise.resolve().then(function() {
            return pcCase;
        }),
    "pen-tool": ()=>Promise.resolve().then(function() {
            return penTool;
        }),
    "pencil": ()=>Promise.resolve().then(function() {
            return pencil;
        }),
    "percent": ()=>Promise.resolve().then(function() {
            return percent;
        }),
    "person-standing": ()=>Promise.resolve().then(function() {
            return personStanding;
        }),
    "phone-call": ()=>Promise.resolve().then(function() {
            return phoneCall;
        }),
    "phone-forwarded": ()=>Promise.resolve().then(function() {
            return phoneForwarded;
        }),
    "phone-incoming": ()=>Promise.resolve().then(function() {
            return phoneIncoming;
        }),
    "phone-missed": ()=>Promise.resolve().then(function() {
            return phoneMissed;
        }),
    "phone-off": ()=>Promise.resolve().then(function() {
            return phoneOff;
        }),
    "phone-outgoing": ()=>Promise.resolve().then(function() {
            return phoneOutgoing;
        }),
    "phone": ()=>Promise.resolve().then(function() {
            return phone;
        }),
    "pi-square": ()=>Promise.resolve().then(function() {
            return piSquare;
        }),
    "pi": ()=>Promise.resolve().then(function() {
            return pi;
        }),
    "picture-in-picture-2": ()=>Promise.resolve().then(function() {
            return pictureInPicture2;
        }),
    "picture-in-picture": ()=>Promise.resolve().then(function() {
            return pictureInPicture;
        }),
    "pie-chart": ()=>Promise.resolve().then(function() {
            return pieChart;
        }),
    "piggy-bank": ()=>Promise.resolve().then(function() {
            return piggyBank;
        }),
    "pilcrow-square": ()=>Promise.resolve().then(function() {
            return pilcrowSquare;
        }),
    "pilcrow": ()=>Promise.resolve().then(function() {
            return pilcrow;
        }),
    "pill": ()=>Promise.resolve().then(function() {
            return pill;
        }),
    "pin-off": ()=>Promise.resolve().then(function() {
            return pinOff;
        }),
    "pin": ()=>Promise.resolve().then(function() {
            return pin;
        }),
    "pipette": ()=>Promise.resolve().then(function() {
            return pipette;
        }),
    "pizza": ()=>Promise.resolve().then(function() {
            return pizza;
        }),
    "plane-landing": ()=>Promise.resolve().then(function() {
            return planeLanding;
        }),
    "plane-takeoff": ()=>Promise.resolve().then(function() {
            return planeTakeoff;
        }),
    "plane": ()=>Promise.resolve().then(function() {
            return plane;
        }),
    "play-circle": ()=>Promise.resolve().then(function() {
            return playCircle;
        }),
    "play-square": ()=>Promise.resolve().then(function() {
            return playSquare;
        }),
    "play": ()=>Promise.resolve().then(function() {
            return play;
        }),
    "plug-2": ()=>Promise.resolve().then(function() {
            return plug2;
        }),
    "plug-zap-2": ()=>Promise.resolve().then(function() {
            return plugZap2;
        }),
    "plug-zap": ()=>Promise.resolve().then(function() {
            return plugZap;
        }),
    "plug": ()=>Promise.resolve().then(function() {
            return plug;
        }),
    "plus-circle": ()=>Promise.resolve().then(function() {
            return plusCircle;
        }),
    "plus-square": ()=>Promise.resolve().then(function() {
            return plusSquare;
        }),
    "plus": ()=>Promise.resolve().then(function() {
            return plus;
        }),
    "pocket-knife": ()=>Promise.resolve().then(function() {
            return pocketKnife;
        }),
    "pocket": ()=>Promise.resolve().then(function() {
            return pocket;
        }),
    "podcast": ()=>Promise.resolve().then(function() {
            return podcast;
        }),
    "pointer": ()=>Promise.resolve().then(function() {
            return pointer;
        }),
    "popcorn": ()=>Promise.resolve().then(function() {
            return popcorn;
        }),
    "popsicle": ()=>Promise.resolve().then(function() {
            return popsicle;
        }),
    "pound-sterling": ()=>Promise.resolve().then(function() {
            return poundSterling;
        }),
    "power-off": ()=>Promise.resolve().then(function() {
            return powerOff;
        }),
    "power": ()=>Promise.resolve().then(function() {
            return power;
        }),
    "presentation": ()=>Promise.resolve().then(function() {
            return presentation;
        }),
    "printer": ()=>Promise.resolve().then(function() {
            return printer;
        }),
    "projector": ()=>Promise.resolve().then(function() {
            return projector;
        }),
    "puzzle": ()=>Promise.resolve().then(function() {
            return puzzle;
        }),
    "qr-code": ()=>Promise.resolve().then(function() {
            return qrCode;
        }),
    "quote": ()=>Promise.resolve().then(function() {
            return quote;
        }),
    "radar": ()=>Promise.resolve().then(function() {
            return radar;
        }),
    "radiation": ()=>Promise.resolve().then(function() {
            return radiation;
        }),
    "radio-receiver": ()=>Promise.resolve().then(function() {
            return radioReceiver;
        }),
    "radio-tower": ()=>Promise.resolve().then(function() {
            return radioTower;
        }),
    "radio": ()=>Promise.resolve().then(function() {
            return radio;
        }),
    "rainbow": ()=>Promise.resolve().then(function() {
            return rainbow;
        }),
    "rat": ()=>Promise.resolve().then(function() {
            return rat;
        }),
    "receipt": ()=>Promise.resolve().then(function() {
            return receipt;
        }),
    "rectangle-horizontal": ()=>Promise.resolve().then(function() {
            return rectangleHorizontal;
        }),
    "rectangle-vertical": ()=>Promise.resolve().then(function() {
            return rectangleVertical;
        }),
    "recycle": ()=>Promise.resolve().then(function() {
            return recycle;
        }),
    "redo-2": ()=>Promise.resolve().then(function() {
            return redo2;
        }),
    "redo-dot": ()=>Promise.resolve().then(function() {
            return redoDot;
        }),
    "redo": ()=>Promise.resolve().then(function() {
            return redo;
        }),
    "refresh-ccw-dot": ()=>Promise.resolve().then(function() {
            return refreshCcwDot;
        }),
    "refresh-ccw": ()=>Promise.resolve().then(function() {
            return refreshCcw;
        }),
    "refresh-cw-off": ()=>Promise.resolve().then(function() {
            return refreshCwOff;
        }),
    "refresh-cw": ()=>Promise.resolve().then(function() {
            return refreshCw;
        }),
    "refrigerator": ()=>Promise.resolve().then(function() {
            return refrigerator;
        }),
    "regex": ()=>Promise.resolve().then(function() {
            return regex;
        }),
    "remove-formatting": ()=>Promise.resolve().then(function() {
            return removeFormatting;
        }),
    "repeat-1": ()=>Promise.resolve().then(function() {
            return repeat1;
        }),
    "repeat-2": ()=>Promise.resolve().then(function() {
            return repeat2;
        }),
    "repeat": ()=>Promise.resolve().then(function() {
            return repeat;
        }),
    "replace-all": ()=>Promise.resolve().then(function() {
            return replaceAll;
        }),
    "replace": ()=>Promise.resolve().then(function() {
            return replace;
        }),
    "reply-all": ()=>Promise.resolve().then(function() {
            return replyAll;
        }),
    "reply": ()=>Promise.resolve().then(function() {
            return reply;
        }),
    "rewind": ()=>Promise.resolve().then(function() {
            return rewind;
        }),
    "rocket": ()=>Promise.resolve().then(function() {
            return rocket;
        }),
    "rocking-chair": ()=>Promise.resolve().then(function() {
            return rockingChair;
        }),
    "roller-coaster": ()=>Promise.resolve().then(function() {
            return rollerCoaster;
        }),
    "rotate-3d": ()=>Promise.resolve().then(function() {
            return rotate3d;
        }),
    "rotate-ccw": ()=>Promise.resolve().then(function() {
            return rotateCcw;
        }),
    "rotate-cw": ()=>Promise.resolve().then(function() {
            return rotateCw;
        }),
    "router": ()=>Promise.resolve().then(function() {
            return router;
        }),
    "rows": ()=>Promise.resolve().then(function() {
            return rows;
        }),
    "rss": ()=>Promise.resolve().then(function() {
            return rss;
        }),
    "ruler": ()=>Promise.resolve().then(function() {
            return ruler;
        }),
    "russian-ruble": ()=>Promise.resolve().then(function() {
            return russianRuble;
        }),
    "sailboat": ()=>Promise.resolve().then(function() {
            return sailboat;
        }),
    "salad": ()=>Promise.resolve().then(function() {
            return salad;
        }),
    "sandwich": ()=>Promise.resolve().then(function() {
            return sandwich;
        }),
    "satellite-dish": ()=>Promise.resolve().then(function() {
            return satelliteDish;
        }),
    "satellite": ()=>Promise.resolve().then(function() {
            return satellite;
        }),
    "save-all": ()=>Promise.resolve().then(function() {
            return saveAll;
        }),
    "save": ()=>Promise.resolve().then(function() {
            return save;
        }),
    "scale-3d": ()=>Promise.resolve().then(function() {
            return scale3d;
        }),
    "scale": ()=>Promise.resolve().then(function() {
            return scale;
        }),
    "scaling": ()=>Promise.resolve().then(function() {
            return scaling;
        }),
    "scan-face": ()=>Promise.resolve().then(function() {
            return scanFace;
        }),
    "scan-line": ()=>Promise.resolve().then(function() {
            return scanLine;
        }),
    "scan": ()=>Promise.resolve().then(function() {
            return scan;
        }),
    "scatter-chart": ()=>Promise.resolve().then(function() {
            return scatterChart;
        }),
    "school-2": ()=>Promise.resolve().then(function() {
            return school2;
        }),
    "school": ()=>Promise.resolve().then(function() {
            return school;
        }),
    "scissors": ()=>Promise.resolve().then(function() {
            return scissors;
        }),
    "screen-share-off": ()=>Promise.resolve().then(function() {
            return screenShareOff;
        }),
    "screen-share": ()=>Promise.resolve().then(function() {
            return screenShare;
        }),
    "scroll-text": ()=>Promise.resolve().then(function() {
            return scrollText;
        }),
    "scroll": ()=>Promise.resolve().then(function() {
            return scroll;
        }),
    "search-check": ()=>Promise.resolve().then(function() {
            return searchCheck;
        }),
    "search-code": ()=>Promise.resolve().then(function() {
            return searchCode;
        }),
    "search-slash": ()=>Promise.resolve().then(function() {
            return searchSlash;
        }),
    "search-x": ()=>Promise.resolve().then(function() {
            return searchX;
        }),
    "search": ()=>Promise.resolve().then(function() {
            return search;
        }),
    "send": ()=>Promise.resolve().then(function() {
            return send;
        }),
    "separator-horizontal": ()=>Promise.resolve().then(function() {
            return separatorHorizontal;
        }),
    "separator-vertical": ()=>Promise.resolve().then(function() {
            return separatorVertical;
        }),
    "server-cog": ()=>Promise.resolve().then(function() {
            return serverCog;
        }),
    "server-crash": ()=>Promise.resolve().then(function() {
            return serverCrash;
        }),
    "server-off": ()=>Promise.resolve().then(function() {
            return serverOff;
        }),
    "server": ()=>Promise.resolve().then(function() {
            return server;
        }),
    "settings-2": ()=>Promise.resolve().then(function() {
            return settings2;
        }),
    "settings": ()=>Promise.resolve().then(function() {
            return settings;
        }),
    "shapes": ()=>Promise.resolve().then(function() {
            return shapes;
        }),
    "share-2": ()=>Promise.resolve().then(function() {
            return share2;
        }),
    "share": ()=>Promise.resolve().then(function() {
            return share;
        }),
    "sheet": ()=>Promise.resolve().then(function() {
            return sheet;
        }),
    "shield-alert": ()=>Promise.resolve().then(function() {
            return shieldAlert;
        }),
    "shield-check": ()=>Promise.resolve().then(function() {
            return shieldCheck;
        }),
    "shield-close": ()=>Promise.resolve().then(function() {
            return shieldClose;
        }),
    "shield-off": ()=>Promise.resolve().then(function() {
            return shieldOff;
        }),
    "shield-question": ()=>Promise.resolve().then(function() {
            return shieldQuestion;
        }),
    "shield": ()=>Promise.resolve().then(function() {
            return shield;
        }),
    "ship": ()=>Promise.resolve().then(function() {
            return ship;
        }),
    "shirt": ()=>Promise.resolve().then(function() {
            return shirt;
        }),
    "shopping-bag": ()=>Promise.resolve().then(function() {
            return shoppingBag;
        }),
    "shopping-cart": ()=>Promise.resolve().then(function() {
            return shoppingCart;
        }),
    "shovel": ()=>Promise.resolve().then(function() {
            return shovel;
        }),
    "shower-head": ()=>Promise.resolve().then(function() {
            return showerHead;
        }),
    "shrink": ()=>Promise.resolve().then(function() {
            return shrink;
        }),
    "shrub": ()=>Promise.resolve().then(function() {
            return shrub;
        }),
    "shuffle": ()=>Promise.resolve().then(function() {
            return shuffle;
        }),
    "sigma-square": ()=>Promise.resolve().then(function() {
            return sigmaSquare;
        }),
    "sigma": ()=>Promise.resolve().then(function() {
            return sigma;
        }),
    "signal-high": ()=>Promise.resolve().then(function() {
            return signalHigh;
        }),
    "signal-low": ()=>Promise.resolve().then(function() {
            return signalLow;
        }),
    "signal-medium": ()=>Promise.resolve().then(function() {
            return signalMedium;
        }),
    "signal-zero": ()=>Promise.resolve().then(function() {
            return signalZero;
        }),
    "signal": ()=>Promise.resolve().then(function() {
            return signal;
        }),
    "siren": ()=>Promise.resolve().then(function() {
            return siren;
        }),
    "skip-back": ()=>Promise.resolve().then(function() {
            return skipBack;
        }),
    "skip-forward": ()=>Promise.resolve().then(function() {
            return skipForward;
        }),
    "skull": ()=>Promise.resolve().then(function() {
            return skull;
        }),
    "slack": ()=>Promise.resolve().then(function() {
            return slack;
        }),
    "slice": ()=>Promise.resolve().then(function() {
            return slice;
        }),
    "sliders-horizontal": ()=>Promise.resolve().then(function() {
            return slidersHorizontal;
        }),
    "sliders": ()=>Promise.resolve().then(function() {
            return sliders;
        }),
    "smartphone-charging": ()=>Promise.resolve().then(function() {
            return smartphoneCharging;
        }),
    "smartphone-nfc": ()=>Promise.resolve().then(function() {
            return smartphoneNfc;
        }),
    "smartphone": ()=>Promise.resolve().then(function() {
            return smartphone;
        }),
    "smile-plus": ()=>Promise.resolve().then(function() {
            return smilePlus;
        }),
    "smile": ()=>Promise.resolve().then(function() {
            return smile;
        }),
    "snowflake": ()=>Promise.resolve().then(function() {
            return snowflake;
        }),
    "sofa": ()=>Promise.resolve().then(function() {
            return sofa;
        }),
    "soup": ()=>Promise.resolve().then(function() {
            return soup;
        }),
    "space": ()=>Promise.resolve().then(function() {
            return space;
        }),
    "spade": ()=>Promise.resolve().then(function() {
            return spade;
        }),
    "sparkle": ()=>Promise.resolve().then(function() {
            return sparkle;
        }),
    "sparkles": ()=>Promise.resolve().then(function() {
            return sparkles;
        }),
    "speaker": ()=>Promise.resolve().then(function() {
            return speaker;
        }),
    "spell-check-2": ()=>Promise.resolve().then(function() {
            return spellCheck2;
        }),
    "spell-check": ()=>Promise.resolve().then(function() {
            return spellCheck;
        }),
    "spline": ()=>Promise.resolve().then(function() {
            return spline;
        }),
    "split-square-horizontal": ()=>Promise.resolve().then(function() {
            return splitSquareHorizontal;
        }),
    "split-square-vertical": ()=>Promise.resolve().then(function() {
            return splitSquareVertical;
        }),
    "split": ()=>Promise.resolve().then(function() {
            return split;
        }),
    "spray-can": ()=>Promise.resolve().then(function() {
            return sprayCan;
        }),
    "sprout": ()=>Promise.resolve().then(function() {
            return sprout;
        }),
    "square-asterisk": ()=>Promise.resolve().then(function() {
            return squareAsterisk;
        }),
    "square-code": ()=>Promise.resolve().then(function() {
            return squareCode;
        }),
    "square-dashed-bottom-code": ()=>Promise.resolve().then(function() {
            return squareDashedBottomCode;
        }),
    "square-dashed-bottom": ()=>Promise.resolve().then(function() {
            return squareDashedBottom;
        }),
    "square-dot": ()=>Promise.resolve().then(function() {
            return squareDot;
        }),
    "square-equal": ()=>Promise.resolve().then(function() {
            return squareEqual;
        }),
    "square-slash": ()=>Promise.resolve().then(function() {
            return squareSlash;
        }),
    "square-stack": ()=>Promise.resolve().then(function() {
            return squareStack;
        }),
    "square": ()=>Promise.resolve().then(function() {
            return square;
        }),
    "squirrel": ()=>Promise.resolve().then(function() {
            return squirrel;
        }),
    "stamp": ()=>Promise.resolve().then(function() {
            return stamp;
        }),
    "star-half": ()=>Promise.resolve().then(function() {
            return starHalf;
        }),
    "star-off": ()=>Promise.resolve().then(function() {
            return starOff;
        }),
    "star": ()=>Promise.resolve().then(function() {
            return star;
        }),
    "step-back": ()=>Promise.resolve().then(function() {
            return stepBack;
        }),
    "step-forward": ()=>Promise.resolve().then(function() {
            return stepForward;
        }),
    "stethoscope": ()=>Promise.resolve().then(function() {
            return stethoscope;
        }),
    "sticker": ()=>Promise.resolve().then(function() {
            return sticker;
        }),
    "sticky-note": ()=>Promise.resolve().then(function() {
            return stickyNote;
        }),
    "stop-circle": ()=>Promise.resolve().then(function() {
            return stopCircle;
        }),
    "store": ()=>Promise.resolve().then(function() {
            return store;
        }),
    "stretch-horizontal": ()=>Promise.resolve().then(function() {
            return stretchHorizontal;
        }),
    "stretch-vertical": ()=>Promise.resolve().then(function() {
            return stretchVertical;
        }),
    "strikethrough": ()=>Promise.resolve().then(function() {
            return strikethrough;
        }),
    "subscript": ()=>Promise.resolve().then(function() {
            return subscript;
        }),
    "subtitles": ()=>Promise.resolve().then(function() {
            return subtitles;
        }),
    "sun-dim": ()=>Promise.resolve().then(function() {
            return sunDim;
        }),
    "sun-medium": ()=>Promise.resolve().then(function() {
            return sunMedium;
        }),
    "sun-moon": ()=>Promise.resolve().then(function() {
            return sunMoon;
        }),
    "sun-snow": ()=>Promise.resolve().then(function() {
            return sunSnow;
        }),
    "sun": ()=>Promise.resolve().then(function() {
            return sun;
        }),
    "sunrise": ()=>Promise.resolve().then(function() {
            return sunrise;
        }),
    "sunset": ()=>Promise.resolve().then(function() {
            return sunset;
        }),
    "superscript": ()=>Promise.resolve().then(function() {
            return superscript;
        }),
    "swiss-franc": ()=>Promise.resolve().then(function() {
            return swissFranc;
        }),
    "switch-camera": ()=>Promise.resolve().then(function() {
            return switchCamera;
        }),
    "sword": ()=>Promise.resolve().then(function() {
            return sword;
        }),
    "swords": ()=>Promise.resolve().then(function() {
            return swords;
        }),
    "syringe": ()=>Promise.resolve().then(function() {
            return syringe;
        }),
    "table-2": ()=>Promise.resolve().then(function() {
            return table2;
        }),
    "table-properties": ()=>Promise.resolve().then(function() {
            return tableProperties;
        }),
    "table": ()=>Promise.resolve().then(function() {
            return table;
        }),
    "tablet": ()=>Promise.resolve().then(function() {
            return tablet;
        }),
    "tablets": ()=>Promise.resolve().then(function() {
            return tablets;
        }),
    "tag": ()=>Promise.resolve().then(function() {
            return tag;
        }),
    "tags": ()=>Promise.resolve().then(function() {
            return tags;
        }),
    "tally-1": ()=>Promise.resolve().then(function() {
            return tally1;
        }),
    "tally-2": ()=>Promise.resolve().then(function() {
            return tally2;
        }),
    "tally-3": ()=>Promise.resolve().then(function() {
            return tally3;
        }),
    "tally-4": ()=>Promise.resolve().then(function() {
            return tally4;
        }),
    "tally-5": ()=>Promise.resolve().then(function() {
            return tally5;
        }),
    "target": ()=>Promise.resolve().then(function() {
            return target;
        }),
    "tent": ()=>Promise.resolve().then(function() {
            return tent;
        }),
    "terminal-square": ()=>Promise.resolve().then(function() {
            return terminalSquare;
        }),
    "terminal": ()=>Promise.resolve().then(function() {
            return terminal;
        }),
    "test-tube-2": ()=>Promise.resolve().then(function() {
            return testTube2;
        }),
    "test-tube": ()=>Promise.resolve().then(function() {
            return testTube;
        }),
    "test-tubes": ()=>Promise.resolve().then(function() {
            return testTubes;
        }),
    "text-cursor-input": ()=>Promise.resolve().then(function() {
            return textCursorInput;
        }),
    "text-cursor": ()=>Promise.resolve().then(function() {
            return textCursor;
        }),
    "text-quote": ()=>Promise.resolve().then(function() {
            return textQuote;
        }),
    "text-select": ()=>Promise.resolve().then(function() {
            return textSelect;
        }),
    "text": ()=>Promise.resolve().then(function() {
            return text;
        }),
    "thermometer-snowflake": ()=>Promise.resolve().then(function() {
            return thermometerSnowflake;
        }),
    "thermometer-sun": ()=>Promise.resolve().then(function() {
            return thermometerSun;
        }),
    "thermometer": ()=>Promise.resolve().then(function() {
            return thermometer;
        }),
    "thumbs-down": ()=>Promise.resolve().then(function() {
            return thumbsDown;
        }),
    "thumbs-up": ()=>Promise.resolve().then(function() {
            return thumbsUp;
        }),
    "ticket": ()=>Promise.resolve().then(function() {
            return ticket;
        }),
    "timer-off": ()=>Promise.resolve().then(function() {
            return timerOff;
        }),
    "timer-reset": ()=>Promise.resolve().then(function() {
            return timerReset;
        }),
    "timer": ()=>Promise.resolve().then(function() {
            return timer;
        }),
    "toggle-left": ()=>Promise.resolve().then(function() {
            return toggleLeft;
        }),
    "toggle-right": ()=>Promise.resolve().then(function() {
            return toggleRight;
        }),
    "tornado": ()=>Promise.resolve().then(function() {
            return tornado;
        }),
    "touchpad-off": ()=>Promise.resolve().then(function() {
            return touchpadOff;
        }),
    "touchpad": ()=>Promise.resolve().then(function() {
            return touchpad;
        }),
    "tower-control": ()=>Promise.resolve().then(function() {
            return towerControl;
        }),
    "toy-brick": ()=>Promise.resolve().then(function() {
            return toyBrick;
        }),
    "train": ()=>Promise.resolve().then(function() {
            return train;
        }),
    "trash-2": ()=>Promise.resolve().then(function() {
            return trash2;
        }),
    "trash": ()=>Promise.resolve().then(function() {
            return trash;
        }),
    "tree-deciduous": ()=>Promise.resolve().then(function() {
            return treeDeciduous;
        }),
    "tree-pine": ()=>Promise.resolve().then(function() {
            return treePine;
        }),
    "trees": ()=>Promise.resolve().then(function() {
            return trees;
        }),
    "trello": ()=>Promise.resolve().then(function() {
            return trello;
        }),
    "trending-down": ()=>Promise.resolve().then(function() {
            return trendingDown;
        }),
    "trending-up": ()=>Promise.resolve().then(function() {
            return trendingUp;
        }),
    "triangle": ()=>Promise.resolve().then(function() {
            return triangle;
        }),
    "trophy": ()=>Promise.resolve().then(function() {
            return trophy;
        }),
    "truck": ()=>Promise.resolve().then(function() {
            return truck;
        }),
    "tv-2": ()=>Promise.resolve().then(function() {
            return tv2;
        }),
    "tv": ()=>Promise.resolve().then(function() {
            return tv;
        }),
    "twitch": ()=>Promise.resolve().then(function() {
            return twitch;
        }),
    "twitter": ()=>Promise.resolve().then(function() {
            return twitter;
        }),
    "type": ()=>Promise.resolve().then(function() {
            return type;
        }),
    "umbrella": ()=>Promise.resolve().then(function() {
            return umbrella;
        }),
    "underline": ()=>Promise.resolve().then(function() {
            return underline;
        }),
    "undo-2": ()=>Promise.resolve().then(function() {
            return undo2;
        }),
    "undo-dot": ()=>Promise.resolve().then(function() {
            return undoDot;
        }),
    "undo": ()=>Promise.resolve().then(function() {
            return undo;
        }),
    "unfold-horizontal": ()=>Promise.resolve().then(function() {
            return unfoldHorizontal;
        }),
    "unfold-vertical": ()=>Promise.resolve().then(function() {
            return unfoldVertical;
        }),
    "ungroup": ()=>Promise.resolve().then(function() {
            return ungroup;
        }),
    "unlink-2": ()=>Promise.resolve().then(function() {
            return unlink2;
        }),
    "unlink": ()=>Promise.resolve().then(function() {
            return unlink;
        }),
    "unlock": ()=>Promise.resolve().then(function() {
            return unlock;
        }),
    "unplug": ()=>Promise.resolve().then(function() {
            return unplug;
        }),
    "upload-cloud": ()=>Promise.resolve().then(function() {
            return uploadCloud;
        }),
    "upload": ()=>Promise.resolve().then(function() {
            return upload;
        }),
    "usb": ()=>Promise.resolve().then(function() {
            return usb;
        }),
    "user-2": ()=>Promise.resolve().then(function() {
            return user2;
        }),
    "user-check-2": ()=>Promise.resolve().then(function() {
            return userCheck2;
        }),
    "user-check": ()=>Promise.resolve().then(function() {
            return userCheck;
        }),
    "user-circle-2": ()=>Promise.resolve().then(function() {
            return userCircle2;
        }),
    "user-circle": ()=>Promise.resolve().then(function() {
            return userCircle;
        }),
    "user-cog-2": ()=>Promise.resolve().then(function() {
            return userCog2;
        }),
    "user-cog": ()=>Promise.resolve().then(function() {
            return userCog;
        }),
    "user-minus-2": ()=>Promise.resolve().then(function() {
            return userMinus2;
        }),
    "user-minus": ()=>Promise.resolve().then(function() {
            return userMinus;
        }),
    "user-plus-2": ()=>Promise.resolve().then(function() {
            return userPlus2;
        }),
    "user-plus": ()=>Promise.resolve().then(function() {
            return userPlus;
        }),
    "user-square-2": ()=>Promise.resolve().then(function() {
            return userSquare2;
        }),
    "user-square": ()=>Promise.resolve().then(function() {
            return userSquare;
        }),
    "user-x-2": ()=>Promise.resolve().then(function() {
            return userX2;
        }),
    "user-x": ()=>Promise.resolve().then(function() {
            return userX;
        }),
    "user": ()=>Promise.resolve().then(function() {
            return user;
        }),
    "users-2": ()=>Promise.resolve().then(function() {
            return users2;
        }),
    "users": ()=>Promise.resolve().then(function() {
            return users;
        }),
    "utensils-crossed": ()=>Promise.resolve().then(function() {
            return utensilsCrossed;
        }),
    "utensils": ()=>Promise.resolve().then(function() {
            return utensils;
        }),
    "utility-pole": ()=>Promise.resolve().then(function() {
            return utilityPole;
        }),
    "variable": ()=>Promise.resolve().then(function() {
            return variable;
        }),
    "vegan": ()=>Promise.resolve().then(function() {
            return vegan;
        }),
    "venetian-mask": ()=>Promise.resolve().then(function() {
            return venetianMask;
        }),
    "vibrate-off": ()=>Promise.resolve().then(function() {
            return vibrateOff;
        }),
    "vibrate": ()=>Promise.resolve().then(function() {
            return vibrate;
        }),
    "video-off": ()=>Promise.resolve().then(function() {
            return videoOff;
        }),
    "video": ()=>Promise.resolve().then(function() {
            return video;
        }),
    "videotape": ()=>Promise.resolve().then(function() {
            return videotape;
        }),
    "view": ()=>Promise.resolve().then(function() {
            return view;
        }),
    "voicemail": ()=>Promise.resolve().then(function() {
            return voicemail;
        }),
    "volume-1": ()=>Promise.resolve().then(function() {
            return volume1;
        }),
    "volume-2": ()=>Promise.resolve().then(function() {
            return volume2;
        }),
    "volume-x": ()=>Promise.resolve().then(function() {
            return volumeX;
        }),
    "volume": ()=>Promise.resolve().then(function() {
            return volume;
        }),
    "vote": ()=>Promise.resolve().then(function() {
            return vote;
        }),
    "wallet-2": ()=>Promise.resolve().then(function() {
            return wallet2;
        }),
    "wallet-cards": ()=>Promise.resolve().then(function() {
            return walletCards;
        }),
    "wallet": ()=>Promise.resolve().then(function() {
            return wallet;
        }),
    "wallpaper": ()=>Promise.resolve().then(function() {
            return wallpaper;
        }),
    "wand-2": ()=>Promise.resolve().then(function() {
            return wand2;
        }),
    "wand": ()=>Promise.resolve().then(function() {
            return wand;
        }),
    "warehouse": ()=>Promise.resolve().then(function() {
            return warehouse;
        }),
    "watch": ()=>Promise.resolve().then(function() {
            return watch;
        }),
    "waves": ()=>Promise.resolve().then(function() {
            return waves;
        }),
    "webcam": ()=>Promise.resolve().then(function() {
            return webcam;
        }),
    "webhook": ()=>Promise.resolve().then(function() {
            return webhook;
        }),
    "wheat-off": ()=>Promise.resolve().then(function() {
            return wheatOff;
        }),
    "wheat": ()=>Promise.resolve().then(function() {
            return wheat;
        }),
    "whole-word": ()=>Promise.resolve().then(function() {
            return wholeWord;
        }),
    "wifi-off": ()=>Promise.resolve().then(function() {
            return wifiOff;
        }),
    "wifi": ()=>Promise.resolve().then(function() {
            return wifi;
        }),
    "wind": ()=>Promise.resolve().then(function() {
            return wind;
        }),
    "wine-off": ()=>Promise.resolve().then(function() {
            return wineOff;
        }),
    "wine": ()=>Promise.resolve().then(function() {
            return wine;
        }),
    "workflow": ()=>Promise.resolve().then(function() {
            return workflow;
        }),
    "wrap-text": ()=>Promise.resolve().then(function() {
            return wrapText;
        }),
    "wrench": ()=>Promise.resolve().then(function() {
            return wrench;
        }),
    "x-circle": ()=>Promise.resolve().then(function() {
            return xCircle;
        }),
    "x-octagon": ()=>Promise.resolve().then(function() {
            return xOctagon;
        }),
    "x-square": ()=>Promise.resolve().then(function() {
            return xSquare;
        }),
    "x": ()=>Promise.resolve().then(function() {
            return x;
        }),
    "youtube": ()=>Promise.resolve().then(function() {
            return youtube;
        }),
    "zap-off": ()=>Promise.resolve().then(function() {
            return zapOff;
        }),
    "zap": ()=>Promise.resolve().then(function() {
            return zap;
        }),
    "zoom-in": ()=>Promise.resolve().then(function() {
            return zoomIn;
        }),
    "zoom-out": ()=>Promise.resolve().then(function() {
            return zoomOut;
        })
};
__webpack_unused_export__ = Accessibility;
__webpack_unused_export__ = Accessibility;
__webpack_unused_export__ = Activity;
__webpack_unused_export__ = Activity;
__webpack_unused_export__ = ActivitySquare;
__webpack_unused_export__ = ActivitySquare;
__webpack_unused_export__ = AirVent;
__webpack_unused_export__ = AirVent;
__webpack_unused_export__ = Airplay;
__webpack_unused_export__ = Airplay;
__webpack_unused_export__ = AlarmCheck;
__webpack_unused_export__ = AlarmCheck;
__webpack_unused_export__ = AlarmClock;
__webpack_unused_export__ = AlarmClock;
__webpack_unused_export__ = AlarmClockOff;
__webpack_unused_export__ = AlarmClockOff;
__webpack_unused_export__ = AlarmMinus;
__webpack_unused_export__ = AlarmMinus;
__webpack_unused_export__ = AlarmPlus;
__webpack_unused_export__ = AlarmPlus;
__webpack_unused_export__ = Album;
__webpack_unused_export__ = Album;
__webpack_unused_export__ = AlertCircle;
__webpack_unused_export__ = AlertCircle;
__webpack_unused_export__ = AlertOctagon;
__webpack_unused_export__ = AlertOctagon;
__webpack_unused_export__ = AlertTriangle;
__webpack_unused_export__ = AlertTriangle;
__webpack_unused_export__ = AlignCenter;
__webpack_unused_export__ = AlignCenterHorizontal;
__webpack_unused_export__ = AlignCenterHorizontal;
__webpack_unused_export__ = AlignCenter;
__webpack_unused_export__ = AlignCenterVertical;
__webpack_unused_export__ = AlignCenterVertical;
__webpack_unused_export__ = AlignEndHorizontal;
__webpack_unused_export__ = AlignEndHorizontal;
__webpack_unused_export__ = AlignEndVertical;
__webpack_unused_export__ = AlignEndVertical;
__webpack_unused_export__ = AlignHorizontalDistributeCenter;
__webpack_unused_export__ = AlignHorizontalDistributeCenter;
__webpack_unused_export__ = AlignHorizontalDistributeEnd;
__webpack_unused_export__ = AlignHorizontalDistributeEnd;
__webpack_unused_export__ = AlignHorizontalDistributeStart;
__webpack_unused_export__ = AlignHorizontalDistributeStart;
__webpack_unused_export__ = AlignHorizontalJustifyCenter;
__webpack_unused_export__ = AlignHorizontalJustifyCenter;
__webpack_unused_export__ = AlignHorizontalJustifyEnd;
__webpack_unused_export__ = AlignHorizontalJustifyEnd;
__webpack_unused_export__ = AlignHorizontalJustifyStart;
__webpack_unused_export__ = AlignHorizontalJustifyStart;
__webpack_unused_export__ = AlignHorizontalSpaceAround;
__webpack_unused_export__ = AlignHorizontalSpaceAround;
__webpack_unused_export__ = AlignHorizontalSpaceBetween;
__webpack_unused_export__ = AlignHorizontalSpaceBetween;
__webpack_unused_export__ = AlignJustify;
__webpack_unused_export__ = AlignJustify;
__webpack_unused_export__ = AlignLeft;
__webpack_unused_export__ = AlignLeft;
__webpack_unused_export__ = AlignRight;
__webpack_unused_export__ = AlignRight;
__webpack_unused_export__ = AlignStartHorizontal;
__webpack_unused_export__ = AlignStartHorizontal;
__webpack_unused_export__ = AlignStartVertical;
__webpack_unused_export__ = AlignStartVertical;
__webpack_unused_export__ = AlignVerticalDistributeCenter;
__webpack_unused_export__ = AlignVerticalDistributeCenter;
__webpack_unused_export__ = AlignVerticalDistributeEnd;
__webpack_unused_export__ = AlignVerticalDistributeEnd;
__webpack_unused_export__ = AlignVerticalDistributeStart;
__webpack_unused_export__ = AlignVerticalDistributeStart;
__webpack_unused_export__ = AlignVerticalJustifyCenter;
__webpack_unused_export__ = AlignVerticalJustifyCenter;
__webpack_unused_export__ = AlignVerticalJustifyEnd;
__webpack_unused_export__ = AlignVerticalJustifyEnd;
__webpack_unused_export__ = AlignVerticalJustifyStart;
__webpack_unused_export__ = AlignVerticalJustifyStart;
__webpack_unused_export__ = AlignVerticalSpaceAround;
__webpack_unused_export__ = AlignVerticalSpaceAround;
__webpack_unused_export__ = AlignVerticalSpaceBetween;
__webpack_unused_export__ = AlignVerticalSpaceBetween;
__webpack_unused_export__ = Ampersand;
__webpack_unused_export__ = Ampersand;
__webpack_unused_export__ = Ampersands;
__webpack_unused_export__ = Ampersands;
__webpack_unused_export__ = Anchor;
__webpack_unused_export__ = Anchor;
__webpack_unused_export__ = Angry;
__webpack_unused_export__ = Angry;
__webpack_unused_export__ = Annoyed;
__webpack_unused_export__ = Annoyed;
__webpack_unused_export__ = Aperture;
__webpack_unused_export__ = Aperture;
__webpack_unused_export__ = AppWindow;
__webpack_unused_export__ = AppWindow;
__webpack_unused_export__ = Apple;
__webpack_unused_export__ = Apple;
__webpack_unused_export__ = Archive;
__webpack_unused_export__ = Archive;
__webpack_unused_export__ = ArchiveRestore;
__webpack_unused_export__ = ArchiveRestore;
__webpack_unused_export__ = AreaChart;
__webpack_unused_export__ = AreaChart;
__webpack_unused_export__ = Armchair;
__webpack_unused_export__ = Armchair;
__webpack_unused_export__ = ArrowBigDown;
__webpack_unused_export__ = ArrowBigDownDash;
__webpack_unused_export__ = ArrowBigDownDash;
__webpack_unused_export__ = ArrowBigDown;
__webpack_unused_export__ = ArrowBigLeft;
__webpack_unused_export__ = ArrowBigLeftDash;
__webpack_unused_export__ = ArrowBigLeftDash;
__webpack_unused_export__ = ArrowBigLeft;
__webpack_unused_export__ = ArrowBigRight;
__webpack_unused_export__ = ArrowBigRightDash;
__webpack_unused_export__ = ArrowBigRightDash;
__webpack_unused_export__ = ArrowBigRight;
__webpack_unused_export__ = ArrowBigUp;
__webpack_unused_export__ = ArrowBigUpDash;
__webpack_unused_export__ = ArrowBigUpDash;
__webpack_unused_export__ = ArrowBigUp;
__webpack_unused_export__ = ArrowDown;
__webpack_unused_export__ = ArrowDown01;
__webpack_unused_export__ = ArrowDown01;
__webpack_unused_export__ = ArrowDown10;
__webpack_unused_export__ = ArrowDown10;
__webpack_unused_export__ = ArrowDownAZ;
__webpack_unused_export__ = ArrowDownAZ;
__webpack_unused_export__ = ArrowDownCircle;
__webpack_unused_export__ = ArrowDownCircle;
__webpack_unused_export__ = ArrowDownFromLine;
__webpack_unused_export__ = ArrowDownFromLine;
__webpack_unused_export__ = ArrowDown;
__webpack_unused_export__ = ArrowDownLeft;
__webpack_unused_export__ = ArrowDownLeftFromCircle;
__webpack_unused_export__ = ArrowDownLeftFromCircle;
__webpack_unused_export__ = ArrowDownLeft;
__webpack_unused_export__ = ArrowDownLeftSquare;
__webpack_unused_export__ = ArrowDownLeftSquare;
__webpack_unused_export__ = ArrowDownNarrowWide;
__webpack_unused_export__ = ArrowDownNarrowWide;
__webpack_unused_export__ = ArrowDownRight;
__webpack_unused_export__ = ArrowDownRightFromCircle;
__webpack_unused_export__ = ArrowDownRightFromCircle;
__webpack_unused_export__ = ArrowDownRight;
__webpack_unused_export__ = ArrowDownRightSquare;
__webpack_unused_export__ = ArrowDownRightSquare;
__webpack_unused_export__ = ArrowDownSquare;
__webpack_unused_export__ = ArrowDownSquare;
__webpack_unused_export__ = ArrowDownToDot;
__webpack_unused_export__ = ArrowDownToDot;
__webpack_unused_export__ = ArrowDownToLine;
__webpack_unused_export__ = ArrowDownToLine;
__webpack_unused_export__ = ArrowDownUp;
__webpack_unused_export__ = ArrowDownUp;
__webpack_unused_export__ = ArrowDownWideNarrow;
__webpack_unused_export__ = ArrowDownWideNarrow;
__webpack_unused_export__ = ArrowDownZA;
__webpack_unused_export__ = ArrowDownZA;
__webpack_unused_export__ = ArrowLeft;
__webpack_unused_export__ = ArrowLeftCircle;
__webpack_unused_export__ = ArrowLeftCircle;
__webpack_unused_export__ = ArrowLeftFromLine;
__webpack_unused_export__ = ArrowLeftFromLine;
__webpack_unused_export__ = ArrowLeft;
__webpack_unused_export__ = ArrowLeftRight;
__webpack_unused_export__ = ArrowLeftRight;
__webpack_unused_export__ = ArrowLeftSquare;
__webpack_unused_export__ = ArrowLeftSquare;
__webpack_unused_export__ = ArrowLeftToLine;
__webpack_unused_export__ = ArrowLeftToLine;
__webpack_unused_export__ = ArrowRight;
__webpack_unused_export__ = ArrowRightCircle;
__webpack_unused_export__ = ArrowRightCircle;
__webpack_unused_export__ = ArrowRightFromLine;
__webpack_unused_export__ = ArrowRightFromLine;
__webpack_unused_export__ = ArrowRight;
__webpack_unused_export__ = ArrowRightLeft;
__webpack_unused_export__ = ArrowRightLeft;
__webpack_unused_export__ = ArrowRightSquare;
__webpack_unused_export__ = ArrowRightSquare;
__webpack_unused_export__ = ArrowRightToLine;
__webpack_unused_export__ = ArrowRightToLine;
__webpack_unused_export__ = ArrowUp;
__webpack_unused_export__ = ArrowUp01;
__webpack_unused_export__ = ArrowUp01;
__webpack_unused_export__ = ArrowUp10;
__webpack_unused_export__ = ArrowUp10;
__webpack_unused_export__ = ArrowUpAZ;
__webpack_unused_export__ = ArrowUpAZ;
__webpack_unused_export__ = ArrowUpCircle;
__webpack_unused_export__ = ArrowUpCircle;
__webpack_unused_export__ = ArrowUpDown;
__webpack_unused_export__ = ArrowUpDown;
__webpack_unused_export__ = ArrowUpFromDot;
__webpack_unused_export__ = ArrowUpFromDot;
__webpack_unused_export__ = ArrowUpFromLine;
__webpack_unused_export__ = ArrowUpFromLine;
__webpack_unused_export__ = ArrowUp;
__webpack_unused_export__ = ArrowUpLeft;
__webpack_unused_export__ = ArrowUpLeftFromCircle;
__webpack_unused_export__ = ArrowUpLeftFromCircle;
__webpack_unused_export__ = ArrowUpLeft;
__webpack_unused_export__ = ArrowUpLeftSquare;
__webpack_unused_export__ = ArrowUpLeftSquare;
__webpack_unused_export__ = ArrowUpNarrowWide;
__webpack_unused_export__ = ArrowUpNarrowWide;
__webpack_unused_export__ = ArrowUpRight;
__webpack_unused_export__ = ArrowUpRightFromCircle;
__webpack_unused_export__ = ArrowUpRightFromCircle;
__webpack_unused_export__ = ArrowUpRight;
__webpack_unused_export__ = ArrowUpRightSquare;
__webpack_unused_export__ = ArrowUpRightSquare;
__webpack_unused_export__ = ArrowUpSquare;
__webpack_unused_export__ = ArrowUpSquare;
__webpack_unused_export__ = ArrowUpToLine;
__webpack_unused_export__ = ArrowUpToLine;
__webpack_unused_export__ = ArrowUpWideNarrow;
__webpack_unused_export__ = ArrowUpWideNarrow;
__webpack_unused_export__ = ArrowUpZA;
__webpack_unused_export__ = ArrowUpZA;
__webpack_unused_export__ = ArrowsUpFromLine;
__webpack_unused_export__ = ArrowsUpFromLine;
__webpack_unused_export__ = Asterisk;
__webpack_unused_export__ = Asterisk;
__webpack_unused_export__ = AtSign;
__webpack_unused_export__ = AtSign;
__webpack_unused_export__ = Atom;
__webpack_unused_export__ = Atom;
__webpack_unused_export__ = Award;
__webpack_unused_export__ = Award;
__webpack_unused_export__ = Axe;
__webpack_unused_export__ = Axe;
__webpack_unused_export__ = Axis3d;
__webpack_unused_export__ = Axis3d;
__webpack_unused_export__ = Baby;
__webpack_unused_export__ = Baby;
__webpack_unused_export__ = Backpack;
__webpack_unused_export__ = Backpack;
__webpack_unused_export__ = Badge;
__webpack_unused_export__ = BadgeAlert;
__webpack_unused_export__ = BadgeAlert;
__webpack_unused_export__ = BadgeCheck;
__webpack_unused_export__ = BadgeCheck;
__webpack_unused_export__ = BadgeDollarSign;
__webpack_unused_export__ = BadgeDollarSign;
__webpack_unused_export__ = BadgeHelp;
__webpack_unused_export__ = BadgeHelp;
__webpack_unused_export__ = Badge;
__webpack_unused_export__ = BadgeInfo;
__webpack_unused_export__ = BadgeInfo;
__webpack_unused_export__ = BadgeMinus;
__webpack_unused_export__ = BadgeMinus;
__webpack_unused_export__ = BadgePercent;
__webpack_unused_export__ = BadgePercent;
__webpack_unused_export__ = BadgePlus;
__webpack_unused_export__ = BadgePlus;
__webpack_unused_export__ = BadgeX;
__webpack_unused_export__ = BadgeX;
__webpack_unused_export__ = BaggageClaim;
__webpack_unused_export__ = BaggageClaim;
__webpack_unused_export__ = Ban;
__webpack_unused_export__ = Ban;
__webpack_unused_export__ = Banana;
__webpack_unused_export__ = Banana;
__webpack_unused_export__ = Banknote;
__webpack_unused_export__ = Banknote;
__webpack_unused_export__ = BarChart;
__webpack_unused_export__ = BarChart2;
__webpack_unused_export__ = BarChart2;
__webpack_unused_export__ = BarChart3;
__webpack_unused_export__ = BarChart3;
__webpack_unused_export__ = BarChart4;
__webpack_unused_export__ = BarChart4;
__webpack_unused_export__ = BarChartBig;
__webpack_unused_export__ = BarChartBig;
__webpack_unused_export__ = BarChartHorizontal;
__webpack_unused_export__ = BarChartHorizontalBig;
__webpack_unused_export__ = BarChartHorizontalBig;
__webpack_unused_export__ = BarChartHorizontal;
__webpack_unused_export__ = BarChart;
__webpack_unused_export__ = Baseline;
__webpack_unused_export__ = Baseline;
__webpack_unused_export__ = Bath;
__webpack_unused_export__ = Bath;
__webpack_unused_export__ = Battery;
__webpack_unused_export__ = BatteryCharging;
__webpack_unused_export__ = BatteryCharging;
__webpack_unused_export__ = BatteryFull;
__webpack_unused_export__ = BatteryFull;
__webpack_unused_export__ = Battery;
__webpack_unused_export__ = BatteryLow;
__webpack_unused_export__ = BatteryLow;
__webpack_unused_export__ = BatteryMedium;
__webpack_unused_export__ = BatteryMedium;
__webpack_unused_export__ = BatteryWarning;
__webpack_unused_export__ = BatteryWarning;
__webpack_unused_export__ = Beaker;
__webpack_unused_export__ = Beaker;
__webpack_unused_export__ = Bean;
__webpack_unused_export__ = Bean;
__webpack_unused_export__ = BeanOff;
__webpack_unused_export__ = BeanOff;
__webpack_unused_export__ = Bed;
__webpack_unused_export__ = BedDouble;
__webpack_unused_export__ = BedDouble;
__webpack_unused_export__ = Bed;
__webpack_unused_export__ = BedSingle;
__webpack_unused_export__ = BedSingle;
__webpack_unused_export__ = Beef;
__webpack_unused_export__ = Beef;
__webpack_unused_export__ = Beer;
__webpack_unused_export__ = Beer;
__webpack_unused_export__ = Bell;
__webpack_unused_export__ = BellDot;
__webpack_unused_export__ = BellDot;
__webpack_unused_export__ = Bell;
__webpack_unused_export__ = BellMinus;
__webpack_unused_export__ = BellMinus;
__webpack_unused_export__ = BellOff;
__webpack_unused_export__ = BellOff;
__webpack_unused_export__ = BellPlus;
__webpack_unused_export__ = BellPlus;
__webpack_unused_export__ = BellRing;
__webpack_unused_export__ = BellRing;
__webpack_unused_export__ = Bike;
__webpack_unused_export__ = Bike;
__webpack_unused_export__ = Binary;
__webpack_unused_export__ = Binary;
__webpack_unused_export__ = Biohazard;
__webpack_unused_export__ = Biohazard;
__webpack_unused_export__ = Bird;
__webpack_unused_export__ = Bird;
__webpack_unused_export__ = Bitcoin;
__webpack_unused_export__ = Bitcoin;
__webpack_unused_export__ = Blinds;
__webpack_unused_export__ = Blinds;
__webpack_unused_export__ = Bluetooth;
__webpack_unused_export__ = BluetoothConnected;
__webpack_unused_export__ = BluetoothConnected;
__webpack_unused_export__ = Bluetooth;
__webpack_unused_export__ = BluetoothOff;
__webpack_unused_export__ = BluetoothOff;
__webpack_unused_export__ = BluetoothSearching;
__webpack_unused_export__ = BluetoothSearching;
__webpack_unused_export__ = Bold;
__webpack_unused_export__ = Bold;
__webpack_unused_export__ = Bomb;
__webpack_unused_export__ = Bomb;
__webpack_unused_export__ = Bone;
__webpack_unused_export__ = Bone;
__webpack_unused_export__ = Book;
__webpack_unused_export__ = BookCopy;
__webpack_unused_export__ = BookCopy;
__webpack_unused_export__ = BookDown;
__webpack_unused_export__ = BookDown;
__webpack_unused_export__ = Book;
__webpack_unused_export__ = BookKey;
__webpack_unused_export__ = BookKey;
__webpack_unused_export__ = BookLock;
__webpack_unused_export__ = BookLock;
__webpack_unused_export__ = BookMarked;
__webpack_unused_export__ = BookMarked;
__webpack_unused_export__ = BookMinus;
__webpack_unused_export__ = BookMinus;
__webpack_unused_export__ = BookOpen;
__webpack_unused_export__ = BookOpenCheck;
__webpack_unused_export__ = BookOpenCheck;
__webpack_unused_export__ = BookOpen;
__webpack_unused_export__ = BookPlus;
__webpack_unused_export__ = BookPlus;
__webpack_unused_export__ = BookTemplate;
__webpack_unused_export__ = BookTemplate;
__webpack_unused_export__ = BookUp;
__webpack_unused_export__ = BookUp2;
__webpack_unused_export__ = BookUp2;
__webpack_unused_export__ = BookUp;
__webpack_unused_export__ = BookX;
__webpack_unused_export__ = BookX;
__webpack_unused_export__ = Bookmark;
__webpack_unused_export__ = Bookmark;
__webpack_unused_export__ = BookmarkMinus;
__webpack_unused_export__ = BookmarkMinus;
__webpack_unused_export__ = BookmarkPlus;
__webpack_unused_export__ = BookmarkPlus;
__webpack_unused_export__ = Bot;
__webpack_unused_export__ = Bot;
__webpack_unused_export__ = Box;
__webpack_unused_export__ = Box;
__webpack_unused_export__ = BoxSelect;
__webpack_unused_export__ = BoxSelect;
__webpack_unused_export__ = Boxes;
__webpack_unused_export__ = Boxes;
__webpack_unused_export__ = Braces;
__webpack_unused_export__ = Braces;
__webpack_unused_export__ = Brackets;
__webpack_unused_export__ = Brackets;
__webpack_unused_export__ = Brain;
__webpack_unused_export__ = BrainCircuit;
__webpack_unused_export__ = BrainCircuit;
__webpack_unused_export__ = BrainCog;
__webpack_unused_export__ = BrainCog;
__webpack_unused_export__ = Brain;
__webpack_unused_export__ = Briefcase;
__webpack_unused_export__ = Briefcase;
__webpack_unused_export__ = Brush;
__webpack_unused_export__ = Brush;
__webpack_unused_export__ = Bug;
__webpack_unused_export__ = Bug;
__webpack_unused_export__ = Building;
__webpack_unused_export__ = Building2;
__webpack_unused_export__ = Building2;
__webpack_unused_export__ = Building;
__webpack_unused_export__ = Bus;
__webpack_unused_export__ = Bus;
__webpack_unused_export__ = Cake;
__webpack_unused_export__ = Cake;
__webpack_unused_export__ = CakeSlice;
__webpack_unused_export__ = CakeSlice;
__webpack_unused_export__ = Calculator;
__webpack_unused_export__ = Calculator;
__webpack_unused_export__ = Calendar;
__webpack_unused_export__ = CalendarCheck;
__webpack_unused_export__ = CalendarCheck2;
__webpack_unused_export__ = CalendarCheck2;
__webpack_unused_export__ = CalendarCheck;
__webpack_unused_export__ = CalendarClock;
__webpack_unused_export__ = CalendarClock;
exports.E_O = CalendarDays;
__webpack_unused_export__ = CalendarDays;
__webpack_unused_export__ = CalendarHeart;
__webpack_unused_export__ = CalendarHeart;
__webpack_unused_export__ = Calendar;
__webpack_unused_export__ = CalendarMinus;
__webpack_unused_export__ = CalendarMinus;
__webpack_unused_export__ = CalendarOff;
__webpack_unused_export__ = CalendarOff;
__webpack_unused_export__ = CalendarPlus;
__webpack_unused_export__ = CalendarPlus;
__webpack_unused_export__ = CalendarRange;
__webpack_unused_export__ = CalendarRange;
__webpack_unused_export__ = CalendarSearch;
__webpack_unused_export__ = CalendarSearch;
__webpack_unused_export__ = CalendarX;
__webpack_unused_export__ = CalendarX2;
__webpack_unused_export__ = CalendarX2;
__webpack_unused_export__ = CalendarX;
__webpack_unused_export__ = Camera;
__webpack_unused_export__ = Camera;
__webpack_unused_export__ = CameraOff;
__webpack_unused_export__ = CameraOff;
__webpack_unused_export__ = CandlestickChart;
__webpack_unused_export__ = CandlestickChart;
__webpack_unused_export__ = Candy;
__webpack_unused_export__ = CandyCane;
__webpack_unused_export__ = CandyCane;
__webpack_unused_export__ = Candy;
__webpack_unused_export__ = CandyOff;
__webpack_unused_export__ = CandyOff;
__webpack_unused_export__ = Car;
__webpack_unused_export__ = Car;
__webpack_unused_export__ = Carrot;
__webpack_unused_export__ = Carrot;
__webpack_unused_export__ = CaseLower;
__webpack_unused_export__ = CaseLower;
__webpack_unused_export__ = CaseSensitive;
__webpack_unused_export__ = CaseSensitive;
__webpack_unused_export__ = CaseUpper;
__webpack_unused_export__ = CaseUpper;
__webpack_unused_export__ = CassetteTape;
__webpack_unused_export__ = CassetteTape;
__webpack_unused_export__ = Cast;
__webpack_unused_export__ = Cast;
__webpack_unused_export__ = Castle;
__webpack_unused_export__ = Castle;
__webpack_unused_export__ = Cat;
__webpack_unused_export__ = Cat;
__webpack_unused_export__ = Check;
__webpack_unused_export__ = CheckCheck;
__webpack_unused_export__ = CheckCheck;
__webpack_unused_export__ = CheckCircle;
__webpack_unused_export__ = CheckCircle2;
__webpack_unused_export__ = CheckCircle2;
__webpack_unused_export__ = CheckCircle;
__webpack_unused_export__ = Check;
__webpack_unused_export__ = CheckSquare;
__webpack_unused_export__ = CheckSquare;
__webpack_unused_export__ = ChefHat;
__webpack_unused_export__ = ChefHat;
__webpack_unused_export__ = Cherry;
__webpack_unused_export__ = Cherry;
__webpack_unused_export__ = ChevronDown;
__webpack_unused_export__ = ChevronDownCircle;
__webpack_unused_export__ = ChevronDownCircle;
__webpack_unused_export__ = ChevronDown;
__webpack_unused_export__ = ChevronDownSquare;
__webpack_unused_export__ = ChevronDownSquare;
__webpack_unused_export__ = ChevronFirst;
__webpack_unused_export__ = ChevronFirst;
__webpack_unused_export__ = ChevronLast;
__webpack_unused_export__ = ChevronLast;
__webpack_unused_export__ = ChevronLeft;
__webpack_unused_export__ = ChevronLeftCircle;
__webpack_unused_export__ = ChevronLeftCircle;
__webpack_unused_export__ = ChevronLeft;
__webpack_unused_export__ = ChevronLeftSquare;
__webpack_unused_export__ = ChevronLeftSquare;
__webpack_unused_export__ = ChevronRight;
__webpack_unused_export__ = ChevronRightCircle;
__webpack_unused_export__ = ChevronRightCircle;
__webpack_unused_export__ = ChevronRight;
__webpack_unused_export__ = ChevronRightSquare;
__webpack_unused_export__ = ChevronRightSquare;
__webpack_unused_export__ = ChevronUp;
__webpack_unused_export__ = ChevronUpCircle;
__webpack_unused_export__ = ChevronUpCircle;
__webpack_unused_export__ = ChevronUp;
__webpack_unused_export__ = ChevronUpSquare;
__webpack_unused_export__ = ChevronUpSquare;
__webpack_unused_export__ = ChevronsDown;
__webpack_unused_export__ = ChevronsDown;
__webpack_unused_export__ = ChevronsDownUp;
__webpack_unused_export__ = ChevronsDownUp;
__webpack_unused_export__ = ChevronsLeft;
__webpack_unused_export__ = ChevronsLeft;
__webpack_unused_export__ = ChevronsLeftRight;
__webpack_unused_export__ = ChevronsLeftRight;
__webpack_unused_export__ = ChevronsRight;
__webpack_unused_export__ = ChevronsRight;
__webpack_unused_export__ = ChevronsRightLeft;
__webpack_unused_export__ = ChevronsRightLeft;
__webpack_unused_export__ = ChevronsUp;
__webpack_unused_export__ = ChevronsUpDown;
__webpack_unused_export__ = ChevronsUpDown;
__webpack_unused_export__ = ChevronsUp;
__webpack_unused_export__ = Chrome;
__webpack_unused_export__ = Chrome;
__webpack_unused_export__ = Church;
__webpack_unused_export__ = Church;
__webpack_unused_export__ = Cigarette;
__webpack_unused_export__ = Cigarette;
__webpack_unused_export__ = CigaretteOff;
__webpack_unused_export__ = CigaretteOff;
__webpack_unused_export__ = Circle;
__webpack_unused_export__ = CircleDashed;
__webpack_unused_export__ = CircleDashed;
__webpack_unused_export__ = CircleDollarSign;
__webpack_unused_export__ = CircleDollarSign;
__webpack_unused_export__ = CircleDot;
__webpack_unused_export__ = CircleDotDashed;
__webpack_unused_export__ = CircleDotDashed;
__webpack_unused_export__ = CircleDot;
__webpack_unused_export__ = CircleEllipsis;
__webpack_unused_export__ = CircleEllipsis;
__webpack_unused_export__ = CircleEqual;
__webpack_unused_export__ = CircleEqual;
__webpack_unused_export__ = Circle;
__webpack_unused_export__ = CircleOff;
__webpack_unused_export__ = CircleOff;
__webpack_unused_export__ = CircleSlash;
__webpack_unused_export__ = CircleSlash2;
__webpack_unused_export__ = CircleSlash2;
__webpack_unused_export__ = CircleSlash;
__webpack_unused_export__ = CircleSlash2;
__webpack_unused_export__ = CircleSlash2;
__webpack_unused_export__ = CircuitBoard;
__webpack_unused_export__ = CircuitBoard;
__webpack_unused_export__ = Citrus;
__webpack_unused_export__ = Citrus;
__webpack_unused_export__ = Clapperboard;
__webpack_unused_export__ = Clapperboard;
__webpack_unused_export__ = Clipboard;
__webpack_unused_export__ = ClipboardCheck;
__webpack_unused_export__ = ClipboardCheck;
__webpack_unused_export__ = ClipboardCopy;
__webpack_unused_export__ = ClipboardCopy;
__webpack_unused_export__ = ClipboardEdit;
__webpack_unused_export__ = ClipboardEdit;
__webpack_unused_export__ = Clipboard;
__webpack_unused_export__ = ClipboardList;
__webpack_unused_export__ = ClipboardList;
__webpack_unused_export__ = ClipboardPaste;
__webpack_unused_export__ = ClipboardPaste;
__webpack_unused_export__ = ClipboardSignature;
__webpack_unused_export__ = ClipboardSignature;
__webpack_unused_export__ = ClipboardType;
__webpack_unused_export__ = ClipboardType;
__webpack_unused_export__ = ClipboardX;
__webpack_unused_export__ = ClipboardX;
__webpack_unused_export__ = Clock;
__webpack_unused_export__ = Clock1;
__webpack_unused_export__ = Clock10;
__webpack_unused_export__ = Clock10;
__webpack_unused_export__ = Clock11;
__webpack_unused_export__ = Clock11;
__webpack_unused_export__ = Clock12;
__webpack_unused_export__ = Clock12;
__webpack_unused_export__ = Clock1;
__webpack_unused_export__ = Clock2;
__webpack_unused_export__ = Clock2;
__webpack_unused_export__ = Clock3;
__webpack_unused_export__ = Clock3;
__webpack_unused_export__ = Clock4;
__webpack_unused_export__ = Clock4;
__webpack_unused_export__ = Clock5;
__webpack_unused_export__ = Clock5;
__webpack_unused_export__ = Clock6;
__webpack_unused_export__ = Clock6;
__webpack_unused_export__ = Clock7;
__webpack_unused_export__ = Clock7;
__webpack_unused_export__ = Clock8;
__webpack_unused_export__ = Clock8;
__webpack_unused_export__ = Clock9;
__webpack_unused_export__ = Clock9;
__webpack_unused_export__ = Clock;
__webpack_unused_export__ = Cloud;
__webpack_unused_export__ = CloudCog;
__webpack_unused_export__ = CloudCog;
__webpack_unused_export__ = CloudDrizzle;
__webpack_unused_export__ = CloudDrizzle;
__webpack_unused_export__ = CloudFog;
__webpack_unused_export__ = CloudFog;
__webpack_unused_export__ = CloudHail;
__webpack_unused_export__ = CloudHail;
__webpack_unused_export__ = Cloud;
__webpack_unused_export__ = CloudLightning;
__webpack_unused_export__ = CloudLightning;
__webpack_unused_export__ = CloudMoon;
__webpack_unused_export__ = CloudMoon;
__webpack_unused_export__ = CloudMoonRain;
__webpack_unused_export__ = CloudMoonRain;
__webpack_unused_export__ = CloudOff;
__webpack_unused_export__ = CloudOff;
__webpack_unused_export__ = CloudRain;
__webpack_unused_export__ = CloudRain;
__webpack_unused_export__ = CloudRainWind;
__webpack_unused_export__ = CloudRainWind;
__webpack_unused_export__ = CloudSnow;
__webpack_unused_export__ = CloudSnow;
__webpack_unused_export__ = CloudSun;
__webpack_unused_export__ = CloudSun;
__webpack_unused_export__ = CloudSunRain;
__webpack_unused_export__ = CloudSunRain;
__webpack_unused_export__ = Cloudy;
__webpack_unused_export__ = Cloudy;
__webpack_unused_export__ = Clover;
__webpack_unused_export__ = Clover;
__webpack_unused_export__ = Club;
__webpack_unused_export__ = Club;
__webpack_unused_export__ = Code;
__webpack_unused_export__ = Code2;
__webpack_unused_export__ = Code2;
__webpack_unused_export__ = Code;
__webpack_unused_export__ = Codepen;
__webpack_unused_export__ = Codepen;
__webpack_unused_export__ = Codesandbox;
__webpack_unused_export__ = Codesandbox;
__webpack_unused_export__ = Coffee;
__webpack_unused_export__ = Coffee;
__webpack_unused_export__ = Cog;
__webpack_unused_export__ = Cog;
__webpack_unused_export__ = Coins;
__webpack_unused_export__ = Coins;
__webpack_unused_export__ = Columns;
__webpack_unused_export__ = Columns;
__webpack_unused_export__ = Combine;
__webpack_unused_export__ = Combine;
__webpack_unused_export__ = Command;
__webpack_unused_export__ = Command;
__webpack_unused_export__ = Compass;
__webpack_unused_export__ = Compass;
__webpack_unused_export__ = Component;
__webpack_unused_export__ = Component;
__webpack_unused_export__ = ConciergeBell;
__webpack_unused_export__ = ConciergeBell;
__webpack_unused_export__ = Construction;
__webpack_unused_export__ = Construction;
__webpack_unused_export__ = Contact;
__webpack_unused_export__ = Contact2;
__webpack_unused_export__ = Contact2;
__webpack_unused_export__ = Contact;
__webpack_unused_export__ = Container;
__webpack_unused_export__ = Container;
__webpack_unused_export__ = Contrast;
__webpack_unused_export__ = Contrast;
__webpack_unused_export__ = Cookie;
__webpack_unused_export__ = Cookie;
__webpack_unused_export__ = Copy;
__webpack_unused_export__ = CopyCheck;
__webpack_unused_export__ = CopyCheck;
__webpack_unused_export__ = Copy;
__webpack_unused_export__ = CopyMinus;
__webpack_unused_export__ = CopyMinus;
__webpack_unused_export__ = CopyPlus;
__webpack_unused_export__ = CopyPlus;
__webpack_unused_export__ = CopySlash;
__webpack_unused_export__ = CopySlash;
__webpack_unused_export__ = CopyX;
__webpack_unused_export__ = CopyX;
__webpack_unused_export__ = Copyleft;
__webpack_unused_export__ = Copyleft;
__webpack_unused_export__ = Copyright;
__webpack_unused_export__ = Copyright;
__webpack_unused_export__ = CornerDownLeft;
__webpack_unused_export__ = CornerDownLeft;
__webpack_unused_export__ = CornerDownRight;
__webpack_unused_export__ = CornerDownRight;
__webpack_unused_export__ = CornerLeftDown;
__webpack_unused_export__ = CornerLeftDown;
__webpack_unused_export__ = CornerLeftUp;
__webpack_unused_export__ = CornerLeftUp;
__webpack_unused_export__ = CornerRightDown;
__webpack_unused_export__ = CornerRightDown;
__webpack_unused_export__ = CornerRightUp;
__webpack_unused_export__ = CornerRightUp;
__webpack_unused_export__ = CornerUpLeft;
__webpack_unused_export__ = CornerUpLeft;
__webpack_unused_export__ = CornerUpRight;
__webpack_unused_export__ = CornerUpRight;
__webpack_unused_export__ = Cpu;
__webpack_unused_export__ = Cpu;
__webpack_unused_export__ = CreativeCommons;
__webpack_unused_export__ = CreativeCommons;
__webpack_unused_export__ = CreditCard;
__webpack_unused_export__ = CreditCard;
__webpack_unused_export__ = Croissant;
__webpack_unused_export__ = Croissant;
__webpack_unused_export__ = Crop;
__webpack_unused_export__ = Crop;
__webpack_unused_export__ = Cross;
__webpack_unused_export__ = Cross;
__webpack_unused_export__ = Crosshair;
__webpack_unused_export__ = Crosshair;
__webpack_unused_export__ = Crown;
__webpack_unused_export__ = Crown;
__webpack_unused_export__ = CupSoda;
__webpack_unused_export__ = CupSoda;
__webpack_unused_export__ = Braces;
__webpack_unused_export__ = Braces;
__webpack_unused_export__ = Currency;
__webpack_unused_export__ = Currency;
__webpack_unused_export__ = Database;
__webpack_unused_export__ = DatabaseBackup;
__webpack_unused_export__ = DatabaseBackup;
__webpack_unused_export__ = Database;
__webpack_unused_export__ = Delete;
__webpack_unused_export__ = Delete;
__webpack_unused_export__ = Dessert;
__webpack_unused_export__ = Dessert;
__webpack_unused_export__ = Diamond;
__webpack_unused_export__ = Diamond;
__webpack_unused_export__ = Dice1;
__webpack_unused_export__ = Dice1;
__webpack_unused_export__ = Dice2;
__webpack_unused_export__ = Dice2;
__webpack_unused_export__ = Dice3;
__webpack_unused_export__ = Dice3;
__webpack_unused_export__ = Dice4;
__webpack_unused_export__ = Dice4;
__webpack_unused_export__ = Dice5;
__webpack_unused_export__ = Dice5;
__webpack_unused_export__ = Dice6;
__webpack_unused_export__ = Dice6;
__webpack_unused_export__ = Dices;
__webpack_unused_export__ = Dices;
__webpack_unused_export__ = Diff;
__webpack_unused_export__ = Diff;
__webpack_unused_export__ = Disc;
__webpack_unused_export__ = Disc2;
__webpack_unused_export__ = Disc2;
__webpack_unused_export__ = Disc3;
__webpack_unused_export__ = Disc3;
__webpack_unused_export__ = Disc;
__webpack_unused_export__ = Divide;
__webpack_unused_export__ = DivideCircle;
__webpack_unused_export__ = DivideCircle;
__webpack_unused_export__ = Divide;
__webpack_unused_export__ = DivideSquare;
__webpack_unused_export__ = DivideSquare;
__webpack_unused_export__ = Dna;
__webpack_unused_export__ = Dna;
__webpack_unused_export__ = DnaOff;
__webpack_unused_export__ = DnaOff;
__webpack_unused_export__ = Dog;
__webpack_unused_export__ = Dog;
__webpack_unused_export__ = DollarSign;
__webpack_unused_export__ = DollarSign;
__webpack_unused_export__ = Donut;
__webpack_unused_export__ = Donut;
__webpack_unused_export__ = DoorClosed;
__webpack_unused_export__ = DoorClosed;
__webpack_unused_export__ = DoorOpen;
__webpack_unused_export__ = DoorOpen;
__webpack_unused_export__ = Dot;
__webpack_unused_export__ = Dot;
__webpack_unused_export__ = Download;
__webpack_unused_export__ = DownloadCloud;
__webpack_unused_export__ = DownloadCloud;
__webpack_unused_export__ = Download;
__webpack_unused_export__ = Dribbble;
__webpack_unused_export__ = Dribbble;
__webpack_unused_export__ = Droplet;
__webpack_unused_export__ = Droplet;
__webpack_unused_export__ = Droplets;
__webpack_unused_export__ = Droplets;
__webpack_unused_export__ = Drumstick;
__webpack_unused_export__ = Drumstick;
__webpack_unused_export__ = Dumbbell;
__webpack_unused_export__ = Dumbbell;
__webpack_unused_export__ = Ear;
__webpack_unused_export__ = Ear;
__webpack_unused_export__ = EarOff;
__webpack_unused_export__ = EarOff;
__webpack_unused_export__ = Edit;
__webpack_unused_export__ = Edit2;
__webpack_unused_export__ = Edit2;
__webpack_unused_export__ = Edit3;
__webpack_unused_export__ = Edit3;
__webpack_unused_export__ = Edit;
__webpack_unused_export__ = Egg;
__webpack_unused_export__ = EggFried;
__webpack_unused_export__ = EggFried;
__webpack_unused_export__ = Egg;
__webpack_unused_export__ = EggOff;
__webpack_unused_export__ = EggOff;
__webpack_unused_export__ = Equal;
__webpack_unused_export__ = Equal;
__webpack_unused_export__ = EqualNot;
__webpack_unused_export__ = EqualNot;
__webpack_unused_export__ = Eraser;
__webpack_unused_export__ = Eraser;
__webpack_unused_export__ = Euro;
__webpack_unused_export__ = Euro;
__webpack_unused_export__ = Expand;
__webpack_unused_export__ = Expand;
__webpack_unused_export__ = ExternalLink;
__webpack_unused_export__ = ExternalLink;
__webpack_unused_export__ = Eye;
__webpack_unused_export__ = Eye;
__webpack_unused_export__ = EyeOff;
__webpack_unused_export__ = EyeOff;
__webpack_unused_export__ = Facebook;
__webpack_unused_export__ = Facebook;
__webpack_unused_export__ = Factory;
__webpack_unused_export__ = Factory;
__webpack_unused_export__ = Fan;
__webpack_unused_export__ = Fan;
__webpack_unused_export__ = FastForward;
__webpack_unused_export__ = FastForward;
__webpack_unused_export__ = Feather;
__webpack_unused_export__ = Feather;
__webpack_unused_export__ = FerrisWheel;
__webpack_unused_export__ = FerrisWheel;
__webpack_unused_export__ = Figma;
__webpack_unused_export__ = Figma;
__webpack_unused_export__ = File;
__webpack_unused_export__ = FileArchive;
__webpack_unused_export__ = FileArchive;
__webpack_unused_export__ = FileAudio;
__webpack_unused_export__ = FileAudio2;
__webpack_unused_export__ = FileAudio2;
__webpack_unused_export__ = FileAudio;
__webpack_unused_export__ = FileAxis3d;
__webpack_unused_export__ = FileAxis3d;
__webpack_unused_export__ = FileBadge;
__webpack_unused_export__ = FileBadge2;
__webpack_unused_export__ = FileBadge2;
__webpack_unused_export__ = FileBadge;
__webpack_unused_export__ = FileBarChart;
__webpack_unused_export__ = FileBarChart2;
__webpack_unused_export__ = FileBarChart2;
__webpack_unused_export__ = FileBarChart;
__webpack_unused_export__ = FileBox;
__webpack_unused_export__ = FileBox;
__webpack_unused_export__ = FileCheck;
__webpack_unused_export__ = FileCheck2;
__webpack_unused_export__ = FileCheck2;
__webpack_unused_export__ = FileCheck;
__webpack_unused_export__ = FileClock;
__webpack_unused_export__ = FileClock;
__webpack_unused_export__ = FileCode;
__webpack_unused_export__ = FileCode2;
__webpack_unused_export__ = FileCode2;
__webpack_unused_export__ = FileCode;
__webpack_unused_export__ = FileCog;
__webpack_unused_export__ = FileCog2;
__webpack_unused_export__ = FileCog2;
__webpack_unused_export__ = FileCog;
__webpack_unused_export__ = FileDiff;
__webpack_unused_export__ = FileDiff;
__webpack_unused_export__ = FileDigit;
__webpack_unused_export__ = FileDigit;
__webpack_unused_export__ = FileDown;
__webpack_unused_export__ = FileDown;
__webpack_unused_export__ = FileEdit;
__webpack_unused_export__ = FileEdit;
__webpack_unused_export__ = FileHeart;
__webpack_unused_export__ = FileHeart;
__webpack_unused_export__ = File;
__webpack_unused_export__ = FileImage;
__webpack_unused_export__ = FileImage;
__webpack_unused_export__ = FileInput;
__webpack_unused_export__ = FileInput;
__webpack_unused_export__ = FileJson;
__webpack_unused_export__ = FileJson2;
__webpack_unused_export__ = FileJson2;
__webpack_unused_export__ = FileJson;
__webpack_unused_export__ = FileKey;
__webpack_unused_export__ = FileKey2;
__webpack_unused_export__ = FileKey2;
__webpack_unused_export__ = FileKey;
__webpack_unused_export__ = FileLineChart;
__webpack_unused_export__ = FileLineChart;
__webpack_unused_export__ = FileLock;
__webpack_unused_export__ = FileLock2;
__webpack_unused_export__ = FileLock2;
__webpack_unused_export__ = FileLock;
__webpack_unused_export__ = FileMinus;
__webpack_unused_export__ = FileMinus2;
__webpack_unused_export__ = FileMinus2;
__webpack_unused_export__ = FileMinus;
__webpack_unused_export__ = FileOutput;
__webpack_unused_export__ = FileOutput;
__webpack_unused_export__ = FilePieChart;
__webpack_unused_export__ = FilePieChart;
__webpack_unused_export__ = FilePlus;
__webpack_unused_export__ = FilePlus2;
__webpack_unused_export__ = FilePlus2;
__webpack_unused_export__ = FilePlus;
__webpack_unused_export__ = FileQuestion;
__webpack_unused_export__ = FileQuestion;
__webpack_unused_export__ = FileScan;
__webpack_unused_export__ = FileScan;
__webpack_unused_export__ = FileSearch;
__webpack_unused_export__ = FileSearch2;
__webpack_unused_export__ = FileSearch2;
__webpack_unused_export__ = FileSearch;
__webpack_unused_export__ = FileSignature;
__webpack_unused_export__ = FileSignature;
__webpack_unused_export__ = FileSpreadsheet;
__webpack_unused_export__ = FileSpreadsheet;
__webpack_unused_export__ = FileStack;
__webpack_unused_export__ = FileStack;
__webpack_unused_export__ = FileSymlink;
__webpack_unused_export__ = FileSymlink;
__webpack_unused_export__ = FileTerminal;
__webpack_unused_export__ = FileTerminal;
__webpack_unused_export__ = FileText;
__webpack_unused_export__ = FileText;
__webpack_unused_export__ = FileType;
__webpack_unused_export__ = FileType2;
__webpack_unused_export__ = FileType2;
__webpack_unused_export__ = FileType;
__webpack_unused_export__ = FileUp;
__webpack_unused_export__ = FileUp;
__webpack_unused_export__ = FileVideo;
__webpack_unused_export__ = FileVideo2;
__webpack_unused_export__ = FileVideo2;
__webpack_unused_export__ = FileVideo;
__webpack_unused_export__ = FileVolume;
__webpack_unused_export__ = FileVolume2;
__webpack_unused_export__ = FileVolume2;
__webpack_unused_export__ = FileVolume;
__webpack_unused_export__ = FileWarning;
__webpack_unused_export__ = FileWarning;
__webpack_unused_export__ = FileX;
__webpack_unused_export__ = FileX2;
__webpack_unused_export__ = FileX2;
__webpack_unused_export__ = FileX;
__webpack_unused_export__ = Files;
__webpack_unused_export__ = Files;
__webpack_unused_export__ = Film;
__webpack_unused_export__ = Film;
__webpack_unused_export__ = Filter;
__webpack_unused_export__ = Filter;
__webpack_unused_export__ = FilterX;
__webpack_unused_export__ = FilterX;
__webpack_unused_export__ = Fingerprint;
__webpack_unused_export__ = Fingerprint;
__webpack_unused_export__ = Fish;
__webpack_unused_export__ = Fish;
__webpack_unused_export__ = FishOff;
__webpack_unused_export__ = FishOff;
__webpack_unused_export__ = Flag;
__webpack_unused_export__ = Flag;
__webpack_unused_export__ = FlagOff;
__webpack_unused_export__ = FlagOff;
__webpack_unused_export__ = FlagTriangleLeft;
__webpack_unused_export__ = FlagTriangleLeft;
__webpack_unused_export__ = FlagTriangleRight;
__webpack_unused_export__ = FlagTriangleRight;
__webpack_unused_export__ = Flame;
__webpack_unused_export__ = Flame;
__webpack_unused_export__ = Flashlight;
__webpack_unused_export__ = Flashlight;
__webpack_unused_export__ = FlashlightOff;
__webpack_unused_export__ = FlashlightOff;
__webpack_unused_export__ = FlaskConical;
__webpack_unused_export__ = FlaskConical;
__webpack_unused_export__ = FlaskConicalOff;
__webpack_unused_export__ = FlaskConicalOff;
__webpack_unused_export__ = FlaskRound;
__webpack_unused_export__ = FlaskRound;
__webpack_unused_export__ = FlipHorizontal;
__webpack_unused_export__ = FlipHorizontal2;
__webpack_unused_export__ = FlipHorizontal2;
__webpack_unused_export__ = FlipHorizontal;
__webpack_unused_export__ = FlipVertical;
__webpack_unused_export__ = FlipVertical2;
__webpack_unused_export__ = FlipVertical2;
__webpack_unused_export__ = FlipVertical;
__webpack_unused_export__ = Flower;
__webpack_unused_export__ = Flower2;
__webpack_unused_export__ = Flower2;
__webpack_unused_export__ = Flower;
__webpack_unused_export__ = Focus;
__webpack_unused_export__ = Focus;
__webpack_unused_export__ = FoldHorizontal;
__webpack_unused_export__ = FoldHorizontal;
__webpack_unused_export__ = FoldVertical;
__webpack_unused_export__ = FoldVertical;
__webpack_unused_export__ = Folder;
__webpack_unused_export__ = FolderArchive;
__webpack_unused_export__ = FolderArchive;
__webpack_unused_export__ = FolderCheck;
__webpack_unused_export__ = FolderCheck;
__webpack_unused_export__ = FolderClock;
__webpack_unused_export__ = FolderClock;
__webpack_unused_export__ = FolderClosed;
__webpack_unused_export__ = FolderClosed;
__webpack_unused_export__ = FolderCog;
__webpack_unused_export__ = FolderCog2;
__webpack_unused_export__ = FolderCog2;
__webpack_unused_export__ = FolderCog;
__webpack_unused_export__ = FolderDot;
__webpack_unused_export__ = FolderDot;
__webpack_unused_export__ = FolderDown;
__webpack_unused_export__ = FolderDown;
__webpack_unused_export__ = FolderEdit;
__webpack_unused_export__ = FolderEdit;
__webpack_unused_export__ = FolderGit;
__webpack_unused_export__ = FolderGit2;
__webpack_unused_export__ = FolderGit2;
__webpack_unused_export__ = FolderGit;
__webpack_unused_export__ = FolderHeart;
__webpack_unused_export__ = FolderHeart;
__webpack_unused_export__ = Folder;
__webpack_unused_export__ = FolderInput;
__webpack_unused_export__ = FolderInput;
__webpack_unused_export__ = FolderKanban;
__webpack_unused_export__ = FolderKanban;
__webpack_unused_export__ = FolderKey;
__webpack_unused_export__ = FolderKey;
__webpack_unused_export__ = FolderLock;
__webpack_unused_export__ = FolderLock;
__webpack_unused_export__ = FolderMinus;
__webpack_unused_export__ = FolderMinus;
__webpack_unused_export__ = FolderOpen;
__webpack_unused_export__ = FolderOpenDot;
__webpack_unused_export__ = FolderOpenDot;
__webpack_unused_export__ = FolderOpen;
__webpack_unused_export__ = FolderOutput;
__webpack_unused_export__ = FolderOutput;
__webpack_unused_export__ = FolderPlus;
__webpack_unused_export__ = FolderPlus;
__webpack_unused_export__ = FolderRoot;
__webpack_unused_export__ = FolderRoot;
__webpack_unused_export__ = FolderSearch;
__webpack_unused_export__ = FolderSearch2;
__webpack_unused_export__ = FolderSearch2;
__webpack_unused_export__ = FolderSearch;
__webpack_unused_export__ = FolderSymlink;
__webpack_unused_export__ = FolderSymlink;
__webpack_unused_export__ = FolderSync;
__webpack_unused_export__ = FolderSync;
__webpack_unused_export__ = FolderTree;
__webpack_unused_export__ = FolderTree;
__webpack_unused_export__ = FolderUp;
__webpack_unused_export__ = FolderUp;
__webpack_unused_export__ = FolderX;
__webpack_unused_export__ = FolderX;
__webpack_unused_export__ = Folders;
__webpack_unused_export__ = Folders;
__webpack_unused_export__ = Footprints;
__webpack_unused_export__ = Footprints;
__webpack_unused_export__ = Forklift;
__webpack_unused_export__ = Forklift;
__webpack_unused_export__ = FormInput;
__webpack_unused_export__ = FormInput;
__webpack_unused_export__ = Forward;
__webpack_unused_export__ = Forward;
__webpack_unused_export__ = Frame;
__webpack_unused_export__ = Frame;
__webpack_unused_export__ = Framer;
__webpack_unused_export__ = Framer;
__webpack_unused_export__ = Frown;
__webpack_unused_export__ = Frown;
__webpack_unused_export__ = Fuel;
__webpack_unused_export__ = Fuel;
__webpack_unused_export__ = FunctionSquare;
__webpack_unused_export__ = FunctionSquare;
__webpack_unused_export__ = GalleryHorizontal;
__webpack_unused_export__ = GalleryHorizontalEnd;
__webpack_unused_export__ = GalleryHorizontalEnd;
__webpack_unused_export__ = GalleryHorizontal;
__webpack_unused_export__ = GalleryThumbnails;
__webpack_unused_export__ = GalleryThumbnails;
__webpack_unused_export__ = GalleryVertical;
__webpack_unused_export__ = GalleryVerticalEnd;
__webpack_unused_export__ = GalleryVerticalEnd;
__webpack_unused_export__ = GalleryVertical;
__webpack_unused_export__ = Gamepad;
__webpack_unused_export__ = Gamepad2;
__webpack_unused_export__ = Gamepad2;
__webpack_unused_export__ = Gamepad;
__webpack_unused_export__ = GanttChart;
__webpack_unused_export__ = GanttChart;
__webpack_unused_export__ = GanttChartSquare;
__webpack_unused_export__ = GanttChartSquare;
__webpack_unused_export__ = Gauge;
__webpack_unused_export__ = GaugeCircle;
__webpack_unused_export__ = GaugeCircle;
__webpack_unused_export__ = Gauge;
__webpack_unused_export__ = Gavel;
__webpack_unused_export__ = Gavel;
__webpack_unused_export__ = Gem;
__webpack_unused_export__ = Gem;
__webpack_unused_export__ = Ghost;
__webpack_unused_export__ = Ghost;
__webpack_unused_export__ = Gift;
__webpack_unused_export__ = Gift;
__webpack_unused_export__ = GitBranch;
__webpack_unused_export__ = GitBranch;
__webpack_unused_export__ = GitBranchPlus;
__webpack_unused_export__ = GitBranchPlus;
__webpack_unused_export__ = GitCommit;
__webpack_unused_export__ = GitCommit;
__webpack_unused_export__ = GitCompare;
__webpack_unused_export__ = GitCompare;
__webpack_unused_export__ = GitFork;
__webpack_unused_export__ = GitFork;
__webpack_unused_export__ = GitMerge;
__webpack_unused_export__ = GitMerge;
__webpack_unused_export__ = GitPullRequest;
__webpack_unused_export__ = GitPullRequestClosed;
__webpack_unused_export__ = GitPullRequestClosed;
__webpack_unused_export__ = GitPullRequestDraft;
__webpack_unused_export__ = GitPullRequestDraft;
__webpack_unused_export__ = GitPullRequest;
__webpack_unused_export__ = Github;
__webpack_unused_export__ = Github;
__webpack_unused_export__ = Gitlab;
__webpack_unused_export__ = Gitlab;
__webpack_unused_export__ = GlassWater;
__webpack_unused_export__ = GlassWater;
__webpack_unused_export__ = Glasses;
__webpack_unused_export__ = Glasses;
__webpack_unused_export__ = Globe;
__webpack_unused_export__ = Globe2;
__webpack_unused_export__ = Globe2;
__webpack_unused_export__ = Globe;
__webpack_unused_export__ = Goal;
__webpack_unused_export__ = Goal;
__webpack_unused_export__ = Grab;
__webpack_unused_export__ = Grab;
__webpack_unused_export__ = GraduationCap;
__webpack_unused_export__ = GraduationCap;
__webpack_unused_export__ = Grape;
__webpack_unused_export__ = Grape;
__webpack_unused_export__ = Grid;
__webpack_unused_export__ = Grid;
__webpack_unused_export__ = Grip;
__webpack_unused_export__ = GripHorizontal;
__webpack_unused_export__ = GripHorizontal;
__webpack_unused_export__ = Grip;
__webpack_unused_export__ = GripVertical;
__webpack_unused_export__ = GripVertical;
__webpack_unused_export__ = Group;
__webpack_unused_export__ = Group;
__webpack_unused_export__ = Hammer;
__webpack_unused_export__ = Hammer;
__webpack_unused_export__ = Hand;
__webpack_unused_export__ = Hand;
__webpack_unused_export__ = HandMetal;
__webpack_unused_export__ = HandMetal;
__webpack_unused_export__ = HardDrive;
__webpack_unused_export__ = HardDrive;
__webpack_unused_export__ = HardHat;
__webpack_unused_export__ = HardHat;
__webpack_unused_export__ = Hash;
__webpack_unused_export__ = Hash;
__webpack_unused_export__ = Haze;
__webpack_unused_export__ = Haze;
__webpack_unused_export__ = Heading;
__webpack_unused_export__ = Heading1;
__webpack_unused_export__ = Heading1;
__webpack_unused_export__ = Heading2;
__webpack_unused_export__ = Heading2;
__webpack_unused_export__ = Heading3;
__webpack_unused_export__ = Heading3;
__webpack_unused_export__ = Heading4;
__webpack_unused_export__ = Heading4;
__webpack_unused_export__ = Heading5;
__webpack_unused_export__ = Heading5;
__webpack_unused_export__ = Heading6;
__webpack_unused_export__ = Heading6;
__webpack_unused_export__ = Heading;
__webpack_unused_export__ = Headphones;
__webpack_unused_export__ = Headphones;
__webpack_unused_export__ = Heart;
__webpack_unused_export__ = HeartCrack;
__webpack_unused_export__ = HeartCrack;
__webpack_unused_export__ = HeartHandshake;
__webpack_unused_export__ = HeartHandshake;
__webpack_unused_export__ = Heart;
__webpack_unused_export__ = HeartOff;
__webpack_unused_export__ = HeartOff;
__webpack_unused_export__ = HeartPulse;
__webpack_unused_export__ = HeartPulse;
__webpack_unused_export__ = HelpCircle;
__webpack_unused_export__ = HelpCircle;
__webpack_unused_export__ = HelpingHand;
__webpack_unused_export__ = HelpingHand;
__webpack_unused_export__ = Hexagon;
__webpack_unused_export__ = Hexagon;
__webpack_unused_export__ = Highlighter;
__webpack_unused_export__ = Highlighter;
__webpack_unused_export__ = History;
__webpack_unused_export__ = History;
__webpack_unused_export__ = Home;
__webpack_unused_export__ = Home;
__webpack_unused_export__ = Hop;
__webpack_unused_export__ = Hop;
__webpack_unused_export__ = HopOff;
__webpack_unused_export__ = HopOff;
__webpack_unused_export__ = Hotel;
__webpack_unused_export__ = Hotel;
__webpack_unused_export__ = Hourglass;
__webpack_unused_export__ = Hourglass;
__webpack_unused_export__ = IceCream;
__webpack_unused_export__ = IceCream2;
__webpack_unused_export__ = IceCream2;
__webpack_unused_export__ = IceCream;
__webpack_unused_export__ = Image;
__webpack_unused_export__ = Image;
__webpack_unused_export__ = ImageMinus;
__webpack_unused_export__ = ImageMinus;
__webpack_unused_export__ = ImageOff;
__webpack_unused_export__ = ImageOff;
__webpack_unused_export__ = ImagePlus;
__webpack_unused_export__ = ImagePlus;
__webpack_unused_export__ = Import;
__webpack_unused_export__ = Import;
__webpack_unused_export__ = Inbox;
__webpack_unused_export__ = Inbox;
__webpack_unused_export__ = Indent;
__webpack_unused_export__ = Indent;
__webpack_unused_export__ = IndianRupee;
__webpack_unused_export__ = IndianRupee;
__webpack_unused_export__ = Infinity;
__webpack_unused_export__ = Infinity;
__webpack_unused_export__ = Info;
__webpack_unused_export__ = Info;
__webpack_unused_export__ = Inspect;
__webpack_unused_export__ = Inspect;
__webpack_unused_export__ = Instagram;
__webpack_unused_export__ = Instagram;
__webpack_unused_export__ = Italic;
__webpack_unused_export__ = Italic;
__webpack_unused_export__ = IterationCcw;
__webpack_unused_export__ = IterationCcw;
__webpack_unused_export__ = IterationCw;
__webpack_unused_export__ = IterationCw;
__webpack_unused_export__ = JapaneseYen;
__webpack_unused_export__ = JapaneseYen;
__webpack_unused_export__ = Joystick;
__webpack_unused_export__ = Joystick;
__webpack_unused_export__ = Kanban;
__webpack_unused_export__ = Kanban;
__webpack_unused_export__ = KanbanSquare;
__webpack_unused_export__ = KanbanSquareDashed;
__webpack_unused_export__ = KanbanSquareDashed;
__webpack_unused_export__ = KanbanSquare;
__webpack_unused_export__ = Key;
__webpack_unused_export__ = Key;
__webpack_unused_export__ = KeyRound;
__webpack_unused_export__ = KeyRound;
__webpack_unused_export__ = KeySquare;
__webpack_unused_export__ = KeySquare;
__webpack_unused_export__ = Keyboard;
__webpack_unused_export__ = Keyboard;
__webpack_unused_export__ = Lamp;
__webpack_unused_export__ = LampCeiling;
__webpack_unused_export__ = LampCeiling;
__webpack_unused_export__ = LampDesk;
__webpack_unused_export__ = LampDesk;
__webpack_unused_export__ = LampFloor;
__webpack_unused_export__ = LampFloor;
__webpack_unused_export__ = Lamp;
__webpack_unused_export__ = LampWallDown;
__webpack_unused_export__ = LampWallDown;
__webpack_unused_export__ = LampWallUp;
__webpack_unused_export__ = LampWallUp;
__webpack_unused_export__ = Landmark;
__webpack_unused_export__ = Landmark;
__webpack_unused_export__ = Languages;
__webpack_unused_export__ = Languages;
__webpack_unused_export__ = Laptop;
__webpack_unused_export__ = Laptop2;
__webpack_unused_export__ = Laptop2;
__webpack_unused_export__ = Laptop;
__webpack_unused_export__ = Lasso;
__webpack_unused_export__ = Lasso;
__webpack_unused_export__ = LassoSelect;
__webpack_unused_export__ = LassoSelect;
__webpack_unused_export__ = Laugh;
__webpack_unused_export__ = Laugh;
__webpack_unused_export__ = Layers;
__webpack_unused_export__ = Layers;
__webpack_unused_export__ = Layout;
__webpack_unused_export__ = LayoutDashboard;
__webpack_unused_export__ = LayoutDashboard;
__webpack_unused_export__ = LayoutGrid;
__webpack_unused_export__ = LayoutGrid;
__webpack_unused_export__ = Layout;
__webpack_unused_export__ = LayoutList;
__webpack_unused_export__ = LayoutList;
__webpack_unused_export__ = LayoutPanelLeft;
__webpack_unused_export__ = LayoutPanelLeft;
__webpack_unused_export__ = LayoutPanelTop;
__webpack_unused_export__ = LayoutPanelTop;
__webpack_unused_export__ = LayoutTemplate;
__webpack_unused_export__ = LayoutTemplate;
__webpack_unused_export__ = Leaf;
__webpack_unused_export__ = Leaf;
__webpack_unused_export__ = LeafyGreen;
__webpack_unused_export__ = LeafyGreen;
__webpack_unused_export__ = Library;
__webpack_unused_export__ = Library;
__webpack_unused_export__ = LifeBuoy;
__webpack_unused_export__ = LifeBuoy;
__webpack_unused_export__ = Ligature;
__webpack_unused_export__ = Ligature;
__webpack_unused_export__ = Lightbulb;
__webpack_unused_export__ = Lightbulb;
__webpack_unused_export__ = LightbulbOff;
__webpack_unused_export__ = LightbulbOff;
__webpack_unused_export__ = LineChart;
__webpack_unused_export__ = LineChart;
__webpack_unused_export__ = Link;
__webpack_unused_export__ = Link2;
__webpack_unused_export__ = Link2;
__webpack_unused_export__ = Link2Off;
__webpack_unused_export__ = Link2Off;
__webpack_unused_export__ = Link;
__webpack_unused_export__ = Linkedin;
__webpack_unused_export__ = Linkedin;
__webpack_unused_export__ = List;
__webpack_unused_export__ = ListChecks;
__webpack_unused_export__ = ListChecks;
__webpack_unused_export__ = ListEnd;
__webpack_unused_export__ = ListEnd;
__webpack_unused_export__ = ListFilter;
__webpack_unused_export__ = ListFilter;
__webpack_unused_export__ = List;
__webpack_unused_export__ = ListMinus;
__webpack_unused_export__ = ListMinus;
__webpack_unused_export__ = ListMusic;
__webpack_unused_export__ = ListMusic;
__webpack_unused_export__ = ListOrdered;
__webpack_unused_export__ = ListOrdered;
__webpack_unused_export__ = ListPlus;
__webpack_unused_export__ = ListPlus;
__webpack_unused_export__ = ListRestart;
__webpack_unused_export__ = ListRestart;
__webpack_unused_export__ = ListStart;
__webpack_unused_export__ = ListStart;
__webpack_unused_export__ = ListTodo;
__webpack_unused_export__ = ListTodo;
__webpack_unused_export__ = ListTree;
__webpack_unused_export__ = ListTree;
__webpack_unused_export__ = ListVideo;
__webpack_unused_export__ = ListVideo;
__webpack_unused_export__ = ListX;
__webpack_unused_export__ = ListX;
__webpack_unused_export__ = Loader;
__webpack_unused_export__ = Loader2;
__webpack_unused_export__ = Loader2;
__webpack_unused_export__ = Loader;
__webpack_unused_export__ = Locate;
__webpack_unused_export__ = LocateFixed;
__webpack_unused_export__ = LocateFixed;
__webpack_unused_export__ = Locate;
__webpack_unused_export__ = LocateOff;
__webpack_unused_export__ = LocateOff;
__webpack_unused_export__ = Lock;
__webpack_unused_export__ = Lock;
__webpack_unused_export__ = LogIn;
__webpack_unused_export__ = LogIn;
__webpack_unused_export__ = LogOut;
__webpack_unused_export__ = LogOut;
__webpack_unused_export__ = Lollipop;
__webpack_unused_export__ = Lollipop;
__webpack_unused_export__ = Accessibility;
__webpack_unused_export__ = Activity;
__webpack_unused_export__ = ActivitySquare;
__webpack_unused_export__ = AirVent;
__webpack_unused_export__ = Airplay;
__webpack_unused_export__ = AlarmCheck;
__webpack_unused_export__ = AlarmClock;
__webpack_unused_export__ = AlarmClockOff;
__webpack_unused_export__ = AlarmMinus;
__webpack_unused_export__ = AlarmPlus;
__webpack_unused_export__ = Album;
__webpack_unused_export__ = AlertCircle;
__webpack_unused_export__ = AlertOctagon;
__webpack_unused_export__ = AlertTriangle;
__webpack_unused_export__ = AlignCenter;
__webpack_unused_export__ = AlignCenterHorizontal;
__webpack_unused_export__ = AlignCenterVertical;
__webpack_unused_export__ = AlignEndHorizontal;
__webpack_unused_export__ = AlignEndVertical;
__webpack_unused_export__ = AlignHorizontalDistributeCenter;
__webpack_unused_export__ = AlignHorizontalDistributeEnd;
__webpack_unused_export__ = AlignHorizontalDistributeStart;
__webpack_unused_export__ = AlignHorizontalJustifyCenter;
__webpack_unused_export__ = AlignHorizontalJustifyEnd;
__webpack_unused_export__ = AlignHorizontalJustifyStart;
__webpack_unused_export__ = AlignHorizontalSpaceAround;
__webpack_unused_export__ = AlignHorizontalSpaceBetween;
__webpack_unused_export__ = AlignJustify;
__webpack_unused_export__ = AlignLeft;
__webpack_unused_export__ = AlignRight;
__webpack_unused_export__ = AlignStartHorizontal;
__webpack_unused_export__ = AlignStartVertical;
__webpack_unused_export__ = AlignVerticalDistributeCenter;
__webpack_unused_export__ = AlignVerticalDistributeEnd;
__webpack_unused_export__ = AlignVerticalDistributeStart;
__webpack_unused_export__ = AlignVerticalJustifyCenter;
__webpack_unused_export__ = AlignVerticalJustifyEnd;
__webpack_unused_export__ = AlignVerticalJustifyStart;
__webpack_unused_export__ = AlignVerticalSpaceAround;
__webpack_unused_export__ = AlignVerticalSpaceBetween;
__webpack_unused_export__ = Ampersand;
__webpack_unused_export__ = Ampersands;
__webpack_unused_export__ = Anchor;
__webpack_unused_export__ = Angry;
__webpack_unused_export__ = Annoyed;
__webpack_unused_export__ = Aperture;
__webpack_unused_export__ = AppWindow;
__webpack_unused_export__ = Apple;
__webpack_unused_export__ = Archive;
__webpack_unused_export__ = ArchiveRestore;
__webpack_unused_export__ = AreaChart;
__webpack_unused_export__ = Armchair;
__webpack_unused_export__ = ArrowBigDown;
__webpack_unused_export__ = ArrowBigDownDash;
__webpack_unused_export__ = ArrowBigLeft;
__webpack_unused_export__ = ArrowBigLeftDash;
__webpack_unused_export__ = ArrowBigRight;
__webpack_unused_export__ = ArrowBigRightDash;
__webpack_unused_export__ = ArrowBigUp;
__webpack_unused_export__ = ArrowBigUpDash;
__webpack_unused_export__ = ArrowDown;
__webpack_unused_export__ = ArrowDown01;
__webpack_unused_export__ = ArrowDown10;
__webpack_unused_export__ = ArrowDownAZ;
__webpack_unused_export__ = ArrowDownCircle;
__webpack_unused_export__ = ArrowDownFromLine;
__webpack_unused_export__ = ArrowDownLeft;
__webpack_unused_export__ = ArrowDownLeftFromCircle;
__webpack_unused_export__ = ArrowDownLeftSquare;
__webpack_unused_export__ = ArrowDownNarrowWide;
__webpack_unused_export__ = ArrowDownRight;
__webpack_unused_export__ = ArrowDownRightFromCircle;
__webpack_unused_export__ = ArrowDownRightSquare;
__webpack_unused_export__ = ArrowDownSquare;
__webpack_unused_export__ = ArrowDownToDot;
__webpack_unused_export__ = ArrowDownToLine;
__webpack_unused_export__ = ArrowDownUp;
__webpack_unused_export__ = ArrowDownWideNarrow;
__webpack_unused_export__ = ArrowDownZA;
__webpack_unused_export__ = ArrowLeft;
__webpack_unused_export__ = ArrowLeftCircle;
__webpack_unused_export__ = ArrowLeftFromLine;
__webpack_unused_export__ = ArrowLeftRight;
__webpack_unused_export__ = ArrowLeftSquare;
__webpack_unused_export__ = ArrowLeftToLine;
__webpack_unused_export__ = ArrowRight;
__webpack_unused_export__ = ArrowRightCircle;
__webpack_unused_export__ = ArrowRightFromLine;
__webpack_unused_export__ = ArrowRightLeft;
__webpack_unused_export__ = ArrowRightSquare;
__webpack_unused_export__ = ArrowRightToLine;
__webpack_unused_export__ = ArrowUp;
__webpack_unused_export__ = ArrowUp01;
__webpack_unused_export__ = ArrowUp10;
__webpack_unused_export__ = ArrowUpAZ;
__webpack_unused_export__ = ArrowUpCircle;
__webpack_unused_export__ = ArrowUpDown;
__webpack_unused_export__ = ArrowUpFromDot;
__webpack_unused_export__ = ArrowUpFromLine;
__webpack_unused_export__ = ArrowUpLeft;
__webpack_unused_export__ = ArrowUpLeftFromCircle;
__webpack_unused_export__ = ArrowUpLeftSquare;
__webpack_unused_export__ = ArrowUpNarrowWide;
__webpack_unused_export__ = ArrowUpRight;
__webpack_unused_export__ = ArrowUpRightFromCircle;
__webpack_unused_export__ = ArrowUpRightSquare;
__webpack_unused_export__ = ArrowUpSquare;
__webpack_unused_export__ = ArrowUpToLine;
__webpack_unused_export__ = ArrowUpWideNarrow;
__webpack_unused_export__ = ArrowUpZA;
__webpack_unused_export__ = ArrowsUpFromLine;
__webpack_unused_export__ = Asterisk;
__webpack_unused_export__ = AtSign;
__webpack_unused_export__ = Atom;
__webpack_unused_export__ = Award;
__webpack_unused_export__ = Axe;
__webpack_unused_export__ = Axis3d;
__webpack_unused_export__ = Baby;
__webpack_unused_export__ = Backpack;
__webpack_unused_export__ = Badge;
__webpack_unused_export__ = BadgeAlert;
__webpack_unused_export__ = BadgeCheck;
__webpack_unused_export__ = BadgeDollarSign;
__webpack_unused_export__ = BadgeHelp;
__webpack_unused_export__ = BadgeInfo;
__webpack_unused_export__ = BadgeMinus;
__webpack_unused_export__ = BadgePercent;
__webpack_unused_export__ = BadgePlus;
__webpack_unused_export__ = BadgeX;
__webpack_unused_export__ = BaggageClaim;
__webpack_unused_export__ = Ban;
__webpack_unused_export__ = Banana;
__webpack_unused_export__ = Banknote;
__webpack_unused_export__ = BarChart;
__webpack_unused_export__ = BarChart2;
__webpack_unused_export__ = BarChart3;
__webpack_unused_export__ = BarChart4;
__webpack_unused_export__ = BarChartBig;
__webpack_unused_export__ = BarChartHorizontal;
__webpack_unused_export__ = BarChartHorizontalBig;
__webpack_unused_export__ = Baseline;
__webpack_unused_export__ = Bath;
__webpack_unused_export__ = Battery;
__webpack_unused_export__ = BatteryCharging;
__webpack_unused_export__ = BatteryFull;
__webpack_unused_export__ = BatteryLow;
__webpack_unused_export__ = BatteryMedium;
__webpack_unused_export__ = BatteryWarning;
__webpack_unused_export__ = Beaker;
__webpack_unused_export__ = Bean;
__webpack_unused_export__ = BeanOff;
__webpack_unused_export__ = Bed;
__webpack_unused_export__ = BedDouble;
__webpack_unused_export__ = BedSingle;
__webpack_unused_export__ = Beef;
__webpack_unused_export__ = Beer;
__webpack_unused_export__ = Bell;
__webpack_unused_export__ = BellDot;
__webpack_unused_export__ = BellMinus;
__webpack_unused_export__ = BellOff;
__webpack_unused_export__ = BellPlus;
__webpack_unused_export__ = BellRing;
__webpack_unused_export__ = Bike;
__webpack_unused_export__ = Binary;
__webpack_unused_export__ = Biohazard;
__webpack_unused_export__ = Bird;
__webpack_unused_export__ = Bitcoin;
__webpack_unused_export__ = Blinds;
__webpack_unused_export__ = Bluetooth;
__webpack_unused_export__ = BluetoothConnected;
__webpack_unused_export__ = BluetoothOff;
__webpack_unused_export__ = BluetoothSearching;
__webpack_unused_export__ = Bold;
__webpack_unused_export__ = Bomb;
__webpack_unused_export__ = Bone;
__webpack_unused_export__ = Book;
__webpack_unused_export__ = BookCopy;
__webpack_unused_export__ = BookDown;
__webpack_unused_export__ = BookKey;
__webpack_unused_export__ = BookLock;
__webpack_unused_export__ = BookMarked;
__webpack_unused_export__ = BookMinus;
__webpack_unused_export__ = BookOpen;
__webpack_unused_export__ = BookOpenCheck;
__webpack_unused_export__ = BookPlus;
__webpack_unused_export__ = BookTemplate;
__webpack_unused_export__ = BookUp;
__webpack_unused_export__ = BookUp2;
__webpack_unused_export__ = BookX;
__webpack_unused_export__ = Bookmark;
__webpack_unused_export__ = BookmarkMinus;
__webpack_unused_export__ = BookmarkPlus;
__webpack_unused_export__ = Bot;
__webpack_unused_export__ = Box;
__webpack_unused_export__ = BoxSelect;
__webpack_unused_export__ = Boxes;
__webpack_unused_export__ = Braces;
__webpack_unused_export__ = Brackets;
__webpack_unused_export__ = Brain;
__webpack_unused_export__ = BrainCircuit;
__webpack_unused_export__ = BrainCog;
__webpack_unused_export__ = Briefcase;
__webpack_unused_export__ = Brush;
__webpack_unused_export__ = Bug;
__webpack_unused_export__ = Building;
__webpack_unused_export__ = Building2;
__webpack_unused_export__ = Bus;
__webpack_unused_export__ = Cake;
__webpack_unused_export__ = CakeSlice;
__webpack_unused_export__ = Calculator;
__webpack_unused_export__ = Calendar;
__webpack_unused_export__ = CalendarCheck;
__webpack_unused_export__ = CalendarCheck2;
__webpack_unused_export__ = CalendarClock;
__webpack_unused_export__ = CalendarDays;
__webpack_unused_export__ = CalendarHeart;
__webpack_unused_export__ = CalendarMinus;
__webpack_unused_export__ = CalendarOff;
__webpack_unused_export__ = CalendarPlus;
__webpack_unused_export__ = CalendarRange;
__webpack_unused_export__ = CalendarSearch;
__webpack_unused_export__ = CalendarX;
__webpack_unused_export__ = CalendarX2;
__webpack_unused_export__ = Camera;
__webpack_unused_export__ = CameraOff;
__webpack_unused_export__ = CandlestickChart;
__webpack_unused_export__ = Candy;
__webpack_unused_export__ = CandyCane;
__webpack_unused_export__ = CandyOff;
__webpack_unused_export__ = Car;
__webpack_unused_export__ = Carrot;
__webpack_unused_export__ = CaseLower;
__webpack_unused_export__ = CaseSensitive;
__webpack_unused_export__ = CaseUpper;
__webpack_unused_export__ = CassetteTape;
__webpack_unused_export__ = Cast;
__webpack_unused_export__ = Castle;
__webpack_unused_export__ = Cat;
__webpack_unused_export__ = Check;
__webpack_unused_export__ = CheckCheck;
__webpack_unused_export__ = CheckCircle;
__webpack_unused_export__ = CheckCircle2;
__webpack_unused_export__ = CheckSquare;
__webpack_unused_export__ = ChefHat;
__webpack_unused_export__ = Cherry;
__webpack_unused_export__ = ChevronDown;
__webpack_unused_export__ = ChevronDownCircle;
__webpack_unused_export__ = ChevronDownSquare;
__webpack_unused_export__ = ChevronFirst;
__webpack_unused_export__ = ChevronLast;
__webpack_unused_export__ = ChevronLeft;
__webpack_unused_export__ = ChevronLeftCircle;
__webpack_unused_export__ = ChevronLeftSquare;
__webpack_unused_export__ = ChevronRight;
__webpack_unused_export__ = ChevronRightCircle;
__webpack_unused_export__ = ChevronRightSquare;
__webpack_unused_export__ = ChevronUp;
__webpack_unused_export__ = ChevronUpCircle;
__webpack_unused_export__ = ChevronUpSquare;
__webpack_unused_export__ = ChevronsDown;
__webpack_unused_export__ = ChevronsDownUp;
__webpack_unused_export__ = ChevronsLeft;
__webpack_unused_export__ = ChevronsLeftRight;
__webpack_unused_export__ = ChevronsRight;
__webpack_unused_export__ = ChevronsRightLeft;
__webpack_unused_export__ = ChevronsUp;
__webpack_unused_export__ = ChevronsUpDown;
__webpack_unused_export__ = Chrome;
__webpack_unused_export__ = Church;
__webpack_unused_export__ = Cigarette;
__webpack_unused_export__ = CigaretteOff;
__webpack_unused_export__ = Circle;
__webpack_unused_export__ = CircleDashed;
__webpack_unused_export__ = CircleDollarSign;
__webpack_unused_export__ = CircleDot;
__webpack_unused_export__ = CircleDotDashed;
__webpack_unused_export__ = CircleEllipsis;
__webpack_unused_export__ = CircleEqual;
__webpack_unused_export__ = CircleOff;
__webpack_unused_export__ = CircleSlash;
__webpack_unused_export__ = CircleSlash2;
__webpack_unused_export__ = CircleSlash2;
__webpack_unused_export__ = CircuitBoard;
__webpack_unused_export__ = Citrus;
__webpack_unused_export__ = Clapperboard;
__webpack_unused_export__ = Clipboard;
__webpack_unused_export__ = ClipboardCheck;
__webpack_unused_export__ = ClipboardCopy;
__webpack_unused_export__ = ClipboardEdit;
__webpack_unused_export__ = ClipboardList;
__webpack_unused_export__ = ClipboardPaste;
__webpack_unused_export__ = ClipboardSignature;
__webpack_unused_export__ = ClipboardType;
__webpack_unused_export__ = ClipboardX;
__webpack_unused_export__ = Clock;
__webpack_unused_export__ = Clock1;
__webpack_unused_export__ = Clock10;
__webpack_unused_export__ = Clock11;
__webpack_unused_export__ = Clock12;
__webpack_unused_export__ = Clock2;
__webpack_unused_export__ = Clock3;
__webpack_unused_export__ = Clock4;
__webpack_unused_export__ = Clock5;
__webpack_unused_export__ = Clock6;
__webpack_unused_export__ = Clock7;
__webpack_unused_export__ = Clock8;
__webpack_unused_export__ = Clock9;
__webpack_unused_export__ = Cloud;
__webpack_unused_export__ = CloudCog;
__webpack_unused_export__ = CloudDrizzle;
__webpack_unused_export__ = CloudFog;
__webpack_unused_export__ = CloudHail;
__webpack_unused_export__ = CloudLightning;
__webpack_unused_export__ = CloudMoon;
__webpack_unused_export__ = CloudMoonRain;
__webpack_unused_export__ = CloudOff;
__webpack_unused_export__ = CloudRain;
__webpack_unused_export__ = CloudRainWind;
__webpack_unused_export__ = CloudSnow;
__webpack_unused_export__ = CloudSun;
__webpack_unused_export__ = CloudSunRain;
__webpack_unused_export__ = Cloudy;
__webpack_unused_export__ = Clover;
__webpack_unused_export__ = Club;
__webpack_unused_export__ = Code;
__webpack_unused_export__ = Code2;
__webpack_unused_export__ = Codepen;
__webpack_unused_export__ = Codesandbox;
__webpack_unused_export__ = Coffee;
__webpack_unused_export__ = Cog;
__webpack_unused_export__ = Coins;
__webpack_unused_export__ = Columns;
__webpack_unused_export__ = Combine;
__webpack_unused_export__ = Command;
__webpack_unused_export__ = Compass;
__webpack_unused_export__ = Component;
__webpack_unused_export__ = ConciergeBell;
__webpack_unused_export__ = Construction;
__webpack_unused_export__ = Contact;
__webpack_unused_export__ = Contact2;
__webpack_unused_export__ = Container;
__webpack_unused_export__ = Contrast;
__webpack_unused_export__ = Cookie;
__webpack_unused_export__ = Copy;
__webpack_unused_export__ = CopyCheck;
__webpack_unused_export__ = CopyMinus;
__webpack_unused_export__ = CopyPlus;
__webpack_unused_export__ = CopySlash;
__webpack_unused_export__ = CopyX;
__webpack_unused_export__ = Copyleft;
__webpack_unused_export__ = Copyright;
__webpack_unused_export__ = CornerDownLeft;
__webpack_unused_export__ = CornerDownRight;
__webpack_unused_export__ = CornerLeftDown;
__webpack_unused_export__ = CornerLeftUp;
__webpack_unused_export__ = CornerRightDown;
__webpack_unused_export__ = CornerRightUp;
__webpack_unused_export__ = CornerUpLeft;
__webpack_unused_export__ = CornerUpRight;
__webpack_unused_export__ = Cpu;
__webpack_unused_export__ = CreativeCommons;
__webpack_unused_export__ = CreditCard;
__webpack_unused_export__ = Croissant;
__webpack_unused_export__ = Crop;
__webpack_unused_export__ = Cross;
__webpack_unused_export__ = Crosshair;
__webpack_unused_export__ = Crown;
__webpack_unused_export__ = CupSoda;
__webpack_unused_export__ = Braces;
__webpack_unused_export__ = Currency;
__webpack_unused_export__ = Database;
__webpack_unused_export__ = DatabaseBackup;
__webpack_unused_export__ = Delete;
__webpack_unused_export__ = Dessert;
__webpack_unused_export__ = Diamond;
__webpack_unused_export__ = Dice1;
__webpack_unused_export__ = Dice2;
__webpack_unused_export__ = Dice3;
__webpack_unused_export__ = Dice4;
__webpack_unused_export__ = Dice5;
__webpack_unused_export__ = Dice6;
__webpack_unused_export__ = Dices;
__webpack_unused_export__ = Diff;
__webpack_unused_export__ = Disc;
__webpack_unused_export__ = Disc2;
__webpack_unused_export__ = Disc3;
__webpack_unused_export__ = Divide;
__webpack_unused_export__ = DivideCircle;
__webpack_unused_export__ = DivideSquare;
__webpack_unused_export__ = Dna;
__webpack_unused_export__ = DnaOff;
__webpack_unused_export__ = Dog;
__webpack_unused_export__ = DollarSign;
__webpack_unused_export__ = Donut;
__webpack_unused_export__ = DoorClosed;
__webpack_unused_export__ = DoorOpen;
__webpack_unused_export__ = Dot;
__webpack_unused_export__ = Download;
__webpack_unused_export__ = DownloadCloud;
__webpack_unused_export__ = Dribbble;
__webpack_unused_export__ = Droplet;
__webpack_unused_export__ = Droplets;
__webpack_unused_export__ = Drumstick;
__webpack_unused_export__ = Dumbbell;
__webpack_unused_export__ = Ear;
__webpack_unused_export__ = EarOff;
__webpack_unused_export__ = Edit;
__webpack_unused_export__ = Edit2;
__webpack_unused_export__ = Edit3;
__webpack_unused_export__ = Egg;
__webpack_unused_export__ = EggFried;
__webpack_unused_export__ = EggOff;
__webpack_unused_export__ = Equal;
__webpack_unused_export__ = EqualNot;
__webpack_unused_export__ = Eraser;
__webpack_unused_export__ = Euro;
__webpack_unused_export__ = Expand;
__webpack_unused_export__ = ExternalLink;
__webpack_unused_export__ = Eye;
__webpack_unused_export__ = EyeOff;
__webpack_unused_export__ = Facebook;
__webpack_unused_export__ = Factory;
__webpack_unused_export__ = Fan;
__webpack_unused_export__ = FastForward;
__webpack_unused_export__ = Feather;
__webpack_unused_export__ = FerrisWheel;
__webpack_unused_export__ = Figma;
__webpack_unused_export__ = File;
__webpack_unused_export__ = FileArchive;
__webpack_unused_export__ = FileAudio;
__webpack_unused_export__ = FileAudio2;
__webpack_unused_export__ = FileAxis3d;
__webpack_unused_export__ = FileBadge;
__webpack_unused_export__ = FileBadge2;
__webpack_unused_export__ = FileBarChart;
__webpack_unused_export__ = FileBarChart2;
__webpack_unused_export__ = FileBox;
__webpack_unused_export__ = FileCheck;
__webpack_unused_export__ = FileCheck2;
__webpack_unused_export__ = FileClock;
__webpack_unused_export__ = FileCode;
__webpack_unused_export__ = FileCode2;
__webpack_unused_export__ = FileCog;
__webpack_unused_export__ = FileCog2;
__webpack_unused_export__ = FileDiff;
__webpack_unused_export__ = FileDigit;
__webpack_unused_export__ = FileDown;
__webpack_unused_export__ = FileEdit;
__webpack_unused_export__ = FileHeart;
__webpack_unused_export__ = FileImage;
__webpack_unused_export__ = FileInput;
__webpack_unused_export__ = FileJson;
__webpack_unused_export__ = FileJson2;
__webpack_unused_export__ = FileKey;
__webpack_unused_export__ = FileKey2;
__webpack_unused_export__ = FileLineChart;
__webpack_unused_export__ = FileLock;
__webpack_unused_export__ = FileLock2;
__webpack_unused_export__ = FileMinus;
__webpack_unused_export__ = FileMinus2;
__webpack_unused_export__ = FileOutput;
__webpack_unused_export__ = FilePieChart;
__webpack_unused_export__ = FilePlus;
__webpack_unused_export__ = FilePlus2;
__webpack_unused_export__ = FileQuestion;
__webpack_unused_export__ = FileScan;
__webpack_unused_export__ = FileSearch;
__webpack_unused_export__ = FileSearch2;
__webpack_unused_export__ = FileSignature;
__webpack_unused_export__ = FileSpreadsheet;
__webpack_unused_export__ = FileStack;
__webpack_unused_export__ = FileSymlink;
__webpack_unused_export__ = FileTerminal;
__webpack_unused_export__ = FileText;
__webpack_unused_export__ = FileType;
__webpack_unused_export__ = FileType2;
__webpack_unused_export__ = FileUp;
__webpack_unused_export__ = FileVideo;
__webpack_unused_export__ = FileVideo2;
__webpack_unused_export__ = FileVolume;
__webpack_unused_export__ = FileVolume2;
__webpack_unused_export__ = FileWarning;
__webpack_unused_export__ = FileX;
__webpack_unused_export__ = FileX2;
__webpack_unused_export__ = Files;
__webpack_unused_export__ = Film;
__webpack_unused_export__ = Filter;
__webpack_unused_export__ = FilterX;
__webpack_unused_export__ = Fingerprint;
__webpack_unused_export__ = Fish;
__webpack_unused_export__ = FishOff;
__webpack_unused_export__ = Flag;
__webpack_unused_export__ = FlagOff;
__webpack_unused_export__ = FlagTriangleLeft;
__webpack_unused_export__ = FlagTriangleRight;
__webpack_unused_export__ = Flame;
__webpack_unused_export__ = Flashlight;
__webpack_unused_export__ = FlashlightOff;
__webpack_unused_export__ = FlaskConical;
__webpack_unused_export__ = FlaskConicalOff;
__webpack_unused_export__ = FlaskRound;
__webpack_unused_export__ = FlipHorizontal;
__webpack_unused_export__ = FlipHorizontal2;
__webpack_unused_export__ = FlipVertical;
__webpack_unused_export__ = FlipVertical2;
__webpack_unused_export__ = Flower;
__webpack_unused_export__ = Flower2;
__webpack_unused_export__ = Focus;
__webpack_unused_export__ = FoldHorizontal;
__webpack_unused_export__ = FoldVertical;
__webpack_unused_export__ = Folder;
__webpack_unused_export__ = FolderArchive;
__webpack_unused_export__ = FolderCheck;
__webpack_unused_export__ = FolderClock;
__webpack_unused_export__ = FolderClosed;
__webpack_unused_export__ = FolderCog;
__webpack_unused_export__ = FolderCog2;
__webpack_unused_export__ = FolderDot;
__webpack_unused_export__ = FolderDown;
__webpack_unused_export__ = FolderEdit;
__webpack_unused_export__ = FolderGit;
__webpack_unused_export__ = FolderGit2;
__webpack_unused_export__ = FolderHeart;
__webpack_unused_export__ = FolderInput;
__webpack_unused_export__ = FolderKanban;
__webpack_unused_export__ = FolderKey;
__webpack_unused_export__ = FolderLock;
__webpack_unused_export__ = FolderMinus;
__webpack_unused_export__ = FolderOpen;
__webpack_unused_export__ = FolderOpenDot;
__webpack_unused_export__ = FolderOutput;
__webpack_unused_export__ = FolderPlus;
__webpack_unused_export__ = FolderRoot;
__webpack_unused_export__ = FolderSearch;
__webpack_unused_export__ = FolderSearch2;
__webpack_unused_export__ = FolderSymlink;
__webpack_unused_export__ = FolderSync;
__webpack_unused_export__ = FolderTree;
__webpack_unused_export__ = FolderUp;
__webpack_unused_export__ = FolderX;
__webpack_unused_export__ = Folders;
__webpack_unused_export__ = Footprints;
__webpack_unused_export__ = Forklift;
__webpack_unused_export__ = FormInput;
__webpack_unused_export__ = Forward;
__webpack_unused_export__ = Frame;
__webpack_unused_export__ = Framer;
__webpack_unused_export__ = Frown;
__webpack_unused_export__ = Fuel;
__webpack_unused_export__ = FunctionSquare;
__webpack_unused_export__ = GalleryHorizontal;
__webpack_unused_export__ = GalleryHorizontalEnd;
__webpack_unused_export__ = GalleryThumbnails;
__webpack_unused_export__ = GalleryVertical;
__webpack_unused_export__ = GalleryVerticalEnd;
__webpack_unused_export__ = Gamepad;
__webpack_unused_export__ = Gamepad2;
__webpack_unused_export__ = GanttChart;
__webpack_unused_export__ = GanttChartSquare;
__webpack_unused_export__ = Gauge;
__webpack_unused_export__ = GaugeCircle;
__webpack_unused_export__ = Gavel;
__webpack_unused_export__ = Gem;
__webpack_unused_export__ = Ghost;
__webpack_unused_export__ = Gift;
__webpack_unused_export__ = GitBranch;
__webpack_unused_export__ = GitBranchPlus;
__webpack_unused_export__ = GitCommit;
__webpack_unused_export__ = GitCompare;
__webpack_unused_export__ = GitFork;
__webpack_unused_export__ = GitMerge;
__webpack_unused_export__ = GitPullRequest;
__webpack_unused_export__ = GitPullRequestClosed;
__webpack_unused_export__ = GitPullRequestDraft;
__webpack_unused_export__ = Github;
__webpack_unused_export__ = Gitlab;
__webpack_unused_export__ = GlassWater;
__webpack_unused_export__ = Glasses;
__webpack_unused_export__ = Globe;
__webpack_unused_export__ = Globe2;
__webpack_unused_export__ = Goal;
__webpack_unused_export__ = Grab;
__webpack_unused_export__ = GraduationCap;
__webpack_unused_export__ = Grape;
__webpack_unused_export__ = Grid;
__webpack_unused_export__ = Grip;
__webpack_unused_export__ = GripHorizontal;
__webpack_unused_export__ = GripVertical;
__webpack_unused_export__ = Group;
__webpack_unused_export__ = Hammer;
__webpack_unused_export__ = Hand;
__webpack_unused_export__ = HandMetal;
__webpack_unused_export__ = HardDrive;
__webpack_unused_export__ = HardHat;
__webpack_unused_export__ = Hash;
__webpack_unused_export__ = Haze;
__webpack_unused_export__ = Heading;
__webpack_unused_export__ = Heading1;
__webpack_unused_export__ = Heading2;
__webpack_unused_export__ = Heading3;
__webpack_unused_export__ = Heading4;
__webpack_unused_export__ = Heading5;
__webpack_unused_export__ = Heading6;
__webpack_unused_export__ = Headphones;
__webpack_unused_export__ = Heart;
__webpack_unused_export__ = HeartCrack;
__webpack_unused_export__ = HeartHandshake;
__webpack_unused_export__ = HeartOff;
__webpack_unused_export__ = HeartPulse;
__webpack_unused_export__ = HelpCircle;
__webpack_unused_export__ = HelpingHand;
__webpack_unused_export__ = Hexagon;
__webpack_unused_export__ = Highlighter;
__webpack_unused_export__ = History;
__webpack_unused_export__ = Home;
__webpack_unused_export__ = Hop;
__webpack_unused_export__ = HopOff;
__webpack_unused_export__ = Hotel;
__webpack_unused_export__ = Hourglass;
__webpack_unused_export__ = IceCream;
__webpack_unused_export__ = IceCream2;
__webpack_unused_export__ = Image;
__webpack_unused_export__ = ImageMinus;
__webpack_unused_export__ = ImageOff;
__webpack_unused_export__ = ImagePlus;
__webpack_unused_export__ = Import;
__webpack_unused_export__ = Inbox;
__webpack_unused_export__ = Indent;
__webpack_unused_export__ = IndianRupee;
__webpack_unused_export__ = Infinity;
__webpack_unused_export__ = Info;
__webpack_unused_export__ = Inspect;
__webpack_unused_export__ = Instagram;
__webpack_unused_export__ = Italic;
__webpack_unused_export__ = IterationCcw;
__webpack_unused_export__ = IterationCw;
__webpack_unused_export__ = JapaneseYen;
__webpack_unused_export__ = Joystick;
__webpack_unused_export__ = Kanban;
__webpack_unused_export__ = KanbanSquare;
__webpack_unused_export__ = KanbanSquareDashed;
__webpack_unused_export__ = Key;
__webpack_unused_export__ = KeyRound;
__webpack_unused_export__ = KeySquare;
__webpack_unused_export__ = Keyboard;
__webpack_unused_export__ = Lamp;
__webpack_unused_export__ = LampCeiling;
__webpack_unused_export__ = LampDesk;
__webpack_unused_export__ = LampFloor;
__webpack_unused_export__ = LampWallDown;
__webpack_unused_export__ = LampWallUp;
__webpack_unused_export__ = Landmark;
__webpack_unused_export__ = Languages;
__webpack_unused_export__ = Laptop;
__webpack_unused_export__ = Laptop2;
__webpack_unused_export__ = Lasso;
__webpack_unused_export__ = LassoSelect;
__webpack_unused_export__ = Laugh;
__webpack_unused_export__ = Layers;
__webpack_unused_export__ = Layout;
__webpack_unused_export__ = LayoutDashboard;
__webpack_unused_export__ = LayoutGrid;
__webpack_unused_export__ = LayoutList;
__webpack_unused_export__ = LayoutPanelLeft;
__webpack_unused_export__ = LayoutPanelTop;
__webpack_unused_export__ = LayoutTemplate;
__webpack_unused_export__ = Leaf;
__webpack_unused_export__ = LeafyGreen;
__webpack_unused_export__ = Library;
__webpack_unused_export__ = LifeBuoy;
__webpack_unused_export__ = Ligature;
__webpack_unused_export__ = Lightbulb;
__webpack_unused_export__ = LightbulbOff;
__webpack_unused_export__ = LineChart;
__webpack_unused_export__ = Link;
__webpack_unused_export__ = Link2;
__webpack_unused_export__ = Link2Off;
__webpack_unused_export__ = Linkedin;
__webpack_unused_export__ = List;
__webpack_unused_export__ = ListChecks;
__webpack_unused_export__ = ListEnd;
__webpack_unused_export__ = ListFilter;
__webpack_unused_export__ = ListMinus;
__webpack_unused_export__ = ListMusic;
__webpack_unused_export__ = ListOrdered;
__webpack_unused_export__ = ListPlus;
__webpack_unused_export__ = ListRestart;
__webpack_unused_export__ = ListStart;
__webpack_unused_export__ = ListTodo;
__webpack_unused_export__ = ListTree;
__webpack_unused_export__ = ListVideo;
__webpack_unused_export__ = ListX;
__webpack_unused_export__ = Loader;
__webpack_unused_export__ = Loader2;
__webpack_unused_export__ = Locate;
__webpack_unused_export__ = LocateFixed;
__webpack_unused_export__ = LocateOff;
__webpack_unused_export__ = Lock;
__webpack_unused_export__ = LogIn;
__webpack_unused_export__ = LogOut;
__webpack_unused_export__ = Lollipop;
__webpack_unused_export__ = Luggage;
__webpack_unused_export__ = Magnet;
__webpack_unused_export__ = Mail;
__webpack_unused_export__ = MailCheck;
__webpack_unused_export__ = MailMinus;
__webpack_unused_export__ = MailOpen;
__webpack_unused_export__ = MailPlus;
__webpack_unused_export__ = MailQuestion;
__webpack_unused_export__ = MailSearch;
__webpack_unused_export__ = MailWarning;
__webpack_unused_export__ = MailX;
__webpack_unused_export__ = Mailbox;
__webpack_unused_export__ = Mails;
__webpack_unused_export__ = Map;
__webpack_unused_export__ = MapPin;
__webpack_unused_export__ = MapPinOff;
__webpack_unused_export__ = Martini;
__webpack_unused_export__ = Maximize;
__webpack_unused_export__ = Maximize2;
__webpack_unused_export__ = Medal;
__webpack_unused_export__ = Megaphone;
__webpack_unused_export__ = MegaphoneOff;
__webpack_unused_export__ = Meh;
__webpack_unused_export__ = MemoryStick;
__webpack_unused_export__ = Menu;
__webpack_unused_export__ = MenuSquare;
__webpack_unused_export__ = Merge;
__webpack_unused_export__ = MessageCircle;
__webpack_unused_export__ = MessageSquare;
__webpack_unused_export__ = MessageSquareDashed;
__webpack_unused_export__ = MessageSquarePlus;
__webpack_unused_export__ = MessagesSquare;
__webpack_unused_export__ = Mic;
__webpack_unused_export__ = Mic2;
__webpack_unused_export__ = MicOff;
__webpack_unused_export__ = Microscope;
__webpack_unused_export__ = Microwave;
__webpack_unused_export__ = Milestone;
__webpack_unused_export__ = Milk;
__webpack_unused_export__ = MilkOff;
__webpack_unused_export__ = Minimize;
__webpack_unused_export__ = Minimize2;
__webpack_unused_export__ = Minus;
__webpack_unused_export__ = MinusCircle;
__webpack_unused_export__ = MinusSquare;
__webpack_unused_export__ = Monitor;
__webpack_unused_export__ = MonitorCheck;
__webpack_unused_export__ = MonitorDot;
__webpack_unused_export__ = MonitorDown;
__webpack_unused_export__ = MonitorOff;
__webpack_unused_export__ = MonitorPause;
__webpack_unused_export__ = MonitorPlay;
__webpack_unused_export__ = MonitorSmartphone;
__webpack_unused_export__ = MonitorSpeaker;
__webpack_unused_export__ = MonitorStop;
__webpack_unused_export__ = MonitorUp;
__webpack_unused_export__ = MonitorX;
__webpack_unused_export__ = Moon;
__webpack_unused_export__ = MoonStar;
__webpack_unused_export__ = MoreHorizontal;
__webpack_unused_export__ = MoreVertical;
__webpack_unused_export__ = Mountain;
__webpack_unused_export__ = MountainSnow;
__webpack_unused_export__ = Mouse;
__webpack_unused_export__ = MousePointer;
__webpack_unused_export__ = MousePointer2;
__webpack_unused_export__ = MousePointerClick;
__webpack_unused_export__ = Move;
__webpack_unused_export__ = Move3d;
__webpack_unused_export__ = MoveDiagonal;
__webpack_unused_export__ = MoveDiagonal2;
__webpack_unused_export__ = MoveDown;
__webpack_unused_export__ = MoveDownLeft;
__webpack_unused_export__ = MoveDownRight;
__webpack_unused_export__ = MoveHorizontal;
__webpack_unused_export__ = MoveLeft;
__webpack_unused_export__ = MoveRight;
__webpack_unused_export__ = MoveUp;
__webpack_unused_export__ = MoveUpLeft;
__webpack_unused_export__ = MoveUpRight;
__webpack_unused_export__ = MoveVertical;
__webpack_unused_export__ = Music;
__webpack_unused_export__ = Music2;
__webpack_unused_export__ = Music3;
__webpack_unused_export__ = Music4;
__webpack_unused_export__ = Navigation;
__webpack_unused_export__ = Navigation2;
__webpack_unused_export__ = Navigation2Off;
__webpack_unused_export__ = NavigationOff;
__webpack_unused_export__ = Network;
__webpack_unused_export__ = Newspaper;
__webpack_unused_export__ = Nfc;
__webpack_unused_export__ = Nut;
__webpack_unused_export__ = NutOff;
__webpack_unused_export__ = Octagon;
__webpack_unused_export__ = Option;
__webpack_unused_export__ = Orbit;
__webpack_unused_export__ = Outdent;
__webpack_unused_export__ = Package;
__webpack_unused_export__ = Package2;
__webpack_unused_export__ = PackageCheck;
__webpack_unused_export__ = PackageMinus;
__webpack_unused_export__ = PackageOpen;
__webpack_unused_export__ = PackagePlus;
__webpack_unused_export__ = PackageSearch;
__webpack_unused_export__ = PackageX;
__webpack_unused_export__ = PaintBucket;
__webpack_unused_export__ = Paintbrush;
__webpack_unused_export__ = Paintbrush2;
__webpack_unused_export__ = Palette;
__webpack_unused_export__ = Palmtree;
__webpack_unused_export__ = PanelBottom;
__webpack_unused_export__ = PanelBottomClose;
__webpack_unused_export__ = PanelBottomInactive;
__webpack_unused_export__ = PanelBottomOpen;
__webpack_unused_export__ = PanelLeft;
__webpack_unused_export__ = PanelLeftClose;
__webpack_unused_export__ = PanelLeftInactive;
__webpack_unused_export__ = PanelLeftOpen;
__webpack_unused_export__ = PanelRight;
__webpack_unused_export__ = PanelRightClose;
__webpack_unused_export__ = PanelRightInactive;
__webpack_unused_export__ = PanelRightOpen;
__webpack_unused_export__ = PanelTop;
__webpack_unused_export__ = PanelTopClose;
__webpack_unused_export__ = PanelTopInactive;
__webpack_unused_export__ = PanelTopOpen;
__webpack_unused_export__ = Paperclip;
__webpack_unused_export__ = Parentheses;
__webpack_unused_export__ = ParkingCircle;
__webpack_unused_export__ = ParkingCircleOff;
__webpack_unused_export__ = ParkingSquare;
__webpack_unused_export__ = ParkingSquareOff;
__webpack_unused_export__ = PartyPopper;
__webpack_unused_export__ = Pause;
__webpack_unused_export__ = PauseCircle;
__webpack_unused_export__ = PauseOctagon;
__webpack_unused_export__ = PcCase;
__webpack_unused_export__ = Edit2;
__webpack_unused_export__ = Edit;
__webpack_unused_export__ = Edit3;
__webpack_unused_export__ = PenTool;
__webpack_unused_export__ = Pencil;
__webpack_unused_export__ = Percent;
__webpack_unused_export__ = PersonStanding;
__webpack_unused_export__ = Phone;
__webpack_unused_export__ = PhoneCall;
__webpack_unused_export__ = PhoneForwarded;
__webpack_unused_export__ = PhoneIncoming;
__webpack_unused_export__ = PhoneMissed;
__webpack_unused_export__ = PhoneOff;
__webpack_unused_export__ = PhoneOutgoing;
__webpack_unused_export__ = Pi;
__webpack_unused_export__ = PiSquare;
__webpack_unused_export__ = PictureInPicture;
__webpack_unused_export__ = PictureInPicture2;
__webpack_unused_export__ = PieChart;
__webpack_unused_export__ = PiggyBank;
__webpack_unused_export__ = Pilcrow;
__webpack_unused_export__ = PilcrowSquare;
__webpack_unused_export__ = Pill;
__webpack_unused_export__ = Pin;
__webpack_unused_export__ = PinOff;
__webpack_unused_export__ = Pipette;
__webpack_unused_export__ = Pizza;
__webpack_unused_export__ = Plane;
__webpack_unused_export__ = PlaneLanding;
__webpack_unused_export__ = PlaneTakeoff;
__webpack_unused_export__ = Play;
__webpack_unused_export__ = PlayCircle;
__webpack_unused_export__ = PlaySquare;
__webpack_unused_export__ = Plug;
__webpack_unused_export__ = Plug2;
__webpack_unused_export__ = PlugZap;
__webpack_unused_export__ = PlugZap2;
__webpack_unused_export__ = Plus;
__webpack_unused_export__ = PlusCircle;
__webpack_unused_export__ = PlusSquare;
__webpack_unused_export__ = Pocket;
__webpack_unused_export__ = PocketKnife;
__webpack_unused_export__ = Podcast;
__webpack_unused_export__ = Pointer;
__webpack_unused_export__ = Popcorn;
__webpack_unused_export__ = Popsicle;
__webpack_unused_export__ = PoundSterling;
__webpack_unused_export__ = Power;
__webpack_unused_export__ = PowerOff;
__webpack_unused_export__ = Presentation;
__webpack_unused_export__ = Printer;
__webpack_unused_export__ = Projector;
__webpack_unused_export__ = Puzzle;
__webpack_unused_export__ = QrCode;
__webpack_unused_export__ = Quote;
__webpack_unused_export__ = Radar;
__webpack_unused_export__ = Radiation;
__webpack_unused_export__ = Radio;
__webpack_unused_export__ = RadioReceiver;
__webpack_unused_export__ = RadioTower;
__webpack_unused_export__ = Rainbow;
__webpack_unused_export__ = Rat;
__webpack_unused_export__ = Receipt;
__webpack_unused_export__ = RectangleHorizontal;
__webpack_unused_export__ = RectangleVertical;
__webpack_unused_export__ = Recycle;
__webpack_unused_export__ = Redo;
__webpack_unused_export__ = Redo2;
__webpack_unused_export__ = RedoDot;
__webpack_unused_export__ = RefreshCcw;
__webpack_unused_export__ = RefreshCcwDot;
__webpack_unused_export__ = RefreshCw;
__webpack_unused_export__ = RefreshCwOff;
__webpack_unused_export__ = Refrigerator;
__webpack_unused_export__ = Regex;
__webpack_unused_export__ = RemoveFormatting;
__webpack_unused_export__ = Repeat;
__webpack_unused_export__ = Repeat1;
__webpack_unused_export__ = Repeat2;
__webpack_unused_export__ = Replace;
__webpack_unused_export__ = ReplaceAll;
__webpack_unused_export__ = Reply;
__webpack_unused_export__ = ReplyAll;
__webpack_unused_export__ = Rewind;
__webpack_unused_export__ = Rocket;
__webpack_unused_export__ = RockingChair;
__webpack_unused_export__ = RollerCoaster;
__webpack_unused_export__ = Rotate3d;
__webpack_unused_export__ = RotateCcw;
__webpack_unused_export__ = RotateCw;
__webpack_unused_export__ = Router;
__webpack_unused_export__ = Rows;
__webpack_unused_export__ = Rss;
__webpack_unused_export__ = Ruler;
__webpack_unused_export__ = RussianRuble;
__webpack_unused_export__ = Sailboat;
__webpack_unused_export__ = Salad;
__webpack_unused_export__ = Sandwich;
__webpack_unused_export__ = Satellite;
__webpack_unused_export__ = SatelliteDish;
__webpack_unused_export__ = Save;
__webpack_unused_export__ = SaveAll;
__webpack_unused_export__ = Scale;
__webpack_unused_export__ = Scale3d;
__webpack_unused_export__ = Scaling;
__webpack_unused_export__ = Scan;
__webpack_unused_export__ = ScanFace;
__webpack_unused_export__ = ScanLine;
__webpack_unused_export__ = ScatterChart;
__webpack_unused_export__ = School;
__webpack_unused_export__ = School2;
__webpack_unused_export__ = Scissors;
__webpack_unused_export__ = ScreenShare;
__webpack_unused_export__ = ScreenShareOff;
__webpack_unused_export__ = Scroll;
__webpack_unused_export__ = ScrollText;
__webpack_unused_export__ = Search;
__webpack_unused_export__ = SearchCheck;
__webpack_unused_export__ = SearchCode;
__webpack_unused_export__ = SearchSlash;
__webpack_unused_export__ = SearchX;
__webpack_unused_export__ = Send;
__webpack_unused_export__ = SeparatorHorizontal;
__webpack_unused_export__ = SeparatorVertical;
__webpack_unused_export__ = Server;
__webpack_unused_export__ = ServerCog;
__webpack_unused_export__ = ServerCrash;
__webpack_unused_export__ = ServerOff;
__webpack_unused_export__ = Settings;
__webpack_unused_export__ = Settings2;
__webpack_unused_export__ = Shapes;
__webpack_unused_export__ = Share;
__webpack_unused_export__ = Share2;
__webpack_unused_export__ = Sheet;
__webpack_unused_export__ = Shield;
__webpack_unused_export__ = ShieldAlert;
__webpack_unused_export__ = ShieldCheck;
__webpack_unused_export__ = ShieldClose;
__webpack_unused_export__ = ShieldOff;
__webpack_unused_export__ = ShieldQuestion;
__webpack_unused_export__ = Ship;
__webpack_unused_export__ = Shirt;
__webpack_unused_export__ = ShoppingBag;
__webpack_unused_export__ = ShoppingCart;
__webpack_unused_export__ = Shovel;
__webpack_unused_export__ = ShowerHead;
__webpack_unused_export__ = Shrink;
__webpack_unused_export__ = Shrub;
__webpack_unused_export__ = Shuffle;
__webpack_unused_export__ = PanelLeft;
__webpack_unused_export__ = PanelLeftClose;
__webpack_unused_export__ = PanelLeftOpen;
__webpack_unused_export__ = Sigma;
__webpack_unused_export__ = SigmaSquare;
__webpack_unused_export__ = Signal;
__webpack_unused_export__ = SignalHigh;
__webpack_unused_export__ = SignalLow;
__webpack_unused_export__ = SignalMedium;
__webpack_unused_export__ = SignalZero;
__webpack_unused_export__ = Siren;
__webpack_unused_export__ = SkipBack;
__webpack_unused_export__ = SkipForward;
__webpack_unused_export__ = Skull;
__webpack_unused_export__ = Slack;
__webpack_unused_export__ = Ban;
__webpack_unused_export__ = Slice;
__webpack_unused_export__ = Sliders;
__webpack_unused_export__ = SlidersHorizontal;
__webpack_unused_export__ = Smartphone;
__webpack_unused_export__ = SmartphoneCharging;
__webpack_unused_export__ = SmartphoneNfc;
__webpack_unused_export__ = Smile;
__webpack_unused_export__ = SmilePlus;
__webpack_unused_export__ = Snowflake;
__webpack_unused_export__ = Sofa;
__webpack_unused_export__ = ArrowUpNarrowWide;
__webpack_unused_export__ = ArrowDownWideNarrow;
__webpack_unused_export__ = Soup;
__webpack_unused_export__ = Space;
__webpack_unused_export__ = Spade;
__webpack_unused_export__ = Sparkle;
__webpack_unused_export__ = Sparkles;
__webpack_unused_export__ = Speaker;
__webpack_unused_export__ = SpellCheck;
__webpack_unused_export__ = SpellCheck2;
__webpack_unused_export__ = Spline;
__webpack_unused_export__ = Split;
__webpack_unused_export__ = SplitSquareHorizontal;
__webpack_unused_export__ = SplitSquareVertical;
__webpack_unused_export__ = SprayCan;
__webpack_unused_export__ = Sprout;
__webpack_unused_export__ = Square;
__webpack_unused_export__ = SquareAsterisk;
__webpack_unused_export__ = SquareCode;
__webpack_unused_export__ = SquareDashedBottom;
__webpack_unused_export__ = SquareDashedBottomCode;
__webpack_unused_export__ = SquareDot;
__webpack_unused_export__ = SquareEqual;
__webpack_unused_export__ = GanttChartSquare;
__webpack_unused_export__ = KanbanSquare;
__webpack_unused_export__ = KanbanSquareDashed;
__webpack_unused_export__ = SquareSlash;
__webpack_unused_export__ = SquareStack;
__webpack_unused_export__ = Squirrel;
__webpack_unused_export__ = Stamp;
__webpack_unused_export__ = Star;
__webpack_unused_export__ = StarHalf;
__webpack_unused_export__ = StarOff;
__webpack_unused_export__ = Sparkles;
__webpack_unused_export__ = StepBack;
__webpack_unused_export__ = StepForward;
__webpack_unused_export__ = Stethoscope;
__webpack_unused_export__ = Sticker;
__webpack_unused_export__ = StickyNote;
__webpack_unused_export__ = StopCircle;
__webpack_unused_export__ = Store;
__webpack_unused_export__ = StretchHorizontal;
__webpack_unused_export__ = StretchVertical;
__webpack_unused_export__ = Strikethrough;
__webpack_unused_export__ = Subscript;
__webpack_unused_export__ = Subtitles;
__webpack_unused_export__ = Sun;
__webpack_unused_export__ = SunDim;
__webpack_unused_export__ = SunMedium;
__webpack_unused_export__ = SunMoon;
__webpack_unused_export__ = SunSnow;
__webpack_unused_export__ = Sunrise;
__webpack_unused_export__ = Sunset;
__webpack_unused_export__ = Superscript;
__webpack_unused_export__ = SwissFranc;
__webpack_unused_export__ = SwitchCamera;
__webpack_unused_export__ = Sword;
__webpack_unused_export__ = Swords;
__webpack_unused_export__ = Syringe;
__webpack_unused_export__ = Table;
__webpack_unused_export__ = Table2;
__webpack_unused_export__ = TableProperties;
__webpack_unused_export__ = Tablet;
__webpack_unused_export__ = Tablets;
__webpack_unused_export__ = Tag;
__webpack_unused_export__ = Tags;
__webpack_unused_export__ = Tally1;
__webpack_unused_export__ = Tally2;
__webpack_unused_export__ = Tally3;
__webpack_unused_export__ = Tally4;
__webpack_unused_export__ = Tally5;
__webpack_unused_export__ = Target;
__webpack_unused_export__ = Tent;
__webpack_unused_export__ = Terminal;
__webpack_unused_export__ = TerminalSquare;
__webpack_unused_export__ = TestTube;
__webpack_unused_export__ = TestTube2;
__webpack_unused_export__ = TestTubes;
__webpack_unused_export__ = Text;
__webpack_unused_export__ = TextCursor;
__webpack_unused_export__ = TextCursorInput;
__webpack_unused_export__ = TextQuote;
__webpack_unused_export__ = TextSelect;
__webpack_unused_export__ = TextSelect;
__webpack_unused_export__ = Thermometer;
__webpack_unused_export__ = ThermometerSnowflake;
__webpack_unused_export__ = ThermometerSun;
__webpack_unused_export__ = ThumbsDown;
__webpack_unused_export__ = ThumbsUp;
__webpack_unused_export__ = Ticket;
__webpack_unused_export__ = Timer;
__webpack_unused_export__ = TimerOff;
__webpack_unused_export__ = TimerReset;
__webpack_unused_export__ = ToggleLeft;
__webpack_unused_export__ = ToggleRight;
__webpack_unused_export__ = Tornado;
__webpack_unused_export__ = Touchpad;
__webpack_unused_export__ = TouchpadOff;
__webpack_unused_export__ = TowerControl;
__webpack_unused_export__ = ToyBrick;
__webpack_unused_export__ = Train;
__webpack_unused_export__ = Trash;
__webpack_unused_export__ = Trash2;
__webpack_unused_export__ = TreeDeciduous;
__webpack_unused_export__ = TreePine;
__webpack_unused_export__ = Trees;
__webpack_unused_export__ = Trello;
__webpack_unused_export__ = TrendingDown;
__webpack_unused_export__ = TrendingUp;
__webpack_unused_export__ = Triangle;
__webpack_unused_export__ = Trophy;
__webpack_unused_export__ = Truck;
__webpack_unused_export__ = Tv;
__webpack_unused_export__ = Tv2;
__webpack_unused_export__ = Twitch;
__webpack_unused_export__ = Twitter;
__webpack_unused_export__ = Type;
__webpack_unused_export__ = Umbrella;
__webpack_unused_export__ = Underline;
__webpack_unused_export__ = Undo;
__webpack_unused_export__ = Undo2;
__webpack_unused_export__ = UndoDot;
__webpack_unused_export__ = UnfoldHorizontal;
__webpack_unused_export__ = UnfoldVertical;
__webpack_unused_export__ = Ungroup;
__webpack_unused_export__ = Unlink;
__webpack_unused_export__ = Unlink2;
__webpack_unused_export__ = Unlock;
__webpack_unused_export__ = Unplug;
__webpack_unused_export__ = Upload;
__webpack_unused_export__ = UploadCloud;
__webpack_unused_export__ = Usb;
__webpack_unused_export__ = User;
__webpack_unused_export__ = User2;
__webpack_unused_export__ = UserCheck;
__webpack_unused_export__ = UserCheck2;
__webpack_unused_export__ = UserCircle;
__webpack_unused_export__ = UserCircle2;
__webpack_unused_export__ = UserCog;
__webpack_unused_export__ = UserCog2;
__webpack_unused_export__ = UserMinus;
__webpack_unused_export__ = UserMinus2;
__webpack_unused_export__ = UserPlus;
__webpack_unused_export__ = UserPlus2;
__webpack_unused_export__ = UserSquare;
__webpack_unused_export__ = UserSquare2;
__webpack_unused_export__ = UserX;
__webpack_unused_export__ = UserX2;
__webpack_unused_export__ = Users;
__webpack_unused_export__ = Users2;
__webpack_unused_export__ = Utensils;
__webpack_unused_export__ = UtensilsCrossed;
__webpack_unused_export__ = UtilityPole;
__webpack_unused_export__ = Variable;
__webpack_unused_export__ = Vegan;
__webpack_unused_export__ = VenetianMask;
__webpack_unused_export__ = BadgeCheck;
__webpack_unused_export__ = Vibrate;
__webpack_unused_export__ = VibrateOff;
__webpack_unused_export__ = Video;
__webpack_unused_export__ = VideoOff;
__webpack_unused_export__ = Videotape;
__webpack_unused_export__ = View;
__webpack_unused_export__ = Voicemail;
__webpack_unused_export__ = Volume;
__webpack_unused_export__ = Volume1;
__webpack_unused_export__ = Volume2;
__webpack_unused_export__ = VolumeX;
__webpack_unused_export__ = Vote;
__webpack_unused_export__ = Wallet;
__webpack_unused_export__ = Wallet2;
__webpack_unused_export__ = WalletCards;
__webpack_unused_export__ = Wallpaper;
__webpack_unused_export__ = Wand;
__webpack_unused_export__ = Wand2;
__webpack_unused_export__ = Warehouse;
__webpack_unused_export__ = Watch;
__webpack_unused_export__ = Waves;
__webpack_unused_export__ = Webcam;
__webpack_unused_export__ = Webhook;
__webpack_unused_export__ = Wheat;
__webpack_unused_export__ = WheatOff;
__webpack_unused_export__ = WholeWord;
__webpack_unused_export__ = Wifi;
__webpack_unused_export__ = WifiOff;
__webpack_unused_export__ = Wind;
__webpack_unused_export__ = Wine;
__webpack_unused_export__ = WineOff;
__webpack_unused_export__ = Workflow;
__webpack_unused_export__ = WrapText;
__webpack_unused_export__ = Wrench;
__webpack_unused_export__ = X;
__webpack_unused_export__ = XCircle;
__webpack_unused_export__ = XOctagon;
__webpack_unused_export__ = XSquare;
__webpack_unused_export__ = Youtube;
__webpack_unused_export__ = Zap;
__webpack_unused_export__ = ZapOff;
__webpack_unused_export__ = ZoomIn;
__webpack_unused_export__ = ZoomOut;
__webpack_unused_export__ = Luggage;
__webpack_unused_export__ = Luggage;
__webpack_unused_export__ = Magnet;
__webpack_unused_export__ = Magnet;
__webpack_unused_export__ = Mail;
__webpack_unused_export__ = MailCheck;
__webpack_unused_export__ = MailCheck;
__webpack_unused_export__ = Mail;
__webpack_unused_export__ = MailMinus;
__webpack_unused_export__ = MailMinus;
__webpack_unused_export__ = MailOpen;
__webpack_unused_export__ = MailOpen;
__webpack_unused_export__ = MailPlus;
__webpack_unused_export__ = MailPlus;
__webpack_unused_export__ = MailQuestion;
__webpack_unused_export__ = MailQuestion;
__webpack_unused_export__ = MailSearch;
__webpack_unused_export__ = MailSearch;
__webpack_unused_export__ = MailWarning;
__webpack_unused_export__ = MailWarning;
__webpack_unused_export__ = MailX;
__webpack_unused_export__ = MailX;
__webpack_unused_export__ = Mailbox;
__webpack_unused_export__ = Mailbox;
__webpack_unused_export__ = Mails;
__webpack_unused_export__ = Mails;
__webpack_unused_export__ = Map;
__webpack_unused_export__ = Map;
__webpack_unused_export__ = MapPin;
__webpack_unused_export__ = MapPin;
__webpack_unused_export__ = MapPinOff;
__webpack_unused_export__ = MapPinOff;
__webpack_unused_export__ = Martini;
__webpack_unused_export__ = Martini;
__webpack_unused_export__ = Maximize;
__webpack_unused_export__ = Maximize2;
__webpack_unused_export__ = Maximize2;
__webpack_unused_export__ = Maximize;
__webpack_unused_export__ = Medal;
__webpack_unused_export__ = Medal;
__webpack_unused_export__ = Megaphone;
__webpack_unused_export__ = Megaphone;
__webpack_unused_export__ = MegaphoneOff;
__webpack_unused_export__ = MegaphoneOff;
__webpack_unused_export__ = Meh;
__webpack_unused_export__ = Meh;
__webpack_unused_export__ = MemoryStick;
__webpack_unused_export__ = MemoryStick;
__webpack_unused_export__ = Menu;
__webpack_unused_export__ = Menu;
__webpack_unused_export__ = MenuSquare;
__webpack_unused_export__ = MenuSquare;
__webpack_unused_export__ = Merge;
__webpack_unused_export__ = Merge;
__webpack_unused_export__ = MessageCircle;
__webpack_unused_export__ = MessageCircle;
__webpack_unused_export__ = MessageSquare;
__webpack_unused_export__ = MessageSquareDashed;
__webpack_unused_export__ = MessageSquareDashed;
__webpack_unused_export__ = MessageSquare;
__webpack_unused_export__ = MessageSquarePlus;
__webpack_unused_export__ = MessageSquarePlus;
__webpack_unused_export__ = MessagesSquare;
__webpack_unused_export__ = MessagesSquare;
__webpack_unused_export__ = Mic;
__webpack_unused_export__ = Mic2;
__webpack_unused_export__ = Mic2;
__webpack_unused_export__ = Mic;
__webpack_unused_export__ = MicOff;
__webpack_unused_export__ = MicOff;
__webpack_unused_export__ = Microscope;
__webpack_unused_export__ = Microscope;
__webpack_unused_export__ = Microwave;
__webpack_unused_export__ = Microwave;
__webpack_unused_export__ = Milestone;
__webpack_unused_export__ = Milestone;
__webpack_unused_export__ = Milk;
__webpack_unused_export__ = Milk;
__webpack_unused_export__ = MilkOff;
__webpack_unused_export__ = MilkOff;
__webpack_unused_export__ = Minimize;
__webpack_unused_export__ = Minimize2;
__webpack_unused_export__ = Minimize2;
__webpack_unused_export__ = Minimize;
__webpack_unused_export__ = Minus;
__webpack_unused_export__ = MinusCircle;
__webpack_unused_export__ = MinusCircle;
__webpack_unused_export__ = Minus;
__webpack_unused_export__ = MinusSquare;
__webpack_unused_export__ = MinusSquare;
__webpack_unused_export__ = Monitor;
__webpack_unused_export__ = MonitorCheck;
__webpack_unused_export__ = MonitorCheck;
__webpack_unused_export__ = MonitorDot;
__webpack_unused_export__ = MonitorDot;
__webpack_unused_export__ = MonitorDown;
__webpack_unused_export__ = MonitorDown;
__webpack_unused_export__ = Monitor;
__webpack_unused_export__ = MonitorOff;
__webpack_unused_export__ = MonitorOff;
__webpack_unused_export__ = MonitorPause;
__webpack_unused_export__ = MonitorPause;
__webpack_unused_export__ = MonitorPlay;
__webpack_unused_export__ = MonitorPlay;
__webpack_unused_export__ = MonitorSmartphone;
__webpack_unused_export__ = MonitorSmartphone;
__webpack_unused_export__ = MonitorSpeaker;
__webpack_unused_export__ = MonitorSpeaker;
__webpack_unused_export__ = MonitorStop;
__webpack_unused_export__ = MonitorStop;
__webpack_unused_export__ = MonitorUp;
__webpack_unused_export__ = MonitorUp;
__webpack_unused_export__ = MonitorX;
__webpack_unused_export__ = MonitorX;
__webpack_unused_export__ = Moon;
__webpack_unused_export__ = Moon;
__webpack_unused_export__ = MoonStar;
__webpack_unused_export__ = MoonStar;
__webpack_unused_export__ = MoreHorizontal;
__webpack_unused_export__ = MoreHorizontal;
__webpack_unused_export__ = MoreVertical;
__webpack_unused_export__ = MoreVertical;
__webpack_unused_export__ = Mountain;
__webpack_unused_export__ = Mountain;
__webpack_unused_export__ = MountainSnow;
__webpack_unused_export__ = MountainSnow;
__webpack_unused_export__ = Mouse;
__webpack_unused_export__ = Mouse;
__webpack_unused_export__ = MousePointer;
__webpack_unused_export__ = MousePointer2;
__webpack_unused_export__ = MousePointer2;
__webpack_unused_export__ = MousePointerClick;
__webpack_unused_export__ = MousePointerClick;
__webpack_unused_export__ = MousePointer;
__webpack_unused_export__ = Move;
__webpack_unused_export__ = Move3d;
__webpack_unused_export__ = Move3d;
__webpack_unused_export__ = MoveDiagonal;
__webpack_unused_export__ = MoveDiagonal2;
__webpack_unused_export__ = MoveDiagonal2;
__webpack_unused_export__ = MoveDiagonal;
__webpack_unused_export__ = MoveDown;
__webpack_unused_export__ = MoveDown;
__webpack_unused_export__ = MoveDownLeft;
__webpack_unused_export__ = MoveDownLeft;
__webpack_unused_export__ = MoveDownRight;
__webpack_unused_export__ = MoveDownRight;
__webpack_unused_export__ = MoveHorizontal;
__webpack_unused_export__ = MoveHorizontal;
__webpack_unused_export__ = Move;
__webpack_unused_export__ = MoveLeft;
__webpack_unused_export__ = MoveLeft;
__webpack_unused_export__ = MoveRight;
__webpack_unused_export__ = MoveRight;
__webpack_unused_export__ = MoveUp;
__webpack_unused_export__ = MoveUp;
__webpack_unused_export__ = MoveUpLeft;
__webpack_unused_export__ = MoveUpLeft;
__webpack_unused_export__ = MoveUpRight;
__webpack_unused_export__ = MoveUpRight;
__webpack_unused_export__ = MoveVertical;
__webpack_unused_export__ = MoveVertical;
__webpack_unused_export__ = Music;
__webpack_unused_export__ = Music2;
__webpack_unused_export__ = Music2;
__webpack_unused_export__ = Music3;
__webpack_unused_export__ = Music3;
__webpack_unused_export__ = Music4;
__webpack_unused_export__ = Music4;
__webpack_unused_export__ = Music;
__webpack_unused_export__ = Navigation;
__webpack_unused_export__ = Navigation2;
__webpack_unused_export__ = Navigation2;
__webpack_unused_export__ = Navigation2Off;
__webpack_unused_export__ = Navigation2Off;
__webpack_unused_export__ = Navigation;
__webpack_unused_export__ = NavigationOff;
__webpack_unused_export__ = NavigationOff;
__webpack_unused_export__ = Network;
__webpack_unused_export__ = Network;
__webpack_unused_export__ = Newspaper;
__webpack_unused_export__ = Newspaper;
__webpack_unused_export__ = Nfc;
__webpack_unused_export__ = Nfc;
__webpack_unused_export__ = Nut;
__webpack_unused_export__ = Nut;
__webpack_unused_export__ = NutOff;
__webpack_unused_export__ = NutOff;
__webpack_unused_export__ = Octagon;
__webpack_unused_export__ = Octagon;
__webpack_unused_export__ = Option;
__webpack_unused_export__ = Option;
__webpack_unused_export__ = Orbit;
__webpack_unused_export__ = Orbit;
__webpack_unused_export__ = Outdent;
__webpack_unused_export__ = Outdent;
__webpack_unused_export__ = Package;
__webpack_unused_export__ = Package2;
__webpack_unused_export__ = Package2;
__webpack_unused_export__ = PackageCheck;
__webpack_unused_export__ = PackageCheck;
__webpack_unused_export__ = Package;
__webpack_unused_export__ = PackageMinus;
__webpack_unused_export__ = PackageMinus;
__webpack_unused_export__ = PackageOpen;
__webpack_unused_export__ = PackageOpen;
__webpack_unused_export__ = PackagePlus;
__webpack_unused_export__ = PackagePlus;
__webpack_unused_export__ = PackageSearch;
__webpack_unused_export__ = PackageSearch;
__webpack_unused_export__ = PackageX;
__webpack_unused_export__ = PackageX;
__webpack_unused_export__ = PaintBucket;
__webpack_unused_export__ = PaintBucket;
__webpack_unused_export__ = Paintbrush;
__webpack_unused_export__ = Paintbrush2;
__webpack_unused_export__ = Paintbrush2;
__webpack_unused_export__ = Paintbrush;
__webpack_unused_export__ = Palette;
__webpack_unused_export__ = Palette;
__webpack_unused_export__ = Palmtree;
__webpack_unused_export__ = Palmtree;
__webpack_unused_export__ = PanelBottom;
__webpack_unused_export__ = PanelBottomClose;
__webpack_unused_export__ = PanelBottomClose;
__webpack_unused_export__ = PanelBottom;
__webpack_unused_export__ = PanelBottomInactive;
__webpack_unused_export__ = PanelBottomInactive;
__webpack_unused_export__ = PanelBottomOpen;
__webpack_unused_export__ = PanelBottomOpen;
__webpack_unused_export__ = PanelLeft;
__webpack_unused_export__ = PanelLeftClose;
__webpack_unused_export__ = PanelLeftClose;
__webpack_unused_export__ = PanelLeft;
__webpack_unused_export__ = PanelLeftInactive;
__webpack_unused_export__ = PanelLeftInactive;
__webpack_unused_export__ = PanelLeftOpen;
__webpack_unused_export__ = PanelLeftOpen;
__webpack_unused_export__ = PanelRight;
__webpack_unused_export__ = PanelRightClose;
__webpack_unused_export__ = PanelRightClose;
__webpack_unused_export__ = PanelRight;
__webpack_unused_export__ = PanelRightInactive;
__webpack_unused_export__ = PanelRightInactive;
__webpack_unused_export__ = PanelRightOpen;
__webpack_unused_export__ = PanelRightOpen;
__webpack_unused_export__ = PanelTop;
__webpack_unused_export__ = PanelTopClose;
__webpack_unused_export__ = PanelTopClose;
__webpack_unused_export__ = PanelTop;
__webpack_unused_export__ = PanelTopInactive;
__webpack_unused_export__ = PanelTopInactive;
__webpack_unused_export__ = PanelTopOpen;
__webpack_unused_export__ = PanelTopOpen;
__webpack_unused_export__ = Paperclip;
__webpack_unused_export__ = Paperclip;
__webpack_unused_export__ = Parentheses;
__webpack_unused_export__ = Parentheses;
__webpack_unused_export__ = ParkingCircle;
__webpack_unused_export__ = ParkingCircle;
__webpack_unused_export__ = ParkingCircleOff;
__webpack_unused_export__ = ParkingCircleOff;
__webpack_unused_export__ = ParkingSquare;
__webpack_unused_export__ = ParkingSquare;
__webpack_unused_export__ = ParkingSquareOff;
__webpack_unused_export__ = ParkingSquareOff;
__webpack_unused_export__ = PartyPopper;
__webpack_unused_export__ = PartyPopper;
__webpack_unused_export__ = Pause;
__webpack_unused_export__ = PauseCircle;
__webpack_unused_export__ = PauseCircle;
__webpack_unused_export__ = Pause;
__webpack_unused_export__ = PauseOctagon;
__webpack_unused_export__ = PauseOctagon;
__webpack_unused_export__ = PcCase;
__webpack_unused_export__ = PcCase;
__webpack_unused_export__ = Edit2;
__webpack_unused_export__ = Edit;
__webpack_unused_export__ = Edit;
__webpack_unused_export__ = Edit2;
__webpack_unused_export__ = Edit3;
__webpack_unused_export__ = Edit3;
__webpack_unused_export__ = PenTool;
__webpack_unused_export__ = PenTool;
__webpack_unused_export__ = Pencil;
__webpack_unused_export__ = Pencil;
__webpack_unused_export__ = Percent;
__webpack_unused_export__ = Percent;
__webpack_unused_export__ = PersonStanding;
__webpack_unused_export__ = PersonStanding;
__webpack_unused_export__ = Phone;
__webpack_unused_export__ = PhoneCall;
__webpack_unused_export__ = PhoneCall;
__webpack_unused_export__ = PhoneForwarded;
__webpack_unused_export__ = PhoneForwarded;
__webpack_unused_export__ = Phone;
__webpack_unused_export__ = PhoneIncoming;
__webpack_unused_export__ = PhoneIncoming;
__webpack_unused_export__ = PhoneMissed;
__webpack_unused_export__ = PhoneMissed;
__webpack_unused_export__ = PhoneOff;
__webpack_unused_export__ = PhoneOff;
__webpack_unused_export__ = PhoneOutgoing;
__webpack_unused_export__ = PhoneOutgoing;
__webpack_unused_export__ = Pi;
__webpack_unused_export__ = Pi;
__webpack_unused_export__ = PiSquare;
__webpack_unused_export__ = PiSquare;
__webpack_unused_export__ = PictureInPicture;
__webpack_unused_export__ = PictureInPicture2;
__webpack_unused_export__ = PictureInPicture2;
__webpack_unused_export__ = PictureInPicture;
__webpack_unused_export__ = PieChart;
__webpack_unused_export__ = PieChart;
__webpack_unused_export__ = PiggyBank;
__webpack_unused_export__ = PiggyBank;
__webpack_unused_export__ = Pilcrow;
__webpack_unused_export__ = Pilcrow;
__webpack_unused_export__ = PilcrowSquare;
__webpack_unused_export__ = PilcrowSquare;
__webpack_unused_export__ = Pill;
__webpack_unused_export__ = Pill;
__webpack_unused_export__ = Pin;
__webpack_unused_export__ = Pin;
__webpack_unused_export__ = PinOff;
__webpack_unused_export__ = PinOff;
__webpack_unused_export__ = Pipette;
__webpack_unused_export__ = Pipette;
__webpack_unused_export__ = Pizza;
__webpack_unused_export__ = Pizza;
__webpack_unused_export__ = Plane;
__webpack_unused_export__ = Plane;
__webpack_unused_export__ = PlaneLanding;
__webpack_unused_export__ = PlaneLanding;
__webpack_unused_export__ = PlaneTakeoff;
__webpack_unused_export__ = PlaneTakeoff;
__webpack_unused_export__ = Play;
__webpack_unused_export__ = PlayCircle;
__webpack_unused_export__ = PlayCircle;
__webpack_unused_export__ = Play;
__webpack_unused_export__ = PlaySquare;
__webpack_unused_export__ = PlaySquare;
__webpack_unused_export__ = Plug;
__webpack_unused_export__ = Plug2;
__webpack_unused_export__ = Plug2;
__webpack_unused_export__ = Plug;
__webpack_unused_export__ = PlugZap;
__webpack_unused_export__ = PlugZap2;
__webpack_unused_export__ = PlugZap2;
__webpack_unused_export__ = PlugZap;
__webpack_unused_export__ = Plus;
__webpack_unused_export__ = PlusCircle;
__webpack_unused_export__ = PlusCircle;
__webpack_unused_export__ = Plus;
__webpack_unused_export__ = PlusSquare;
__webpack_unused_export__ = PlusSquare;
__webpack_unused_export__ = Pocket;
__webpack_unused_export__ = Pocket;
__webpack_unused_export__ = PocketKnife;
__webpack_unused_export__ = PocketKnife;
__webpack_unused_export__ = Podcast;
__webpack_unused_export__ = Podcast;
__webpack_unused_export__ = Pointer;
__webpack_unused_export__ = Pointer;
__webpack_unused_export__ = Popcorn;
__webpack_unused_export__ = Popcorn;
__webpack_unused_export__ = Popsicle;
__webpack_unused_export__ = Popsicle;
__webpack_unused_export__ = PoundSterling;
__webpack_unused_export__ = PoundSterling;
__webpack_unused_export__ = Power;
__webpack_unused_export__ = Power;
__webpack_unused_export__ = PowerOff;
__webpack_unused_export__ = PowerOff;
__webpack_unused_export__ = Presentation;
__webpack_unused_export__ = Presentation;
__webpack_unused_export__ = Printer;
__webpack_unused_export__ = Printer;
__webpack_unused_export__ = Projector;
__webpack_unused_export__ = Projector;
__webpack_unused_export__ = Puzzle;
__webpack_unused_export__ = Puzzle;
__webpack_unused_export__ = QrCode;
__webpack_unused_export__ = QrCode;
__webpack_unused_export__ = Quote;
__webpack_unused_export__ = Quote;
__webpack_unused_export__ = Radar;
__webpack_unused_export__ = Radar;
__webpack_unused_export__ = Radiation;
__webpack_unused_export__ = Radiation;
__webpack_unused_export__ = Radio;
__webpack_unused_export__ = Radio;
__webpack_unused_export__ = RadioReceiver;
__webpack_unused_export__ = RadioReceiver;
__webpack_unused_export__ = RadioTower;
__webpack_unused_export__ = RadioTower;
__webpack_unused_export__ = Rainbow;
__webpack_unused_export__ = Rainbow;
__webpack_unused_export__ = Rat;
__webpack_unused_export__ = Rat;
__webpack_unused_export__ = Receipt;
__webpack_unused_export__ = Receipt;
__webpack_unused_export__ = RectangleHorizontal;
__webpack_unused_export__ = RectangleHorizontal;
__webpack_unused_export__ = RectangleVertical;
__webpack_unused_export__ = RectangleVertical;
__webpack_unused_export__ = Recycle;
__webpack_unused_export__ = Recycle;
__webpack_unused_export__ = Redo;
__webpack_unused_export__ = Redo2;
__webpack_unused_export__ = Redo2;
__webpack_unused_export__ = RedoDot;
__webpack_unused_export__ = RedoDot;
__webpack_unused_export__ = Redo;
__webpack_unused_export__ = RefreshCcw;
__webpack_unused_export__ = RefreshCcwDot;
__webpack_unused_export__ = RefreshCcwDot;
__webpack_unused_export__ = RefreshCcw;
__webpack_unused_export__ = RefreshCw;
__webpack_unused_export__ = RefreshCw;
__webpack_unused_export__ = RefreshCwOff;
__webpack_unused_export__ = RefreshCwOff;
__webpack_unused_export__ = Refrigerator;
__webpack_unused_export__ = Refrigerator;
__webpack_unused_export__ = Regex;
__webpack_unused_export__ = Regex;
__webpack_unused_export__ = RemoveFormatting;
__webpack_unused_export__ = RemoveFormatting;
__webpack_unused_export__ = Repeat;
__webpack_unused_export__ = Repeat1;
__webpack_unused_export__ = Repeat1;
__webpack_unused_export__ = Repeat2;
__webpack_unused_export__ = Repeat2;
__webpack_unused_export__ = Repeat;
__webpack_unused_export__ = Replace;
__webpack_unused_export__ = ReplaceAll;
__webpack_unused_export__ = ReplaceAll;
__webpack_unused_export__ = Replace;
__webpack_unused_export__ = Reply;
__webpack_unused_export__ = ReplyAll;
__webpack_unused_export__ = ReplyAll;
__webpack_unused_export__ = Reply;
__webpack_unused_export__ = Rewind;
__webpack_unused_export__ = Rewind;
__webpack_unused_export__ = Rocket;
__webpack_unused_export__ = Rocket;
__webpack_unused_export__ = RockingChair;
__webpack_unused_export__ = RockingChair;
__webpack_unused_export__ = RollerCoaster;
__webpack_unused_export__ = RollerCoaster;
__webpack_unused_export__ = Rotate3d;
__webpack_unused_export__ = Rotate3d;
__webpack_unused_export__ = RotateCcw;
__webpack_unused_export__ = RotateCcw;
__webpack_unused_export__ = RotateCw;
__webpack_unused_export__ = RotateCw;
__webpack_unused_export__ = Router;
__webpack_unused_export__ = Router;
__webpack_unused_export__ = Rows;
__webpack_unused_export__ = Rows;
__webpack_unused_export__ = Rss;
__webpack_unused_export__ = Rss;
__webpack_unused_export__ = Ruler;
__webpack_unused_export__ = Ruler;
__webpack_unused_export__ = RussianRuble;
__webpack_unused_export__ = RussianRuble;
__webpack_unused_export__ = Sailboat;
__webpack_unused_export__ = Sailboat;
__webpack_unused_export__ = Salad;
__webpack_unused_export__ = Salad;
__webpack_unused_export__ = Sandwich;
__webpack_unused_export__ = Sandwich;
__webpack_unused_export__ = Satellite;
__webpack_unused_export__ = SatelliteDish;
__webpack_unused_export__ = SatelliteDish;
__webpack_unused_export__ = Satellite;
__webpack_unused_export__ = Save;
__webpack_unused_export__ = SaveAll;
__webpack_unused_export__ = SaveAll;
__webpack_unused_export__ = Save;
__webpack_unused_export__ = Scale;
__webpack_unused_export__ = Scale3d;
__webpack_unused_export__ = Scale3d;
__webpack_unused_export__ = Scale;
__webpack_unused_export__ = Scaling;
__webpack_unused_export__ = Scaling;
__webpack_unused_export__ = Scan;
__webpack_unused_export__ = ScanFace;
__webpack_unused_export__ = ScanFace;
__webpack_unused_export__ = Scan;
__webpack_unused_export__ = ScanLine;
__webpack_unused_export__ = ScanLine;
__webpack_unused_export__ = ScatterChart;
__webpack_unused_export__ = ScatterChart;
__webpack_unused_export__ = School;
__webpack_unused_export__ = School2;
__webpack_unused_export__ = School2;
__webpack_unused_export__ = School;
__webpack_unused_export__ = Scissors;
__webpack_unused_export__ = Scissors;
__webpack_unused_export__ = ScreenShare;
__webpack_unused_export__ = ScreenShare;
__webpack_unused_export__ = ScreenShareOff;
__webpack_unused_export__ = ScreenShareOff;
__webpack_unused_export__ = Scroll;
__webpack_unused_export__ = Scroll;
__webpack_unused_export__ = ScrollText;
__webpack_unused_export__ = ScrollText;
__webpack_unused_export__ = Search;
__webpack_unused_export__ = SearchCheck;
__webpack_unused_export__ = SearchCheck;
__webpack_unused_export__ = SearchCode;
__webpack_unused_export__ = SearchCode;
__webpack_unused_export__ = Search;
__webpack_unused_export__ = SearchSlash;
__webpack_unused_export__ = SearchSlash;
__webpack_unused_export__ = SearchX;
__webpack_unused_export__ = SearchX;
__webpack_unused_export__ = Send;
__webpack_unused_export__ = Send;
__webpack_unused_export__ = SeparatorHorizontal;
__webpack_unused_export__ = SeparatorHorizontal;
__webpack_unused_export__ = SeparatorVertical;
__webpack_unused_export__ = SeparatorVertical;
__webpack_unused_export__ = Server;
__webpack_unused_export__ = ServerCog;
__webpack_unused_export__ = ServerCog;
__webpack_unused_export__ = ServerCrash;
__webpack_unused_export__ = ServerCrash;
__webpack_unused_export__ = Server;
__webpack_unused_export__ = ServerOff;
__webpack_unused_export__ = ServerOff;
__webpack_unused_export__ = Settings;
__webpack_unused_export__ = Settings2;
__webpack_unused_export__ = Settings2;
__webpack_unused_export__ = Settings;
__webpack_unused_export__ = Shapes;
__webpack_unused_export__ = Shapes;
__webpack_unused_export__ = Share;
__webpack_unused_export__ = Share2;
__webpack_unused_export__ = Share2;
__webpack_unused_export__ = Share;
__webpack_unused_export__ = Sheet;
__webpack_unused_export__ = Sheet;
__webpack_unused_export__ = Shield;
__webpack_unused_export__ = ShieldAlert;
__webpack_unused_export__ = ShieldAlert;
__webpack_unused_export__ = ShieldCheck;
__webpack_unused_export__ = ShieldCheck;
__webpack_unused_export__ = ShieldClose;
__webpack_unused_export__ = ShieldClose;
__webpack_unused_export__ = Shield;
__webpack_unused_export__ = ShieldOff;
__webpack_unused_export__ = ShieldOff;
__webpack_unused_export__ = ShieldQuestion;
__webpack_unused_export__ = ShieldQuestion;
__webpack_unused_export__ = Ship;
__webpack_unused_export__ = Ship;
__webpack_unused_export__ = Shirt;
__webpack_unused_export__ = Shirt;
__webpack_unused_export__ = ShoppingBag;
__webpack_unused_export__ = ShoppingBag;
__webpack_unused_export__ = ShoppingCart;
__webpack_unused_export__ = ShoppingCart;
__webpack_unused_export__ = Shovel;
__webpack_unused_export__ = Shovel;
__webpack_unused_export__ = ShowerHead;
__webpack_unused_export__ = ShowerHead;
__webpack_unused_export__ = Shrink;
__webpack_unused_export__ = Shrink;
__webpack_unused_export__ = Shrub;
__webpack_unused_export__ = Shrub;
__webpack_unused_export__ = Shuffle;
__webpack_unused_export__ = Shuffle;
__webpack_unused_export__ = PanelLeft;
__webpack_unused_export__ = PanelLeftClose;
__webpack_unused_export__ = PanelLeftClose;
__webpack_unused_export__ = PanelLeft;
__webpack_unused_export__ = PanelLeftOpen;
__webpack_unused_export__ = PanelLeftOpen;
__webpack_unused_export__ = Sigma;
__webpack_unused_export__ = Sigma;
__webpack_unused_export__ = SigmaSquare;
__webpack_unused_export__ = SigmaSquare;
__webpack_unused_export__ = Signal;
__webpack_unused_export__ = SignalHigh;
__webpack_unused_export__ = SignalHigh;
__webpack_unused_export__ = Signal;
__webpack_unused_export__ = SignalLow;
__webpack_unused_export__ = SignalLow;
__webpack_unused_export__ = SignalMedium;
__webpack_unused_export__ = SignalMedium;
__webpack_unused_export__ = SignalZero;
__webpack_unused_export__ = SignalZero;
__webpack_unused_export__ = Siren;
__webpack_unused_export__ = Siren;
__webpack_unused_export__ = SkipBack;
__webpack_unused_export__ = SkipBack;
__webpack_unused_export__ = SkipForward;
__webpack_unused_export__ = SkipForward;
__webpack_unused_export__ = Skull;
__webpack_unused_export__ = Skull;
__webpack_unused_export__ = Slack;
__webpack_unused_export__ = Slack;
__webpack_unused_export__ = Ban;
__webpack_unused_export__ = Ban;
__webpack_unused_export__ = Slice;
__webpack_unused_export__ = Slice;
__webpack_unused_export__ = Sliders;
__webpack_unused_export__ = SlidersHorizontal;
__webpack_unused_export__ = SlidersHorizontal;
__webpack_unused_export__ = Sliders;
__webpack_unused_export__ = Smartphone;
__webpack_unused_export__ = SmartphoneCharging;
__webpack_unused_export__ = SmartphoneCharging;
__webpack_unused_export__ = Smartphone;
__webpack_unused_export__ = SmartphoneNfc;
__webpack_unused_export__ = SmartphoneNfc;
__webpack_unused_export__ = Smile;
__webpack_unused_export__ = Smile;
__webpack_unused_export__ = SmilePlus;
__webpack_unused_export__ = SmilePlus;
__webpack_unused_export__ = Snowflake;
__webpack_unused_export__ = Snowflake;
__webpack_unused_export__ = Sofa;
__webpack_unused_export__ = Sofa;
__webpack_unused_export__ = ArrowUpNarrowWide;
__webpack_unused_export__ = ArrowUpNarrowWide;
__webpack_unused_export__ = ArrowDownWideNarrow;
__webpack_unused_export__ = ArrowDownWideNarrow;
__webpack_unused_export__ = Soup;
__webpack_unused_export__ = Soup;
__webpack_unused_export__ = Space;
__webpack_unused_export__ = Space;
__webpack_unused_export__ = Spade;
__webpack_unused_export__ = Spade;
__webpack_unused_export__ = Sparkle;
__webpack_unused_export__ = Sparkle;
__webpack_unused_export__ = Sparkles;
__webpack_unused_export__ = Sparkles;
__webpack_unused_export__ = Speaker;
__webpack_unused_export__ = Speaker;
__webpack_unused_export__ = SpellCheck;
__webpack_unused_export__ = SpellCheck2;
__webpack_unused_export__ = SpellCheck2;
__webpack_unused_export__ = SpellCheck;
__webpack_unused_export__ = Spline;
__webpack_unused_export__ = Spline;
__webpack_unused_export__ = Split;
__webpack_unused_export__ = Split;
__webpack_unused_export__ = SplitSquareHorizontal;
__webpack_unused_export__ = SplitSquareHorizontal;
__webpack_unused_export__ = SplitSquareVertical;
__webpack_unused_export__ = SplitSquareVertical;
__webpack_unused_export__ = SprayCan;
__webpack_unused_export__ = SprayCan;
__webpack_unused_export__ = Sprout;
__webpack_unused_export__ = Sprout;
__webpack_unused_export__ = Square;
__webpack_unused_export__ = SquareAsterisk;
__webpack_unused_export__ = SquareAsterisk;
__webpack_unused_export__ = SquareCode;
__webpack_unused_export__ = SquareCode;
__webpack_unused_export__ = SquareDashedBottom;
__webpack_unused_export__ = SquareDashedBottomCode;
__webpack_unused_export__ = SquareDashedBottomCode;
__webpack_unused_export__ = SquareDashedBottom;
__webpack_unused_export__ = SquareDot;
__webpack_unused_export__ = SquareDot;
__webpack_unused_export__ = SquareEqual;
__webpack_unused_export__ = SquareEqual;
__webpack_unused_export__ = GanttChartSquare;
__webpack_unused_export__ = GanttChartSquare;
__webpack_unused_export__ = Square;
__webpack_unused_export__ = KanbanSquare;
__webpack_unused_export__ = KanbanSquareDashed;
__webpack_unused_export__ = KanbanSquareDashed;
__webpack_unused_export__ = KanbanSquare;
__webpack_unused_export__ = SquareSlash;
__webpack_unused_export__ = SquareSlash;
__webpack_unused_export__ = SquareStack;
__webpack_unused_export__ = SquareStack;
__webpack_unused_export__ = Squirrel;
__webpack_unused_export__ = Squirrel;
__webpack_unused_export__ = Stamp;
__webpack_unused_export__ = Stamp;
__webpack_unused_export__ = Star;
__webpack_unused_export__ = StarHalf;
__webpack_unused_export__ = StarHalf;
__webpack_unused_export__ = Star;
__webpack_unused_export__ = StarOff;
__webpack_unused_export__ = StarOff;
__webpack_unused_export__ = Sparkles;
__webpack_unused_export__ = Sparkles;
__webpack_unused_export__ = StepBack;
__webpack_unused_export__ = StepBack;
__webpack_unused_export__ = StepForward;
__webpack_unused_export__ = StepForward;
__webpack_unused_export__ = Stethoscope;
__webpack_unused_export__ = Stethoscope;
__webpack_unused_export__ = Sticker;
__webpack_unused_export__ = Sticker;
__webpack_unused_export__ = StickyNote;
__webpack_unused_export__ = StickyNote;
__webpack_unused_export__ = StopCircle;
__webpack_unused_export__ = StopCircle;
__webpack_unused_export__ = Store;
__webpack_unused_export__ = Store;
__webpack_unused_export__ = StretchHorizontal;
__webpack_unused_export__ = StretchHorizontal;
__webpack_unused_export__ = StretchVertical;
__webpack_unused_export__ = StretchVertical;
__webpack_unused_export__ = Strikethrough;
__webpack_unused_export__ = Strikethrough;
__webpack_unused_export__ = Subscript;
__webpack_unused_export__ = Subscript;
__webpack_unused_export__ = Subtitles;
__webpack_unused_export__ = Subtitles;
__webpack_unused_export__ = Sun;
__webpack_unused_export__ = SunDim;
__webpack_unused_export__ = SunDim;
__webpack_unused_export__ = Sun;
__webpack_unused_export__ = SunMedium;
__webpack_unused_export__ = SunMedium;
__webpack_unused_export__ = SunMoon;
__webpack_unused_export__ = SunMoon;
__webpack_unused_export__ = SunSnow;
__webpack_unused_export__ = SunSnow;
__webpack_unused_export__ = Sunrise;
__webpack_unused_export__ = Sunrise;
__webpack_unused_export__ = Sunset;
__webpack_unused_export__ = Sunset;
__webpack_unused_export__ = Superscript;
__webpack_unused_export__ = Superscript;
__webpack_unused_export__ = SwissFranc;
__webpack_unused_export__ = SwissFranc;
__webpack_unused_export__ = SwitchCamera;
__webpack_unused_export__ = SwitchCamera;
__webpack_unused_export__ = Sword;
__webpack_unused_export__ = Sword;
__webpack_unused_export__ = Swords;
__webpack_unused_export__ = Swords;
__webpack_unused_export__ = Syringe;
__webpack_unused_export__ = Syringe;
__webpack_unused_export__ = Table;
__webpack_unused_export__ = Table2;
__webpack_unused_export__ = Table2;
__webpack_unused_export__ = Table;
__webpack_unused_export__ = TableProperties;
__webpack_unused_export__ = TableProperties;
__webpack_unused_export__ = Tablet;
__webpack_unused_export__ = Tablet;
__webpack_unused_export__ = Tablets;
__webpack_unused_export__ = Tablets;
__webpack_unused_export__ = Tag;
__webpack_unused_export__ = Tag;
__webpack_unused_export__ = Tags;
__webpack_unused_export__ = Tags;
__webpack_unused_export__ = Tally1;
__webpack_unused_export__ = Tally1;
__webpack_unused_export__ = Tally2;
__webpack_unused_export__ = Tally2;
__webpack_unused_export__ = Tally3;
__webpack_unused_export__ = Tally3;
__webpack_unused_export__ = Tally4;
__webpack_unused_export__ = Tally4;
__webpack_unused_export__ = Tally5;
__webpack_unused_export__ = Tally5;
__webpack_unused_export__ = Target;
__webpack_unused_export__ = Target;
__webpack_unused_export__ = Tent;
__webpack_unused_export__ = Tent;
__webpack_unused_export__ = Terminal;
__webpack_unused_export__ = Terminal;
__webpack_unused_export__ = TerminalSquare;
__webpack_unused_export__ = TerminalSquare;
__webpack_unused_export__ = TestTube;
__webpack_unused_export__ = TestTube2;
__webpack_unused_export__ = TestTube2;
__webpack_unused_export__ = TestTube;
__webpack_unused_export__ = TestTubes;
__webpack_unused_export__ = TestTubes;
__webpack_unused_export__ = Text;
__webpack_unused_export__ = TextCursor;
__webpack_unused_export__ = TextCursor;
__webpack_unused_export__ = TextCursorInput;
__webpack_unused_export__ = TextCursorInput;
__webpack_unused_export__ = Text;
__webpack_unused_export__ = TextQuote;
__webpack_unused_export__ = TextQuote;
__webpack_unused_export__ = TextSelect;
__webpack_unused_export__ = TextSelect;
__webpack_unused_export__ = TextSelect;
__webpack_unused_export__ = TextSelect;
__webpack_unused_export__ = Thermometer;
__webpack_unused_export__ = Thermometer;
__webpack_unused_export__ = ThermometerSnowflake;
__webpack_unused_export__ = ThermometerSnowflake;
__webpack_unused_export__ = ThermometerSun;
__webpack_unused_export__ = ThermometerSun;
__webpack_unused_export__ = ThumbsDown;
__webpack_unused_export__ = ThumbsDown;
__webpack_unused_export__ = ThumbsUp;
__webpack_unused_export__ = ThumbsUp;
__webpack_unused_export__ = Ticket;
__webpack_unused_export__ = Ticket;
__webpack_unused_export__ = Timer;
__webpack_unused_export__ = Timer;
__webpack_unused_export__ = TimerOff;
__webpack_unused_export__ = TimerOff;
__webpack_unused_export__ = TimerReset;
__webpack_unused_export__ = TimerReset;
__webpack_unused_export__ = ToggleLeft;
__webpack_unused_export__ = ToggleLeft;
__webpack_unused_export__ = ToggleRight;
__webpack_unused_export__ = ToggleRight;
__webpack_unused_export__ = Tornado;
__webpack_unused_export__ = Tornado;
__webpack_unused_export__ = Touchpad;
__webpack_unused_export__ = Touchpad;
__webpack_unused_export__ = TouchpadOff;
__webpack_unused_export__ = TouchpadOff;
__webpack_unused_export__ = TowerControl;
__webpack_unused_export__ = TowerControl;
__webpack_unused_export__ = ToyBrick;
__webpack_unused_export__ = ToyBrick;
__webpack_unused_export__ = Train;
__webpack_unused_export__ = Train;
__webpack_unused_export__ = Trash;
__webpack_unused_export__ = Trash2;
__webpack_unused_export__ = Trash2;
__webpack_unused_export__ = Trash;
__webpack_unused_export__ = TreeDeciduous;
__webpack_unused_export__ = TreeDeciduous;
__webpack_unused_export__ = TreePine;
__webpack_unused_export__ = TreePine;
__webpack_unused_export__ = Trees;
__webpack_unused_export__ = Trees;
__webpack_unused_export__ = Trello;
__webpack_unused_export__ = Trello;
__webpack_unused_export__ = TrendingDown;
__webpack_unused_export__ = TrendingDown;
__webpack_unused_export__ = TrendingUp;
__webpack_unused_export__ = TrendingUp;
__webpack_unused_export__ = Triangle;
__webpack_unused_export__ = Triangle;
__webpack_unused_export__ = Trophy;
__webpack_unused_export__ = Trophy;
__webpack_unused_export__ = Truck;
__webpack_unused_export__ = Truck;
__webpack_unused_export__ = Tv;
__webpack_unused_export__ = Tv2;
__webpack_unused_export__ = Tv2;
__webpack_unused_export__ = Tv;
__webpack_unused_export__ = Twitch;
__webpack_unused_export__ = Twitch;
__webpack_unused_export__ = Twitter;
__webpack_unused_export__ = Twitter;
__webpack_unused_export__ = Type;
__webpack_unused_export__ = Type;
__webpack_unused_export__ = Umbrella;
__webpack_unused_export__ = Umbrella;
__webpack_unused_export__ = Underline;
__webpack_unused_export__ = Underline;
__webpack_unused_export__ = Undo;
__webpack_unused_export__ = Undo2;
__webpack_unused_export__ = Undo2;
__webpack_unused_export__ = UndoDot;
__webpack_unused_export__ = UndoDot;
__webpack_unused_export__ = Undo;
__webpack_unused_export__ = UnfoldHorizontal;
__webpack_unused_export__ = UnfoldHorizontal;
__webpack_unused_export__ = UnfoldVertical;
__webpack_unused_export__ = UnfoldVertical;
__webpack_unused_export__ = Ungroup;
__webpack_unused_export__ = Ungroup;
__webpack_unused_export__ = Unlink;
__webpack_unused_export__ = Unlink2;
__webpack_unused_export__ = Unlink2;
__webpack_unused_export__ = Unlink;
__webpack_unused_export__ = Unlock;
__webpack_unused_export__ = Unlock;
__webpack_unused_export__ = Unplug;
__webpack_unused_export__ = Unplug;
__webpack_unused_export__ = Upload;
__webpack_unused_export__ = UploadCloud;
__webpack_unused_export__ = UploadCloud;
__webpack_unused_export__ = Upload;
__webpack_unused_export__ = Usb;
__webpack_unused_export__ = Usb;
__webpack_unused_export__ = User;
__webpack_unused_export__ = User2;
__webpack_unused_export__ = User2;
__webpack_unused_export__ = UserCheck;
__webpack_unused_export__ = UserCheck2;
__webpack_unused_export__ = UserCheck2;
__webpack_unused_export__ = UserCheck;
__webpack_unused_export__ = UserCircle;
__webpack_unused_export__ = UserCircle2;
__webpack_unused_export__ = UserCircle2;
__webpack_unused_export__ = UserCircle;
__webpack_unused_export__ = UserCog;
__webpack_unused_export__ = UserCog2;
__webpack_unused_export__ = UserCog2;
__webpack_unused_export__ = UserCog;
__webpack_unused_export__ = User;
__webpack_unused_export__ = UserMinus;
__webpack_unused_export__ = UserMinus2;
__webpack_unused_export__ = UserMinus2;
__webpack_unused_export__ = UserMinus;
__webpack_unused_export__ = UserPlus;
__webpack_unused_export__ = UserPlus2;
__webpack_unused_export__ = UserPlus2;
__webpack_unused_export__ = UserPlus;
__webpack_unused_export__ = UserSquare;
__webpack_unused_export__ = UserSquare2;
__webpack_unused_export__ = UserSquare2;
__webpack_unused_export__ = UserSquare;
__webpack_unused_export__ = UserX;
__webpack_unused_export__ = UserX2;
__webpack_unused_export__ = UserX2;
__webpack_unused_export__ = UserX;
__webpack_unused_export__ = Users;
__webpack_unused_export__ = Users2;
__webpack_unused_export__ = Users2;
__webpack_unused_export__ = Users;
__webpack_unused_export__ = Utensils;
__webpack_unused_export__ = UtensilsCrossed;
__webpack_unused_export__ = UtensilsCrossed;
__webpack_unused_export__ = Utensils;
__webpack_unused_export__ = UtilityPole;
__webpack_unused_export__ = UtilityPole;
__webpack_unused_export__ = Variable;
__webpack_unused_export__ = Variable;
__webpack_unused_export__ = Vegan;
__webpack_unused_export__ = Vegan;
__webpack_unused_export__ = VenetianMask;
__webpack_unused_export__ = VenetianMask;
__webpack_unused_export__ = BadgeCheck;
__webpack_unused_export__ = BadgeCheck;
__webpack_unused_export__ = Vibrate;
__webpack_unused_export__ = Vibrate;
__webpack_unused_export__ = VibrateOff;
__webpack_unused_export__ = VibrateOff;
__webpack_unused_export__ = Video;
__webpack_unused_export__ = Video;
__webpack_unused_export__ = VideoOff;
__webpack_unused_export__ = VideoOff;
__webpack_unused_export__ = Videotape;
__webpack_unused_export__ = Videotape;
__webpack_unused_export__ = View;
__webpack_unused_export__ = View;
__webpack_unused_export__ = Voicemail;
__webpack_unused_export__ = Voicemail;
__webpack_unused_export__ = Volume;
__webpack_unused_export__ = Volume1;
__webpack_unused_export__ = Volume1;
__webpack_unused_export__ = Volume2;
__webpack_unused_export__ = Volume2;
__webpack_unused_export__ = Volume;
__webpack_unused_export__ = VolumeX;
__webpack_unused_export__ = VolumeX;
__webpack_unused_export__ = Vote;
__webpack_unused_export__ = Vote;
__webpack_unused_export__ = Wallet;
__webpack_unused_export__ = Wallet2;
__webpack_unused_export__ = Wallet2;
__webpack_unused_export__ = WalletCards;
__webpack_unused_export__ = WalletCards;
__webpack_unused_export__ = Wallet;
__webpack_unused_export__ = Wallpaper;
__webpack_unused_export__ = Wallpaper;
__webpack_unused_export__ = Wand;
__webpack_unused_export__ = Wand2;
__webpack_unused_export__ = Wand2;
__webpack_unused_export__ = Wand;
__webpack_unused_export__ = Warehouse;
__webpack_unused_export__ = Warehouse;
__webpack_unused_export__ = Watch;
__webpack_unused_export__ = Watch;
__webpack_unused_export__ = Waves;
__webpack_unused_export__ = Waves;
__webpack_unused_export__ = Webcam;
__webpack_unused_export__ = Webcam;
__webpack_unused_export__ = Webhook;
__webpack_unused_export__ = Webhook;
__webpack_unused_export__ = Wheat;
__webpack_unused_export__ = Wheat;
__webpack_unused_export__ = WheatOff;
__webpack_unused_export__ = WheatOff;
__webpack_unused_export__ = WholeWord;
__webpack_unused_export__ = WholeWord;
__webpack_unused_export__ = Wifi;
__webpack_unused_export__ = Wifi;
__webpack_unused_export__ = WifiOff;
__webpack_unused_export__ = WifiOff;
__webpack_unused_export__ = Wind;
__webpack_unused_export__ = Wind;
__webpack_unused_export__ = Wine;
__webpack_unused_export__ = Wine;
__webpack_unused_export__ = WineOff;
__webpack_unused_export__ = WineOff;
__webpack_unused_export__ = Workflow;
__webpack_unused_export__ = Workflow;
__webpack_unused_export__ = WrapText;
__webpack_unused_export__ = WrapText;
__webpack_unused_export__ = Wrench;
__webpack_unused_export__ = Wrench;
__webpack_unused_export__ = X;
__webpack_unused_export__ = XCircle;
__webpack_unused_export__ = XCircle;
__webpack_unused_export__ = X;
__webpack_unused_export__ = XOctagon;
__webpack_unused_export__ = XOctagon;
__webpack_unused_export__ = XSquare;
__webpack_unused_export__ = XSquare;
__webpack_unused_export__ = Youtube;
__webpack_unused_export__ = Youtube;
__webpack_unused_export__ = Zap;
__webpack_unused_export__ = Zap;
__webpack_unused_export__ = ZapOff;
__webpack_unused_export__ = ZapOff;
__webpack_unused_export__ = ZoomIn;
__webpack_unused_export__ = ZoomIn;
__webpack_unused_export__ = ZoomOut;
__webpack_unused_export__ = ZoomOut;
__webpack_unused_export__ = createLucideIcon;
__webpack_unused_export__ = dynamicIconImports;
__webpack_unused_export__ = index; //# sourceMappingURL=lucide-react.js.map


/***/ }),

/***/ 90210:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var ReactPropTypesSecret = __webpack_require__(31407);
function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
module.exports = function() {
    function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
            // It is still safe when called from React.
            return;
        }
        var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. " + "Use PropTypes.checkPropTypes() to call them. " + "Read more at http://fb.me/use-check-prop-types");
        err.name = "Invariant Violation";
        throw err;
    }
    ;
    shim.isRequired = shim;
    function getShim() {
        return shim;
    }
    ;
    // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};


/***/ }),

/***/ 59102:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
if (false) { var throwOnDirectAccess, ReactIs; } else {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    module.exports = __webpack_require__(90210)();
}


/***/ }),

/***/ 31407:
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
module.exports = ReactPropTypesSecret;


/***/ }),

/***/ 9947:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var b = Symbol.for("react.element"), c = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
u = Symbol.for("react.module.reference");
function v(a) {
    if ("object" === typeof a && null !== a) {
        var r = a.$$typeof;
        switch(r){
            case b:
                switch(a = a.type, a){
                    case d:
                    case f:
                    case e:
                    case m:
                    case n:
                        return a;
                    default:
                        switch(a = a && a.$$typeof, a){
                            case k:
                            case h:
                            case l:
                            case q:
                            case p:
                            case g:
                                return a;
                            default:
                                return r;
                        }
                }
            case c:
                return r;
        }
    }
}
exports.ContextConsumer = h;
exports.ContextProvider = g;
exports.Element = b;
exports.ForwardRef = l;
exports.Fragment = d;
exports.Lazy = q;
exports.Memo = p;
exports.Portal = c;
exports.Profiler = f;
exports.StrictMode = e;
exports.Suspense = m;
exports.SuspenseList = n;
exports.isAsyncMode = function() {
    return !1;
};
exports.isConcurrentMode = function() {
    return !1;
};
exports.isContextConsumer = function(a) {
    return v(a) === h;
};
exports.isContextProvider = function(a) {
    return v(a) === g;
};
exports.isElement = function(a) {
    return "object" === typeof a && null !== a && a.$$typeof === b;
};
exports.isForwardRef = function(a) {
    return v(a) === l;
};
exports.isFragment = function(a) {
    return v(a) === d;
};
exports.isLazy = function(a) {
    return v(a) === q;
};
exports.isMemo = function(a) {
    return v(a) === p;
};
exports.isPortal = function(a) {
    return v(a) === c;
};
exports.isProfiler = function(a) {
    return v(a) === f;
};
exports.isStrictMode = function(a) {
    return v(a) === e;
};
exports.isSuspense = function(a) {
    return v(a) === m;
};
exports.isSuspenseList = function(a) {
    return v(a) === n;
};
exports.isValidElementType = function(a) {
    return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;
};
exports.typeOf = v;


/***/ }),

/***/ 90982:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

if (true) {
    module.exports = __webpack_require__(9947);
} else {}


/***/ }),

/***/ 12238:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var parse = __webpack_require__(37046);
/**
 * Parses inline style to object.
 *
 * @example
 * // returns { 'line-height': '42' }
 * StyleToObject('line-height: 42;');
 *
 * @param  {String}      style      - The inline style.
 * @param  {Function}    [iterator] - The iterator function.
 * @return {null|Object}
 */ function StyleToObject(style, iterator) {
    var output = null;
    if (!style || typeof style !== "string") {
        return output;
    }
    var declaration;
    var declarations = parse(style);
    var hasIterator = typeof iterator === "function";
    var property;
    var value;
    for(var i = 0, len = declarations.length; i < len; i++){
        declaration = declarations[i];
        property = declaration.property;
        value = declaration.value;
        if (hasIterator) {
            iterator(property, value, declaration);
        } else if (value) {
            output || (output = {});
            output[property] = value;
        }
    }
    return output;
}
module.exports = StyleToObject;
module.exports["default"] = StyleToObject; // ESM support


/***/ }),

/***/ 26450:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $j: () => (/* binding */ $905f4ae918aab1aa$export$848c9b7ead0df967),
/* harmony export */   Dx: () => (/* binding */ $905f4ae918aab1aa$export$f99233281efd08a0),
/* harmony export */   VY: () => (/* binding */ $905f4ae918aab1aa$export$7c6e2c02157bb7d2),
/* harmony export */   aU: () => (/* binding */ $905f4ae918aab1aa$export$e19cd5f9376f8cee),
/* harmony export */   aV: () => (/* binding */ $905f4ae918aab1aa$export$c6fdb837b070b4ff),
/* harmony export */   dk: () => (/* binding */ $905f4ae918aab1aa$export$393edc798c47379d),
/* harmony export */   fC: () => (/* binding */ $905f4ae918aab1aa$export$be92b6f5f03c0fe9),
/* harmony export */   h_: () => (/* binding */ $905f4ae918aab1aa$export$602eac185826482c),
/* harmony export */   xz: () => (/* binding */ $905f4ae918aab1aa$export$41fb9f06171c75f4)
/* harmony export */ });
/* unused harmony exports createAlertDialogScope, AlertDialog, AlertDialogTrigger, AlertDialogPortal, AlertDialogOverlay, AlertDialogContent, AlertDialogAction, AlertDialogCancel, AlertDialogTitle, AlertDialogDescription */
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94050);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18038);
/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(34288);
/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7655);
/* harmony import */ var _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82550);
/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14614);
/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96004);
















/* -------------------------------------------------------------------------------------------------
 * AlertDialog
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$ROOT_NAME = 'AlertDialog';
const [$905f4ae918aab1aa$var$createAlertDialogContext, $905f4ae918aab1aa$export$b8891880751c2c5b] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_1__/* .createContextScope */ .b)($905f4ae918aab1aa$var$ROOT_NAME, [
    _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .createDialogScope */ .p8
]);
const $905f4ae918aab1aa$var$useDialogScope = (0,_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .createDialogScope */ .p8)();
const $905f4ae918aab1aa$export$de466dd8317b0b75 = (props)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...alertDialogProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .fC, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, alertDialogProps, {
        modal: true
    }));
};
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$de466dd8317b0b75, {
    displayName: $905f4ae918aab1aa$var$ROOT_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogTrigger
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$TRIGGER_NAME = 'AlertDialogTrigger';
const $905f4ae918aab1aa$export$6edd7a623ef0f40b = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...triggerProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Trigger */ .xz, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, triggerProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$6edd7a623ef0f40b, {
    displayName: $905f4ae918aab1aa$var$TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogPortal
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$PORTAL_NAME = 'AlertDialogPortal';
const $905f4ae918aab1aa$export$660f2bfdb986706c = (props)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...portalProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Portal */ .h_, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, portalProps));
};
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$660f2bfdb986706c, {
    displayName: $905f4ae918aab1aa$var$PORTAL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogOverlay
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$OVERLAY_NAME = 'AlertDialogOverlay';
const $905f4ae918aab1aa$export$a707a4895ce23256 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...overlayProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Overlay */ .aV, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, overlayProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$a707a4895ce23256, {
    displayName: $905f4ae918aab1aa$var$OVERLAY_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogContent
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$CONTENT_NAME = 'AlertDialogContent';
const [$905f4ae918aab1aa$var$AlertDialogContentProvider, $905f4ae918aab1aa$var$useAlertDialogContentContext] = $905f4ae918aab1aa$var$createAlertDialogContext($905f4ae918aab1aa$var$CONTENT_NAME);
const $905f4ae918aab1aa$export$94e6af45f0af4efd = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , children: children , ...contentProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__/* .useComposedRefs */ .e)(forwardedRef, contentRef);
    const cancelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .WarningProvider */ .jm, {
        contentName: $905f4ae918aab1aa$var$CONTENT_NAME,
        titleName: $905f4ae918aab1aa$var$TITLE_NAME,
        docsSlug: "alert-dialog"
    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)($905f4ae918aab1aa$var$AlertDialogContentProvider, {
        scope: __scopeAlertDialog,
        cancelRef: cancelRef
    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .VY, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({
        role: "alertdialog"
    }, dialogScope, contentProps, {
        ref: composedRefs,
        onOpenAutoFocus: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_5__/* .composeEventHandlers */ .M)(contentProps.onOpenAutoFocus, (event)=>{
            var _cancelRef$current;
            event.preventDefault();
            (_cancelRef$current = cancelRef.current) === null || _cancelRef$current === void 0 || _cancelRef$current.focus({
                preventScroll: true
            });
        }),
        onPointerDownOutside: (event)=>event.preventDefault()
        ,
        onInteractOutside: (event)=>event.preventDefault()
    }), /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_6__/* .Slottable */ .A4, null, children), false)));
});
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$94e6af45f0af4efd, {
    displayName: $905f4ae918aab1aa$var$CONTENT_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogTitle
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$TITLE_NAME = 'AlertDialogTitle';
const $905f4ae918aab1aa$export$225e0da62d314b7 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...titleProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Title */ .Dx, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, titleProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$225e0da62d314b7, {
    displayName: $905f4ae918aab1aa$var$TITLE_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogDescription
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$DESCRIPTION_NAME = 'AlertDialogDescription';
const $905f4ae918aab1aa$export$a23b55cde55ad9a5 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...descriptionProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Description */ .dk, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, descriptionProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$a23b55cde55ad9a5, {
    displayName: $905f4ae918aab1aa$var$DESCRIPTION_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogAction
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$ACTION_NAME = 'AlertDialogAction';
const $905f4ae918aab1aa$export$b454f818c58ee85d = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...actionProps } = props;
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Close */ .x8, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, actionProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$b454f818c58ee85d, {
    displayName: $905f4ae918aab1aa$var$ACTION_NAME
});
/* -------------------------------------------------------------------------------------------------
 * AlertDialogCancel
 * -----------------------------------------------------------------------------------------------*/ const $905f4ae918aab1aa$var$CANCEL_NAME = 'AlertDialogCancel';
const $905f4ae918aab1aa$export$2f67a923571aaea0 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeAlertDialog: __scopeAlertDialog , ...cancelProps } = props;
    const { cancelRef: cancelRef  } = $905f4ae918aab1aa$var$useAlertDialogContentContext($905f4ae918aab1aa$var$CANCEL_NAME, __scopeAlertDialog);
    const dialogScope = $905f4ae918aab1aa$var$useDialogScope(__scopeAlertDialog);
    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__/* .useComposedRefs */ .e)(forwardedRef, cancelRef);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Close */ .x8, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({}, dialogScope, cancelProps, {
        ref: ref
    }));
});
/*#__PURE__*/ Object.assign($905f4ae918aab1aa$export$2f67a923571aaea0, {
    displayName: $905f4ae918aab1aa$var$CANCEL_NAME
});
/* ---------------------------------------------------------------------------------------------- */ const $905f4ae918aab1aa$var$DescriptionWarning = ({ contentRef: contentRef  })=>{
    const MESSAGE = `\`${$905f4ae918aab1aa$var$CONTENT_NAME}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${$905f4ae918aab1aa$var$CONTENT_NAME}\` by passing a \`${$905f4ae918aab1aa$var$DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${$905f4ae918aab1aa$var$CONTENT_NAME}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;
    $4k4D0$useEffect(()=>{
        var _contentRef$current;
        const hasDescription = document.getElementById((_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.getAttribute('aria-describedby'));
        if (!hasDescription) console.warn(MESSAGE);
    }, [
        MESSAGE,
        contentRef
    ]);
    return null;
};
const $905f4ae918aab1aa$export$be92b6f5f03c0fe9 = $905f4ae918aab1aa$export$de466dd8317b0b75;
const $905f4ae918aab1aa$export$41fb9f06171c75f4 = $905f4ae918aab1aa$export$6edd7a623ef0f40b;
const $905f4ae918aab1aa$export$602eac185826482c = $905f4ae918aab1aa$export$660f2bfdb986706c;
const $905f4ae918aab1aa$export$c6fdb837b070b4ff = $905f4ae918aab1aa$export$a707a4895ce23256;
const $905f4ae918aab1aa$export$7c6e2c02157bb7d2 = $905f4ae918aab1aa$export$94e6af45f0af4efd;
const $905f4ae918aab1aa$export$e19cd5f9376f8cee = $905f4ae918aab1aa$export$b454f818c58ee85d;
const $905f4ae918aab1aa$export$848c9b7ead0df967 = $905f4ae918aab1aa$export$2f67a923571aaea0;
const $905f4ae918aab1aa$export$f99233281efd08a0 = $905f4ae918aab1aa$export$225e0da62d314b7;
const $905f4ae918aab1aa$export$393edc798c47379d = $905f4ae918aab1aa$export$a23b55cde55ad9a5;





//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 35430:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ee: () => (/* binding */ $1b0217ee4a91d156$export$a98f0dcb43a68a25),
/* harmony export */   Rk: () => (/* binding */ $1b0217ee4a91d156$export$371ab307eab489c0),
/* harmony export */   Tr: () => (/* binding */ $1b0217ee4a91d156$export$d7a01e11500dfb6f),
/* harmony export */   Uv: () => (/* binding */ $1b0217ee4a91d156$export$602eac185826482c),
/* harmony export */   VY: () => (/* binding */ $1b0217ee4a91d156$export$7c6e2c02157bb7d2),
/* harmony export */   Z0: () => (/* binding */ $1b0217ee4a91d156$export$1ff3c3f08ae963c0),
/* harmony export */   ZA: () => (/* binding */ $1b0217ee4a91d156$export$eb2fcfdbd7ba97d4),
/* harmony export */   __: () => (/* binding */ $1b0217ee4a91d156$export$b04be29aa201d4f5),
/* harmony export */   ck: () => (/* binding */ $1b0217ee4a91d156$export$6d08773d2e66f8f2),
/* harmony export */   fC: () => (/* binding */ $1b0217ee4a91d156$export$be92b6f5f03c0fe9),
/* harmony export */   fF: () => (/* binding */ $1b0217ee4a91d156$export$2ea8a7a591ac5eac),
/* harmony export */   oC: () => (/* binding */ $1b0217ee4a91d156$export$16ce288f89fa631c),
/* harmony export */   tu: () => (/* binding */ $1b0217ee4a91d156$export$6d4de93b380beddf),
/* harmony export */   wU: () => (/* binding */ $1b0217ee4a91d156$export$c3468e2714d175fa),
/* harmony export */   xz: () => (/* binding */ $1b0217ee4a91d156$export$41fb9f06171c75f4)
/* harmony export */ });
/* unused harmony exports createContextMenuScope, ContextMenu, ContextMenuTrigger, ContextMenuPortal, ContextMenuContent, ContextMenuGroup, ContextMenuLabel, ContextMenuItem, ContextMenuCheckboxItem, ContextMenuRadioGroup, ContextMenuRadioItem, ContextMenuItemIndicator, ContextMenuSeparator, ContextMenuArrow, ContextMenuSub, ContextMenuSubTrigger, ContextMenuSubContent, Arrow */
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94050);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18038);
/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14614);
/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(34288);
/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(58767);
/* harmony import */ var _radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4328);
/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66676);
/* harmony import */ var _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(65330);


















/* -------------------------------------------------------------------------------------------------
 * ContextMenu
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$CONTEXT_MENU_NAME = 'ContextMenu';
const [$1b0217ee4a91d156$var$createContextMenuContext, $1b0217ee4a91d156$export$1059331f43ddcc82] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_1__/* .createContextScope */ .b)($1b0217ee4a91d156$var$CONTEXT_MENU_NAME, [
    _radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .createMenuScope */ .Wf
]);
const $1b0217ee4a91d156$var$useMenuScope = (0,_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .createMenuScope */ .Wf)();
const [$1b0217ee4a91d156$var$ContextMenuProvider, $1b0217ee4a91d156$var$useContextMenuContext] = $1b0217ee4a91d156$var$createContextMenuContext($1b0217ee4a91d156$var$CONTEXT_MENU_NAME);
const $1b0217ee4a91d156$export$8dc6765e8be191c7 = (props)=>{
    const { __scopeContextMenu: __scopeContextMenu , children: children , onOpenChange: onOpenChange , dir: dir , modal: modal = true  } = props;
    const [open1, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const handleOpenChangeProp = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_3__/* .useCallbackRef */ .W)(onOpenChange);
    const handleOpenChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((open)=>{
        setOpen(open);
        handleOpenChangeProp(open);
    }, [
        handleOpenChangeProp
    ]);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)($1b0217ee4a91d156$var$ContextMenuProvider, {
        scope: __scopeContextMenu,
        open: open1,
        onOpenChange: handleOpenChange,
        modal: modal
    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .fC, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, {
        dir: dir,
        open: open1,
        onOpenChange: handleOpenChange,
        modal: modal
    }), children));
};
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$8dc6765e8be191c7, {
    displayName: $1b0217ee4a91d156$var$CONTEXT_MENU_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuTrigger
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$TRIGGER_NAME = 'ContextMenuTrigger';
const $1b0217ee4a91d156$export$be6fc7b1d5b0beb9 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , disabled: disabled = false , ...triggerProps } = props;
    const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$TRIGGER_NAME, __scopeContextMenu);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const pointRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
        x: 0,
        y: 0
    });
    const virtualRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({
        getBoundingClientRect: ()=>DOMRect.fromRect({
                width: 0,
                height: 0,
                ...pointRef.current
            })
    });
    const longPressTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
    const clearLongPress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>window.clearTimeout(longPressTimerRef.current)
    , []);
    const handleOpen = (event)=>{
        pointRef.current = {
            x: event.clientX,
            y: event.clientY
        };
        context.onOpenChange(true);
    };
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>clearLongPress
    , [
        clearLongPress
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>void (disabled && clearLongPress())
    , [
        disabled,
        clearLongPress
    ]);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Anchor */ .ee, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, {
        virtualRef: virtualRef
    })), /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__/* .Primitive */ .WV.span, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({
        "data-state": context.open ? 'open' : 'closed',
        "data-disabled": disabled ? '' : undefined
    }, triggerProps, {
        ref: forwardedRef // prevent iOS context menu from appearing
        ,
        style: {
            WebkitTouchCallout: 'none',
            ...props.style
        } // if trigger is disabled, enable the native Context Menu
        ,
        onContextMenu: disabled ? props.onContextMenu : (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__/* .composeEventHandlers */ .M)(props.onContextMenu, (event)=>{
            // clearing the long press here because some platforms already support
            // long press to trigger a `contextmenu` event
            clearLongPress();
            handleOpen(event);
            event.preventDefault();
        }),
        onPointerDown: disabled ? props.onPointerDown : (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__/* .composeEventHandlers */ .M)(props.onPointerDown, $1b0217ee4a91d156$var$whenTouchOrPen((event)=>{
            // clear the long press here in case there's multiple touch points
            clearLongPress();
            longPressTimerRef.current = window.setTimeout(()=>handleOpen(event)
            , 700);
        })),
        onPointerMove: disabled ? props.onPointerMove : (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__/* .composeEventHandlers */ .M)(props.onPointerMove, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
        onPointerCancel: disabled ? props.onPointerCancel : (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__/* .composeEventHandlers */ .M)(props.onPointerCancel, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
        onPointerUp: disabled ? props.onPointerUp : (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__/* .composeEventHandlers */ .M)(props.onPointerUp, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress))
    })));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$be6fc7b1d5b0beb9, {
    displayName: $1b0217ee4a91d156$var$TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuPortal
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$PORTAL_NAME = 'ContextMenuPortal';
const $1b0217ee4a91d156$export$14afd0be83e45060 = (props)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...portalProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Portal */ .h_, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, portalProps));
};
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$14afd0be83e45060, {
    displayName: $1b0217ee4a91d156$var$PORTAL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuContent
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$CONTENT_NAME = 'ContextMenuContent';
const $1b0217ee4a91d156$export$572205900c9369e = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...contentProps } = props;
    const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$CONTENT_NAME, __scopeContextMenu);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const hasInteractedOutsideRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .VY, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, contentProps, {
        ref: forwardedRef,
        side: "right",
        sideOffset: 2,
        align: "start",
        onCloseAutoFocus: (event)=>{
            var _props$onCloseAutoFoc;
            (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
            if (!event.defaultPrevented && hasInteractedOutsideRef.current) event.preventDefault();
            hasInteractedOutsideRef.current = false;
        },
        onInteractOutside: (event)=>{
            var _props$onInteractOuts;
            (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
            if (!event.defaultPrevented && !context.modal) hasInteractedOutsideRef.current = true;
        },
        style: {
            ...props.style,
            '--radix-context-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',
            '--radix-context-menu-content-available-width': 'var(--radix-popper-available-width)',
            '--radix-context-menu-content-available-height': 'var(--radix-popper-available-height)',
            '--radix-context-menu-trigger-width': 'var(--radix-popper-anchor-width)',
            '--radix-context-menu-trigger-height': 'var(--radix-popper-anchor-height)'
        }
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$572205900c9369e, {
    displayName: $1b0217ee4a91d156$var$CONTENT_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuGroup
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$GROUP_NAME = 'ContextMenuGroup';
const $1b0217ee4a91d156$export$9860523b0fcdd664 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...groupProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Group */ .ZA, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, groupProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$9860523b0fcdd664, {
    displayName: $1b0217ee4a91d156$var$GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuLabel
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$LABEL_NAME = 'ContextMenuLabel';
const $1b0217ee4a91d156$export$d4b9d3b609a10742 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...labelProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Label */ .__, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, labelProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$d4b9d3b609a10742, {
    displayName: $1b0217ee4a91d156$var$LABEL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuItem
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$ITEM_NAME = 'ContextMenuItem';
const $1b0217ee4a91d156$export$16a26dc176a49100 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...itemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, itemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$16a26dc176a49100, {
    displayName: $1b0217ee4a91d156$var$ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuCheckboxItem
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$CHECKBOX_ITEM_NAME = 'ContextMenuCheckboxItem';
const $1b0217ee4a91d156$export$b6adbe51d5d8b7ec = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...checkboxItemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .CheckboxItem */ .oC, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, checkboxItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$b6adbe51d5d8b7ec, {
    displayName: $1b0217ee4a91d156$var$CHECKBOX_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuRadioGroup
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$RADIO_GROUP_NAME = 'ContextMenuRadioGroup';
const $1b0217ee4a91d156$export$db5c89af5ed9aa07 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...radioGroupProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .RadioGroup */ .Ee, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, radioGroupProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$db5c89af5ed9aa07, {
    displayName: $1b0217ee4a91d156$var$RADIO_GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuRadioItem
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$RADIO_ITEM_NAME = 'ContextMenuRadioItem';
const $1b0217ee4a91d156$export$8a727d09a7d9bfc2 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...radioItemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .RadioItem */ .Rk, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, radioItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$8a727d09a7d9bfc2, {
    displayName: $1b0217ee4a91d156$var$RADIO_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuItemIndicator
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$INDICATOR_NAME = 'ContextMenuItemIndicator';
const $1b0217ee4a91d156$export$9ed8194dee42d94b = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...itemIndicatorProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .ItemIndicator */ .wU, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, itemIndicatorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$9ed8194dee42d94b, {
    displayName: $1b0217ee4a91d156$var$INDICATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSeparator
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SEPARATOR_NAME = 'ContextMenuSeparator';
const $1b0217ee4a91d156$export$8d6b009fadfe1207 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...separatorProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Separator */ .Z0, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, separatorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$8d6b009fadfe1207, {
    displayName: $1b0217ee4a91d156$var$SEPARATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuArrow
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$ARROW_NAME = 'ContextMenuArrow';
const $1b0217ee4a91d156$export$f47d0a58228a61e2 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...arrowProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Arrow */ .Eh, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, arrowProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$f47d0a58228a61e2, {
    displayName: $1b0217ee4a91d156$var$ARROW_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSub
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SUB_NAME = 'ContextMenuSub';
const $1b0217ee4a91d156$export$5bc21d1c00c4b201 = (props)=>{
    const { __scopeContextMenu: __scopeContextMenu , children: children , onOpenChange: onOpenChange , open: openProp , defaultOpen: defaultOpen  } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const [open, setOpen] = (0,_radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_7__/* .useControllableState */ .T)({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .Sub */ .Tr, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, {
        open: open,
        onOpenChange: setOpen
    }), children);
};
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$5bc21d1c00c4b201, {
    displayName: $1b0217ee4a91d156$var$SUB_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSubTrigger
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SUB_TRIGGER_NAME = 'ContextMenuSubTrigger';
const $1b0217ee4a91d156$export$30b2b5c64556d316 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...triggerItemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .SubTrigger */ .fF, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, triggerItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$30b2b5c64556d316, {
    displayName: $1b0217ee4a91d156$var$SUB_TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSubContent
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SUB_CONTENT_NAME = 'ContextMenuSubContent';
const $1b0217ee4a91d156$export$2c967063bd2dc512 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...subContentProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_radix_ui_react_menu__WEBPACK_IMPORTED_MODULE_2__/* .SubContent */ .tu, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({}, menuScope, subContentProps, {
        ref: forwardedRef,
        style: {
            ...props.style,
            '--radix-context-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',
            '--radix-context-menu-content-available-width': 'var(--radix-popper-available-width)',
            '--radix-context-menu-content-available-height': 'var(--radix-popper-available-height)',
            '--radix-context-menu-trigger-width': 'var(--radix-popper-anchor-width)',
            '--radix-context-menu-trigger-height': 'var(--radix-popper-anchor-height)'
        }
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$2c967063bd2dc512, {
    displayName: $1b0217ee4a91d156$var$SUB_CONTENT_NAME
});
/* -----------------------------------------------------------------------------------------------*/ function $1b0217ee4a91d156$var$whenTouchOrPen(handler) {
    return (event)=>event.pointerType !== 'mouse' ? handler(event) : undefined
    ;
}
const $1b0217ee4a91d156$export$be92b6f5f03c0fe9 = $1b0217ee4a91d156$export$8dc6765e8be191c7;
const $1b0217ee4a91d156$export$41fb9f06171c75f4 = $1b0217ee4a91d156$export$be6fc7b1d5b0beb9;
const $1b0217ee4a91d156$export$602eac185826482c = $1b0217ee4a91d156$export$14afd0be83e45060;
const $1b0217ee4a91d156$export$7c6e2c02157bb7d2 = $1b0217ee4a91d156$export$572205900c9369e;
const $1b0217ee4a91d156$export$eb2fcfdbd7ba97d4 = $1b0217ee4a91d156$export$9860523b0fcdd664;
const $1b0217ee4a91d156$export$b04be29aa201d4f5 = $1b0217ee4a91d156$export$d4b9d3b609a10742;
const $1b0217ee4a91d156$export$6d08773d2e66f8f2 = $1b0217ee4a91d156$export$16a26dc176a49100;
const $1b0217ee4a91d156$export$16ce288f89fa631c = $1b0217ee4a91d156$export$b6adbe51d5d8b7ec;
const $1b0217ee4a91d156$export$a98f0dcb43a68a25 = $1b0217ee4a91d156$export$db5c89af5ed9aa07;
const $1b0217ee4a91d156$export$371ab307eab489c0 = $1b0217ee4a91d156$export$8a727d09a7d9bfc2;
const $1b0217ee4a91d156$export$c3468e2714d175fa = $1b0217ee4a91d156$export$9ed8194dee42d94b;
const $1b0217ee4a91d156$export$1ff3c3f08ae963c0 = $1b0217ee4a91d156$export$8d6b009fadfe1207;
const $1b0217ee4a91d156$export$21b07c8f274aebd5 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$f47d0a58228a61e2));
const $1b0217ee4a91d156$export$d7a01e11500dfb6f = $1b0217ee4a91d156$export$5bc21d1c00c4b201;
const $1b0217ee4a91d156$export$2ea8a7a591ac5eac = $1b0217ee4a91d156$export$30b2b5c64556d316;
const $1b0217ee4a91d156$export$6d4de93b380beddf = $1b0217ee4a91d156$export$2c967063bd2dc512;





//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 11434:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  D: () => (/* binding */ ReactMarkdown)
});

// NAMESPACE OBJECT: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/constructs.js
var constructs_namespaceObject = {};
__webpack_require__.r(constructs_namespaceObject);
__webpack_require__.d(constructs_namespaceObject, {
  attentionMarkers: () => (attentionMarkers),
  contentInitial: () => (contentInitial),
  disable: () => (disable),
  document: () => (constructs_document),
  flow: () => (constructs_flow),
  flowInitial: () => (flowInitial),
  insideSpan: () => (insideSpan),
  string: () => (constructs_string),
  text: () => (constructs_text)
});

// NAMESPACE OBJECT: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/types.js
var types_namespaceObject = {};
__webpack_require__.r(types_namespaceObject);
__webpack_require__.d(types_namespaceObject, {
  boolean: () => (types_boolean),
  booleanish: () => (booleanish),
  commaOrSpaceSeparated: () => (commaOrSpaceSeparated),
  commaSeparated: () => (commaSeparated),
  number: () => (number),
  overloadedBoolean: () => (overloadedBoolean),
  spaceSeparated: () => (spaceSeparated)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/next@13.4.12_@babel+core@7.22.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/react.shared-subset.js
var react_shared_subset = __webpack_require__(49994);
// EXTERNAL MODULE: ./node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js
var is_buffer = __webpack_require__(4310);
;// CONCATENATED MODULE: ./node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/lib/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */ /**
 * Serialize the positional info of a point, position (start and end points),
 * or node.
 *
 * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]
 *   Node, position, or point.
 * @returns {string}
 *   Pretty printed positional info of a node (`string`).
 *
 *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
 *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
 *   column, `s` for `start`, and `e` for end.
 *   An empty string (`''`) is returned if the given value is neither `node`,
 *   `position`, nor `point`.
 */ function stringifyPosition(value) {
    // Nothing.
    if (!value || typeof value !== "object") {
        return "";
    }
    // Node.
    if ("position" in value || "type" in value) {
        return position(value.position);
    }
    // Position.
    if ("start" in value || "end" in value) {
        return position(value);
    }
    // Point.
    if ("line" in value || "column" in value) {
        return point(value);
    }
    // ?
    return "";
}
/**
 * @param {Point | PointLike | null | undefined} point
 * @returns {string}
 */ function point(point) {
    return index(point && point.line) + ":" + index(point && point.column);
}
/**
 * @param {Position | PositionLike | null | undefined} pos
 * @returns {string}
 */ function position(pos) {
    return point(pos && pos.start) + "-" + point(pos && pos.end);
}
/**
 * @param {number | null | undefined} value
 * @returns {number}
 */ function index(value) {
    return value && typeof value === "number" ? value : 1;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/lib/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
 */ 
/**
 * Message.
 */ class VFileMessage extends Error {
    /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > 👉 **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */ // To do: next major: expose `undefined` everywhere instead of `null`.
    constructor(reason, place, origin){
        /** @type {[string | null, string | null]} */ const parts = [
            null,
            null
        ];
        /** @type {Position} */ let position = {
            // @ts-expect-error: we always follows the structure of `position`.
            start: {
                line: null,
                column: null
            },
            // @ts-expect-error: "
            end: {
                line: null,
                column: null
            }
        };
        super();
        if (typeof place === "string") {
            origin = place;
            place = undefined;
        }
        if (typeof origin === "string") {
            const index = origin.indexOf(":");
            if (index === -1) {
                parts[1] = origin;
            } else {
                parts[0] = origin.slice(0, index);
                parts[1] = origin.slice(index + 1);
            }
        }
        if (place) {
            // Node.
            if ("type" in place || "position" in place) {
                if (place.position) {
                    // To do: next major: deep clone.
                    // @ts-expect-error: looks like a position.
                    position = place.position;
                }
            } else if ("start" in place || "end" in place) {
                // @ts-expect-error: looks like a position.
                // To do: next major: deep clone.
                position = place;
            } else if ("line" in place || "column" in place) {
                // To do: next major: deep clone.
                position.start = place;
            }
        }
        // Fields from `Error`.
        /**
     * Serialized positional info of error.
     *
     * On normal errors, this would be something like `ParseError`, buit in
     * `VFile` messages we use this space to show where an error happened.
     */ this.name = stringifyPosition(place) || "1:1";
        /**
     * Reason for message.
     *
     * @type {string}
     */ this.message = typeof reason === "object" ? reason.message : reason;
        /**
     * Stack of message.
     *
     * This is used by normal errors to show where something happened in
     * programming code, irrelevant for `VFile` messages,
     *
     * @type {string}
     */ this.stack = "";
        if (typeof reason === "object" && reason.stack) {
            this.stack = reason.stack;
        }
        /**
     * Reason for message.
     *
     * > 👉 **Note**: you should use markdown.
     *
     * @type {string}
     */ this.reason = this.message;
        /* eslint-disable no-unused-expressions */ /**
     * State of problem.
     *
     * * `true` — marks associated file as no longer processable (error)
     * * `false` — necessitates a (potential) change (warning)
     * * `null | undefined` — for things that might not need changing (info)
     *
     * @type {boolean | null | undefined}
     */ this.fatal;
        /**
     * Starting line of error.
     *
     * @type {number | null}
     */ this.line = position.start.line;
        /**
     * Starting column of error.
     *
     * @type {number | null}
     */ this.column = position.start.column;
        /**
     * Full unist position.
     *
     * @type {Position | null}
     */ this.position = position;
        /**
     * Namespace of message (example: `'my-package'`).
     *
     * @type {string | null}
     */ this.source = parts[0];
        /**
     * Category of message (example: `'my-rule'`).
     *
     * @type {string | null}
     */ this.ruleId = parts[1];
        /**
     * Path of a file (used throughout the `VFile` ecosystem).
     *
     * @type {string | null}
     */ this.file;
        // The following fields are “well known”.
        // Not standard.
        // Feel free to add other non-standard fields to your messages.
        /**
     * Specify the source value that’s being reported, which is deemed
     * incorrect.
     *
     * @type {string | null}
     */ this.actual;
        /**
     * Suggest acceptable values that can be used instead of `actual`.
     *
     * @type {Array<string> | null}
     */ this.expected;
        /**
     * Link to docs for the message.
     *
     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
     * > to `new URL(x)`.
     *
     * @type {string | null}
     */ this.url;
        /**
     * Long form description of the message (you should use markdown).
     *
     * @type {string | null}
     */ this.note;
    /* eslint-enable no-unused-expressions */ }
}
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;

// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(71017);
// EXTERNAL MODULE: external "process"
var external_process_ = __webpack_require__(77282);
;// CONCATENATED MODULE: ./node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.shared.js
/**
 * @typedef URL
 * @property {string} hash
 * @property {string} host
 * @property {string} hostname
 * @property {string} href
 * @property {string} origin
 * @property {string} password
 * @property {string} pathname
 * @property {string} port
 * @property {string} protocol
 * @property {string} search
 * @property {any} searchParams
 * @property {string} username
 * @property {() => string} toString
 * @property {() => string} toJSON
 */ /**
 * Check if `fileUrlOrPath` looks like a URL.
 *
 * @param {unknown} fileUrlOrPath
 *   File path or URL.
 * @returns {fileUrlOrPath is URL}
 *   Whether it’s a URL.
 */ // From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
function isUrl(fileUrlOrPath) {
    return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && // @ts-expect-error: indexable.
    fileUrlOrPath.href && // @ts-expect-error: indexable.
    fileUrlOrPath.origin;
}

// EXTERNAL MODULE: external "url"
var external_url_ = __webpack_require__(57310);
;// CONCATENATED MODULE: ./node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {import('./minurl.shared.js').URL} URL
 * @typedef {import('../index.js').Data} Data
 * @typedef {import('../index.js').Value} Value
 */ /**
 * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike
 *
 * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding
 *   Encodings supported by the buffer class.
 *
 *   This is a copy of the types from Node, copied to prevent Node globals from
 *   being needed.
 *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>
 *
 * @typedef {Options | URL | Value | VFile} Compatible
 *   Things that can be passed to the constructor.
 *
 * @typedef VFileCoreOptions
 *   Set multiple values.
 * @property {Value | null | undefined} [value]
 *   Set `value`.
 * @property {string | null | undefined} [cwd]
 *   Set `cwd`.
 * @property {Array<string> | null | undefined} [history]
 *   Set `history`.
 * @property {URL | string | null | undefined} [path]
 *   Set `path`.
 * @property {string | null | undefined} [basename]
 *   Set `basename`.
 * @property {string | null | undefined} [stem]
 *   Set `stem`.
 * @property {string | null | undefined} [extname]
 *   Set `extname`.
 * @property {string | null | undefined} [dirname]
 *   Set `dirname`.
 * @property {Data | null | undefined} [data]
 *   Set `data`.
 *
 * @typedef Map
 *   Raw source map.
 *
 *   See:
 *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.
 * @property {number} version
 *   Which version of the source map spec this map is following.
 * @property {Array<string>} sources
 *   An array of URLs to the original source files.
 * @property {Array<string>} names
 *   An array of identifiers which can be referenced by individual mappings.
 * @property {string | undefined} [sourceRoot]
 *   The URL root from which all sources are relative.
 * @property {Array<string> | undefined} [sourcesContent]
 *   An array of contents of the original source files.
 * @property {string} mappings
 *   A string of base64 VLQs which contain the actual mappings.
 * @property {string} file
 *   The generated file this source map is associated with.
 *
 * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options
 *   Configuration.
 *
 *   A bunch of keys that will be shallow copied over to the new file.
 *
 * @typedef {Record<string, unknown>} ReporterSettings
 *   Configuration for reporters.
 */ /**
 * @template {ReporterSettings} Settings
 *   Options type.
 * @callback Reporter
 *   Type for a reporter.
 * @param {Array<VFile>} files
 *   Files to report.
 * @param {Settings} options
 *   Configuration.
 * @returns {string}
 *   Report.
 */ 




/**
 * Order of setting (least specific to most), we need this because otherwise
 * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
 * stem can be set.
 *
 * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}
 */ const order = [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
];
class VFile {
    /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */ constructor(value){
        /** @type {Options | VFile} */ let options;
        if (!value) {
            options = {};
        } else if (typeof value === "string" || buffer(value)) {
            options = {
                value
            };
        } else if (isUrl(value)) {
            options = {
                path: value
            };
        } else {
            options = value;
        }
        /**
     * Place to store custom information (default: `{}`).
     *
     * It’s OK to store custom data directly on the file but moving it to
     * `data` is recommended.
     *
     * @type {Data}
     */ this.data = {};
        /**
     * List of messages associated with the file.
     *
     * @type {Array<VFileMessage>}
     */ this.messages = [];
        /**
     * List of filepaths the file moved between.
     *
     * The first is the original path and the last is the current path.
     *
     * @type {Array<string>}
     */ this.history = [];
        /**
     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
     *
     * @type {string}
     */ this.cwd = external_process_.cwd();
        /* eslint-disable no-unused-expressions */ /**
     * Raw value.
     *
     * @type {Value}
     */ this.value;
        // The below are non-standard, they are “well-known”.
        // As in, used in several tools.
        /**
     * Whether a file was saved to disk.
     *
     * This is used by vfile reporters.
     *
     * @type {boolean}
     */ this.stored;
        /**
     * Custom, non-string, compiled, representation.
     *
     * This is used by unified to store non-string results.
     * One example is when turning markdown into React nodes.
     *
     * @type {unknown}
     */ this.result;
        /**
     * Source map.
     *
     * This type is equivalent to the `RawSourceMap` type from the `source-map`
     * module.
     *
     * @type {Map | null | undefined}
     */ this.map;
        /* eslint-enable no-unused-expressions */ // Set path related properties in the correct order.
        let index = -1;
        while(++index < order.length){
            const prop = order[index];
            // Note: we specifically use `in` instead of `hasOwnProperty` to accept
            // `vfile`s too.
            if (prop in options && options[prop] !== undefined && options[prop] !== null) {
                // @ts-expect-error: TS doesn’t understand basic reality.
                this[prop] = prop === "history" ? [
                    ...options[prop]
                ] : options[prop];
            }
        }
        /** @type {string} */ let prop;
        // Set non-path related properties.
        for(prop in options){
            // @ts-expect-error: fine to set other things.
            if (!order.includes(prop)) {
                // @ts-expect-error: fine to set other things.
                this[prop] = options[prop];
            }
        }
    }
    /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */ get path() {
        return this.history[this.history.length - 1];
    }
    /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */ set path(path1) {
        if (isUrl(path1)) {
            path1 = (0,external_url_.fileURLToPath)(path1);
        }
        assertNonEmpty(path1, "path");
        if (this.path !== path1) {
            this.history.push(path1);
        }
    }
    /**
   * Get the parent path (example: `'~'`).
   */ get dirname() {
        return typeof this.path === "string" ? external_path_.dirname(this.path) : undefined;
    }
    /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   */ set dirname(dirname) {
        assertPath(this.basename, "dirname");
        this.path = external_path_.join(dirname || "", this.basename);
    }
    /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */ get basename() {
        return typeof this.path === "string" ? external_path_.basename(this.path) : undefined;
    }
    /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */ set basename(basename) {
        assertNonEmpty(basename, "basename");
        assertPart(basename, "basename");
        this.path = external_path_.join(this.dirname || "", basename);
    }
    /**
   * Get the extname (including dot) (example: `'.js'`).
   */ get extname() {
        return typeof this.path === "string" ? external_path_.extname(this.path) : undefined;
    }
    /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   */ set extname(extname) {
        assertPart(extname, "extname");
        assertPath(this.dirname, "extname");
        if (extname) {
            if (extname.charCodeAt(0) !== 46 /* `.` */ ) {
                throw new Error("`extname` must start with `.`");
            }
            if (extname.includes(".", 1)) {
                throw new Error("`extname` cannot contain multiple dots");
            }
        }
        this.path = external_path_.join(this.dirname, this.stem + (extname || ""));
    }
    /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */ get stem() {
        return typeof this.path === "string" ? external_path_.basename(this.path, this.extname) : undefined;
    }
    /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */ set stem(stem) {
        assertNonEmpty(stem, "stem");
        assertPart(stem, "stem");
        this.path = external_path_.join(this.dirname || "", stem + (this.extname || ""));
    }
    /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */ toString(encoding) {
        return (this.value || "").toString(encoding || undefined);
    }
    /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ message(reason, place, origin) {
        const message = new VFileMessage(reason, place, origin);
        if (this.path) {
            message.name = this.path + ":" + message.name;
            message.file = this.path;
        }
        message.fatal = false;
        this.messages.push(message);
        return message;
    }
    /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ info(reason, place, origin) {
        const message = this.message(reason, place, origin);
        message.fatal = null;
        return message;
    }
    /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > 👉 **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */ fail(reason, place, origin) {
        const message = this.message(reason, place, origin);
        message.fatal = true;
        throw message;
    }
}
/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string | null | undefined} part
 *   File path part.
 * @param {string} name
 *   Part name.
 * @returns {void}
 *   Nothing.
 */ function assertPart(part, name) {
    if (part && part.includes(external_path_.sep)) {
        throw new Error("`" + name + "` cannot be a path: did not expect `" + external_path_.sep + "`");
    }
}
/**
 * Assert that `part` is not empty.
 *
 * @param {string | undefined} part
 *   Thing.
 * @param {string} name
 *   Part name.
 * @returns {asserts part is string}
 *   Nothing.
 */ function assertNonEmpty(part, name) {
    if (!part) {
        throw new Error("`" + name + "` cannot be empty");
    }
}
/**
 * Assert `path` exists.
 *
 * @param {string | undefined} path
 *   Path.
 * @param {string} name
 *   Dependency name.
 * @returns {asserts path is string}
 *   Nothing.
 */ function assertPath(path1, name) {
    if (!path1) {
        throw new Error("Setting `" + name + "` requires `path` to be set too");
    }
}
/**
 * Assert `value` is a buffer.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Buffer}
 *   Whether `value` is a Node.js buffer.
 */ function buffer(value) {
    return is_buffer(value);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js
/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */ function bail(error) {
    if (error) {
        throw error;
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js
var extend = __webpack_require__(62140);
;// CONCATENATED MODULE: ./node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js
function isPlainObject(value) {
    if (typeof value !== "object" || value === null) {
        return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js
/**
 * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
 * @typedef {(...input: Array<any>) => any} Middleware
 *
 * @typedef {(...input: Array<any>) => void} Run
 *   Call all middleware.
 * @typedef {(fn: Middleware) => Pipeline} Use
 *   Add `fn` (middleware) to the list.
 * @typedef {{run: Run, use: Use}} Pipeline
 *   Middleware.
 */ /**
 * Create new middleware.
 *
 * @returns {Pipeline}
 */ function trough() {
    /** @type {Array<Middleware>} */ const fns = [];
    /** @type {Pipeline} */ const pipeline = {
        run,
        use
    };
    return pipeline;
    /** @type {Run} */ function run(...values) {
        let middlewareIndex = -1;
        /** @type {Callback} */ const callback = values.pop();
        if (typeof callback !== "function") {
            throw new TypeError("Expected function as last argument, not " + callback);
        }
        next(null, ...values);
        /**
     * Run the next `fn`, or we’re done.
     *
     * @param {Error|null|undefined} error
     * @param {Array<any>} output
     */ function next(error, ...output) {
            const fn = fns[++middlewareIndex];
            let index = -1;
            if (error) {
                callback(error);
                return;
            }
            // Copy non-nullish input into values.
            while(++index < values.length){
                if (output[index] === null || output[index] === undefined) {
                    output[index] = values[index];
                }
            }
            // Save the newly created `output` for the next call.
            values = output;
            // Next or done.
            if (fn) {
                wrap(fn, next)(...output);
            } else {
                callback(null, ...output);
            }
        }
    }
    /** @type {Use} */ function use(middelware) {
        if (typeof middelware !== "function") {
            throw new TypeError("Expected `middelware` to be a function, not " + middelware);
        }
        fns.push(middelware);
        return pipeline;
    }
}
/**
 * Wrap `middleware`.
 * Can be sync or async; return a promise, receive a callback, or return new
 * values and errors.
 *
 * @param {Middleware} middleware
 * @param {Callback} callback
 */ function wrap(middleware, callback) {
    /** @type {boolean} */ let called;
    return wrapped;
    /**
   * Call `middleware`.
   * @this {any}
   * @param {Array<any>} parameters
   * @returns {void}
   */ function wrapped(...parameters) {
        const fnExpectsCallback = middleware.length > parameters.length;
        /** @type {any} */ let result;
        if (fnExpectsCallback) {
            parameters.push(done);
        }
        try {
            result = middleware.apply(this, parameters);
        } catch (error) {
            const exception = /** @type {Error} */ error;
            // Well, this is quite the pickle.
            // `middleware` received a callback and called it synchronously, but that
            // threw an error.
            // The only thing left to do is to throw the thing instead.
            if (fnExpectsCallback && called) {
                throw exception;
            }
            return done(exception);
        }
        if (!fnExpectsCallback) {
            if (result instanceof Promise) {
                result.then(then, done);
            } else if (result instanceof Error) {
                done(result);
            } else {
                then(result);
            }
        }
    }
    /**
   * Call `callback`, only once.
   * @type {Callback}
   */ function done(error, ...output) {
        if (!called) {
            called = true;
            callback(error, ...output);
        }
    }
    /**
   * Call `done` with one value.
   *
   * @param {any} [value]
   */ function then(value) {
        done(null, value);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('vfile').VFileCompatible} VFileCompatible
 * @typedef {import('vfile').VFileValue} VFileValue
 * @typedef {import('..').Processor} Processor
 * @typedef {import('..').Plugin} Plugin
 * @typedef {import('..').Preset} Preset
 * @typedef {import('..').Pluggable} Pluggable
 * @typedef {import('..').PluggableList} PluggableList
 * @typedef {import('..').Transformer} Transformer
 * @typedef {import('..').Parser} Parser
 * @typedef {import('..').Compiler} Compiler
 * @typedef {import('..').RunCallback} RunCallback
 * @typedef {import('..').ProcessCallback} ProcessCallback
 *
 * @typedef Context
 * @property {Node} tree
 * @property {VFile} file
 */ 





// Expose a frozen processor.
const unified = base().freeze();
const own = {}.hasOwnProperty;
// Function to create the first processor.
/**
 * @returns {Processor}
 */ function base() {
    const transformers = trough();
    /** @type {Processor['attachers']} */ const attachers = [];
    /** @type {Record<string, unknown>} */ let namespace = {};
    /** @type {boolean|undefined} */ let frozen;
    let freezeIndex = -1;
    // Data management.
    // @ts-expect-error: overloads are handled.
    processor.data = data;
    processor.Parser = undefined;
    processor.Compiler = undefined;
    // Lock.
    processor.freeze = freeze;
    // Plugins.
    processor.attachers = attachers;
    // @ts-expect-error: overloads are handled.
    processor.use = use;
    // API.
    processor.parse = parse;
    processor.stringify = stringify;
    // @ts-expect-error: overloads are handled.
    processor.run = run;
    processor.runSync = runSync;
    // @ts-expect-error: overloads are handled.
    processor.process = process;
    processor.processSync = processSync;
    // Expose.
    return processor;
    // Create a new processor based on the processor in the current scope.
    /** @type {Processor} */ function processor() {
        const destination = base();
        let index = -1;
        while(++index < attachers.length){
            destination.use(...attachers[index]);
        }
        destination.data(extend(true, {}, namespace));
        return destination;
    }
    /**
   * @param {string|Record<string, unknown>} [key]
   * @param {unknown} [value]
   * @returns {unknown}
   */ function data(key, value) {
        if (typeof key === "string") {
            // Set `key`.
            if (arguments.length === 2) {
                assertUnfrozen("data", frozen);
                namespace[key] = value;
                return processor;
            }
            // Get `key`.
            return own.call(namespace, key) && namespace[key] || null;
        }
        // Set space.
        if (key) {
            assertUnfrozen("data", frozen);
            namespace = key;
            return processor;
        }
        // Get space.
        return namespace;
    }
    /** @type {Processor['freeze']} */ function freeze() {
        if (frozen) {
            return processor;
        }
        while(++freezeIndex < attachers.length){
            const [attacher, ...options] = attachers[freezeIndex];
            if (options[0] === false) {
                continue;
            }
            if (options[0] === true) {
                options[0] = undefined;
            }
            /** @type {Transformer|void} */ const transformer = attacher.call(processor, ...options);
            if (typeof transformer === "function") {
                transformers.use(transformer);
            }
        }
        frozen = true;
        freezeIndex = Number.POSITIVE_INFINITY;
        return processor;
    }
    /**
   * @param {Pluggable|null|undefined} [value]
   * @param {...unknown} options
   * @returns {Processor}
   */ function use(value, ...options) {
        /** @type {Record<string, unknown>|undefined} */ let settings;
        assertUnfrozen("use", frozen);
        if (value === null || value === undefined) {
        // Empty.
        } else if (typeof value === "function") {
            addPlugin(value, ...options);
        } else if (typeof value === "object") {
            if (Array.isArray(value)) {
                addList(value);
            } else {
                addPreset(value);
            }
        } else {
            throw new TypeError("Expected usable value, not `" + value + "`");
        }
        if (settings) {
            namespace.settings = Object.assign(namespace.settings || {}, settings);
        }
        return processor;
        /**
     * @param {import('..').Pluggable<unknown[]>} value
     * @returns {void}
     */ function add(value) {
            if (typeof value === "function") {
                addPlugin(value);
            } else if (typeof value === "object") {
                if (Array.isArray(value)) {
                    const [plugin, ...options] = value;
                    addPlugin(plugin, ...options);
                } else {
                    addPreset(value);
                }
            } else {
                throw new TypeError("Expected usable value, not `" + value + "`");
            }
        }
        /**
     * @param {Preset} result
     * @returns {void}
     */ function addPreset(result) {
            addList(result.plugins);
            if (result.settings) {
                settings = Object.assign(settings || {}, result.settings);
            }
        }
        /**
     * @param {PluggableList|null|undefined} [plugins]
     * @returns {void}
     */ function addList(plugins) {
            let index = -1;
            if (plugins === null || plugins === undefined) {
            // Empty.
            } else if (Array.isArray(plugins)) {
                while(++index < plugins.length){
                    const thing = plugins[index];
                    add(thing);
                }
            } else {
                throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
            }
        }
        /**
     * @param {Plugin} plugin
     * @param {...unknown} [value]
     * @returns {void}
     */ function addPlugin(plugin, value) {
            let index = -1;
            /** @type {Processor['attachers'][number]|undefined} */ let entry;
            while(++index < attachers.length){
                if (attachers[index][0] === plugin) {
                    entry = attachers[index];
                    break;
                }
            }
            if (entry) {
                if (isPlainObject(entry[1]) && isPlainObject(value)) {
                    value = extend(true, entry[1], value);
                }
                entry[1] = value;
            } else {
                // @ts-expect-error: fine.
                attachers.push([
                    ...arguments
                ]);
            }
        }
    }
    /** @type {Processor['parse']} */ function parse(doc) {
        processor.freeze();
        const file = vfile(doc);
        const Parser = processor.Parser;
        assertParser("parse", Parser);
        if (newable(Parser, "parse")) {
            // @ts-expect-error: `newable` checks this.
            return new Parser(String(file), file).parse();
        }
        // @ts-expect-error: `newable` checks this.
        return Parser(String(file), file) // eslint-disable-line new-cap
        ;
    }
    /** @type {Processor['stringify']} */ function stringify(node, doc) {
        processor.freeze();
        const file = vfile(doc);
        const Compiler = processor.Compiler;
        assertCompiler("stringify", Compiler);
        assertNode(node);
        if (newable(Compiler, "compile")) {
            // @ts-expect-error: `newable` checks this.
            return new Compiler(node, file).compile();
        }
        // @ts-expect-error: `newable` checks this.
        return Compiler(node, file) // eslint-disable-line new-cap
        ;
    }
    /**
   * @param {Node} node
   * @param {VFileCompatible|RunCallback} [doc]
   * @param {RunCallback} [callback]
   * @returns {Promise<Node>|void}
   */ function run(node, doc, callback) {
        assertNode(node);
        processor.freeze();
        if (!callback && typeof doc === "function") {
            callback = doc;
            doc = undefined;
        }
        if (!callback) {
            return new Promise(executor);
        }
        executor(null, callback);
        /**
     * @param {null|((node: Node) => void)} resolve
     * @param {(error: Error) => void} reject
     * @returns {void}
     */ function executor(resolve, reject) {
            // @ts-expect-error: `doc` can’t be a callback anymore, we checked.
            transformers.run(node, vfile(doc), done);
            /**
       * @param {Error|null} error
       * @param {Node} tree
       * @param {VFile} file
       * @returns {void}
       */ function done(error, tree, file) {
                tree = tree || node;
                if (error) {
                    reject(error);
                } else if (resolve) {
                    resolve(tree);
                } else {
                    // @ts-expect-error: `callback` is defined if `resolve` is not.
                    callback(null, tree, file);
                }
            }
        }
    }
    /** @type {Processor['runSync']} */ function runSync(node, file) {
        /** @type {Node|undefined} */ let result;
        /** @type {boolean|undefined} */ let complete;
        processor.run(node, file, done);
        assertDone("runSync", "run", complete);
        // @ts-expect-error: we either bailed on an error or have a tree.
        return result;
        /**
     * @param {Error|null} [error]
     * @param {Node} [tree]
     * @returns {void}
     */ function done(error, tree) {
            bail(error);
            result = tree;
            complete = true;
        }
    }
    /**
   * @param {VFileCompatible} doc
   * @param {ProcessCallback} [callback]
   * @returns {Promise<VFile>|undefined}
   */ function process(doc, callback) {
        processor.freeze();
        assertParser("process", processor.Parser);
        assertCompiler("process", processor.Compiler);
        if (!callback) {
            return new Promise(executor);
        }
        executor(null, callback);
        /**
     * @param {null|((file: VFile) => void)} resolve
     * @param {(error?: Error|null|undefined) => void} reject
     * @returns {void}
     */ function executor(resolve, reject) {
            const file = vfile(doc);
            processor.run(processor.parse(file), file, (error, tree, file)=>{
                if (error || !tree || !file) {
                    done(error);
                } else {
                    /** @type {unknown} */ const result = processor.stringify(tree, file);
                    if (result === undefined || result === null) {
                    // Empty.
                    } else if (looksLikeAVFileValue(result)) {
                        file.value = result;
                    } else {
                        file.result = result;
                    }
                    done(error, file);
                }
            });
            /**
       * @param {Error|null|undefined} [error]
       * @param {VFile|undefined} [file]
       * @returns {void}
       */ function done(error, file) {
                if (error || !file) {
                    reject(error);
                } else if (resolve) {
                    resolve(file);
                } else {
                    // @ts-expect-error: `callback` is defined if `resolve` is not.
                    callback(null, file);
                }
            }
        }
    }
    /** @type {Processor['processSync']} */ function processSync(doc) {
        /** @type {boolean|undefined} */ let complete;
        processor.freeze();
        assertParser("processSync", processor.Parser);
        assertCompiler("processSync", processor.Compiler);
        const file = vfile(doc);
        processor.process(file, done);
        assertDone("processSync", "process", complete);
        return file;
        /**
     * @param {Error|null|undefined} [error]
     * @returns {void}
     */ function done(error) {
            complete = true;
            bail(error);
        }
    }
}
/**
 * Check if `value` is a constructor.
 *
 * @param {unknown} value
 * @param {string} name
 * @returns {boolean}
 */ function newable(value, name) {
    return typeof value === "function" && // Prototypes do exist.
    // type-coverage:ignore-next-line
    value.prototype && // A function with keys in its prototype is probably a constructor.
    // Classes’ prototype methods are not enumerable, so we check if some value
    // exists in the prototype.
    // type-coverage:ignore-next-line
    (keys(value.prototype) || name in value.prototype);
}
/**
 * Check if `value` is an object with keys.
 *
 * @param {Record<string, unknown>} value
 * @returns {boolean}
 */ function keys(value) {
    /** @type {string} */ let key;
    for(key in value){
        if (own.call(value, key)) {
            return true;
        }
    }
    return false;
}
/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */ function assertParser(name, value) {
    if (typeof value !== "function") {
        throw new TypeError("Cannot `" + name + "` without `Parser`");
    }
}
/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */ function assertCompiler(name, value) {
    if (typeof value !== "function") {
        throw new TypeError("Cannot `" + name + "` without `Compiler`");
    }
}
/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */ function assertUnfrozen(name, frozen) {
    if (frozen) {
        throw new Error("Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.");
    }
}
/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */ function assertNode(node) {
    // `isPlainObj` unfortunately uses `any` instead of `unknown`.
    // type-coverage:ignore-next-line
    if (!isPlainObject(node) || typeof node.type !== "string") {
        throw new TypeError("Expected node, got `" + node + "`");
    // Fine.
    }
}
/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */ function assertDone(name, asyncName, complete) {
    if (!complete) {
        throw new Error("`" + name + "` finished async. Use `" + asyncName + "` instead");
    }
}
/**
 * @param {VFileCompatible} [value]
 * @returns {VFile}
 */ function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value);
}
/**
 * @param {VFileCompatible} [value]
 * @returns {value is VFile}
 */ function looksLikeAVFile(value) {
    return Boolean(value && typeof value === "object" && "message" in value && "messages" in value);
}
/**
 * @param {unknown} [value]
 * @returns {value is VFileValue}
 */ function looksLikeAVFileValue(value) {
    return typeof value === "string" || is_buffer(value);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/lib/index.js
/**
 * @typedef {import('mdast').Root|import('mdast').Content} Node
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [includeImageAlt=true]
 *   Whether to use `alt` for `image`s.
 * @property {boolean | null | undefined} [includeHtml=true]
 *   Whether to use `value` of HTML.
 */ /** @type {Options} */ const emptyOptions = {};
/**
 * Get the text content of a node or list of nodes.
 *
 * Prefers the node’s plain-text fields, otherwise serializes its children,
 * and if the given value is an array, serialize the nodes in it.
 *
 * @param {unknown} value
 *   Thing to serialize, typically `Node`.
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {string}
 *   Serialized `value`.
 */ function lib_toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
}
/**
 * One node or several nodes.
 *
 * @param {unknown} value
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized node.
 */ function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
        if ("value" in value) {
            return value.type === "html" && !includeHtml ? "" : value.value;
        }
        if (includeImageAlt && "alt" in value && value.alt) {
            return value.alt;
        }
        if ("children" in value) {
            return lib_all(value.children, includeImageAlt, includeHtml);
        }
    }
    if (Array.isArray(value)) {
        return lib_all(value, includeImageAlt, includeHtml);
    }
    return "";
}
/**
 * Serialize a list of nodes.
 *
 * @param {Array<unknown>} values
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized nodes.
 */ function lib_all(values, includeImageAlt, includeHtml) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    while(++index < values.length){
        result[index] = one(values[index], includeImageAlt, includeHtml);
    }
    return result.join("");
}
/**
 * Check if `value` looks like a node.
 *
 * @param {unknown} value
 *   Thing.
 * @returns {value is Node}
 *   Whether `value` is a node.
 */ function node(value) {
    return Boolean(value && typeof value === "object");
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-chunked@1.1.0/node_modules/micromark-util-chunked/index.js
/**
 * Like `Array#splice`, but smarter for giant arrays.
 *
 * `Array#splice` takes all items to be inserted as individual argument which
 * causes a stack overflow in V8 when trying to insert 100k items for instance.
 *
 * Otherwise, this does not return the removed items, and takes `items` as an
 * array instead of rest parameters.
 *
 * @template {unknown} T
 *   Item type.
 * @param {Array<T>} list
 *   List to operate on.
 * @param {number} start
 *   Index to remove/insert at (can be negative).
 * @param {number} remove
 *   Number of items to remove.
 * @param {Array<T>} items
 *   Items to inject into `list`.
 * @returns {void}
 *   Nothing.
 */ function splice(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {Array<unknown>} */ let parameters;
    // Make start between zero and `end` (included).
    if (start < 0) {
        start = -start > end ? 0 : end + start;
    } else {
        start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;
    // No need to chunk the items if there’s only a couple (10k) items.
    if (items.length < 10000) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        // @ts-expect-error Hush, it’s fine.
        list.splice(...parameters);
    } else {
        // Delete `remove` items starting from `start`
        if (remove) list.splice(start, remove);
        // Insert the items in chunks to not cause stack overflows.
        while(chunkStart < items.length){
            parameters = items.slice(chunkStart, chunkStart + 10000);
            parameters.unshift(start, 0);
            // @ts-expect-error Hush, it’s fine.
            list.splice(...parameters);
            chunkStart += 10000;
            start += 10000;
        }
    }
}
/**
 * Append `items` (an array) at the end of `list` (another array).
 * When `list` was empty, returns `items` instead.
 *
 * This prevents a potentially expensive operation when `list` is empty,
 * and adds items in batches to prevent V8 from hanging.
 *
 * @template {unknown} T
 *   Item type.
 * @param {Array<T>} list
 *   List to operate on.
 * @param {Array<T>} items
 *   Items to add to `list`.
 * @returns {Array<T>}
 *   Either `list` or `items`.
 */ function push(list, items) {
    if (list.length > 0) {
        splice(list, list.length, 0, items);
        return list;
    }
    return items;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-combine-extensions@1.1.0/node_modules/micromark-util-combine-extensions/index.js
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Handles} Handles
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
 */ 
const micromark_util_combine_extensions_hasOwnProperty = {}.hasOwnProperty;
/**
 * Combine multiple syntax extensions into one.
 *
 * @param {Array<Extension>} extensions
 *   List of syntax extensions.
 * @returns {NormalizedExtension}
 *   A single combined extension.
 */ function combineExtensions(extensions) {
    /** @type {NormalizedExtension} */ const all = {};
    let index = -1;
    while(++index < extensions.length){
        syntaxExtension(all, extensions[index]);
    }
    return all;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {NormalizedExtension} all
 *   Extension to merge into.
 * @param {Extension} extension
 *   Extension to merge.
 * @returns {void}
 */ function syntaxExtension(all, extension) {
    /** @type {keyof Extension} */ let hook;
    for(hook in extension){
        const maybe = micromark_util_combine_extensions_hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        /** @type {Record<string, unknown>} */ const left = maybe || (all[hook] = {});
        /** @type {Record<string, unknown> | undefined} */ const right = extension[hook];
        /** @type {string} */ let code;
        if (right) {
            for(code in right){
                if (!micromark_util_combine_extensions_hasOwnProperty.call(left, code)) left[code] = [];
                const value = right[code];
                constructs(// @ts-expect-error Looks like a list.
                left[code], Array.isArray(value) ? value : value ? [
                    value
                ] : []);
            }
        }
    }
}
/**
 * Merge `list` into `existing` (both lists of constructs).
 * Mutates `existing`.
 *
 * @param {Array<unknown>} existing
 * @param {Array<unknown>} list
 * @returns {void}
 */ function constructs(existing, list) {
    let index = -1;
    /** @type {Array<unknown>} */ const before = [];
    while(++index < list.length){
        // @ts-expect-error Looks like an object.
        ;
        (list[index].add === "after" ? existing : before).push(list[index]);
    }
    splice(existing, 0, 0, before);
}
/**
 * Combine multiple HTML extensions into one.
 *
 * @param {Array<HtmlExtension>} htmlExtensions
 *   List of HTML extensions.
 * @returns {HtmlExtension}
 *   A single combined HTML extension.
 */ function combineHtmlExtensions(htmlExtensions) {
    /** @type {HtmlExtension} */ const handlers = {};
    let index = -1;
    while(++index < htmlExtensions.length){
        htmlExtension(handlers, htmlExtensions[index]);
    }
    return handlers;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {HtmlExtension} all
 *   Extension to merge into.
 * @param {HtmlExtension} extension
 *   Extension to merge.
 * @returns {void}
 */ function htmlExtension(all, extension) {
    /** @type {keyof HtmlExtension} */ let hook;
    for(hook in extension){
        const maybe = micromark_util_combine_extensions_hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        const left = maybe || (all[hook] = {});
        const right = extension[hook];
        /** @type {keyof Handles} */ let type;
        if (right) {
            for(type in right){
                // @ts-expect-error assume document vs regular handler are managed correctly.
                left[type] = right[type];
            }
        }
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js
// This module is generated by `script/`.
//
// CommonMark handles attention (emphasis, strong) markers based on what comes
// before or after them.
// One such difference is if those characters are Unicode punctuation.
// This script is generated from the Unicode data.
/**
 * Regular expression that matches a unicode punctuation character.
 */ const unicodePunctuationRegex = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/index.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 */ 
/**
 * Check whether the character code represents an ASCII alpha (`a` through `z`,
 * case insensitive).
 *
 * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
 *
 * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
 * to U+005A (`Z`).
 *
 * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
 * to U+007A (`z`).
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const asciiAlpha = regexCheck(/[A-Za-z]/);
/**
 * Check whether the character code represents an ASCII alphanumeric (`a`
 * through `z`, case insensitive, or `0` through `9`).
 *
 * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
 * (see `asciiAlpha`).
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
/**
 * Check whether the character code represents an ASCII atext.
 *
 * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
 * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
 * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
 * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
 * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
 * (`{`) to U+007E TILDE (`~`).
 *
 * See:
 * **\[RFC5322]**:
 * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
 * P. Resnick.
 * IETF.
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
/**
 * Check whether a character code is an ASCII control character.
 *
 * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
 * to U+001F (US), or U+007F (DEL).
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */ function asciiControl(code) {
    return(// Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < 32 || code === 127));
}
/**
 * Check whether the character code represents an ASCII digit (`0` through `9`).
 *
 * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
 * U+0039 (`9`).
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const asciiDigit = regexCheck(/\d/);
/**
 * Check whether the character code represents an ASCII hex digit (`a` through
 * `f`, case insensitive, or `0` through `9`).
 *
 * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
 * digit, or an ASCII lower hex digit.
 *
 * An **ASCII upper hex digit** is a character in the inclusive range U+0041
 * (`A`) to U+0046 (`F`).
 *
 * An **ASCII lower hex digit** is a character in the inclusive range U+0061
 * (`a`) to U+0066 (`f`).
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
/**
 * Check whether the character code represents ASCII punctuation.
 *
 * An **ASCII punctuation** is a character in the inclusive ranges U+0021
 * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
 * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
 * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
/**
 * Check whether a character code is a markdown line ending.
 *
 * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
 * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
 *
 * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
 * RETURN (CR) are replaced by these virtual characters depending on whether
 * they occurred together.
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */ function markdownLineEnding(code) {
    return code !== null && code < -2;
}
/**
 * Check whether a character code is a markdown line ending (see
 * `markdownLineEnding`) or markdown space (see `markdownSpace`).
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */ function markdownLineEndingOrSpace(code) {
    return code !== null && (code < 0 || code === 32);
}
/**
 * Check whether a character code is a markdown space.
 *
 * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
 * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
 *
 * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
 * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
 * SPACE (VS) characters, depending on the column at which the tab occurred.
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */ function markdownSpace(code) {
    return code === -2 || code === -1 || code === 32;
}
// Size note: removing ASCII from the regex and using `asciiPunctuation` here
// In fact adds to the bundle size.
/**
 * Check whether the character code represents Unicode punctuation.
 *
 * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
 * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
 * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
 * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
 * punctuation (see `asciiPunctuation`).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const unicodePunctuation = regexCheck(unicodePunctuationRegex);
/**
 * Check whether the character code represents Unicode whitespace.
 *
 * Note that this does handle micromark specific markdown whitespace characters.
 * See `markdownLineEndingOrSpace` to check that.
 *
 * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
 * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
 * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */ const unicodeWhitespace = regexCheck(/\s/);
/**
 * Create a code check from a regex.
 *
 * @param {RegExp} regex
 * @returns {(code: Code) => boolean}
 */ function regexCheck(regex) {
    return check;
    /**
   * Check whether a code matches the bound regex.
   *
   * @param {Code} code
   *   Character code.
   * @returns {boolean}
   *   Whether the character code matches the bound regex.
   */ function check(code) {
        return code !== null && regex.test(String.fromCharCode(code));
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ 
// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.
/**
 * Parse spaces and tabs.
 *
 * There is no `nok` parameter:
 *
 * *   spaces in markdown are often optional, in which case this factory can be
 *     used and `ok` will be switched to whether spaces were found or not
 * *   one line ending or space can be detected with `markdownSpace(code)` right
 *     before using `factorySpace`
 *
 * ###### Examples
 *
 * Where `␉` represents a tab (plus how much it expands) and `␠` represents a
 * single space.
 *
 * ```markdown
 * ␉
 * ␠␠␠␠
 * ␉␠
 * ```
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {TokenType} type
 *   Type (`' \t'`).
 * @param {number | undefined} [max=Infinity]
 *   Max (exclusive).
 * @returns
 *   Start state.
 */ function factorySpace(effects, ok, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start;
    /** @type {State} */ function start(code) {
        if (markdownSpace(code)) {
            effects.enter(type);
            return prefix(code);
        }
        return ok(code);
    }
    /** @type {State} */ function prefix(code) {
        if (markdownSpace(code) && size++ < limit) {
            effects.consume(code);
            return prefix;
        }
        effects.exit(type);
        return ok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/content.js
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ 

/** @type {InitialConstruct} */ const content = {
    tokenize: initializeContent
};
/**
 * @this {TokenizeContext}
 * @type {Initializer}
 */ function initializeContent(effects) {
    const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
    /** @type {Token} */ let previous;
    return contentStart;
    /** @type {State} */ function afterContentStartConstruct(code) {
        if (code === null) {
            effects.consume(code);
            return;
        }
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return factorySpace(effects, contentStart, "linePrefix");
    }
    /** @type {State} */ function paragraphInitial(code) {
        effects.enter("paragraph");
        return lineStart(code);
    }
    /** @type {State} */ function lineStart(code) {
        const token = effects.enter("chunkText", {
            contentType: "text",
            previous
        });
        if (previous) {
            previous.next = token;
        }
        previous = token;
        return data(code);
    }
    /** @type {State} */ function data(code) {
        if (code === null) {
            effects.exit("chunkText");
            effects.exit("paragraph");
            effects.consume(code);
            return;
        }
        if (markdownLineEnding(code)) {
            effects.consume(code);
            effects.exit("chunkText");
            return lineStart;
        }
        // Data.
        effects.consume(code);
        return data;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/document.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').ContainerState} ContainerState
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef {[Construct, ContainerState]} StackItem
 */ 


/** @type {InitialConstruct} */ const document_document = {
    tokenize: initializeDocument
};
/** @type {Construct} */ const containerConstruct = {
    tokenize: tokenizeContainer
};
/**
 * @this {TokenizeContext}
 * @type {Initializer}
 */ function initializeDocument(effects) {
    const self = this;
    /** @type {Array<StackItem>} */ const stack = [];
    let continued = 0;
    /** @type {TokenizeContext | undefined} */ let childFlow;
    /** @type {Token | undefined} */ let childToken;
    /** @type {number} */ let lineStartOffset;
    return start;
    /** @type {State} */ function start(code) {
        // First we iterate through the open blocks, starting with the root
        // document, and descending through last children down to the last open
        // block.
        // Each block imposes a condition that the line must satisfy if the block is
        // to remain open.
        // For example, a block quote requires a `>` character.
        // A paragraph requires a non-blank line.
        // In this phase we may match all or just some of the open blocks.
        // But we cannot close unmatched blocks yet, because we may have a lazy
        // continuation line.
        if (continued < stack.length) {
            const item = stack[continued];
            self.containerState = item[1];
            return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);
        }
        // Done.
        return checkNewContainers(code);
    }
    /** @type {State} */ function documentContinue(code) {
        continued++;
        // Note: this field is called `_closeFlow` but it also closes containers.
        // Perhaps a good idea to rename it but it’s already used in the wild by
        // extensions.
        if (self.containerState._closeFlow) {
            self.containerState._closeFlow = undefined;
            if (childFlow) {
                closeFlow();
            }
            // Note: this algorithm for moving events around is similar to the
            // algorithm when dealing with lazy lines in `writeToChild`.
            const indexBeforeExits = self.events.length;
            let indexBeforeFlow = indexBeforeExits;
            /** @type {Point | undefined} */ let point;
            // Find the flow chunk.
            while(indexBeforeFlow--){
                if (self.events[indexBeforeFlow][0] === "exit" && self.events[indexBeforeFlow][1].type === "chunkFlow") {
                    point = self.events[indexBeforeFlow][1].end;
                    break;
                }
            }
            exitContainers(continued);
            // Fix positions.
            let index = indexBeforeExits;
            while(index < self.events.length){
                self.events[index][1].end = Object.assign({}, point);
                index++;
            }
            // Inject the exits earlier (they’re still also at the end).
            splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
            // Discard the duplicate exits.
            self.events.length = index;
            return checkNewContainers(code);
        }
        return start(code);
    }
    /** @type {State} */ function checkNewContainers(code) {
        // Next, after consuming the continuation markers for existing blocks, we
        // look for new block starts (e.g. `>` for a block quote).
        // If we encounter a new block start, we close any blocks unmatched in
        // step 1 before creating the new block as a child of the last matched
        // block.
        if (continued === stack.length) {
            // No need to `check` whether there’s a container, of `exitContainers`
            // would be moot.
            // We can instead immediately `attempt` to parse one.
            if (!childFlow) {
                return documentContinued(code);
            }
            // If we have concrete content, such as block HTML or fenced code,
            // we can’t have containers “pierce” into them, so we can immediately
            // start.
            if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
                return flowStart(code);
            }
            // If we do have flow, it could still be a blank line,
            // but we’d be interrupting it w/ a new container if there’s a current
            // construct.
            // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer
            // needed in micromark-extension-gfm-table@1.0.6).
            self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
        }
        // Check if there is a new container.
        self.containerState = {};
        return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);
    }
    /** @type {State} */ function thereIsANewContainer(code) {
        if (childFlow) closeFlow();
        exitContainers(continued);
        return documentContinued(code);
    }
    /** @type {State} */ function thereIsNoNewContainer(code) {
        self.parser.lazy[self.now().line] = continued !== stack.length;
        lineStartOffset = self.now().offset;
        return flowStart(code);
    }
    /** @type {State} */ function documentContinued(code) {
        // Try new containers.
        self.containerState = {};
        return effects.attempt(containerConstruct, containerContinue, flowStart)(code);
    }
    /** @type {State} */ function containerContinue(code) {
        continued++;
        stack.push([
            self.currentConstruct,
            self.containerState
        ]);
        // Try another.
        return documentContinued(code);
    }
    /** @type {State} */ function flowStart(code) {
        if (code === null) {
            if (childFlow) closeFlow();
            exitContainers(0);
            effects.consume(code);
            return;
        }
        childFlow = childFlow || self.parser.flow(self.now());
        effects.enter("chunkFlow", {
            contentType: "flow",
            previous: childToken,
            _tokenizer: childFlow
        });
        return flowContinue(code);
    }
    /** @type {State} */ function flowContinue(code) {
        if (code === null) {
            writeToChild(effects.exit("chunkFlow"), true);
            exitContainers(0);
            effects.consume(code);
            return;
        }
        if (markdownLineEnding(code)) {
            effects.consume(code);
            writeToChild(effects.exit("chunkFlow"));
            // Get ready for the next line.
            continued = 0;
            self.interrupt = undefined;
            return start;
        }
        effects.consume(code);
        return flowContinue;
    }
    /**
   * @param {Token} token
   * @param {boolean | undefined} [eof]
   * @returns {void}
   */ function writeToChild(token, eof) {
        const stream = self.sliceStream(token);
        if (eof) stream.push(null);
        token.previous = childToken;
        if (childToken) childToken.next = token;
        childToken = token;
        childFlow.defineSkip(token.start);
        childFlow.write(stream);
        // Alright, so we just added a lazy line:
        //
        // ```markdown
        // > a
        // b.
        //
        // Or:
        //
        // > ~~~c
        // d
        //
        // Or:
        //
        // > | e |
        // f
        // ```
        //
        // The construct in the second example (fenced code) does not accept lazy
        // lines, so it marked itself as done at the end of its first line, and
        // then the content construct parses `d`.
        // Most constructs in markdown match on the first line: if the first line
        // forms a construct, a non-lazy line can’t “unmake” it.
        //
        // The construct in the third example is potentially a GFM table, and
        // those are *weird*.
        // It *could* be a table, from the first line, if the following line
        // matches a condition.
        // In this case, that second line is lazy, which “unmakes” the first line
        // and turns the whole into one content block.
        //
        // We’ve now parsed the non-lazy and the lazy line, and can figure out
        // whether the lazy line started a new flow block.
        // If it did, we exit the current containers between the two flow blocks.
        if (self.parser.lazy[token.start.line]) {
            let index = childFlow.events.length;
            while(index--){
                if (// The token starts before the line ending…
                childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…
                (!childFlow.events[index][1].end || // …or ends after it.
                childFlow.events[index][1].end.offset > lineStartOffset)) {
                    // Exit: there’s still something open, which means it’s a lazy line
                    // part of something.
                    return;
                }
            }
            // Note: this algorithm for moving events around is similar to the
            // algorithm when closing flow in `documentContinue`.
            const indexBeforeExits = self.events.length;
            let indexBeforeFlow = indexBeforeExits;
            /** @type {boolean | undefined} */ let seen;
            /** @type {Point | undefined} */ let point;
            // Find the previous chunk (the one before the lazy line).
            while(indexBeforeFlow--){
                if (self.events[indexBeforeFlow][0] === "exit" && self.events[indexBeforeFlow][1].type === "chunkFlow") {
                    if (seen) {
                        point = self.events[indexBeforeFlow][1].end;
                        break;
                    }
                    seen = true;
                }
            }
            exitContainers(continued);
            // Fix positions.
            index = indexBeforeExits;
            while(index < self.events.length){
                self.events[index][1].end = Object.assign({}, point);
                index++;
            }
            // Inject the exits earlier (they’re still also at the end).
            splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
            // Discard the duplicate exits.
            self.events.length = index;
        }
    }
    /**
   * @param {number} size
   * @returns {void}
   */ function exitContainers(size) {
        let index = stack.length;
        // Exit open containers.
        while(index-- > size){
            const entry = stack[index];
            self.containerState = entry[1];
            entry[0].exit.call(self, effects);
        }
        stack.length = size;
    }
    function closeFlow() {
        childFlow.write([
            null
        ]);
        childToken = undefined;
        childFlow = undefined;
        self.containerState._closeFlow = undefined;
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeContainer(effects, ok, nok) {
    // Always populated by defaults.
    return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/blank-line.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeBlankLine(effects, ok, nok) {
    return start;
    /**
   * Start of blank line.
   *
   * > 👉 **Note**: `␠` represents a space character.
   *
   * ```markdown
   * > | ␠␠␊
   *     ^
   * > | ␊
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        return markdownSpace(code) ? factorySpace(effects, after, "linePrefix")(code) : after(code);
    }
    /**
   * At eof/eol, after optional whitespace.
   *
   * > 👉 **Note**: `␠` represents a space character.
   *
   * ```markdown
   * > | ␠␠␊
   *       ^
   * > | ␊
   *     ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        return code === null || markdownLineEnding(code) ? ok(code) : nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-subtokenize@1.1.0/node_modules/micromark-util-subtokenize/index.js
/**
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Token} Token
 */ 
/**
 * Tokenize subcontent.
 *
 * @param {Array<Event>} events
 *   List of events.
 * @returns {boolean}
 *   Whether subtokens were found.
 */ function subtokenize(events) {
    /** @type {Record<string, number>} */ const jumps = {};
    let index = -1;
    /** @type {Event} */ let event;
    /** @type {number | undefined} */ let lineIndex;
    /** @type {number} */ let otherIndex;
    /** @type {Event} */ let otherEvent;
    /** @type {Array<Event>} */ let parameters;
    /** @type {Array<Event>} */ let subevents;
    /** @type {boolean | undefined} */ let more;
    while(++index < events.length){
        while(index in jumps){
            index = jumps[index];
        }
        event = events[index];
        // Add a hook for the GFM tasklist extension, which needs to know if text
        // is in the first content of a list item.
        if (index && event[1].type === "chunkFlow" && events[index - 1][1].type === "listItemPrefix") {
            subevents = event[1]._tokenizer.events;
            otherIndex = 0;
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
                otherIndex += 2;
            }
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
                while(++otherIndex < subevents.length){
                    if (subevents[otherIndex][1].type === "content") {
                        break;
                    }
                    if (subevents[otherIndex][1].type === "chunkText") {
                        subevents[otherIndex][1]._isInFirstContentOfListItem = true;
                        otherIndex++;
                    }
                }
            }
        }
        // Enter.
        if (event[0] === "enter") {
            if (event[1].contentType) {
                Object.assign(jumps, subcontent(events, index));
                index = jumps[index];
                more = true;
            }
        } else if (event[1]._container) {
            otherIndex = index;
            lineIndex = undefined;
            while(otherIndex--){
                otherEvent = events[otherIndex];
                if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
                    if (otherEvent[0] === "enter") {
                        if (lineIndex) {
                            events[lineIndex][1].type = "lineEndingBlank";
                        }
                        otherEvent[1].type = "lineEnding";
                        lineIndex = otherIndex;
                    }
                } else {
                    break;
                }
            }
            if (lineIndex) {
                // Fix position.
                event[1].end = Object.assign({}, events[lineIndex][1].start);
                // Switch container exit w/ line endings.
                parameters = events.slice(lineIndex, index);
                parameters.unshift(event);
                splice(events, lineIndex, index - lineIndex + 1, parameters);
            }
        }
    }
    return !more;
}
/**
 * Tokenize embedded tokens.
 *
 * @param {Array<Event>} events
 * @param {number} eventIndex
 * @returns {Record<string, number>}
 */ function subcontent(events, eventIndex) {
    const token = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    /** @type {Array<number>} */ const startPositions = [];
    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    /** @type {Array<[number, number]>} */ const jumps = [];
    /** @type {Record<string, number>} */ const gaps = {};
    /** @type {Array<Chunk>} */ let stream;
    /** @type {Token | undefined} */ let previous;
    let index = -1;
    /** @type {Token | undefined} */ let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [
        start
    ];
    // Loop forward through the linked tokens to pass them in order to the
    // subtokenizer.
    while(current){
        // Find the position of the event for this token.
        while(events[++startPosition][1] !== current){
        // Empty.
        }
        startPositions.push(startPosition);
        if (!current._tokenizer) {
            stream = context.sliceStream(current);
            if (!current.next) {
                stream.push(null);
            }
            if (previous) {
                tokenizer.defineSkip(current.start);
            }
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = true;
            }
            tokenizer.write(stream);
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = undefined;
            }
        }
        // Unravel the next token.
        previous = current;
        current = current.next;
    }
    // Now, loop back through all events (and linked tokens), to figure out which
    // parts belong where.
    current = token;
    while(++index < childEvents.length){
        if (// Find a void token that includes a break.
        childEvents[index][0] === "exit" && childEvents[index - 1][0] === "enter" && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {
            start = index + 1;
            breaks.push(start);
            // Help GC.
            current._tokenizer = undefined;
            current.previous = undefined;
            current = current.next;
        }
    }
    // Help GC.
    tokenizer.events = [];
    // If there’s one more token (which is the cases for lines that end in an
    // EOF), that’s perfect: the last point we found starts it.
    // If there isn’t then make sure any remaining content is added to it.
    if (current) {
        // Help GC.
        current._tokenizer = undefined;
        current.previous = undefined;
    } else {
        breaks.pop();
    }
    // Now splice the events from the subtokenizer into the current events,
    // moving back to front so that splice indices aren’t affected.
    index = breaks.length;
    while(index--){
        const slice = childEvents.slice(breaks[index], breaks[index + 1]);
        const start = startPositions.pop();
        jumps.unshift([
            start,
            start + slice.length - 1
        ]);
        splice(events, start, 2, slice);
    }
    index = -1;
    while(++index < jumps.length){
        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
        adjust += jumps[index][1] - jumps[index][0] - 1;
    }
    return gaps;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/content.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 


/**
 * No name because it must not be turned off.
 * @type {Construct}
 */ const content_content = {
    tokenize: tokenizeContent,
    resolve: resolveContent
};
/** @type {Construct} */ const continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
};
/**
 * Content is transparent: it’s parsed right now. That way, definitions are also
 * parsed right now: before text in paragraphs (specifically, media) are parsed.
 *
 * @type {Resolver}
 */ function resolveContent(events) {
    subtokenize(events);
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeContent(effects, ok) {
    /** @type {Token | undefined} */ let previous;
    return chunkStart;
    /**
   * Before a content chunk.
   *
   * ```markdown
   * > | abc
   *     ^
   * ```
   *
   * @type {State}
   */ function chunkStart(code) {
        effects.enter("content");
        previous = effects.enter("chunkContent", {
            contentType: "content"
        });
        return chunkInside(code);
    }
    /**
   * In a content chunk.
   *
   * ```markdown
   * > | abc
   *     ^^^
   * ```
   *
   * @type {State}
   */ function chunkInside(code) {
        if (code === null) {
            return contentEnd(code);
        }
        // To do: in `markdown-rs`, each line is parsed on its own, and everything
        // is stitched together resolving.
        if (markdownLineEnding(code)) {
            return effects.check(continuationConstruct, contentContinue, contentEnd)(code);
        }
        // Data.
        effects.consume(code);
        return chunkInside;
    }
    /**
   *
   *
   * @type {State}
   */ function contentEnd(code) {
        effects.exit("chunkContent");
        effects.exit("content");
        return ok(code);
    }
    /**
   *
   *
   * @type {State}
   */ function contentContinue(code) {
        effects.consume(code);
        effects.exit("chunkContent");
        previous.next = effects.enter("chunkContent", {
            contentType: "content",
            previous
        });
        previous = previous.next;
        return chunkInside;
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeContinuation(effects, ok, nok) {
    const self = this;
    return startLookahead;
    /**
   *
   *
   * @type {State}
   */ function startLookahead(code) {
        effects.exit("chunkContent");
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return factorySpace(effects, prefixed, "linePrefix");
    }
    /**
   *
   *
   * @type {State}
   */ function prefixed(code) {
        if (code === null || markdownLineEnding(code)) {
            return nok(code);
        }
        // Always populated by defaults.
        const tail = self.events[self.events.length - 1];
        if (!self.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
            return ok(code);
        }
        return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/flow.js
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ 


/** @type {InitialConstruct} */ const flow = {
    tokenize: initializeFlow
};
/**
 * @this {TokenizeContext}
 * @type {Initializer}
 */ function initializeFlow(effects) {
    const self = this;
    const initial = effects.attempt(// Try to parse a blank line.
    blankLine, atBlankEnding, // Try to parse initial flow (essentially, only code).
    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content_content, afterConstruct)), "linePrefix")));
    return initial;
    /** @type {State} */ function atBlankEnding(code) {
        if (code === null) {
            effects.consume(code);
            return;
        }
        effects.enter("lineEndingBlank");
        effects.consume(code);
        effects.exit("lineEndingBlank");
        self.currentConstruct = undefined;
        return initial;
    }
    /** @type {State} */ function afterConstruct(code) {
        if (code === null) {
            effects.consume(code);
            return;
        }
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        self.currentConstruct = undefined;
        return initial;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/text.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ const resolver = {
    resolveAll: createResolver()
};
const string = initializeFactory("string");
const text_text = initializeFactory("text");
/**
 * @param {'string' | 'text'} field
 * @returns {InitialConstruct}
 */ function initializeFactory(field) {
    return {
        tokenize: initializeText,
        resolveAll: createResolver(field === "text" ? resolveAllLineSuffixes : undefined)
    };
    /**
   * @this {TokenizeContext}
   * @type {Initializer}
   */ function initializeText(effects) {
        const self = this;
        const constructs = this.parser.constructs[field];
        const text = effects.attempt(constructs, start, notText);
        return start;
        /** @type {State} */ function start(code) {
            return atBreak(code) ? text(code) : notText(code);
        }
        /** @type {State} */ function notText(code) {
            if (code === null) {
                effects.consume(code);
                return;
            }
            effects.enter("data");
            effects.consume(code);
            return data;
        }
        /** @type {State} */ function data(code) {
            if (atBreak(code)) {
                effects.exit("data");
                return text(code);
            }
            // Data.
            effects.consume(code);
            return data;
        }
        /**
     * @param {Code} code
     * @returns {boolean}
     */ function atBreak(code) {
            if (code === null) {
                return true;
            }
            const list = constructs[code];
            let index = -1;
            if (list) {
                // Always populated by defaults.
                while(++index < list.length){
                    const item = list[index];
                    if (!item.previous || item.previous.call(self, self.previous)) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
}
/**
 * @param {Resolver | undefined} [extraResolver]
 * @returns {Resolver}
 */ function createResolver(extraResolver) {
    return resolveAllText;
    /** @type {Resolver} */ function resolveAllText(events, context) {
        let index = -1;
        /** @type {number | undefined} */ let enter;
        // A rather boring computation (to merge adjacent `data` events) which
        // improves mm performance by 29%.
        while(++index <= events.length){
            if (enter === undefined) {
                if (events[index] && events[index][1].type === "data") {
                    enter = index;
                    index++;
                }
            } else if (!events[index] || events[index][1].type !== "data") {
                // Don’t do anything if there is one data token.
                if (index !== enter + 2) {
                    events[enter][1].end = events[index - 1][1].end;
                    events.splice(enter + 2, index - enter - 2);
                    index = enter + 2;
                }
                enter = undefined;
            }
        }
        return extraResolver ? extraResolver(events, context) : events;
    }
}
/**
 * A rather ugly set of instructions which again looks at chunks in the input
 * stream.
 * The reason to do this here is that it is *much* faster to parse in reverse.
 * And that we can’t hook into `null` to split the line suffix before an EOF.
 * To do: figure out if we can make this into a clean utility, or even in core.
 * As it will be useful for GFMs literal autolink extension (and maybe even
 * tables?)
 *
 * @type {Resolver}
 */ function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0 // Skip first.
    ;
    while(++eventIndex <= events.length){
        if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
            const data = events[eventIndex - 1][1];
            const chunks = context.sliceStream(data);
            let index = chunks.length;
            let bufferIndex = -1;
            let size = 0;
            /** @type {boolean | undefined} */ let tabs;
            while(index--){
                const chunk = chunks[index];
                if (typeof chunk === "string") {
                    bufferIndex = chunk.length;
                    while(chunk.charCodeAt(bufferIndex - 1) === 32){
                        size++;
                        bufferIndex--;
                    }
                    if (bufferIndex) break;
                    bufferIndex = -1;
                } else if (chunk === -2) {
                    tabs = true;
                    size++;
                } else if (chunk === -1) {
                // Empty
                } else {
                    // Replacement character, exit.
                    index++;
                    break;
                }
            }
            if (size) {
                const token = {
                    type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
                    start: {
                        line: data.end.line,
                        column: data.end.column - size,
                        offset: data.end.offset - size,
                        _index: data.start._index + index,
                        _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex
                    },
                    end: Object.assign({}, data.end)
                };
                data.end = Object.assign({}, token.start);
                if (data.start.offset === data.end.offset) {
                    Object.assign(data, token);
                } else {
                    events.splice(eventIndex, 0, [
                        "enter",
                        token,
                        context
                    ], [
                        "exit",
                        token,
                        context
                    ]);
                    eventIndex += 2;
                }
            }
            eventIndex++;
        }
    }
    return events;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-resolve-all@1.1.0/node_modules/micromark-util-resolve-all/index.js
/**
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ /**
 * Call all `resolveAll`s.
 *
 * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
 *   List of constructs, optionally with `resolveAll`s.
 * @param {Array<Event>} events
 *   List of events.
 * @param {TokenizeContext} context
 *   Context used by `tokenize`.
 * @returns {Array<Event>}
 *   Changed events.
 */ function resolveAll(constructs, events, context) {
    /** @type {Array<Resolver>} */ const called = [];
    let index = -1;
    while(++index < constructs.length){
        const resolve = constructs[index].resolveAll;
        if (resolve && !called.includes(resolve)) {
            events = resolve(events, context);
            called.push(resolve);
        }
    }
    return events;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/create-tokenizer.js
/**
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenType} TokenType
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ /**
 * @callback Restore
 * @returns {void}
 *
 * @typedef Info
 * @property {Restore} restore
 * @property {number} from
 *
 * @callback ReturnHandle
 *   Handle a successful run.
 * @param {Construct} construct
 * @param {Info} info
 * @returns {void}
 */ 


/**
 * Create a tokenizer.
 * Tokenizers deal with one type of data (e.g., containers, flow, text).
 * The parser is the object dealing with it all.
 * `initialize` works like other constructs, except that only its `tokenize`
 * function is used, in which case it doesn’t receive an `ok` or `nok`.
 * `from` can be given to set the point before the first character, although
 * when further lines are indented, they must be set with `defineSkip`.
 *
 * @param {ParseContext} parser
 * @param {InitialConstruct} initialize
 * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]
 * @returns {TokenizeContext}
 */ function createTokenizer(parser, initialize, from) {
    /** @type {Point} */ let point = Object.assign(from ? Object.assign({}, from) : {
        line: 1,
        column: 1,
        offset: 0
    }, {
        _index: 0,
        _bufferIndex: -1
    });
    /** @type {Record<string, number>} */ const columnStart = {};
    /** @type {Array<Construct>} */ const resolveAllConstructs = [];
    /** @type {Array<Chunk>} */ let chunks = [];
    /** @type {Array<Token>} */ let stack = [];
    /** @type {boolean | undefined} */ let consumed = true;
    /**
   * Tools used for tokenizing.
   *
   * @type {Effects}
   */ const effects = {
        consume,
        enter,
        exit,
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        interrupt: constructFactory(onsuccessfulcheck, {
            interrupt: true
        })
    };
    /**
   * State and tools for resolving and serializing.
   *
   * @type {TokenizeContext}
   */ const context = {
        previous: null,
        code: null,
        containerState: {},
        events: [],
        parser,
        sliceStream,
        sliceSerialize,
        now,
        defineSkip,
        write
    };
    /**
   * The state function.
   *
   * @type {State | void}
   */ let state = initialize.tokenize.call(context, effects);
    /**
   * Track which character we expect to be consumed, to catch bugs.
   *
   * @type {Code}
   */ let expectedCode;
    if (initialize.resolveAll) {
        resolveAllConstructs.push(initialize);
    }
    return context;
    /** @type {TokenizeContext['write']} */ function write(slice) {
        chunks = push(chunks, slice);
        main();
        // Exit if we’re not done, resolve might change stuff.
        if (chunks[chunks.length - 1] !== null) {
            return [];
        }
        addResult(initialize, 0);
        // Otherwise, resolve, and exit.
        context.events = resolveAll(resolveAllConstructs, context.events, context);
        return context.events;
    }
    //
    // Tools.
    //
    /** @type {TokenizeContext['sliceSerialize']} */ function sliceSerialize(token, expandTabs) {
        return serializeChunks(sliceStream(token), expandTabs);
    }
    /** @type {TokenizeContext['sliceStream']} */ function sliceStream(token) {
        return sliceChunks(chunks, token);
    }
    /** @type {TokenizeContext['now']} */ function now() {
        // This is a hot path, so we clone manually instead of `Object.assign({}, point)`
        const { line, column, offset, _index, _bufferIndex } = point;
        return {
            line,
            column,
            offset,
            _index,
            _bufferIndex
        };
    }
    /** @type {TokenizeContext['defineSkip']} */ function defineSkip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
    }
    //
    // State management.
    //
    /**
   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
   * `consume`).
   * Here is where we walk through the chunks, which either include strings of
   * several characters, or numerical character codes.
   * The reason to do this in a loop instead of a call is so the stack can
   * drain.
   *
   * @returns {void}
   */ function main() {
        /** @type {number} */ let chunkIndex;
        while(point._index < chunks.length){
            const chunk = chunks[point._index];
            // If we’re in a buffer chunk, loop through it.
            if (typeof chunk === "string") {
                chunkIndex = point._index;
                if (point._bufferIndex < 0) {
                    point._bufferIndex = 0;
                }
                while(point._index === chunkIndex && point._bufferIndex < chunk.length){
                    go(chunk.charCodeAt(point._bufferIndex));
                }
            } else {
                go(chunk);
            }
        }
    }
    /**
   * Deal with one code.
   *
   * @param {Code} code
   * @returns {void}
   */ function go(code) {
        consumed = undefined;
        expectedCode = code;
        state = state(code);
    }
    /** @type {Effects['consume']} */ function consume(code) {
        if (markdownLineEnding(code)) {
            point.line++;
            point.column = 1;
            point.offset += code === -3 ? 2 : 1;
            accountForPotentialSkip();
        } else if (code !== -1) {
            point.column++;
            point.offset++;
        }
        // Not in a string chunk.
        if (point._bufferIndex < 0) {
            point._index++;
        } else {
            point._bufferIndex++;
            // At end of string chunk.
            // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
            // strings.
            if (point._bufferIndex === chunks[point._index].length) {
                point._bufferIndex = -1;
                point._index++;
            }
        }
        // Expose the previous character.
        context.previous = code;
        // Mark as consumed.
        consumed = true;
    }
    /** @type {Effects['enter']} */ function enter(type, fields) {
        /** @type {Token} */ // @ts-expect-error Patch instead of assign required fields to help GC.
        const token = fields || {};
        token.type = type;
        token.start = now();
        context.events.push([
            "enter",
            token,
            context
        ]);
        stack.push(token);
        return token;
    }
    /** @type {Effects['exit']} */ function exit(type) {
        const token = stack.pop();
        token.end = now();
        context.events.push([
            "exit",
            token,
            context
        ]);
        return token;
    }
    /**
   * Use results.
   *
   * @type {ReturnHandle}
   */ function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
    }
    /**
   * Discard results.
   *
   * @type {ReturnHandle}
   */ function onsuccessfulcheck(_, info) {
        info.restore();
    }
    /**
   * Factory to attempt/check/interrupt.
   *
   * @param {ReturnHandle} onreturn
   * @param {{interrupt?: boolean | undefined} | undefined} [fields]
   */ function constructFactory(onreturn, fields) {
        return hook;
        /**
     * Handle either an object mapping codes to constructs, a list of
     * constructs, or a single construct.
     *
     * @param {Array<Construct> | Construct | ConstructRecord} constructs
     * @param {State} returnState
     * @param {State | undefined} [bogusState]
     * @returns {State}
     */ function hook(constructs, returnState, bogusState) {
            /** @type {Array<Construct>} */ let listOfConstructs;
            /** @type {number} */ let constructIndex;
            /** @type {Construct} */ let currentConstruct;
            /** @type {Info} */ let info;
            return Array.isArray(constructs) ? handleListOfConstructs(constructs) : "tokenize" in constructs ? handleListOfConstructs([
                constructs
            ]) : handleMapOfConstructs(constructs);
            /**
       * Handle a list of construct.
       *
       * @param {ConstructRecord} map
       * @returns {State}
       */ function handleMapOfConstructs(map) {
                return start;
                /** @type {State} */ function start(code) {
                    const def = code !== null && map[code];
                    const all = code !== null && map.null;
                    const list = [
                        // To do: add more extension tests.
                        /* c8 ignore next 2 */ ...Array.isArray(def) ? def : def ? [
                            def
                        ] : [],
                        ...Array.isArray(all) ? all : all ? [
                            all
                        ] : []
                    ];
                    return handleListOfConstructs(list)(code);
                }
            }
            /**
       * Handle a list of construct.
       *
       * @param {Array<Construct>} list
       * @returns {State}
       */ function handleListOfConstructs(list) {
                listOfConstructs = list;
                constructIndex = 0;
                if (list.length === 0) {
                    return bogusState;
                }
                return handleConstruct(list[constructIndex]);
            }
            /**
       * Handle a single construct.
       *
       * @param {Construct} construct
       * @returns {State}
       */ function handleConstruct(construct) {
                return start;
                /** @type {State} */ function start(code) {
                    // To do: not needed to store if there is no bogus state, probably?
                    // Currently doesn’t work because `inspect` in document does a check
                    // w/o a bogus, which doesn’t make sense. But it does seem to help perf
                    // by not storing.
                    info = store();
                    currentConstruct = construct;
                    if (!construct.partial) {
                        context.currentConstruct = construct;
                    }
                    // Always populated by defaults.
                    if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
                        return nok(code);
                    }
                    return construct.tokenize.call(// If we do have fields, create an object w/ `context` as its
                    // prototype.
                    // This allows a “live binding”, which is needed for `interrupt`.
                    fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);
                }
            }
            /** @type {State} */ function ok(code) {
                consumed = true;
                onreturn(currentConstruct, info);
                return returnState;
            }
            /** @type {State} */ function nok(code) {
                consumed = true;
                info.restore();
                if (++constructIndex < listOfConstructs.length) {
                    return handleConstruct(listOfConstructs[constructIndex]);
                }
                return bogusState;
            }
        }
    }
    /**
   * @param {Construct} construct
   * @param {number} from
   * @returns {void}
   */ function addResult(construct, from) {
        if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
            resolveAllConstructs.push(construct);
        }
        if (construct.resolve) {
            splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));
        }
        if (construct.resolveTo) {
            context.events = construct.resolveTo(context.events, context);
        }
    }
    /**
   * Store state.
   *
   * @returns {Info}
   */ function store() {
        const startPoint = now();
        const startPrevious = context.previous;
        const startCurrentConstruct = context.currentConstruct;
        const startEventsIndex = context.events.length;
        const startStack = Array.from(stack);
        return {
            restore,
            from: startEventsIndex
        };
        /**
     * Restore state.
     *
     * @returns {void}
     */ function restore() {
            point = startPoint;
            context.previous = startPrevious;
            context.currentConstruct = startCurrentConstruct;
            context.events.length = startEventsIndex;
            stack = startStack;
            accountForPotentialSkip();
        }
    }
    /**
   * Move the current point a bit forward in the line when it’s on a column
   * skip.
   *
   * @returns {void}
   */ function accountForPotentialSkip() {
        if (point.line in columnStart && point.column < 2) {
            point.column = columnStart[point.line];
            point.offset += columnStart[point.line] - 1;
        }
    }
}
/**
 * Get the chunks from a slice of chunks in the range of a token.
 *
 * @param {Array<Chunk>} chunks
 * @param {Pick<Token, 'end' | 'start'>} token
 * @returns {Array<Chunk>}
 */ function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    /** @type {Array<Chunk>} */ let view;
    if (startIndex === endIndex) {
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view = [
            chunks[startIndex].slice(startBufferIndex, endBufferIndex)
        ];
    } else {
        view = chunks.slice(startIndex, endIndex);
        if (startBufferIndex > -1) {
            const head = view[0];
            if (typeof head === "string") {
                view[0] = head.slice(startBufferIndex);
            } else {
                view.shift();
            }
        }
        if (endBufferIndex > 0) {
            // @ts-expect-error `_bufferIndex` is used on string chunks.
            view.push(chunks[endIndex].slice(0, endBufferIndex));
        }
    }
    return view;
}
/**
 * Get the string value of a slice of chunks.
 *
 * @param {Array<Chunk>} chunks
 * @param {boolean | undefined} [expandTabs=false]
 * @returns {string}
 */ function serializeChunks(chunks, expandTabs) {
    let index = -1;
    /** @type {Array<string>} */ const result = [];
    /** @type {boolean | undefined} */ let atTab;
    while(++index < chunks.length){
        const chunk = chunks[index];
        /** @type {string} */ let value;
        if (typeof chunk === "string") {
            value = chunk;
        } else switch(chunk){
            case -5:
                {
                    value = "\r";
                    break;
                }
            case -4:
                {
                    value = "\n";
                    break;
                }
            case -3:
                {
                    value = "\r" + "\n";
                    break;
                }
            case -2:
                {
                    value = expandTabs ? " " : "	";
                    break;
                }
            case -1:
                {
                    if (!expandTabs && atTab) continue;
                    value = " ";
                    break;
                }
            default:
                {
                    // Currently only replacement character.
                    value = String.fromCharCode(chunk);
                }
        }
        atTab = chunk === -2;
        result.push(value);
    }
    return result.join("");
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/thematic-break.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const thematicBreak = {
    name: "thematicBreak",
    tokenize: tokenizeThematicBreak
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeThematicBreak(effects, ok, nok) {
    let size = 0;
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    /**
   * Start of thematic break.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("thematicBreak");
        // To do: parse indent like `markdown-rs`.
        return before(code);
    }
    /**
   * After optional whitespace, at marker.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        marker = code;
        return atBreak(code);
    }
    /**
   * After something, before something else.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (code === marker) {
            effects.enter("thematicBreakSequence");
            return sequence(code);
        }
        if (size >= 3 && (code === null || markdownLineEnding(code))) {
            effects.exit("thematicBreak");
            return ok(code);
        }
        return nok(code);
    }
    /**
   * In sequence.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */ function sequence(code) {
        if (code === marker) {
            effects.consume(code);
            size++;
            return sequence;
        }
        effects.exit("thematicBreakSequence");
        return markdownSpace(code) ? factorySpace(effects, atBreak, "whitespace")(code) : atBreak(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/list.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').ContainerState} ContainerState
 * @typedef {import('micromark-util-types').Exiter} Exiter
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 



/** @type {Construct} */ const list = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
        tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
};
/** @type {Construct} */ const listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
};
/** @type {Construct} */ const indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
};
// To do: `markdown-rs` parses list items on their own and later stitches them
// together.
/**
 * @type {Tokenizer}
 * @this {TokenizeContext}
 */ function tokenizeListStart(effects, ok, nok) {
    const self = this;
    const tail = self.events[self.events.length - 1];
    let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let size = 0;
    return start;
    /** @type {State} */ function start(code) {
        const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? "listUnordered" : "listOrdered");
        if (kind === "listUnordered" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {
            if (!self.containerState.type) {
                self.containerState.type = kind;
                effects.enter(kind, {
                    _container: true
                });
            }
            if (kind === "listUnordered") {
                effects.enter("listItemPrefix");
                return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);
            }
            if (!self.interrupt || code === 49) {
                effects.enter("listItemPrefix");
                effects.enter("listItemValue");
                return inside(code);
            }
        }
        return nok(code);
    }
    /** @type {State} */ function inside(code) {
        if (asciiDigit(code) && ++size < 10) {
            effects.consume(code);
            return inside;
        }
        if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {
            effects.exit("listItemValue");
            return atMarker(code);
        }
        return nok(code);
    }
    /**
   * @type {State}
   **/ function atMarker(code) {
        effects.enter("listItemMarker");
        effects.consume(code);
        effects.exit("listItemMarker");
        self.containerState.marker = self.containerState.marker || code;
        return effects.check(blankLine, // Can’t be empty when interrupting.
        self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));
    }
    /** @type {State} */ function onBlank(code) {
        self.containerState.initialBlankLine = true;
        initialSize++;
        return endOfPrefix(code);
    }
    /** @type {State} */ function otherPrefix(code) {
        if (markdownSpace(code)) {
            effects.enter("listItemPrefixWhitespace");
            effects.consume(code);
            effects.exit("listItemPrefixWhitespace");
            return endOfPrefix;
        }
        return nok(code);
    }
    /** @type {State} */ function endOfPrefix(code) {
        self.containerState.size = initialSize + self.sliceSerialize(effects.exit("listItemPrefix"), true).length;
        return ok(code);
    }
}
/**
 * @type {Tokenizer}
 * @this {TokenizeContext}
 */ function tokenizeListContinuation(effects, ok, nok) {
    const self = this;
    self.containerState._closeFlow = undefined;
    return effects.check(blankLine, onBlank, notBlank);
    /** @type {State} */ function onBlank(code) {
        self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;
        // We have a blank line.
        // Still, try to consume at most the items size.
        return factorySpace(effects, ok, "listItemIndent", self.containerState.size + 1)(code);
    }
    /** @type {State} */ function notBlank(code) {
        if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
            self.containerState.furtherBlankLines = undefined;
            self.containerState.initialBlankLine = undefined;
            return notInCurrentItem(code);
        }
        self.containerState.furtherBlankLines = undefined;
        self.containerState.initialBlankLine = undefined;
        return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);
    }
    /** @type {State} */ function notInCurrentItem(code) {
        // While we do continue, we signal that the flow should be closed.
        self.containerState._closeFlow = true;
        // As we’re closing flow, we’re no longer interrupting.
        self.interrupt = undefined;
        // Always populated by defaults.
        return factorySpace(effects, effects.attempt(list, ok, nok), "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code);
    }
}
/**
 * @type {Tokenizer}
 * @this {TokenizeContext}
 */ function tokenizeIndent(effects, ok, nok) {
    const self = this;
    return factorySpace(effects, afterPrefix, "listItemIndent", self.containerState.size + 1);
    /** @type {State} */ function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);
    }
}
/**
 * @type {Exiter}
 * @this {TokenizeContext}
 */ function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
}
/**
 * @type {Tokenizer}
 * @this {TokenizeContext}
 */ function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
    const self = this;
    // Always populated by defaults.
    return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4 + 1);
    /** @type {State} */ function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return !markdownSpace(code) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok(code) : nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/block-quote.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Exiter} Exiter
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const blockQuote = {
    name: "blockQuote",
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
        tokenize: tokenizeBlockQuoteContinuation
    },
    exit
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeBlockQuoteStart(effects, ok, nok) {
    const self = this;
    return start;
    /**
   * Start of block quote.
   *
   * ```markdown
   * > | > a
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === 62) {
            const state = self.containerState;
            if (!state.open) {
                effects.enter("blockQuote", {
                    _container: true
                });
                state.open = true;
            }
            effects.enter("blockQuotePrefix");
            effects.enter("blockQuoteMarker");
            effects.consume(code);
            effects.exit("blockQuoteMarker");
            return after;
        }
        return nok(code);
    }
    /**
   * After `>`, before optional whitespace.
   *
   * ```markdown
   * > | > a
   *      ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        if (markdownSpace(code)) {
            effects.enter("blockQuotePrefixWhitespace");
            effects.consume(code);
            effects.exit("blockQuotePrefixWhitespace");
            effects.exit("blockQuotePrefix");
            return ok;
        }
        effects.exit("blockQuotePrefix");
        return ok(code);
    }
}
/**
 * Start of block quote continuation.
 *
 * ```markdown
 *   | > a
 * > | > b
 *     ^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeBlockQuoteContinuation(effects, ok, nok) {
    const self = this;
    return contStart;
    /**
   * Start of block quote continuation.
   *
   * Also used to parse the first block quote opening.
   *
   * ```markdown
   *   | > a
   * > | > b
   *     ^
   * ```
   *
   * @type {State}
   */ function contStart(code) {
        if (markdownSpace(code)) {
            // Always populated by defaults.
            return factorySpace(effects, contBefore, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code);
        }
        return contBefore(code);
    }
    /**
   * At `>`, after optional whitespace.
   *
   * Also used to parse the first block quote opening.
   *
   * ```markdown
   *   | > a
   * > | > b
   *     ^
   * ```
   *
   * @type {State}
   */ function contBefore(code) {
        return effects.attempt(blockQuote, ok, nok)(code);
    }
}
/** @type {Exiter} */ function exit(effects) {
    effects.exit("blockQuote");
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-factory-destination@1.1.0/node_modules/micromark-factory-destination/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ 
/**
 * Parse destinations.
 *
 * ###### Examples
 *
 * ```markdown
 * <a>
 * <a\>b>
 * <a b>
 * <a)>
 * a
 * a\)b
 * a(b)c
 * a(b)
 * ```
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {State} nok
 *   State switched to when unsuccessful.
 * @param {TokenType} type
 *   Type for whole (`<a>` or `b`).
 * @param {TokenType} literalType
 *   Type when enclosed (`<a>`).
 * @param {TokenType} literalMarkerType
 *   Type for enclosing (`<` and `>`).
 * @param {TokenType} rawType
 *   Type when not enclosed (`b`).
 * @param {TokenType} stringType
 *   Type for the value (`a` or `b`).
 * @param {number | undefined} [max=Infinity]
 *   Depth of nested parens (inclusive).
 * @returns {State}
 *   Start state.
 */ // eslint-disable-next-line max-params
function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    /**
   * Start of destination.
   *
   * ```markdown
   * > | <aa>
   *     ^
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === 60) {
            effects.enter(type);
            effects.enter(literalType);
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            return enclosedBefore;
        }
        // ASCII control, space, closing paren.
        if (code === null || code === 32 || code === 41 || asciiControl(code)) {
            return nok(code);
        }
        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter("chunkString", {
            contentType: "string"
        });
        return raw(code);
    }
    /**
   * After `<`, at an enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosedBefore(code) {
        if (code === 62) {
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            effects.exit(literalType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        effects.enter("chunkString", {
            contentType: "string"
        });
        return enclosed(code);
    }
    /**
   * In enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosed(code) {
        if (code === 62) {
            effects.exit("chunkString");
            effects.exit(stringType);
            return enclosedBefore(code);
        }
        if (code === null || code === 60 || markdownLineEnding(code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === 92 ? enclosedEscape : enclosed;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | <a\*a>
   *        ^
   * ```
   *
   * @type {State}
   */ function enclosedEscape(code) {
        if (code === 60 || code === 62 || code === 92) {
            effects.consume(code);
            return enclosed;
        }
        return enclosed(code);
    }
    /**
   * In raw destination.
   *
   * ```markdown
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function raw(code) {
        if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {
            effects.exit("chunkString");
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok(code);
        }
        if (balance < limit && code === 40) {
            effects.consume(code);
            balance++;
            return raw;
        }
        if (code === 41) {
            effects.consume(code);
            balance--;
            return raw;
        }
        // ASCII control (but *not* `\0`) and space and `(`.
        // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
        // doesn’t.
        if (code === null || code === 32 || code === 40 || asciiControl(code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === 92 ? rawEscape : raw;
    }
    /**
   * After `\`, at special character.
   *
   * ```markdown
   * > | a\*a
   *       ^
   * ```
   *
   * @type {State}
   */ function rawEscape(code) {
        if (code === 40 || code === 41 || code === 92) {
            effects.consume(code);
            return raw;
        }
        return raw(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-factory-label@1.1.0/node_modules/micromark-factory-label/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ 
/**
 * Parse labels.
 *
 * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.
 *
 * ###### Examples
 *
 * ```markdown
 * [a]
 * [a
 * b]
 * [a\]b]
 * ```
 *
 * @this {TokenizeContext}
 *   Tokenize context.
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {State} nok
 *   State switched to when unsuccessful.
 * @param {TokenType} type
 *   Type of the whole label (`[a]`).
 * @param {TokenType} markerType
 *   Type for the markers (`[` and `]`).
 * @param {TokenType} stringType
 *   Type for the identifier (`a`).
 * @returns {State}
 *   Start state.
 */ // eslint-disable-next-line max-params
function factoryLabel(effects, ok, nok, type, markerType, stringType) {
    const self = this;
    let size = 0;
    /** @type {boolean} */ let seen;
    return start;
    /**
   * Start of label.
   *
   * ```markdown
   * > | [a]
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak;
    }
    /**
   * In label, at something, before something else.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (size > 999 || code === null || code === 91 || code === 93 && !seen || // To do: remove in the future once we’ve switched from
        // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
        // which doesn’t need this.
        // Hidden footnotes hook.
        /* c8 ignore next 3 */ code === 94 && !size && "_hiddenFootnoteSupport" in self.parser.constructs) {
            return nok(code);
        }
        if (code === 93) {
            effects.exit(stringType);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        // To do: indent? Link chunks and EOLs together?
        if (markdownLineEnding(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return atBreak;
        }
        effects.enter("chunkString", {
            contentType: "string"
        });
        return labelInside(code);
    }
    /**
   * In label, in text.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function labelInside(code) {
        if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {
            effects.exit("chunkString");
            return atBreak(code);
        }
        effects.consume(code);
        if (!seen) seen = !markdownSpace(code);
        return code === 92 ? labelEscape : labelInside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | [a\*a]
   *        ^
   * ```
   *
   * @type {State}
   */ function labelEscape(code) {
        if (code === 91 || code === 92 || code === 93) {
            effects.consume(code);
            size++;
            return labelInside;
        }
        return labelInside(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-factory-title@1.1.0/node_modules/micromark-factory-title/index.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ 

/**
 * Parse titles.
 *
 * ###### Examples
 *
 * ```markdown
 * "a"
 * 'b'
 * (c)
 * "a
 * b"
 * 'a
 *     b'
 * (a\)b)
 * ```
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {State} nok
 *   State switched to when unsuccessful.
 * @param {TokenType} type
 *   Type of the whole title (`"a"`, `'b'`, `(c)`).
 * @param {TokenType} markerType
 *   Type for the markers (`"`, `'`, `(`, and `)`).
 * @param {TokenType} stringType
 *   Type for the value (`a`).
 * @returns {State}
 *   Start state.
 */ // eslint-disable-next-line max-params
function factoryTitle(effects, ok, nok, type, markerType, stringType) {
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    /**
   * Start of title.
   *
   * ```markdown
   * > | "a"
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === 34 || code === 39 || code === 40) {
            effects.enter(type);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            marker = code === 40 ? 41 : code;
            return begin;
        }
        return nok(code);
    }
    /**
   * After opening marker.
   *
   * This is also used at the closing marker.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function begin(code) {
        if (code === marker) {
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        return atBreak(code);
    }
    /**
   * At something, before something else.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (code === marker) {
            effects.exit(stringType);
            return begin(marker);
        }
        if (code === null) {
            return nok(code);
        }
        // Note: blank lines can’t exist in content.
        if (markdownLineEnding(code)) {
            // To do: use `space_or_tab_eol_with_options`, connect.
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return factorySpace(effects, atBreak, "linePrefix");
        }
        effects.enter("chunkString", {
            contentType: "string"
        });
        return inside(code);
    }
    /**
   *
   *
   * @type {State}
   */ function inside(code) {
        if (code === marker || code === null || markdownLineEnding(code)) {
            effects.exit("chunkString");
            return atBreak(code);
        }
        effects.consume(code);
        return code === 92 ? escape : inside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | "a\*b"
   *      ^
   * ```
   *
   * @type {State}
   */ function escape(code) {
        if (code === marker || code === 92) {
            effects.consume(code);
            return inside;
        }
        return inside(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-factory-whitespace@1.1.0/node_modules/micromark-factory-whitespace/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */ 

/**
 * Parse spaces and tabs.
 *
 * There is no `nok` parameter:
 *
 * *   line endings or spaces in markdown are often optional, in which case this
 *     factory can be used and `ok` will be switched to whether spaces were found
 *     or not
 * *   one line ending or space can be detected with
 *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @returns
 *   Start state.
 */ function factoryWhitespace(effects, ok) {
    /** @type {boolean} */ let seen;
    return start;
    /** @type {State} */ function start(code) {
        if (markdownLineEnding(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            seen = true;
            return start;
        }
        if (markdownSpace(code)) {
            return factorySpace(effects, start, seen ? "linePrefix" : "lineSuffix")(code);
        }
        return ok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-normalize-identifier@1.1.0/node_modules/micromark-util-normalize-identifier/index.js
/**
 * Normalize an identifier (as found in references, definitions).
 *
 * Collapses markdown whitespace, trim, and then lower- and uppercase.
 *
 * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their
 * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different
 * uppercase character (U+0398 (`Θ`)).
 * So, to get a canonical form, we perform both lower- and uppercase.
 *
 * Using uppercase last makes sure keys will never interact with default
 * prototypal values (such as `constructor`): nothing in the prototype of
 * `Object` is uppercase.
 *
 * @param {string} value
 *   Identifier to normalize.
 * @returns {string}
 *   Normalized identifier.
 */ function normalizeIdentifier(value) {
    return value// Collapse markdown whitespace.
    .replace(/[\t\n\r ]+/g, " ")// Trim.
    .replace(/^ | $/g, "")// Some characters are considered “uppercase”, but if their lowercase
    // counterpart is uppercased will result in a different uppercase
    // character.
    // Hence, to get that form, we perform both lower- and uppercase.
    // Upper case makes sure keys will not interact with default prototypal
    // methods: no method is uppercase.
    .toLowerCase().toUpperCase();
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/definition.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 






/** @type {Construct} */ const definition = {
    name: "definition",
    tokenize: tokenizeDefinition
};
/** @type {Construct} */ const titleBefore = {
    tokenize: tokenizeTitleBefore,
    partial: true
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeDefinition(effects, ok, nok) {
    const self = this;
    /** @type {string} */ let identifier;
    return start;
    /**
   * At start of a definition.
   *
   * ```markdown
   * > | [a]: b "c"
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        // Do not interrupt paragraphs (but do follow definitions).
        // To do: do `interrupt` the way `markdown-rs` does.
        // To do: parse whitespace the way `markdown-rs` does.
        effects.enter("definition");
        return before(code);
    }
    /**
   * After optional whitespace, at `[`.
   *
   * ```markdown
   * > | [a]: b "c"
   *     ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        // To do: parse whitespace the way `markdown-rs` does.
        return factoryLabel.call(self, effects, labelAfter, // Note: we don’t need to reset the way `markdown-rs` does.
        nok, "definitionLabel", "definitionLabelMarker", "definitionLabelString")(code);
    }
    /**
   * After label.
   *
   * ```markdown
   * > | [a]: b "c"
   *        ^
   * ```
   *
   * @type {State}
   */ function labelAfter(code) {
        identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));
        if (code === 58) {
            effects.enter("definitionMarker");
            effects.consume(code);
            effects.exit("definitionMarker");
            return markerAfter;
        }
        return nok(code);
    }
    /**
   * After marker.
   *
   * ```markdown
   * > | [a]: b "c"
   *         ^
   * ```
   *
   * @type {State}
   */ function markerAfter(code) {
        // Note: whitespace is optional.
        return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);
    }
    /**
   * Before destination.
   *
   * ```markdown
   * > | [a]: b "c"
   *          ^
   * ```
   *
   * @type {State}
   */ function destinationBefore(code) {
        return factoryDestination(effects, destinationAfter, // Note: we don’t need to reset the way `markdown-rs` does.
        nok, "definitionDestination", "definitionDestinationLiteral", "definitionDestinationLiteralMarker", "definitionDestinationRaw", "definitionDestinationString")(code);
    }
    /**
   * After destination.
   *
   * ```markdown
   * > | [a]: b "c"
   *           ^
   * ```
   *
   * @type {State}
   */ function destinationAfter(code) {
        return effects.attempt(titleBefore, after, after)(code);
    }
    /**
   * After definition.
   *
   * ```markdown
   * > | [a]: b
   *           ^
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        return markdownSpace(code) ? factorySpace(effects, afterWhitespace, "whitespace")(code) : afterWhitespace(code);
    }
    /**
   * After definition, after optional whitespace.
   *
   * ```markdown
   * > | [a]: b
   *           ^
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */ function afterWhitespace(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("definition");
            // Note: we don’t care about uniqueness.
            // It’s likely that that doesn’t happen very frequently.
            // It is more likely that it wastes precious time.
            self.parser.defined.push(identifier);
            // To do: `markdown-rs` interrupt.
            // // You’d be interrupting.
            // tokenizer.interrupt = true
            return ok(code);
        }
        return nok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeTitleBefore(effects, ok, nok) {
    return titleBefore;
    /**
   * After destination, at whitespace.
   *
   * ```markdown
   * > | [a]: b
   *           ^
   * > | [a]: b "c"
   *           ^
   * ```
   *
   * @type {State}
   */ function titleBefore(code) {
        return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);
    }
    /**
   * At title.
   *
   * ```markdown
   *   | [a]: b
   * > | "c"
   *     ^
   * ```
   *
   * @type {State}
   */ function beforeMarker(code) {
        return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code);
    }
    /**
   * After title.
   *
   * ```markdown
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */ function titleAfter(code) {
        return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code) : titleAfterOptionalWhitespace(code);
    }
    /**
   * After title, after optional whitespace.
   *
   * ```markdown
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */ function titleAfterOptionalWhitespace(code) {
        return code === null || markdownLineEnding(code) ? ok(code) : nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-indented.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented
};
/** @type {Construct} */ const furtherStart = {
    tokenize: tokenizeFurtherStart,
    partial: true
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeCodeIndented(effects, ok, nok) {
    const self = this;
    return start;
    /**
   * Start of code (indented).
   *
   * > **Parsing note**: it is not needed to check if this first line is a
   * > filled line (that it has a non-whitespace character), because blank lines
   * > are parsed already, so we never run into that.
   *
   * ```markdown
   * > |     aaa
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        // To do: manually check if interrupting like `markdown-rs`.
        effects.enter("codeIndented");
        // To do: use an improved `space_or_tab` function like `markdown-rs`,
        // so that we can drop the next state.
        return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code);
    }
    /**
   * At start, after 1 or 4 spaces.
   *
   * ```markdown
   * > |     aaa
   *         ^
   * ```
   *
   * @type {State}
   */ function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);
    }
    /**
   * At a break.
   *
   * ```markdown
   * > |     aaa
   *         ^  ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (code === null) {
            return after(code);
        }
        if (markdownLineEnding(code)) {
            return effects.attempt(furtherStart, atBreak, after)(code);
        }
        effects.enter("codeFlowValue");
        return inside(code);
    }
    /**
   * In code content.
   *
   * ```markdown
   * > |     aaa
   *         ^^^^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("codeFlowValue");
            return atBreak(code);
        }
        effects.consume(code);
        return inside;
    }
    /** @type {State} */ function after(code) {
        effects.exit("codeIndented");
        // To do: allow interrupting like `markdown-rs`.
        // Feel free to interrupt.
        // tokenizer.interrupt = false
        return ok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeFurtherStart(effects, ok, nok) {
    const self = this;
    return furtherStart;
    /**
   * At eol, trying to parse another indent.
   *
   * ```markdown
   * > |     aaa
   *            ^
   *   |     bbb
   * ```
   *
   * @type {State}
   */ function furtherStart(code) {
        // To do: improve `lazy` / `pierce` handling.
        // If this is a lazy line, it can’t be code.
        if (self.parser.lazy[self.now().line]) {
            return nok(code);
        }
        if (markdownLineEnding(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return furtherStart;
        }
        // To do: the code here in `micromark-js` is a bit different from
        // `markdown-rs` because there it can attempt spaces.
        // We can’t yet.
        //
        // To do: use an improved `space_or_tab` function like `markdown-rs`,
        // so that we can drop the next state.
        return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code);
    }
    /**
   * At start, after 1 or 4 spaces.
   *
   * ```markdown
   * > |     aaa
   *         ^
   * ```
   *
   * @type {State}
   */ function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/heading-atx.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 


/** @type {Construct} */ const headingAtx = {
    name: "headingAtx",
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
};
/** @type {Resolver} */ function resolveHeadingAtx(events, context) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    /** @type {Token} */ let content;
    /** @type {Token} */ let text;
    // Prefix whitespace, part of the opening.
    if (events[contentStart][1].type === "whitespace") {
        contentStart += 2;
    }
    // Suffix whitespace, part of the closing.
    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
        contentEnd -= 2;
    }
    if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
        contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }
    if (contentEnd > contentStart) {
        content = {
            type: "atxHeadingText",
            start: events[contentStart][1].start,
            end: events[contentEnd][1].end
        };
        text = {
            type: "chunkText",
            start: events[contentStart][1].start,
            end: events[contentEnd][1].end,
            contentType: "text"
        };
        splice(events, contentStart, contentEnd - contentStart + 1, [
            [
                "enter",
                content,
                context
            ],
            [
                "enter",
                text,
                context
            ],
            [
                "exit",
                text,
                context
            ],
            [
                "exit",
                content,
                context
            ]
        ]);
    }
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeHeadingAtx(effects, ok, nok) {
    let size = 0;
    return start;
    /**
   * Start of a heading (atx).
   *
   * ```markdown
   * > | ## aa
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        // To do: parse indent like `markdown-rs`.
        effects.enter("atxHeading");
        return before(code);
    }
    /**
   * After optional whitespace, at `#`.
   *
   * ```markdown
   * > | ## aa
   *     ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        effects.enter("atxHeadingSequence");
        return sequenceOpen(code);
    }
    /**
   * In opening sequence.
   *
   * ```markdown
   * > | ## aa
   *     ^
   * ```
   *
   * @type {State}
   */ function sequenceOpen(code) {
        if (code === 35 && size++ < 6) {
            effects.consume(code);
            return sequenceOpen;
        }
        // Always at least one `#`.
        if (code === null || markdownLineEndingOrSpace(code)) {
            effects.exit("atxHeadingSequence");
            return atBreak(code);
        }
        return nok(code);
    }
    /**
   * After something, before something else.
   *
   * ```markdown
   * > | ## aa
   *       ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (code === 35) {
            effects.enter("atxHeadingSequence");
            return sequenceFurther(code);
        }
        if (code === null || markdownLineEnding(code)) {
            effects.exit("atxHeading");
            // To do: interrupt like `markdown-rs`.
            // // Feel free to interrupt.
            // tokenizer.interrupt = false
            return ok(code);
        }
        if (markdownSpace(code)) {
            return factorySpace(effects, atBreak, "whitespace")(code);
        }
        // To do: generate `data` tokens, add the `text` token later.
        // Needs edit map, see: `markdown.rs`.
        effects.enter("atxHeadingText");
        return data(code);
    }
    /**
   * In further sequence (after whitespace).
   *
   * Could be normal “visible” hashes in the heading or a final sequence.
   *
   * ```markdown
   * > | ## aa ##
   *           ^
   * ```
   *
   * @type {State}
   */ function sequenceFurther(code) {
        if (code === 35) {
            effects.consume(code);
            return sequenceFurther;
        }
        effects.exit("atxHeadingSequence");
        return atBreak(code);
    }
    /**
   * In text.
   *
   * ```markdown
   * > | ## aa
   *        ^
   * ```
   *
   * @type {State}
   */ function data(code) {
        if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
            effects.exit("atxHeadingText");
            return atBreak(code);
        }
        effects.consume(code);
        return data;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/setext-underline.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const setextUnderline = {
    name: "setextUnderline",
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
};
/** @type {Resolver} */ function resolveToSetextUnderline(events, context) {
    // To do: resolve like `markdown-rs`.
    let index = events.length;
    /** @type {number | undefined} */ let content;
    /** @type {number | undefined} */ let text;
    /** @type {number | undefined} */ let definition;
    // Find the opening of the content.
    // It’ll always exist: we don’t tokenize if it isn’t there.
    while(index--){
        if (events[index][0] === "enter") {
            if (events[index][1].type === "content") {
                content = index;
                break;
            }
            if (events[index][1].type === "paragraph") {
                text = index;
            }
        } else {
            if (events[index][1].type === "content") {
                // Remove the content end (if needed we’ll add it later)
                events.splice(index, 1);
            }
            if (!definition && events[index][1].type === "definition") {
                definition = index;
            }
        }
    }
    const heading = {
        type: "setextHeading",
        start: Object.assign({}, events[text][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
    };
    // Change the paragraph to setext heading text.
    events[text][1].type = "setextHeadingText";
    // If we have definitions in the content, we’ll keep on having content,
    // but we need move it.
    if (definition) {
        events.splice(text, 0, [
            "enter",
            heading,
            context
        ]);
        events.splice(definition + 1, 0, [
            "exit",
            events[content][1],
            context
        ]);
        events[content][1].end = Object.assign({}, events[definition][1].end);
    } else {
        events[content][1] = heading;
    }
    // Add the heading exit at the end.
    events.push([
        "exit",
        heading,
        context
    ]);
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeSetextUnderline(effects, ok, nok) {
    const self = this;
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    /**
   * At start of heading (setext) underline.
   *
   * ```markdown
   *   | aa
   * > | ==
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        let index = self.events.length;
        /** @type {boolean | undefined} */ let paragraph;
        // Find an opening.
        while(index--){
            // Skip enter/exit of line ending, line prefix, and content.
            // We can now either have a definition or a paragraph.
            if (self.events[index][1].type !== "lineEnding" && self.events[index][1].type !== "linePrefix" && self.events[index][1].type !== "content") {
                paragraph = self.events[index][1].type === "paragraph";
                break;
            }
        }
        // To do: handle lazy/pierce like `markdown-rs`.
        // To do: parse indent like `markdown-rs`.
        if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
            effects.enter("setextHeadingLine");
            marker = code;
            return before(code);
        }
        return nok(code);
    }
    /**
   * After optional whitespace, at `-` or `=`.
   *
   * ```markdown
   *   | aa
   * > | ==
   *     ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        effects.enter("setextHeadingLineSequence");
        return inside(code);
    }
    /**
   * In sequence.
   *
   * ```markdown
   *   | aa
   * > | ==
   *     ^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        if (code === marker) {
            effects.consume(code);
            return inside;
        }
        effects.exit("setextHeadingLineSequence");
        return markdownSpace(code) ? factorySpace(effects, after, "lineSuffix")(code) : after(code);
    }
    /**
   * After sequence, after optional whitespace.
   *
   * ```markdown
   *   | aa
   * > | ==
   *       ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("setextHeadingLine");
            return ok(code);
        }
        return nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-html-tag-name@1.2.0/node_modules/micromark-util-html-tag-name/index.js
/**
 * List of lowercase HTML “block” tag names.
 *
 * The list, when parsing HTML (flow), results in more relaxed rules (condition
 * 6).
 * Because they are known blocks, the HTML-like syntax doesn’t have to be
 * strictly parsed.
 * For tag names not in this list, a more strict algorithm (condition 7) is used
 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
 *
 * This is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
 */ const htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "search",
    "section",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul"
];
/**
 * List of lowercase HTML “raw” tag names.
 *
 * The list, when parsing HTML (flow), results in HTML that can include lines
 * without exiting, until a closing tag also in this list is found (condition
 * 1).
 *
 * This module is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.
 */ const htmlRawNames = [
    "pre",
    "script",
    "style",
    "textarea"
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-flow.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 


/** @type {Construct} */ const htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
};
/** @type {Construct} */ const blankLineBefore = {
    tokenize: tokenizeBlankLineBefore,
    partial: true
};
const nonLazyContinuationStart = {
    tokenize: tokenizeNonLazyContinuationStart,
    partial: true
};
/** @type {Resolver} */ function resolveToHtmlFlow(events) {
    let index = events.length;
    while(index--){
        if (events[index][0] === "enter" && events[index][1].type === "htmlFlow") {
            break;
        }
    }
    if (index > 1 && events[index - 2][1].type === "linePrefix") {
        // Add the prefix start to the HTML token.
        events[index][1].start = events[index - 2][1].start;
        // Add the prefix start to the HTML line token.
        events[index + 1][1].start = events[index - 2][1].start;
        // Remove the line prefix.
        events.splice(index - 2, 2);
    }
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeHtmlFlow(effects, ok, nok) {
    const self = this;
    /** @type {number} */ let marker;
    /** @type {boolean} */ let closingTag;
    /** @type {string} */ let buffer;
    /** @type {number} */ let index;
    /** @type {Code} */ let markerB;
    return start;
    /**
   * Start of HTML (flow).
   *
   * ```markdown
   * > | <x />
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        // To do: parse indent like `markdown-rs`.
        return before(code);
    }
    /**
   * At `<`, after optional whitespace.
   *
   * ```markdown
   * > | <x />
   *     ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        effects.enter("htmlFlow");
        effects.enter("htmlFlowData");
        effects.consume(code);
        return open;
    }
    /**
   * After `<`, at tag name or other stuff.
   *
   * ```markdown
   * > | <x />
   *      ^
   * > | <!doctype>
   *      ^
   * > | <!--xxx-->
   *      ^
   * ```
   *
   * @type {State}
   */ function open(code) {
        if (code === 33) {
            effects.consume(code);
            return declarationOpen;
        }
        if (code === 47) {
            effects.consume(code);
            closingTag = true;
            return tagCloseStart;
        }
        if (code === 63) {
            effects.consume(code);
            marker = 3;
            // To do:
            // tokenizer.concrete = true
            // To do: use `markdown-rs` style interrupt.
            // While we’re in an instruction instead of a declaration, we’re on a `?`
            // right now, so we do need to search for `>`, similar to declarations.
            return self.interrupt ? ok : continuationDeclarationInside;
        }
        // ASCII alphabetical.
        if (asciiAlpha(code)) {
            effects.consume(code);
            // @ts-expect-error: not null.
            buffer = String.fromCharCode(code);
            return tagName;
        }
        return nok(code);
    }
    /**
   * After `<!`, at declaration, comment, or CDATA.
   *
   * ```markdown
   * > | <!doctype>
   *       ^
   * > | <!--xxx-->
   *       ^
   * > | <![CDATA[>&<]]>
   *       ^
   * ```
   *
   * @type {State}
   */ function declarationOpen(code) {
        if (code === 45) {
            effects.consume(code);
            marker = 2;
            return commentOpenInside;
        }
        if (code === 91) {
            effects.consume(code);
            marker = 5;
            index = 0;
            return cdataOpenInside;
        }
        // ASCII alphabetical.
        if (asciiAlpha(code)) {
            effects.consume(code);
            marker = 4;
            // // Do not form containers.
            // tokenizer.concrete = true
            return self.interrupt ? ok : continuationDeclarationInside;
        }
        return nok(code);
    }
    /**
   * After `<!-`, inside a comment, at another `-`.
   *
   * ```markdown
   * > | <!--xxx-->
   *        ^
   * ```
   *
   * @type {State}
   */ function commentOpenInside(code) {
        if (code === 45) {
            effects.consume(code);
            // // Do not form containers.
            // tokenizer.concrete = true
            return self.interrupt ? ok : continuationDeclarationInside;
        }
        return nok(code);
    }
    /**
   * After `<![`, inside CDATA, expecting `CDATA[`.
   *
   * ```markdown
   * > | <![CDATA[>&<]]>
   *        ^^^^^^
   * ```
   *
   * @type {State}
   */ function cdataOpenInside(code) {
        const value = "CDATA[";
        if (code === value.charCodeAt(index++)) {
            effects.consume(code);
            if (index === value.length) {
                // // Do not form containers.
                // tokenizer.concrete = true
                return self.interrupt ? ok : continuation;
            }
            return cdataOpenInside;
        }
        return nok(code);
    }
    /**
   * After `</`, in closing tag, at tag name.
   *
   * ```markdown
   * > | </x>
   *       ^
   * ```
   *
   * @type {State}
   */ function tagCloseStart(code) {
        if (asciiAlpha(code)) {
            effects.consume(code);
            // @ts-expect-error: not null.
            buffer = String.fromCharCode(code);
            return tagName;
        }
        return nok(code);
    }
    /**
   * In tag name.
   *
   * ```markdown
   * > | <ab>
   *      ^^
   * > | </ab>
   *       ^^
   * ```
   *
   * @type {State}
   */ function tagName(code) {
        if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
            const slash = code === 47;
            const name = buffer.toLowerCase();
            if (!slash && !closingTag && htmlRawNames.includes(name)) {
                marker = 1;
                // // Do not form containers.
                // tokenizer.concrete = true
                return self.interrupt ? ok(code) : continuation(code);
            }
            if (htmlBlockNames.includes(buffer.toLowerCase())) {
                marker = 6;
                if (slash) {
                    effects.consume(code);
                    return basicSelfClosing;
                }
                // // Do not form containers.
                // tokenizer.concrete = true
                return self.interrupt ? ok(code) : continuation(code);
            }
            marker = 7;
            // Do not support complete HTML when interrupting.
            return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);
        }
        // ASCII alphanumerical and `-`.
        if (code === 45 || asciiAlphanumeric(code)) {
            effects.consume(code);
            buffer += String.fromCharCode(code);
            return tagName;
        }
        return nok(code);
    }
    /**
   * After closing slash of a basic tag name.
   *
   * ```markdown
   * > | <div/>
   *          ^
   * ```
   *
   * @type {State}
   */ function basicSelfClosing(code) {
        if (code === 62) {
            effects.consume(code);
            // // Do not form containers.
            // tokenizer.concrete = true
            return self.interrupt ? ok : continuation;
        }
        return nok(code);
    }
    /**
   * After closing slash of a complete tag name.
   *
   * ```markdown
   * > | <x/>
   *        ^
   * ```
   *
   * @type {State}
   */ function completeClosingTagAfter(code) {
        if (markdownSpace(code)) {
            effects.consume(code);
            return completeClosingTagAfter;
        }
        return completeEnd(code);
    }
    /**
   * At an attribute name.
   *
   * At first, this state is used after a complete tag name, after whitespace,
   * where it expects optional attributes or the end of the tag.
   * It is also reused after attributes, when expecting more optional
   * attributes.
   *
   * ```markdown
   * > | <a />
   *        ^
   * > | <a :b>
   *        ^
   * > | <a _b>
   *        ^
   * > | <a b>
   *        ^
   * > | <a >
   *        ^
   * ```
   *
   * @type {State}
   */ function completeAttributeNameBefore(code) {
        if (code === 47) {
            effects.consume(code);
            return completeEnd;
        }
        // ASCII alphanumerical and `:` and `_`.
        if (code === 58 || code === 95 || asciiAlpha(code)) {
            effects.consume(code);
            return completeAttributeName;
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return completeAttributeNameBefore;
        }
        return completeEnd(code);
    }
    /**
   * In attribute name.
   *
   * ```markdown
   * > | <a :b>
   *         ^
   * > | <a _b>
   *         ^
   * > | <a b>
   *         ^
   * ```
   *
   * @type {State}
   */ function completeAttributeName(code) {
        // ASCII alphanumerical and `-`, `.`, `:`, and `_`.
        if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
            effects.consume(code);
            return completeAttributeName;
        }
        return completeAttributeNameAfter(code);
    }
    /**
   * After attribute name, at an optional initializer, the end of the tag, or
   * whitespace.
   *
   * ```markdown
   * > | <a b>
   *         ^
   * > | <a b=c>
   *         ^
   * ```
   *
   * @type {State}
   */ function completeAttributeNameAfter(code) {
        if (code === 61) {
            effects.consume(code);
            return completeAttributeValueBefore;
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return completeAttributeNameAfter;
        }
        return completeAttributeNameBefore(code);
    }
    /**
   * Before unquoted, double quoted, or single quoted attribute value, allowing
   * whitespace.
   *
   * ```markdown
   * > | <a b=c>
   *          ^
   * > | <a b="c">
   *          ^
   * ```
   *
   * @type {State}
   */ function completeAttributeValueBefore(code) {
        if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
            return nok(code);
        }
        if (code === 34 || code === 39) {
            effects.consume(code);
            markerB = code;
            return completeAttributeValueQuoted;
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return completeAttributeValueBefore;
        }
        return completeAttributeValueUnquoted(code);
    }
    /**
   * In double or single quoted attribute value.
   *
   * ```markdown
   * > | <a b="c">
   *           ^
   * > | <a b='c'>
   *           ^
   * ```
   *
   * @type {State}
   */ function completeAttributeValueQuoted(code) {
        if (code === markerB) {
            effects.consume(code);
            markerB = null;
            return completeAttributeValueQuotedAfter;
        }
        if (code === null || markdownLineEnding(code)) {
            return nok(code);
        }
        effects.consume(code);
        return completeAttributeValueQuoted;
    }
    /**
   * In unquoted attribute value.
   *
   * ```markdown
   * > | <a b=c>
   *          ^
   * ```
   *
   * @type {State}
   */ function completeAttributeValueUnquoted(code) {
        if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {
            return completeAttributeNameAfter(code);
        }
        effects.consume(code);
        return completeAttributeValueUnquoted;
    }
    /**
   * After double or single quoted attribute value, before whitespace or the
   * end of the tag.
   *
   * ```markdown
   * > | <a b="c">
   *            ^
   * ```
   *
   * @type {State}
   */ function completeAttributeValueQuotedAfter(code) {
        if (code === 47 || code === 62 || markdownSpace(code)) {
            return completeAttributeNameBefore(code);
        }
        return nok(code);
    }
    /**
   * In certain circumstances of a complete tag where only an `>` is allowed.
   *
   * ```markdown
   * > | <a b="c">
   *             ^
   * ```
   *
   * @type {State}
   */ function completeEnd(code) {
        if (code === 62) {
            effects.consume(code);
            return completeAfter;
        }
        return nok(code);
    }
    /**
   * After `>` in a complete tag.
   *
   * ```markdown
   * > | <x>
   *        ^
   * ```
   *
   * @type {State}
   */ function completeAfter(code) {
        if (code === null || markdownLineEnding(code)) {
            // // Do not form containers.
            // tokenizer.concrete = true
            return continuation(code);
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return completeAfter;
        }
        return nok(code);
    }
    /**
   * In continuation of any HTML kind.
   *
   * ```markdown
   * > | <!--xxx-->
   *          ^
   * ```
   *
   * @type {State}
   */ function continuation(code) {
        if (code === 45 && marker === 2) {
            effects.consume(code);
            return continuationCommentInside;
        }
        if (code === 60 && marker === 1) {
            effects.consume(code);
            return continuationRawTagOpen;
        }
        if (code === 62 && marker === 4) {
            effects.consume(code);
            return continuationClose;
        }
        if (code === 63 && marker === 3) {
            effects.consume(code);
            return continuationDeclarationInside;
        }
        if (code === 93 && marker === 5) {
            effects.consume(code);
            return continuationCdataInside;
        }
        if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {
            effects.exit("htmlFlowData");
            return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);
        }
        if (code === null || markdownLineEnding(code)) {
            effects.exit("htmlFlowData");
            return continuationStart(code);
        }
        effects.consume(code);
        return continuation;
    }
    /**
   * In continuation, at eol.
   *
   * ```markdown
   * > | <x>
   *        ^
   *   | asd
   * ```
   *
   * @type {State}
   */ function continuationStart(code) {
        return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);
    }
    /**
   * In continuation, at eol, before non-lazy content.
   *
   * ```markdown
   * > | <x>
   *        ^
   *   | asd
   * ```
   *
   * @type {State}
   */ function continuationStartNonLazy(code) {
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return continuationBefore;
    }
    /**
   * In continuation, before non-lazy content.
   *
   * ```markdown
   *   | <x>
   * > | asd
   *     ^
   * ```
   *
   * @type {State}
   */ function continuationBefore(code) {
        if (code === null || markdownLineEnding(code)) {
            return continuationStart(code);
        }
        effects.enter("htmlFlowData");
        return continuation(code);
    }
    /**
   * In comment continuation, after one `-`, expecting another.
   *
   * ```markdown
   * > | <!--xxx-->
   *             ^
   * ```
   *
   * @type {State}
   */ function continuationCommentInside(code) {
        if (code === 45) {
            effects.consume(code);
            return continuationDeclarationInside;
        }
        return continuation(code);
    }
    /**
   * In raw continuation, after `<`, at `/`.
   *
   * ```markdown
   * > | <script>console.log(1)</script>
   *                            ^
   * ```
   *
   * @type {State}
   */ function continuationRawTagOpen(code) {
        if (code === 47) {
            effects.consume(code);
            buffer = "";
            return continuationRawEndTag;
        }
        return continuation(code);
    }
    /**
   * In raw continuation, after `</`, in a raw tag name.
   *
   * ```markdown
   * > | <script>console.log(1)</script>
   *                             ^^^^^^
   * ```
   *
   * @type {State}
   */ function continuationRawEndTag(code) {
        if (code === 62) {
            const name = buffer.toLowerCase();
            if (htmlRawNames.includes(name)) {
                effects.consume(code);
                return continuationClose;
            }
            return continuation(code);
        }
        if (asciiAlpha(code) && buffer.length < 8) {
            effects.consume(code);
            // @ts-expect-error: not null.
            buffer += String.fromCharCode(code);
            return continuationRawEndTag;
        }
        return continuation(code);
    }
    /**
   * In cdata continuation, after `]`, expecting `]>`.
   *
   * ```markdown
   * > | <![CDATA[>&<]]>
   *                  ^
   * ```
   *
   * @type {State}
   */ function continuationCdataInside(code) {
        if (code === 93) {
            effects.consume(code);
            return continuationDeclarationInside;
        }
        return continuation(code);
    }
    /**
   * In declaration or instruction continuation, at `>`.
   *
   * ```markdown
   * > | <!-->
   *         ^
   * > | <?>
   *       ^
   * > | <!q>
   *        ^
   * > | <!--ab-->
   *             ^
   * > | <![CDATA[>&<]]>
   *                   ^
   * ```
   *
   * @type {State}
   */ function continuationDeclarationInside(code) {
        if (code === 62) {
            effects.consume(code);
            return continuationClose;
        }
        // More dashes.
        if (code === 45 && marker === 2) {
            effects.consume(code);
            return continuationDeclarationInside;
        }
        return continuation(code);
    }
    /**
   * In closed continuation: everything we get until the eol/eof is part of it.
   *
   * ```markdown
   * > | <!doctype>
   *               ^
   * ```
   *
   * @type {State}
   */ function continuationClose(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("htmlFlowData");
            return continuationAfter(code);
        }
        effects.consume(code);
        return continuationClose;
    }
    /**
   * Done.
   *
   * ```markdown
   * > | <!doctype>
   *               ^
   * ```
   *
   * @type {State}
   */ function continuationAfter(code) {
        effects.exit("htmlFlow");
        // // Feel free to interrupt.
        // tokenizer.interrupt = false
        // // No longer concrete.
        // tokenizer.concrete = false
        return ok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeNonLazyContinuationStart(effects, ok, nok) {
    const self = this;
    return start;
    /**
   * At eol, before continuation.
   *
   * ```markdown
   * > | * ```js
   *            ^
   *   | b
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (markdownLineEnding(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return after;
        }
        return nok(code);
    }
    /**
   * A continuation.
   *
   * ```markdown
   *   | * ```js
   * > | b
   *     ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeBlankLineBefore(effects, ok, nok) {
    return start;
    /**
   * Before eol, expecting blank line.
   *
   * ```markdown
   * > | <div>
   *          ^
   *   |
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return effects.attempt(blankLine, ok, nok);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-fenced.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const nonLazyContinuation = {
    tokenize: tokenizeNonLazyContinuation,
    partial: true
};
/** @type {Construct} */ const codeFenced = {
    name: "codeFenced",
    tokenize: tokenizeCodeFenced,
    concrete: true
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeCodeFenced(effects, ok, nok) {
    const self = this;
    /** @type {Construct} */ const closeStart = {
        tokenize: tokenizeCloseStart,
        partial: true
    };
    let initialPrefix = 0;
    let sizeOpen = 0;
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    /**
   * Start of code.
   *
   * ```markdown
   * > | ~~~js
   *     ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function start(code) {
        // To do: parse whitespace like `markdown-rs`.
        return beforeSequenceOpen(code);
    }
    /**
   * In opening fence, after prefix, at sequence.
   *
   * ```markdown
   * > | ~~~js
   *     ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function beforeSequenceOpen(code) {
        const tail = self.events[self.events.length - 1];
        initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
        marker = code;
        effects.enter("codeFenced");
        effects.enter("codeFencedFence");
        effects.enter("codeFencedFenceSequence");
        return sequenceOpen(code);
    }
    /**
   * In opening fence sequence.
   *
   * ```markdown
   * > | ~~~js
   *      ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function sequenceOpen(code) {
        if (code === marker) {
            sizeOpen++;
            effects.consume(code);
            return sequenceOpen;
        }
        if (sizeOpen < 3) {
            return nok(code);
        }
        effects.exit("codeFencedFenceSequence");
        return markdownSpace(code) ? factorySpace(effects, infoBefore, "whitespace")(code) : infoBefore(code);
    }
    /**
   * In opening fence, after the sequence (and optional whitespace), before info.
   *
   * ```markdown
   * > | ~~~js
   *        ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function infoBefore(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("codeFencedFence");
            return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);
        }
        effects.enter("codeFencedFenceInfo");
        effects.enter("chunkString", {
            contentType: "string"
        });
        return info(code);
    }
    /**
   * In info.
   *
   * ```markdown
   * > | ~~~js
   *        ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function info(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceInfo");
            return infoBefore(code);
        }
        if (markdownSpace(code)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceInfo");
            return factorySpace(effects, metaBefore, "whitespace")(code);
        }
        if (code === 96 && code === marker) {
            return nok(code);
        }
        effects.consume(code);
        return info;
    }
    /**
   * In opening fence, after info and whitespace, before meta.
   *
   * ```markdown
   * > | ~~~js eval
   *           ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function metaBefore(code) {
        if (code === null || markdownLineEnding(code)) {
            return infoBefore(code);
        }
        effects.enter("codeFencedFenceMeta");
        effects.enter("chunkString", {
            contentType: "string"
        });
        return meta(code);
    }
    /**
   * In meta.
   *
   * ```markdown
   * > | ~~~js eval
   *           ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function meta(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceMeta");
            return infoBefore(code);
        }
        if (code === 96 && code === marker) {
            return nok(code);
        }
        effects.consume(code);
        return meta;
    }
    /**
   * At eol/eof in code, before a non-lazy closing fence or content.
   *
   * ```markdown
   * > | ~~~js
   *          ^
   * > | alert(1)
   *             ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function atNonLazyBreak(code) {
        return effects.attempt(closeStart, after, contentBefore)(code);
    }
    /**
   * Before code content, not a closing fence, at eol.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *             ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function contentBefore(code) {
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return contentStart;
    }
    /**
   * Before code content, not a closing fence.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *     ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function contentStart(code) {
        return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code) : beforeContentChunk(code);
    }
    /**
   * Before code content, after optional prefix.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *     ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function beforeContentChunk(code) {
        if (code === null || markdownLineEnding(code)) {
            return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);
        }
        effects.enter("codeFlowValue");
        return contentChunk(code);
    }
    /**
   * In code content.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *     ^^^^^^^^
   *   | ~~~
   * ```
   *
   * @type {State}
   */ function contentChunk(code) {
        if (code === null || markdownLineEnding(code)) {
            effects.exit("codeFlowValue");
            return beforeContentChunk(code);
        }
        effects.consume(code);
        return contentChunk;
    }
    /**
   * After code.
   *
   * ```markdown
   *   | ~~~js
   *   | alert(1)
   * > | ~~~
   *        ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        effects.exit("codeFenced");
        return ok(code);
    }
    /**
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeCloseStart(effects, ok, nok) {
        let size = 0;
        return startBefore;
        /**
     *
     *
     * @type {State}
     */ function startBefore(code) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return start;
        }
        /**
     * Before closing fence, at optional whitespace.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            // Always populated by defaults.
            // To do: `enter` here or in next state?
            effects.enter("codeFencedFence");
            return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code) : beforeSequenceClose(code);
        }
        /**
     * In closing fence, after optional whitespace, at sequence.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *     ^
     * ```
     *
     * @type {State}
     */ function beforeSequenceClose(code) {
            if (code === marker) {
                effects.enter("codeFencedFenceSequence");
                return sequenceClose(code);
            }
            return nok(code);
        }
        /**
     * In closing fence sequence.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *     ^
     * ```
     *
     * @type {State}
     */ function sequenceClose(code) {
            if (code === marker) {
                size++;
                effects.consume(code);
                return sequenceClose;
            }
            if (size >= sizeOpen) {
                effects.exit("codeFencedFenceSequence");
                return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, "whitespace")(code) : sequenceCloseAfter(code);
            }
            return nok(code);
        }
        /**
     * After closing fence sequence, after optional whitespace.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *        ^
     * ```
     *
     * @type {State}
     */ function sequenceCloseAfter(code) {
            if (code === null || markdownLineEnding(code)) {
                effects.exit("codeFencedFence");
                return ok(code);
            }
            return nok(code);
        }
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeNonLazyContinuation(effects, ok, nok) {
    const self = this;
    return start;
    /**
   *
   *
   * @type {State}
   */ function start(code) {
        if (code === null) {
            return nok(code);
        }
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return lineStart;
    }
    /**
   *
   *
   * @type {State}
   */ function lineStart(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/character-entities@2.0.2/node_modules/character-entities/index.js
/**
 * Map of named character references.
 *
 * @type {Record<string, string>}
 */ const characterEntities = {
    AElig: "\xc6",
    AMP: "&",
    Aacute: "\xc1",
    Abreve: "Ă",
    Acirc: "\xc2",
    Acy: "А",
    Afr: "\uD835\uDD04",
    Agrave: "\xc0",
    Alpha: "Α",
    Amacr: "Ā",
    And: "⩓",
    Aogon: "Ą",
    Aopf: "\uD835\uDD38",
    ApplyFunction: "⁡",
    Aring: "\xc5",
    Ascr: "\uD835\uDC9C",
    Assign: "≔",
    Atilde: "\xc3",
    Auml: "\xc4",
    Backslash: "∖",
    Barv: "⫧",
    Barwed: "⌆",
    Bcy: "Б",
    Because: "∵",
    Bernoullis: "ℬ",
    Beta: "Β",
    Bfr: "\uD835\uDD05",
    Bopf: "\uD835\uDD39",
    Breve: "˘",
    Bscr: "ℬ",
    Bumpeq: "≎",
    CHcy: "Ч",
    COPY: "\xa9",
    Cacute: "Ć",
    Cap: "⋒",
    CapitalDifferentialD: "ⅅ",
    Cayleys: "ℭ",
    Ccaron: "Č",
    Ccedil: "\xc7",
    Ccirc: "Ĉ",
    Cconint: "∰",
    Cdot: "Ċ",
    Cedilla: "\xb8",
    CenterDot: "\xb7",
    Cfr: "ℭ",
    Chi: "Χ",
    CircleDot: "⊙",
    CircleMinus: "⊖",
    CirclePlus: "⊕",
    CircleTimes: "⊗",
    ClockwiseContourIntegral: "∲",
    CloseCurlyDoubleQuote: "”",
    CloseCurlyQuote: "’",
    Colon: "∷",
    Colone: "⩴",
    Congruent: "≡",
    Conint: "∯",
    ContourIntegral: "∮",
    Copf: "ℂ",
    Coproduct: "∐",
    CounterClockwiseContourIntegral: "∳",
    Cross: "⨯",
    Cscr: "\uD835\uDC9E",
    Cup: "⋓",
    CupCap: "≍",
    DD: "ⅅ",
    DDotrahd: "⤑",
    DJcy: "Ђ",
    DScy: "Ѕ",
    DZcy: "Џ",
    Dagger: "‡",
    Darr: "↡",
    Dashv: "⫤",
    Dcaron: "Ď",
    Dcy: "Д",
    Del: "∇",
    Delta: "Δ",
    Dfr: "\uD835\uDD07",
    DiacriticalAcute: "\xb4",
    DiacriticalDot: "˙",
    DiacriticalDoubleAcute: "˝",
    DiacriticalGrave: "`",
    DiacriticalTilde: "˜",
    Diamond: "⋄",
    DifferentialD: "ⅆ",
    Dopf: "\uD835\uDD3B",
    Dot: "\xa8",
    DotDot: "⃜",
    DotEqual: "≐",
    DoubleContourIntegral: "∯",
    DoubleDot: "\xa8",
    DoubleDownArrow: "⇓",
    DoubleLeftArrow: "⇐",
    DoubleLeftRightArrow: "⇔",
    DoubleLeftTee: "⫤",
    DoubleLongLeftArrow: "⟸",
    DoubleLongLeftRightArrow: "⟺",
    DoubleLongRightArrow: "⟹",
    DoubleRightArrow: "⇒",
    DoubleRightTee: "⊨",
    DoubleUpArrow: "⇑",
    DoubleUpDownArrow: "⇕",
    DoubleVerticalBar: "∥",
    DownArrow: "↓",
    DownArrowBar: "⤓",
    DownArrowUpArrow: "⇵",
    DownBreve: "̑",
    DownLeftRightVector: "⥐",
    DownLeftTeeVector: "⥞",
    DownLeftVector: "↽",
    DownLeftVectorBar: "⥖",
    DownRightTeeVector: "⥟",
    DownRightVector: "⇁",
    DownRightVectorBar: "⥗",
    DownTee: "⊤",
    DownTeeArrow: "↧",
    Downarrow: "⇓",
    Dscr: "\uD835\uDC9F",
    Dstrok: "Đ",
    ENG: "Ŋ",
    ETH: "\xd0",
    Eacute: "\xc9",
    Ecaron: "Ě",
    Ecirc: "\xca",
    Ecy: "Э",
    Edot: "Ė",
    Efr: "\uD835\uDD08",
    Egrave: "\xc8",
    Element: "∈",
    Emacr: "Ē",
    EmptySmallSquare: "◻",
    EmptyVerySmallSquare: "▫",
    Eogon: "Ę",
    Eopf: "\uD835\uDD3C",
    Epsilon: "Ε",
    Equal: "⩵",
    EqualTilde: "≂",
    Equilibrium: "⇌",
    Escr: "ℰ",
    Esim: "⩳",
    Eta: "Η",
    Euml: "\xcb",
    Exists: "∃",
    ExponentialE: "ⅇ",
    Fcy: "Ф",
    Ffr: "\uD835\uDD09",
    FilledSmallSquare: "◼",
    FilledVerySmallSquare: "▪",
    Fopf: "\uD835\uDD3D",
    ForAll: "∀",
    Fouriertrf: "ℱ",
    Fscr: "ℱ",
    GJcy: "Ѓ",
    GT: ">",
    Gamma: "Γ",
    Gammad: "Ϝ",
    Gbreve: "Ğ",
    Gcedil: "Ģ",
    Gcirc: "Ĝ",
    Gcy: "Г",
    Gdot: "Ġ",
    Gfr: "\uD835\uDD0A",
    Gg: "⋙",
    Gopf: "\uD835\uDD3E",
    GreaterEqual: "≥",
    GreaterEqualLess: "⋛",
    GreaterFullEqual: "≧",
    GreaterGreater: "⪢",
    GreaterLess: "≷",
    GreaterSlantEqual: "⩾",
    GreaterTilde: "≳",
    Gscr: "\uD835\uDCA2",
    Gt: "≫",
    HARDcy: "Ъ",
    Hacek: "ˇ",
    Hat: "^",
    Hcirc: "Ĥ",
    Hfr: "ℌ",
    HilbertSpace: "ℋ",
    Hopf: "ℍ",
    HorizontalLine: "─",
    Hscr: "ℋ",
    Hstrok: "Ħ",
    HumpDownHump: "≎",
    HumpEqual: "≏",
    IEcy: "Е",
    IJlig: "Ĳ",
    IOcy: "Ё",
    Iacute: "\xcd",
    Icirc: "\xce",
    Icy: "И",
    Idot: "İ",
    Ifr: "ℑ",
    Igrave: "\xcc",
    Im: "ℑ",
    Imacr: "Ī",
    ImaginaryI: "ⅈ",
    Implies: "⇒",
    Int: "∬",
    Integral: "∫",
    Intersection: "⋂",
    InvisibleComma: "⁣",
    InvisibleTimes: "⁢",
    Iogon: "Į",
    Iopf: "\uD835\uDD40",
    Iota: "Ι",
    Iscr: "ℐ",
    Itilde: "Ĩ",
    Iukcy: "І",
    Iuml: "\xcf",
    Jcirc: "Ĵ",
    Jcy: "Й",
    Jfr: "\uD835\uDD0D",
    Jopf: "\uD835\uDD41",
    Jscr: "\uD835\uDCA5",
    Jsercy: "Ј",
    Jukcy: "Є",
    KHcy: "Х",
    KJcy: "Ќ",
    Kappa: "Κ",
    Kcedil: "Ķ",
    Kcy: "К",
    Kfr: "\uD835\uDD0E",
    Kopf: "\uD835\uDD42",
    Kscr: "\uD835\uDCA6",
    LJcy: "Љ",
    LT: "<",
    Lacute: "Ĺ",
    Lambda: "Λ",
    Lang: "⟪",
    Laplacetrf: "ℒ",
    Larr: "↞",
    Lcaron: "Ľ",
    Lcedil: "Ļ",
    Lcy: "Л",
    LeftAngleBracket: "⟨",
    LeftArrow: "←",
    LeftArrowBar: "⇤",
    LeftArrowRightArrow: "⇆",
    LeftCeiling: "⌈",
    LeftDoubleBracket: "⟦",
    LeftDownTeeVector: "⥡",
    LeftDownVector: "⇃",
    LeftDownVectorBar: "⥙",
    LeftFloor: "⌊",
    LeftRightArrow: "↔",
    LeftRightVector: "⥎",
    LeftTee: "⊣",
    LeftTeeArrow: "↤",
    LeftTeeVector: "⥚",
    LeftTriangle: "⊲",
    LeftTriangleBar: "⧏",
    LeftTriangleEqual: "⊴",
    LeftUpDownVector: "⥑",
    LeftUpTeeVector: "⥠",
    LeftUpVector: "↿",
    LeftUpVectorBar: "⥘",
    LeftVector: "↼",
    LeftVectorBar: "⥒",
    Leftarrow: "⇐",
    Leftrightarrow: "⇔",
    LessEqualGreater: "⋚",
    LessFullEqual: "≦",
    LessGreater: "≶",
    LessLess: "⪡",
    LessSlantEqual: "⩽",
    LessTilde: "≲",
    Lfr: "\uD835\uDD0F",
    Ll: "⋘",
    Lleftarrow: "⇚",
    Lmidot: "Ŀ",
    LongLeftArrow: "⟵",
    LongLeftRightArrow: "⟷",
    LongRightArrow: "⟶",
    Longleftarrow: "⟸",
    Longleftrightarrow: "⟺",
    Longrightarrow: "⟹",
    Lopf: "\uD835\uDD43",
    LowerLeftArrow: "↙",
    LowerRightArrow: "↘",
    Lscr: "ℒ",
    Lsh: "↰",
    Lstrok: "Ł",
    Lt: "≪",
    Map: "⤅",
    Mcy: "М",
    MediumSpace: " ",
    Mellintrf: "ℳ",
    Mfr: "\uD835\uDD10",
    MinusPlus: "∓",
    Mopf: "\uD835\uDD44",
    Mscr: "ℳ",
    Mu: "Μ",
    NJcy: "Њ",
    Nacute: "Ń",
    Ncaron: "Ň",
    Ncedil: "Ņ",
    Ncy: "Н",
    NegativeMediumSpace: "​",
    NegativeThickSpace: "​",
    NegativeThinSpace: "​",
    NegativeVeryThinSpace: "​",
    NestedGreaterGreater: "≫",
    NestedLessLess: "≪",
    NewLine: "\n",
    Nfr: "\uD835\uDD11",
    NoBreak: "⁠",
    NonBreakingSpace: "\xa0",
    Nopf: "ℕ",
    Not: "⫬",
    NotCongruent: "≢",
    NotCupCap: "≭",
    NotDoubleVerticalBar: "∦",
    NotElement: "∉",
    NotEqual: "≠",
    NotEqualTilde: "≂̸",
    NotExists: "∄",
    NotGreater: "≯",
    NotGreaterEqual: "≱",
    NotGreaterFullEqual: "≧̸",
    NotGreaterGreater: "≫̸",
    NotGreaterLess: "≹",
    NotGreaterSlantEqual: "⩾̸",
    NotGreaterTilde: "≵",
    NotHumpDownHump: "≎̸",
    NotHumpEqual: "≏̸",
    NotLeftTriangle: "⋪",
    NotLeftTriangleBar: "⧏̸",
    NotLeftTriangleEqual: "⋬",
    NotLess: "≮",
    NotLessEqual: "≰",
    NotLessGreater: "≸",
    NotLessLess: "≪̸",
    NotLessSlantEqual: "⩽̸",
    NotLessTilde: "≴",
    NotNestedGreaterGreater: "⪢̸",
    NotNestedLessLess: "⪡̸",
    NotPrecedes: "⊀",
    NotPrecedesEqual: "⪯̸",
    NotPrecedesSlantEqual: "⋠",
    NotReverseElement: "∌",
    NotRightTriangle: "⋫",
    NotRightTriangleBar: "⧐̸",
    NotRightTriangleEqual: "⋭",
    NotSquareSubset: "⊏̸",
    NotSquareSubsetEqual: "⋢",
    NotSquareSuperset: "⊐̸",
    NotSquareSupersetEqual: "⋣",
    NotSubset: "⊂⃒",
    NotSubsetEqual: "⊈",
    NotSucceeds: "⊁",
    NotSucceedsEqual: "⪰̸",
    NotSucceedsSlantEqual: "⋡",
    NotSucceedsTilde: "≿̸",
    NotSuperset: "⊃⃒",
    NotSupersetEqual: "⊉",
    NotTilde: "≁",
    NotTildeEqual: "≄",
    NotTildeFullEqual: "≇",
    NotTildeTilde: "≉",
    NotVerticalBar: "∤",
    Nscr: "\uD835\uDCA9",
    Ntilde: "\xd1",
    Nu: "Ν",
    OElig: "Œ",
    Oacute: "\xd3",
    Ocirc: "\xd4",
    Ocy: "О",
    Odblac: "Ő",
    Ofr: "\uD835\uDD12",
    Ograve: "\xd2",
    Omacr: "Ō",
    Omega: "Ω",
    Omicron: "Ο",
    Oopf: "\uD835\uDD46",
    OpenCurlyDoubleQuote: "“",
    OpenCurlyQuote: "‘",
    Or: "⩔",
    Oscr: "\uD835\uDCAA",
    Oslash: "\xd8",
    Otilde: "\xd5",
    Otimes: "⨷",
    Ouml: "\xd6",
    OverBar: "‾",
    OverBrace: "⏞",
    OverBracket: "⎴",
    OverParenthesis: "⏜",
    PartialD: "∂",
    Pcy: "П",
    Pfr: "\uD835\uDD13",
    Phi: "Φ",
    Pi: "Π",
    PlusMinus: "\xb1",
    Poincareplane: "ℌ",
    Popf: "ℙ",
    Pr: "⪻",
    Precedes: "≺",
    PrecedesEqual: "⪯",
    PrecedesSlantEqual: "≼",
    PrecedesTilde: "≾",
    Prime: "″",
    Product: "∏",
    Proportion: "∷",
    Proportional: "∝",
    Pscr: "\uD835\uDCAB",
    Psi: "Ψ",
    QUOT: '"',
    Qfr: "\uD835\uDD14",
    Qopf: "ℚ",
    Qscr: "\uD835\uDCAC",
    RBarr: "⤐",
    REG: "\xae",
    Racute: "Ŕ",
    Rang: "⟫",
    Rarr: "↠",
    Rarrtl: "⤖",
    Rcaron: "Ř",
    Rcedil: "Ŗ",
    Rcy: "Р",
    Re: "ℜ",
    ReverseElement: "∋",
    ReverseEquilibrium: "⇋",
    ReverseUpEquilibrium: "⥯",
    Rfr: "ℜ",
    Rho: "Ρ",
    RightAngleBracket: "⟩",
    RightArrow: "→",
    RightArrowBar: "⇥",
    RightArrowLeftArrow: "⇄",
    RightCeiling: "⌉",
    RightDoubleBracket: "⟧",
    RightDownTeeVector: "⥝",
    RightDownVector: "⇂",
    RightDownVectorBar: "⥕",
    RightFloor: "⌋",
    RightTee: "⊢",
    RightTeeArrow: "↦",
    RightTeeVector: "⥛",
    RightTriangle: "⊳",
    RightTriangleBar: "⧐",
    RightTriangleEqual: "⊵",
    RightUpDownVector: "⥏",
    RightUpTeeVector: "⥜",
    RightUpVector: "↾",
    RightUpVectorBar: "⥔",
    RightVector: "⇀",
    RightVectorBar: "⥓",
    Rightarrow: "⇒",
    Ropf: "ℝ",
    RoundImplies: "⥰",
    Rrightarrow: "⇛",
    Rscr: "ℛ",
    Rsh: "↱",
    RuleDelayed: "⧴",
    SHCHcy: "Щ",
    SHcy: "Ш",
    SOFTcy: "Ь",
    Sacute: "Ś",
    Sc: "⪼",
    Scaron: "Š",
    Scedil: "Ş",
    Scirc: "Ŝ",
    Scy: "С",
    Sfr: "\uD835\uDD16",
    ShortDownArrow: "↓",
    ShortLeftArrow: "←",
    ShortRightArrow: "→",
    ShortUpArrow: "↑",
    Sigma: "Σ",
    SmallCircle: "∘",
    Sopf: "\uD835\uDD4A",
    Sqrt: "√",
    Square: "□",
    SquareIntersection: "⊓",
    SquareSubset: "⊏",
    SquareSubsetEqual: "⊑",
    SquareSuperset: "⊐",
    SquareSupersetEqual: "⊒",
    SquareUnion: "⊔",
    Sscr: "\uD835\uDCAE",
    Star: "⋆",
    Sub: "⋐",
    Subset: "⋐",
    SubsetEqual: "⊆",
    Succeeds: "≻",
    SucceedsEqual: "⪰",
    SucceedsSlantEqual: "≽",
    SucceedsTilde: "≿",
    SuchThat: "∋",
    Sum: "∑",
    Sup: "⋑",
    Superset: "⊃",
    SupersetEqual: "⊇",
    Supset: "⋑",
    THORN: "\xde",
    TRADE: "™",
    TSHcy: "Ћ",
    TScy: "Ц",
    Tab: "	",
    Tau: "Τ",
    Tcaron: "Ť",
    Tcedil: "Ţ",
    Tcy: "Т",
    Tfr: "\uD835\uDD17",
    Therefore: "∴",
    Theta: "Θ",
    ThickSpace: "  ",
    ThinSpace: " ",
    Tilde: "∼",
    TildeEqual: "≃",
    TildeFullEqual: "≅",
    TildeTilde: "≈",
    Topf: "\uD835\uDD4B",
    TripleDot: "⃛",
    Tscr: "\uD835\uDCAF",
    Tstrok: "Ŧ",
    Uacute: "\xda",
    Uarr: "↟",
    Uarrocir: "⥉",
    Ubrcy: "Ў",
    Ubreve: "Ŭ",
    Ucirc: "\xdb",
    Ucy: "У",
    Udblac: "Ű",
    Ufr: "\uD835\uDD18",
    Ugrave: "\xd9",
    Umacr: "Ū",
    UnderBar: "_",
    UnderBrace: "⏟",
    UnderBracket: "⎵",
    UnderParenthesis: "⏝",
    Union: "⋃",
    UnionPlus: "⊎",
    Uogon: "Ų",
    Uopf: "\uD835\uDD4C",
    UpArrow: "↑",
    UpArrowBar: "⤒",
    UpArrowDownArrow: "⇅",
    UpDownArrow: "↕",
    UpEquilibrium: "⥮",
    UpTee: "⊥",
    UpTeeArrow: "↥",
    Uparrow: "⇑",
    Updownarrow: "⇕",
    UpperLeftArrow: "↖",
    UpperRightArrow: "↗",
    Upsi: "ϒ",
    Upsilon: "Υ",
    Uring: "Ů",
    Uscr: "\uD835\uDCB0",
    Utilde: "Ũ",
    Uuml: "\xdc",
    VDash: "⊫",
    Vbar: "⫫",
    Vcy: "В",
    Vdash: "⊩",
    Vdashl: "⫦",
    Vee: "⋁",
    Verbar: "‖",
    Vert: "‖",
    VerticalBar: "∣",
    VerticalLine: "|",
    VerticalSeparator: "❘",
    VerticalTilde: "≀",
    VeryThinSpace: " ",
    Vfr: "\uD835\uDD19",
    Vopf: "\uD835\uDD4D",
    Vscr: "\uD835\uDCB1",
    Vvdash: "⊪",
    Wcirc: "Ŵ",
    Wedge: "⋀",
    Wfr: "\uD835\uDD1A",
    Wopf: "\uD835\uDD4E",
    Wscr: "\uD835\uDCB2",
    Xfr: "\uD835\uDD1B",
    Xi: "Ξ",
    Xopf: "\uD835\uDD4F",
    Xscr: "\uD835\uDCB3",
    YAcy: "Я",
    YIcy: "Ї",
    YUcy: "Ю",
    Yacute: "\xdd",
    Ycirc: "Ŷ",
    Ycy: "Ы",
    Yfr: "\uD835\uDD1C",
    Yopf: "\uD835\uDD50",
    Yscr: "\uD835\uDCB4",
    Yuml: "Ÿ",
    ZHcy: "Ж",
    Zacute: "Ź",
    Zcaron: "Ž",
    Zcy: "З",
    Zdot: "Ż",
    ZeroWidthSpace: "​",
    Zeta: "Ζ",
    Zfr: "ℨ",
    Zopf: "ℤ",
    Zscr: "\uD835\uDCB5",
    aacute: "\xe1",
    abreve: "ă",
    ac: "∾",
    acE: "∾̳",
    acd: "∿",
    acirc: "\xe2",
    acute: "\xb4",
    acy: "а",
    aelig: "\xe6",
    af: "⁡",
    afr: "\uD835\uDD1E",
    agrave: "\xe0",
    alefsym: "ℵ",
    aleph: "ℵ",
    alpha: "α",
    amacr: "ā",
    amalg: "⨿",
    amp: "&",
    and: "∧",
    andand: "⩕",
    andd: "⩜",
    andslope: "⩘",
    andv: "⩚",
    ang: "∠",
    ange: "⦤",
    angle: "∠",
    angmsd: "∡",
    angmsdaa: "⦨",
    angmsdab: "⦩",
    angmsdac: "⦪",
    angmsdad: "⦫",
    angmsdae: "⦬",
    angmsdaf: "⦭",
    angmsdag: "⦮",
    angmsdah: "⦯",
    angrt: "∟",
    angrtvb: "⊾",
    angrtvbd: "⦝",
    angsph: "∢",
    angst: "\xc5",
    angzarr: "⍼",
    aogon: "ą",
    aopf: "\uD835\uDD52",
    ap: "≈",
    apE: "⩰",
    apacir: "⩯",
    ape: "≊",
    apid: "≋",
    apos: "'",
    approx: "≈",
    approxeq: "≊",
    aring: "\xe5",
    ascr: "\uD835\uDCB6",
    ast: "*",
    asymp: "≈",
    asympeq: "≍",
    atilde: "\xe3",
    auml: "\xe4",
    awconint: "∳",
    awint: "⨑",
    bNot: "⫭",
    backcong: "≌",
    backepsilon: "϶",
    backprime: "‵",
    backsim: "∽",
    backsimeq: "⋍",
    barvee: "⊽",
    barwed: "⌅",
    barwedge: "⌅",
    bbrk: "⎵",
    bbrktbrk: "⎶",
    bcong: "≌",
    bcy: "б",
    bdquo: "„",
    becaus: "∵",
    because: "∵",
    bemptyv: "⦰",
    bepsi: "϶",
    bernou: "ℬ",
    beta: "β",
    beth: "ℶ",
    between: "≬",
    bfr: "\uD835\uDD1F",
    bigcap: "⋂",
    bigcirc: "◯",
    bigcup: "⋃",
    bigodot: "⨀",
    bigoplus: "⨁",
    bigotimes: "⨂",
    bigsqcup: "⨆",
    bigstar: "★",
    bigtriangledown: "▽",
    bigtriangleup: "△",
    biguplus: "⨄",
    bigvee: "⋁",
    bigwedge: "⋀",
    bkarow: "⤍",
    blacklozenge: "⧫",
    blacksquare: "▪",
    blacktriangle: "▴",
    blacktriangledown: "▾",
    blacktriangleleft: "◂",
    blacktriangleright: "▸",
    blank: "␣",
    blk12: "▒",
    blk14: "░",
    blk34: "▓",
    block: "█",
    bne: "=⃥",
    bnequiv: "≡⃥",
    bnot: "⌐",
    bopf: "\uD835\uDD53",
    bot: "⊥",
    bottom: "⊥",
    bowtie: "⋈",
    boxDL: "╗",
    boxDR: "╔",
    boxDl: "╖",
    boxDr: "╓",
    boxH: "═",
    boxHD: "╦",
    boxHU: "╩",
    boxHd: "╤",
    boxHu: "╧",
    boxUL: "╝",
    boxUR: "╚",
    boxUl: "╜",
    boxUr: "╙",
    boxV: "║",
    boxVH: "╬",
    boxVL: "╣",
    boxVR: "╠",
    boxVh: "╫",
    boxVl: "╢",
    boxVr: "╟",
    boxbox: "⧉",
    boxdL: "╕",
    boxdR: "╒",
    boxdl: "┐",
    boxdr: "┌",
    boxh: "─",
    boxhD: "╥",
    boxhU: "╨",
    boxhd: "┬",
    boxhu: "┴",
    boxminus: "⊟",
    boxplus: "⊞",
    boxtimes: "⊠",
    boxuL: "╛",
    boxuR: "╘",
    boxul: "┘",
    boxur: "└",
    boxv: "│",
    boxvH: "╪",
    boxvL: "╡",
    boxvR: "╞",
    boxvh: "┼",
    boxvl: "┤",
    boxvr: "├",
    bprime: "‵",
    breve: "˘",
    brvbar: "\xa6",
    bscr: "\uD835\uDCB7",
    bsemi: "⁏",
    bsim: "∽",
    bsime: "⋍",
    bsol: "\\",
    bsolb: "⧅",
    bsolhsub: "⟈",
    bull: "•",
    bullet: "•",
    bump: "≎",
    bumpE: "⪮",
    bumpe: "≏",
    bumpeq: "≏",
    cacute: "ć",
    cap: "∩",
    capand: "⩄",
    capbrcup: "⩉",
    capcap: "⩋",
    capcup: "⩇",
    capdot: "⩀",
    caps: "∩︀",
    caret: "⁁",
    caron: "ˇ",
    ccaps: "⩍",
    ccaron: "č",
    ccedil: "\xe7",
    ccirc: "ĉ",
    ccups: "⩌",
    ccupssm: "⩐",
    cdot: "ċ",
    cedil: "\xb8",
    cemptyv: "⦲",
    cent: "\xa2",
    centerdot: "\xb7",
    cfr: "\uD835\uDD20",
    chcy: "ч",
    check: "✓",
    checkmark: "✓",
    chi: "χ",
    cir: "○",
    cirE: "⧃",
    circ: "ˆ",
    circeq: "≗",
    circlearrowleft: "↺",
    circlearrowright: "↻",
    circledR: "\xae",
    circledS: "Ⓢ",
    circledast: "⊛",
    circledcirc: "⊚",
    circleddash: "⊝",
    cire: "≗",
    cirfnint: "⨐",
    cirmid: "⫯",
    cirscir: "⧂",
    clubs: "♣",
    clubsuit: "♣",
    colon: ":",
    colone: "≔",
    coloneq: "≔",
    comma: ",",
    commat: "@",
    comp: "∁",
    compfn: "∘",
    complement: "∁",
    complexes: "ℂ",
    cong: "≅",
    congdot: "⩭",
    conint: "∮",
    copf: "\uD835\uDD54",
    coprod: "∐",
    copy: "\xa9",
    copysr: "℗",
    crarr: "↵",
    cross: "✗",
    cscr: "\uD835\uDCB8",
    csub: "⫏",
    csube: "⫑",
    csup: "⫐",
    csupe: "⫒",
    ctdot: "⋯",
    cudarrl: "⤸",
    cudarrr: "⤵",
    cuepr: "⋞",
    cuesc: "⋟",
    cularr: "↶",
    cularrp: "⤽",
    cup: "∪",
    cupbrcap: "⩈",
    cupcap: "⩆",
    cupcup: "⩊",
    cupdot: "⊍",
    cupor: "⩅",
    cups: "∪︀",
    curarr: "↷",
    curarrm: "⤼",
    curlyeqprec: "⋞",
    curlyeqsucc: "⋟",
    curlyvee: "⋎",
    curlywedge: "⋏",
    curren: "\xa4",
    curvearrowleft: "↶",
    curvearrowright: "↷",
    cuvee: "⋎",
    cuwed: "⋏",
    cwconint: "∲",
    cwint: "∱",
    cylcty: "⌭",
    dArr: "⇓",
    dHar: "⥥",
    dagger: "†",
    daleth: "ℸ",
    darr: "↓",
    dash: "‐",
    dashv: "⊣",
    dbkarow: "⤏",
    dblac: "˝",
    dcaron: "ď",
    dcy: "д",
    dd: "ⅆ",
    ddagger: "‡",
    ddarr: "⇊",
    ddotseq: "⩷",
    deg: "\xb0",
    delta: "δ",
    demptyv: "⦱",
    dfisht: "⥿",
    dfr: "\uD835\uDD21",
    dharl: "⇃",
    dharr: "⇂",
    diam: "⋄",
    diamond: "⋄",
    diamondsuit: "♦",
    diams: "♦",
    die: "\xa8",
    digamma: "ϝ",
    disin: "⋲",
    div: "\xf7",
    divide: "\xf7",
    divideontimes: "⋇",
    divonx: "⋇",
    djcy: "ђ",
    dlcorn: "⌞",
    dlcrop: "⌍",
    dollar: "$",
    dopf: "\uD835\uDD55",
    dot: "˙",
    doteq: "≐",
    doteqdot: "≑",
    dotminus: "∸",
    dotplus: "∔",
    dotsquare: "⊡",
    doublebarwedge: "⌆",
    downarrow: "↓",
    downdownarrows: "⇊",
    downharpoonleft: "⇃",
    downharpoonright: "⇂",
    drbkarow: "⤐",
    drcorn: "⌟",
    drcrop: "⌌",
    dscr: "\uD835\uDCB9",
    dscy: "ѕ",
    dsol: "⧶",
    dstrok: "đ",
    dtdot: "⋱",
    dtri: "▿",
    dtrif: "▾",
    duarr: "⇵",
    duhar: "⥯",
    dwangle: "⦦",
    dzcy: "џ",
    dzigrarr: "⟿",
    eDDot: "⩷",
    eDot: "≑",
    eacute: "\xe9",
    easter: "⩮",
    ecaron: "ě",
    ecir: "≖",
    ecirc: "\xea",
    ecolon: "≕",
    ecy: "э",
    edot: "ė",
    ee: "ⅇ",
    efDot: "≒",
    efr: "\uD835\uDD22",
    eg: "⪚",
    egrave: "\xe8",
    egs: "⪖",
    egsdot: "⪘",
    el: "⪙",
    elinters: "⏧",
    ell: "ℓ",
    els: "⪕",
    elsdot: "⪗",
    emacr: "ē",
    empty: "∅",
    emptyset: "∅",
    emptyv: "∅",
    emsp13: " ",
    emsp14: " ",
    emsp: " ",
    eng: "ŋ",
    ensp: " ",
    eogon: "ę",
    eopf: "\uD835\uDD56",
    epar: "⋕",
    eparsl: "⧣",
    eplus: "⩱",
    epsi: "ε",
    epsilon: "ε",
    epsiv: "ϵ",
    eqcirc: "≖",
    eqcolon: "≕",
    eqsim: "≂",
    eqslantgtr: "⪖",
    eqslantless: "⪕",
    equals: "=",
    equest: "≟",
    equiv: "≡",
    equivDD: "⩸",
    eqvparsl: "⧥",
    erDot: "≓",
    erarr: "⥱",
    escr: "ℯ",
    esdot: "≐",
    esim: "≂",
    eta: "η",
    eth: "\xf0",
    euml: "\xeb",
    euro: "€",
    excl: "!",
    exist: "∃",
    expectation: "ℰ",
    exponentiale: "ⅇ",
    fallingdotseq: "≒",
    fcy: "ф",
    female: "♀",
    ffilig: "ﬃ",
    fflig: "ﬀ",
    ffllig: "ﬄ",
    ffr: "\uD835\uDD23",
    filig: "ﬁ",
    fjlig: "fj",
    flat: "♭",
    fllig: "ﬂ",
    fltns: "▱",
    fnof: "ƒ",
    fopf: "\uD835\uDD57",
    forall: "∀",
    fork: "⋔",
    forkv: "⫙",
    fpartint: "⨍",
    frac12: "\xbd",
    frac13: "⅓",
    frac14: "\xbc",
    frac15: "⅕",
    frac16: "⅙",
    frac18: "⅛",
    frac23: "⅔",
    frac25: "⅖",
    frac34: "\xbe",
    frac35: "⅗",
    frac38: "⅜",
    frac45: "⅘",
    frac56: "⅚",
    frac58: "⅝",
    frac78: "⅞",
    frasl: "⁄",
    frown: "⌢",
    fscr: "\uD835\uDCBB",
    gE: "≧",
    gEl: "⪌",
    gacute: "ǵ",
    gamma: "γ",
    gammad: "ϝ",
    gap: "⪆",
    gbreve: "ğ",
    gcirc: "ĝ",
    gcy: "г",
    gdot: "ġ",
    ge: "≥",
    gel: "⋛",
    geq: "≥",
    geqq: "≧",
    geqslant: "⩾",
    ges: "⩾",
    gescc: "⪩",
    gesdot: "⪀",
    gesdoto: "⪂",
    gesdotol: "⪄",
    gesl: "⋛︀",
    gesles: "⪔",
    gfr: "\uD835\uDD24",
    gg: "≫",
    ggg: "⋙",
    gimel: "ℷ",
    gjcy: "ѓ",
    gl: "≷",
    glE: "⪒",
    gla: "⪥",
    glj: "⪤",
    gnE: "≩",
    gnap: "⪊",
    gnapprox: "⪊",
    gne: "⪈",
    gneq: "⪈",
    gneqq: "≩",
    gnsim: "⋧",
    gopf: "\uD835\uDD58",
    grave: "`",
    gscr: "ℊ",
    gsim: "≳",
    gsime: "⪎",
    gsiml: "⪐",
    gt: ">",
    gtcc: "⪧",
    gtcir: "⩺",
    gtdot: "⋗",
    gtlPar: "⦕",
    gtquest: "⩼",
    gtrapprox: "⪆",
    gtrarr: "⥸",
    gtrdot: "⋗",
    gtreqless: "⋛",
    gtreqqless: "⪌",
    gtrless: "≷",
    gtrsim: "≳",
    gvertneqq: "≩︀",
    gvnE: "≩︀",
    hArr: "⇔",
    hairsp: " ",
    half: "\xbd",
    hamilt: "ℋ",
    hardcy: "ъ",
    harr: "↔",
    harrcir: "⥈",
    harrw: "↭",
    hbar: "ℏ",
    hcirc: "ĥ",
    hearts: "♥",
    heartsuit: "♥",
    hellip: "…",
    hercon: "⊹",
    hfr: "\uD835\uDD25",
    hksearow: "⤥",
    hkswarow: "⤦",
    hoarr: "⇿",
    homtht: "∻",
    hookleftarrow: "↩",
    hookrightarrow: "↪",
    hopf: "\uD835\uDD59",
    horbar: "―",
    hscr: "\uD835\uDCBD",
    hslash: "ℏ",
    hstrok: "ħ",
    hybull: "⁃",
    hyphen: "‐",
    iacute: "\xed",
    ic: "⁣",
    icirc: "\xee",
    icy: "и",
    iecy: "е",
    iexcl: "\xa1",
    iff: "⇔",
    ifr: "\uD835\uDD26",
    igrave: "\xec",
    ii: "ⅈ",
    iiiint: "⨌",
    iiint: "∭",
    iinfin: "⧜",
    iiota: "℩",
    ijlig: "ĳ",
    imacr: "ī",
    image: "ℑ",
    imagline: "ℐ",
    imagpart: "ℑ",
    imath: "ı",
    imof: "⊷",
    imped: "Ƶ",
    in: "∈",
    incare: "℅",
    infin: "∞",
    infintie: "⧝",
    inodot: "ı",
    int: "∫",
    intcal: "⊺",
    integers: "ℤ",
    intercal: "⊺",
    intlarhk: "⨗",
    intprod: "⨼",
    iocy: "ё",
    iogon: "į",
    iopf: "\uD835\uDD5A",
    iota: "ι",
    iprod: "⨼",
    iquest: "\xbf",
    iscr: "\uD835\uDCBE",
    isin: "∈",
    isinE: "⋹",
    isindot: "⋵",
    isins: "⋴",
    isinsv: "⋳",
    isinv: "∈",
    it: "⁢",
    itilde: "ĩ",
    iukcy: "і",
    iuml: "\xef",
    jcirc: "ĵ",
    jcy: "й",
    jfr: "\uD835\uDD27",
    jmath: "ȷ",
    jopf: "\uD835\uDD5B",
    jscr: "\uD835\uDCBF",
    jsercy: "ј",
    jukcy: "є",
    kappa: "κ",
    kappav: "ϰ",
    kcedil: "ķ",
    kcy: "к",
    kfr: "\uD835\uDD28",
    kgreen: "ĸ",
    khcy: "х",
    kjcy: "ќ",
    kopf: "\uD835\uDD5C",
    kscr: "\uD835\uDCC0",
    lAarr: "⇚",
    lArr: "⇐",
    lAtail: "⤛",
    lBarr: "⤎",
    lE: "≦",
    lEg: "⪋",
    lHar: "⥢",
    lacute: "ĺ",
    laemptyv: "⦴",
    lagran: "ℒ",
    lambda: "λ",
    lang: "⟨",
    langd: "⦑",
    langle: "⟨",
    lap: "⪅",
    laquo: "\xab",
    larr: "←",
    larrb: "⇤",
    larrbfs: "⤟",
    larrfs: "⤝",
    larrhk: "↩",
    larrlp: "↫",
    larrpl: "⤹",
    larrsim: "⥳",
    larrtl: "↢",
    lat: "⪫",
    latail: "⤙",
    late: "⪭",
    lates: "⪭︀",
    lbarr: "⤌",
    lbbrk: "❲",
    lbrace: "{",
    lbrack: "[",
    lbrke: "⦋",
    lbrksld: "⦏",
    lbrkslu: "⦍",
    lcaron: "ľ",
    lcedil: "ļ",
    lceil: "⌈",
    lcub: "{",
    lcy: "л",
    ldca: "⤶",
    ldquo: "“",
    ldquor: "„",
    ldrdhar: "⥧",
    ldrushar: "⥋",
    ldsh: "↲",
    le: "≤",
    leftarrow: "←",
    leftarrowtail: "↢",
    leftharpoondown: "↽",
    leftharpoonup: "↼",
    leftleftarrows: "⇇",
    leftrightarrow: "↔",
    leftrightarrows: "⇆",
    leftrightharpoons: "⇋",
    leftrightsquigarrow: "↭",
    leftthreetimes: "⋋",
    leg: "⋚",
    leq: "≤",
    leqq: "≦",
    leqslant: "⩽",
    les: "⩽",
    lescc: "⪨",
    lesdot: "⩿",
    lesdoto: "⪁",
    lesdotor: "⪃",
    lesg: "⋚︀",
    lesges: "⪓",
    lessapprox: "⪅",
    lessdot: "⋖",
    lesseqgtr: "⋚",
    lesseqqgtr: "⪋",
    lessgtr: "≶",
    lesssim: "≲",
    lfisht: "⥼",
    lfloor: "⌊",
    lfr: "\uD835\uDD29",
    lg: "≶",
    lgE: "⪑",
    lhard: "↽",
    lharu: "↼",
    lharul: "⥪",
    lhblk: "▄",
    ljcy: "љ",
    ll: "≪",
    llarr: "⇇",
    llcorner: "⌞",
    llhard: "⥫",
    lltri: "◺",
    lmidot: "ŀ",
    lmoust: "⎰",
    lmoustache: "⎰",
    lnE: "≨",
    lnap: "⪉",
    lnapprox: "⪉",
    lne: "⪇",
    lneq: "⪇",
    lneqq: "≨",
    lnsim: "⋦",
    loang: "⟬",
    loarr: "⇽",
    lobrk: "⟦",
    longleftarrow: "⟵",
    longleftrightarrow: "⟷",
    longmapsto: "⟼",
    longrightarrow: "⟶",
    looparrowleft: "↫",
    looparrowright: "↬",
    lopar: "⦅",
    lopf: "\uD835\uDD5D",
    loplus: "⨭",
    lotimes: "⨴",
    lowast: "∗",
    lowbar: "_",
    loz: "◊",
    lozenge: "◊",
    lozf: "⧫",
    lpar: "(",
    lparlt: "⦓",
    lrarr: "⇆",
    lrcorner: "⌟",
    lrhar: "⇋",
    lrhard: "⥭",
    lrm: "‎",
    lrtri: "⊿",
    lsaquo: "‹",
    lscr: "\uD835\uDCC1",
    lsh: "↰",
    lsim: "≲",
    lsime: "⪍",
    lsimg: "⪏",
    lsqb: "[",
    lsquo: "‘",
    lsquor: "‚",
    lstrok: "ł",
    lt: "<",
    ltcc: "⪦",
    ltcir: "⩹",
    ltdot: "⋖",
    lthree: "⋋",
    ltimes: "⋉",
    ltlarr: "⥶",
    ltquest: "⩻",
    ltrPar: "⦖",
    ltri: "◃",
    ltrie: "⊴",
    ltrif: "◂",
    lurdshar: "⥊",
    luruhar: "⥦",
    lvertneqq: "≨︀",
    lvnE: "≨︀",
    mDDot: "∺",
    macr: "\xaf",
    male: "♂",
    malt: "✠",
    maltese: "✠",
    map: "↦",
    mapsto: "↦",
    mapstodown: "↧",
    mapstoleft: "↤",
    mapstoup: "↥",
    marker: "▮",
    mcomma: "⨩",
    mcy: "м",
    mdash: "—",
    measuredangle: "∡",
    mfr: "\uD835\uDD2A",
    mho: "℧",
    micro: "\xb5",
    mid: "∣",
    midast: "*",
    midcir: "⫰",
    middot: "\xb7",
    minus: "−",
    minusb: "⊟",
    minusd: "∸",
    minusdu: "⨪",
    mlcp: "⫛",
    mldr: "…",
    mnplus: "∓",
    models: "⊧",
    mopf: "\uD835\uDD5E",
    mp: "∓",
    mscr: "\uD835\uDCC2",
    mstpos: "∾",
    mu: "μ",
    multimap: "⊸",
    mumap: "⊸",
    nGg: "⋙̸",
    nGt: "≫⃒",
    nGtv: "≫̸",
    nLeftarrow: "⇍",
    nLeftrightarrow: "⇎",
    nLl: "⋘̸",
    nLt: "≪⃒",
    nLtv: "≪̸",
    nRightarrow: "⇏",
    nVDash: "⊯",
    nVdash: "⊮",
    nabla: "∇",
    nacute: "ń",
    nang: "∠⃒",
    nap: "≉",
    napE: "⩰̸",
    napid: "≋̸",
    napos: "ŉ",
    napprox: "≉",
    natur: "♮",
    natural: "♮",
    naturals: "ℕ",
    nbsp: "\xa0",
    nbump: "≎̸",
    nbumpe: "≏̸",
    ncap: "⩃",
    ncaron: "ň",
    ncedil: "ņ",
    ncong: "≇",
    ncongdot: "⩭̸",
    ncup: "⩂",
    ncy: "н",
    ndash: "–",
    ne: "≠",
    neArr: "⇗",
    nearhk: "⤤",
    nearr: "↗",
    nearrow: "↗",
    nedot: "≐̸",
    nequiv: "≢",
    nesear: "⤨",
    nesim: "≂̸",
    nexist: "∄",
    nexists: "∄",
    nfr: "\uD835\uDD2B",
    ngE: "≧̸",
    nge: "≱",
    ngeq: "≱",
    ngeqq: "≧̸",
    ngeqslant: "⩾̸",
    nges: "⩾̸",
    ngsim: "≵",
    ngt: "≯",
    ngtr: "≯",
    nhArr: "⇎",
    nharr: "↮",
    nhpar: "⫲",
    ni: "∋",
    nis: "⋼",
    nisd: "⋺",
    niv: "∋",
    njcy: "њ",
    nlArr: "⇍",
    nlE: "≦̸",
    nlarr: "↚",
    nldr: "‥",
    nle: "≰",
    nleftarrow: "↚",
    nleftrightarrow: "↮",
    nleq: "≰",
    nleqq: "≦̸",
    nleqslant: "⩽̸",
    nles: "⩽̸",
    nless: "≮",
    nlsim: "≴",
    nlt: "≮",
    nltri: "⋪",
    nltrie: "⋬",
    nmid: "∤",
    nopf: "\uD835\uDD5F",
    not: "\xac",
    notin: "∉",
    notinE: "⋹̸",
    notindot: "⋵̸",
    notinva: "∉",
    notinvb: "⋷",
    notinvc: "⋶",
    notni: "∌",
    notniva: "∌",
    notnivb: "⋾",
    notnivc: "⋽",
    npar: "∦",
    nparallel: "∦",
    nparsl: "⫽⃥",
    npart: "∂̸",
    npolint: "⨔",
    npr: "⊀",
    nprcue: "⋠",
    npre: "⪯̸",
    nprec: "⊀",
    npreceq: "⪯̸",
    nrArr: "⇏",
    nrarr: "↛",
    nrarrc: "⤳̸",
    nrarrw: "↝̸",
    nrightarrow: "↛",
    nrtri: "⋫",
    nrtrie: "⋭",
    nsc: "⊁",
    nsccue: "⋡",
    nsce: "⪰̸",
    nscr: "\uD835\uDCC3",
    nshortmid: "∤",
    nshortparallel: "∦",
    nsim: "≁",
    nsime: "≄",
    nsimeq: "≄",
    nsmid: "∤",
    nspar: "∦",
    nsqsube: "⋢",
    nsqsupe: "⋣",
    nsub: "⊄",
    nsubE: "⫅̸",
    nsube: "⊈",
    nsubset: "⊂⃒",
    nsubseteq: "⊈",
    nsubseteqq: "⫅̸",
    nsucc: "⊁",
    nsucceq: "⪰̸",
    nsup: "⊅",
    nsupE: "⫆̸",
    nsupe: "⊉",
    nsupset: "⊃⃒",
    nsupseteq: "⊉",
    nsupseteqq: "⫆̸",
    ntgl: "≹",
    ntilde: "\xf1",
    ntlg: "≸",
    ntriangleleft: "⋪",
    ntrianglelefteq: "⋬",
    ntriangleright: "⋫",
    ntrianglerighteq: "⋭",
    nu: "ν",
    num: "#",
    numero: "№",
    numsp: " ",
    nvDash: "⊭",
    nvHarr: "⤄",
    nvap: "≍⃒",
    nvdash: "⊬",
    nvge: "≥⃒",
    nvgt: ">⃒",
    nvinfin: "⧞",
    nvlArr: "⤂",
    nvle: "≤⃒",
    nvlt: "<⃒",
    nvltrie: "⊴⃒",
    nvrArr: "⤃",
    nvrtrie: "⊵⃒",
    nvsim: "∼⃒",
    nwArr: "⇖",
    nwarhk: "⤣",
    nwarr: "↖",
    nwarrow: "↖",
    nwnear: "⤧",
    oS: "Ⓢ",
    oacute: "\xf3",
    oast: "⊛",
    ocir: "⊚",
    ocirc: "\xf4",
    ocy: "о",
    odash: "⊝",
    odblac: "ő",
    odiv: "⨸",
    odot: "⊙",
    odsold: "⦼",
    oelig: "œ",
    ofcir: "⦿",
    ofr: "\uD835\uDD2C",
    ogon: "˛",
    ograve: "\xf2",
    ogt: "⧁",
    ohbar: "⦵",
    ohm: "Ω",
    oint: "∮",
    olarr: "↺",
    olcir: "⦾",
    olcross: "⦻",
    oline: "‾",
    olt: "⧀",
    omacr: "ō",
    omega: "ω",
    omicron: "ο",
    omid: "⦶",
    ominus: "⊖",
    oopf: "\uD835\uDD60",
    opar: "⦷",
    operp: "⦹",
    oplus: "⊕",
    or: "∨",
    orarr: "↻",
    ord: "⩝",
    order: "ℴ",
    orderof: "ℴ",
    ordf: "\xaa",
    ordm: "\xba",
    origof: "⊶",
    oror: "⩖",
    orslope: "⩗",
    orv: "⩛",
    oscr: "ℴ",
    oslash: "\xf8",
    osol: "⊘",
    otilde: "\xf5",
    otimes: "⊗",
    otimesas: "⨶",
    ouml: "\xf6",
    ovbar: "⌽",
    par: "∥",
    para: "\xb6",
    parallel: "∥",
    parsim: "⫳",
    parsl: "⫽",
    part: "∂",
    pcy: "п",
    percnt: "%",
    period: ".",
    permil: "‰",
    perp: "⊥",
    pertenk: "‱",
    pfr: "\uD835\uDD2D",
    phi: "φ",
    phiv: "ϕ",
    phmmat: "ℳ",
    phone: "☎",
    pi: "π",
    pitchfork: "⋔",
    piv: "ϖ",
    planck: "ℏ",
    planckh: "ℎ",
    plankv: "ℏ",
    plus: "+",
    plusacir: "⨣",
    plusb: "⊞",
    pluscir: "⨢",
    plusdo: "∔",
    plusdu: "⨥",
    pluse: "⩲",
    plusmn: "\xb1",
    plussim: "⨦",
    plustwo: "⨧",
    pm: "\xb1",
    pointint: "⨕",
    popf: "\uD835\uDD61",
    pound: "\xa3",
    pr: "≺",
    prE: "⪳",
    prap: "⪷",
    prcue: "≼",
    pre: "⪯",
    prec: "≺",
    precapprox: "⪷",
    preccurlyeq: "≼",
    preceq: "⪯",
    precnapprox: "⪹",
    precneqq: "⪵",
    precnsim: "⋨",
    precsim: "≾",
    prime: "′",
    primes: "ℙ",
    prnE: "⪵",
    prnap: "⪹",
    prnsim: "⋨",
    prod: "∏",
    profalar: "⌮",
    profline: "⌒",
    profsurf: "⌓",
    prop: "∝",
    propto: "∝",
    prsim: "≾",
    prurel: "⊰",
    pscr: "\uD835\uDCC5",
    psi: "ψ",
    puncsp: " ",
    qfr: "\uD835\uDD2E",
    qint: "⨌",
    qopf: "\uD835\uDD62",
    qprime: "⁗",
    qscr: "\uD835\uDCC6",
    quaternions: "ℍ",
    quatint: "⨖",
    quest: "?",
    questeq: "≟",
    quot: '"',
    rAarr: "⇛",
    rArr: "⇒",
    rAtail: "⤜",
    rBarr: "⤏",
    rHar: "⥤",
    race: "∽̱",
    racute: "ŕ",
    radic: "√",
    raemptyv: "⦳",
    rang: "⟩",
    rangd: "⦒",
    range: "⦥",
    rangle: "⟩",
    raquo: "\xbb",
    rarr: "→",
    rarrap: "⥵",
    rarrb: "⇥",
    rarrbfs: "⤠",
    rarrc: "⤳",
    rarrfs: "⤞",
    rarrhk: "↪",
    rarrlp: "↬",
    rarrpl: "⥅",
    rarrsim: "⥴",
    rarrtl: "↣",
    rarrw: "↝",
    ratail: "⤚",
    ratio: "∶",
    rationals: "ℚ",
    rbarr: "⤍",
    rbbrk: "❳",
    rbrace: "}",
    rbrack: "]",
    rbrke: "⦌",
    rbrksld: "⦎",
    rbrkslu: "⦐",
    rcaron: "ř",
    rcedil: "ŗ",
    rceil: "⌉",
    rcub: "}",
    rcy: "р",
    rdca: "⤷",
    rdldhar: "⥩",
    rdquo: "”",
    rdquor: "”",
    rdsh: "↳",
    real: "ℜ",
    realine: "ℛ",
    realpart: "ℜ",
    reals: "ℝ",
    rect: "▭",
    reg: "\xae",
    rfisht: "⥽",
    rfloor: "⌋",
    rfr: "\uD835\uDD2F",
    rhard: "⇁",
    rharu: "⇀",
    rharul: "⥬",
    rho: "ρ",
    rhov: "ϱ",
    rightarrow: "→",
    rightarrowtail: "↣",
    rightharpoondown: "⇁",
    rightharpoonup: "⇀",
    rightleftarrows: "⇄",
    rightleftharpoons: "⇌",
    rightrightarrows: "⇉",
    rightsquigarrow: "↝",
    rightthreetimes: "⋌",
    ring: "˚",
    risingdotseq: "≓",
    rlarr: "⇄",
    rlhar: "⇌",
    rlm: "‏",
    rmoust: "⎱",
    rmoustache: "⎱",
    rnmid: "⫮",
    roang: "⟭",
    roarr: "⇾",
    robrk: "⟧",
    ropar: "⦆",
    ropf: "\uD835\uDD63",
    roplus: "⨮",
    rotimes: "⨵",
    rpar: ")",
    rpargt: "⦔",
    rppolint: "⨒",
    rrarr: "⇉",
    rsaquo: "›",
    rscr: "\uD835\uDCC7",
    rsh: "↱",
    rsqb: "]",
    rsquo: "’",
    rsquor: "’",
    rthree: "⋌",
    rtimes: "⋊",
    rtri: "▹",
    rtrie: "⊵",
    rtrif: "▸",
    rtriltri: "⧎",
    ruluhar: "⥨",
    rx: "℞",
    sacute: "ś",
    sbquo: "‚",
    sc: "≻",
    scE: "⪴",
    scap: "⪸",
    scaron: "š",
    sccue: "≽",
    sce: "⪰",
    scedil: "ş",
    scirc: "ŝ",
    scnE: "⪶",
    scnap: "⪺",
    scnsim: "⋩",
    scpolint: "⨓",
    scsim: "≿",
    scy: "с",
    sdot: "⋅",
    sdotb: "⊡",
    sdote: "⩦",
    seArr: "⇘",
    searhk: "⤥",
    searr: "↘",
    searrow: "↘",
    sect: "\xa7",
    semi: ";",
    seswar: "⤩",
    setminus: "∖",
    setmn: "∖",
    sext: "✶",
    sfr: "\uD835\uDD30",
    sfrown: "⌢",
    sharp: "♯",
    shchcy: "щ",
    shcy: "ш",
    shortmid: "∣",
    shortparallel: "∥",
    shy: "\xad",
    sigma: "σ",
    sigmaf: "ς",
    sigmav: "ς",
    sim: "∼",
    simdot: "⩪",
    sime: "≃",
    simeq: "≃",
    simg: "⪞",
    simgE: "⪠",
    siml: "⪝",
    simlE: "⪟",
    simne: "≆",
    simplus: "⨤",
    simrarr: "⥲",
    slarr: "←",
    smallsetminus: "∖",
    smashp: "⨳",
    smeparsl: "⧤",
    smid: "∣",
    smile: "⌣",
    smt: "⪪",
    smte: "⪬",
    smtes: "⪬︀",
    softcy: "ь",
    sol: "/",
    solb: "⧄",
    solbar: "⌿",
    sopf: "\uD835\uDD64",
    spades: "♠",
    spadesuit: "♠",
    spar: "∥",
    sqcap: "⊓",
    sqcaps: "⊓︀",
    sqcup: "⊔",
    sqcups: "⊔︀",
    sqsub: "⊏",
    sqsube: "⊑",
    sqsubset: "⊏",
    sqsubseteq: "⊑",
    sqsup: "⊐",
    sqsupe: "⊒",
    sqsupset: "⊐",
    sqsupseteq: "⊒",
    squ: "□",
    square: "□",
    squarf: "▪",
    squf: "▪",
    srarr: "→",
    sscr: "\uD835\uDCC8",
    ssetmn: "∖",
    ssmile: "⌣",
    sstarf: "⋆",
    star: "☆",
    starf: "★",
    straightepsilon: "ϵ",
    straightphi: "ϕ",
    strns: "\xaf",
    sub: "⊂",
    subE: "⫅",
    subdot: "⪽",
    sube: "⊆",
    subedot: "⫃",
    submult: "⫁",
    subnE: "⫋",
    subne: "⊊",
    subplus: "⪿",
    subrarr: "⥹",
    subset: "⊂",
    subseteq: "⊆",
    subseteqq: "⫅",
    subsetneq: "⊊",
    subsetneqq: "⫋",
    subsim: "⫇",
    subsub: "⫕",
    subsup: "⫓",
    succ: "≻",
    succapprox: "⪸",
    succcurlyeq: "≽",
    succeq: "⪰",
    succnapprox: "⪺",
    succneqq: "⪶",
    succnsim: "⋩",
    succsim: "≿",
    sum: "∑",
    sung: "♪",
    sup1: "\xb9",
    sup2: "\xb2",
    sup3: "\xb3",
    sup: "⊃",
    supE: "⫆",
    supdot: "⪾",
    supdsub: "⫘",
    supe: "⊇",
    supedot: "⫄",
    suphsol: "⟉",
    suphsub: "⫗",
    suplarr: "⥻",
    supmult: "⫂",
    supnE: "⫌",
    supne: "⊋",
    supplus: "⫀",
    supset: "⊃",
    supseteq: "⊇",
    supseteqq: "⫆",
    supsetneq: "⊋",
    supsetneqq: "⫌",
    supsim: "⫈",
    supsub: "⫔",
    supsup: "⫖",
    swArr: "⇙",
    swarhk: "⤦",
    swarr: "↙",
    swarrow: "↙",
    swnwar: "⤪",
    szlig: "\xdf",
    target: "⌖",
    tau: "τ",
    tbrk: "⎴",
    tcaron: "ť",
    tcedil: "ţ",
    tcy: "т",
    tdot: "⃛",
    telrec: "⌕",
    tfr: "\uD835\uDD31",
    there4: "∴",
    therefore: "∴",
    theta: "θ",
    thetasym: "ϑ",
    thetav: "ϑ",
    thickapprox: "≈",
    thicksim: "∼",
    thinsp: " ",
    thkap: "≈",
    thksim: "∼",
    thorn: "\xfe",
    tilde: "˜",
    times: "\xd7",
    timesb: "⊠",
    timesbar: "⨱",
    timesd: "⨰",
    tint: "∭",
    toea: "⤨",
    top: "⊤",
    topbot: "⌶",
    topcir: "⫱",
    topf: "\uD835\uDD65",
    topfork: "⫚",
    tosa: "⤩",
    tprime: "‴",
    trade: "™",
    triangle: "▵",
    triangledown: "▿",
    triangleleft: "◃",
    trianglelefteq: "⊴",
    triangleq: "≜",
    triangleright: "▹",
    trianglerighteq: "⊵",
    tridot: "◬",
    trie: "≜",
    triminus: "⨺",
    triplus: "⨹",
    trisb: "⧍",
    tritime: "⨻",
    trpezium: "⏢",
    tscr: "\uD835\uDCC9",
    tscy: "ц",
    tshcy: "ћ",
    tstrok: "ŧ",
    twixt: "≬",
    twoheadleftarrow: "↞",
    twoheadrightarrow: "↠",
    uArr: "⇑",
    uHar: "⥣",
    uacute: "\xfa",
    uarr: "↑",
    ubrcy: "ў",
    ubreve: "ŭ",
    ucirc: "\xfb",
    ucy: "у",
    udarr: "⇅",
    udblac: "ű",
    udhar: "⥮",
    ufisht: "⥾",
    ufr: "\uD835\uDD32",
    ugrave: "\xf9",
    uharl: "↿",
    uharr: "↾",
    uhblk: "▀",
    ulcorn: "⌜",
    ulcorner: "⌜",
    ulcrop: "⌏",
    ultri: "◸",
    umacr: "ū",
    uml: "\xa8",
    uogon: "ų",
    uopf: "\uD835\uDD66",
    uparrow: "↑",
    updownarrow: "↕",
    upharpoonleft: "↿",
    upharpoonright: "↾",
    uplus: "⊎",
    upsi: "υ",
    upsih: "ϒ",
    upsilon: "υ",
    upuparrows: "⇈",
    urcorn: "⌝",
    urcorner: "⌝",
    urcrop: "⌎",
    uring: "ů",
    urtri: "◹",
    uscr: "\uD835\uDCCA",
    utdot: "⋰",
    utilde: "ũ",
    utri: "▵",
    utrif: "▴",
    uuarr: "⇈",
    uuml: "\xfc",
    uwangle: "⦧",
    vArr: "⇕",
    vBar: "⫨",
    vBarv: "⫩",
    vDash: "⊨",
    vangrt: "⦜",
    varepsilon: "ϵ",
    varkappa: "ϰ",
    varnothing: "∅",
    varphi: "ϕ",
    varpi: "ϖ",
    varpropto: "∝",
    varr: "↕",
    varrho: "ϱ",
    varsigma: "ς",
    varsubsetneq: "⊊︀",
    varsubsetneqq: "⫋︀",
    varsupsetneq: "⊋︀",
    varsupsetneqq: "⫌︀",
    vartheta: "ϑ",
    vartriangleleft: "⊲",
    vartriangleright: "⊳",
    vcy: "в",
    vdash: "⊢",
    vee: "∨",
    veebar: "⊻",
    veeeq: "≚",
    vellip: "⋮",
    verbar: "|",
    vert: "|",
    vfr: "\uD835\uDD33",
    vltri: "⊲",
    vnsub: "⊂⃒",
    vnsup: "⊃⃒",
    vopf: "\uD835\uDD67",
    vprop: "∝",
    vrtri: "⊳",
    vscr: "\uD835\uDCCB",
    vsubnE: "⫋︀",
    vsubne: "⊊︀",
    vsupnE: "⫌︀",
    vsupne: "⊋︀",
    vzigzag: "⦚",
    wcirc: "ŵ",
    wedbar: "⩟",
    wedge: "∧",
    wedgeq: "≙",
    weierp: "℘",
    wfr: "\uD835\uDD34",
    wopf: "\uD835\uDD68",
    wp: "℘",
    wr: "≀",
    wreath: "≀",
    wscr: "\uD835\uDCCC",
    xcap: "⋂",
    xcirc: "◯",
    xcup: "⋃",
    xdtri: "▽",
    xfr: "\uD835\uDD35",
    xhArr: "⟺",
    xharr: "⟷",
    xi: "ξ",
    xlArr: "⟸",
    xlarr: "⟵",
    xmap: "⟼",
    xnis: "⋻",
    xodot: "⨀",
    xopf: "\uD835\uDD69",
    xoplus: "⨁",
    xotime: "⨂",
    xrArr: "⟹",
    xrarr: "⟶",
    xscr: "\uD835\uDCCD",
    xsqcup: "⨆",
    xuplus: "⨄",
    xutri: "△",
    xvee: "⋁",
    xwedge: "⋀",
    yacute: "\xfd",
    yacy: "я",
    ycirc: "ŷ",
    ycy: "ы",
    yen: "\xa5",
    yfr: "\uD835\uDD36",
    yicy: "ї",
    yopf: "\uD835\uDD6A",
    yscr: "\uD835\uDCCE",
    yucy: "ю",
    yuml: "\xff",
    zacute: "ź",
    zcaron: "ž",
    zcy: "з",
    zdot: "ż",
    zeetrf: "ℨ",
    zeta: "ζ",
    zfr: "\uD835\uDD37",
    zhcy: "ж",
    zigrarr: "⇝",
    zopf: "\uD835\uDD6B",
    zscr: "\uD835\uDCCF",
    zwj: "‍",
    zwnj: "‌"
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js

const decode_named_character_reference_own = {}.hasOwnProperty;
/**
 * Decode a single character reference (without the `&` or `;`).
 * You probably only need this when you’re building parsers yourself that follow
 * different rules compared to HTML.
 * This is optimized to be tiny in browsers.
 *
 * @param {string} value
 *   `notin` (named), `#123` (deci), `#x123` (hexa).
 * @returns {string|false}
 *   Decoded reference.
 */ function decodeNamedCharacterReference(value) {
    return decode_named_character_reference_own.call(characterEntities, value) ? characterEntities[value] : false;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-reference.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const characterReference = {
    name: "characterReference",
    tokenize: tokenizeCharacterReference
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeCharacterReference(effects, ok, nok) {
    const self = this;
    let size = 0;
    /** @type {number} */ let max;
    /** @type {(code: Code) => boolean} */ let test;
    return start;
    /**
   * Start of character reference.
   *
   * ```markdown
   * > | a&amp;b
   *      ^
   * > | a&#123;b
   *      ^
   * > | a&#x9;b
   *      ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("characterReference");
        effects.enter("characterReferenceMarker");
        effects.consume(code);
        effects.exit("characterReferenceMarker");
        return open;
    }
    /**
   * After `&`, at `#` for numeric references or alphanumeric for named
   * references.
   *
   * ```markdown
   * > | a&amp;b
   *       ^
   * > | a&#123;b
   *       ^
   * > | a&#x9;b
   *       ^
   * ```
   *
   * @type {State}
   */ function open(code) {
        if (code === 35) {
            effects.enter("characterReferenceMarkerNumeric");
            effects.consume(code);
            effects.exit("characterReferenceMarkerNumeric");
            return numeric;
        }
        effects.enter("characterReferenceValue");
        max = 31;
        test = asciiAlphanumeric;
        return value(code);
    }
    /**
   * After `#`, at `x` for hexadecimals or digit for decimals.
   *
   * ```markdown
   * > | a&#123;b
   *        ^
   * > | a&#x9;b
   *        ^
   * ```
   *
   * @type {State}
   */ function numeric(code) {
        if (code === 88 || code === 120) {
            effects.enter("characterReferenceMarkerHexadecimal");
            effects.consume(code);
            effects.exit("characterReferenceMarkerHexadecimal");
            effects.enter("characterReferenceValue");
            max = 6;
            test = asciiHexDigit;
            return value;
        }
        effects.enter("characterReferenceValue");
        max = 7;
        test = asciiDigit;
        return value(code);
    }
    /**
   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.
   *
   * The character reference kind defines what and how many characters are
   * allowed.
   *
   * ```markdown
   * > | a&amp;b
   *       ^^^
   * > | a&#123;b
   *        ^^^
   * > | a&#x9;b
   *         ^
   * ```
   *
   * @type {State}
   */ function value(code) {
        if (code === 59 && size) {
            const token = effects.exit("characterReferenceValue");
            if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {
                return nok(code);
            }
            // To do: `markdown-rs` uses a different name:
            // `CharacterReferenceMarkerSemi`.
            effects.enter("characterReferenceMarker");
            effects.consume(code);
            effects.exit("characterReferenceMarker");
            effects.exit("characterReference");
            return ok;
        }
        if (test(code) && size++ < max) {
            effects.consume(code);
            return value;
        }
        return nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-escape.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 
/** @type {Construct} */ const characterEscape = {
    name: "characterEscape",
    tokenize: tokenizeCharacterEscape
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeCharacterEscape(effects, ok, nok) {
    return start;
    /**
   * Start of character escape.
   *
   * ```markdown
   * > | a\*b
   *      ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("characterEscape");
        effects.enter("escapeMarker");
        effects.consume(code);
        effects.exit("escapeMarker");
        return inside;
    }
    /**
   * After `\`, at punctuation.
   *
   * ```markdown
   * > | a\*b
   *       ^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        // ASCII punctuation.
        if (asciiPunctuation(code)) {
            effects.enter("characterEscapeValue");
            effects.consume(code);
            effects.exit("characterEscapeValue");
            effects.exit("characterEscape");
            return ok;
        }
        return nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/line-ending.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const lineEnding = {
    name: "lineEnding",
    tokenize: tokenizeLineEnding
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeLineEnding(effects, ok) {
    return start;
    /** @type {State} */ function start(code) {
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return factorySpace(effects, ok, "linePrefix");
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-end.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 







/** @type {Construct} */ const labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
};
/** @type {Construct} */ const resourceConstruct = {
    tokenize: tokenizeResource
};
/** @type {Construct} */ const referenceFullConstruct = {
    tokenize: tokenizeReferenceFull
};
/** @type {Construct} */ const referenceCollapsedConstruct = {
    tokenize: tokenizeReferenceCollapsed
};
/** @type {Resolver} */ function resolveAllLabelEnd(events) {
    let index = -1;
    while(++index < events.length){
        const token = events[index][1];
        if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
            // Remove the marker.
            events.splice(index + 1, token.type === "labelImage" ? 4 : 2);
            token.type = "data";
            index++;
        }
    }
    return events;
}
/** @type {Resolver} */ function resolveToLabelEnd(events, context) {
    let index = events.length;
    let offset = 0;
    /** @type {Token} */ let token;
    /** @type {number | undefined} */ let open;
    /** @type {number | undefined} */ let close;
    /** @type {Array<Event>} */ let media;
    // Find an opening.
    while(index--){
        token = events[index][1];
        if (open) {
            // If we see another link, or inactive link label, we’ve been here before.
            if (token.type === "link" || token.type === "labelLink" && token._inactive) {
                break;
            }
            // Mark other link openings as inactive, as we can’t have links in
            // links.
            if (events[index][0] === "enter" && token.type === "labelLink") {
                token._inactive = true;
            }
        } else if (close) {
            if (events[index][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
                open = index;
                if (token.type !== "labelLink") {
                    offset = 2;
                    break;
                }
            }
        } else if (token.type === "labelEnd") {
            close = index;
        }
    }
    const group = {
        type: events[open][1].type === "labelLink" ? "link" : "image",
        start: Object.assign({}, events[open][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
    };
    const label = {
        type: "label",
        start: Object.assign({}, events[open][1].start),
        end: Object.assign({}, events[close][1].end)
    };
    const text = {
        type: "labelText",
        start: Object.assign({}, events[open + offset + 2][1].end),
        end: Object.assign({}, events[close - 2][1].start)
    };
    media = [
        [
            "enter",
            group,
            context
        ],
        [
            "enter",
            label,
            context
        ]
    ];
    // Opening marker.
    media = push(media, events.slice(open + 1, open + offset + 3));
    // Text open.
    media = push(media, [
        [
            "enter",
            text,
            context
        ]
    ]);
    // Always populated by defaults.
    // Between.
    media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));
    // Text close, marker close, label close.
    media = push(media, [
        [
            "exit",
            text,
            context
        ],
        events[close - 2],
        events[close - 1],
        [
            "exit",
            label,
            context
        ]
    ]);
    // Reference, resource, or so.
    media = push(media, events.slice(close + 1));
    // Media close.
    media = push(media, [
        [
            "exit",
            group,
            context
        ]
    ]);
    splice(events, open, events.length, media);
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeLabelEnd(effects, ok, nok) {
    const self = this;
    let index = self.events.length;
    /** @type {Token} */ let labelStart;
    /** @type {boolean} */ let defined;
    // Find an opening.
    while(index--){
        if ((self.events[index][1].type === "labelImage" || self.events[index][1].type === "labelLink") && !self.events[index][1]._balanced) {
            labelStart = self.events[index][1];
            break;
        }
    }
    return start;
    /**
   * Start of label end.
   *
   * ```markdown
   * > | [a](b) c
   *       ^
   * > | [a][b] c
   *       ^
   * > | [a][] b
   *       ^
   * > | [a] b
   * ```
   *
   * @type {State}
   */ function start(code) {
        // If there is not an okay opening.
        if (!labelStart) {
            return nok(code);
        }
        // If the corresponding label (link) start is marked as inactive,
        // it means we’d be wrapping a link, like this:
        //
        // ```markdown
        // > | a [b [c](d) e](f) g.
        //                  ^
        // ```
        //
        // We can’t have that, so it’s just balanced brackets.
        if (labelStart._inactive) {
            return labelEndNok(code);
        }
        defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({
            start: labelStart.end,
            end: self.now()
        })));
        effects.enter("labelEnd");
        effects.enter("labelMarker");
        effects.consume(code);
        effects.exit("labelMarker");
        effects.exit("labelEnd");
        return after;
    }
    /**
   * After `]`.
   *
   * ```markdown
   * > | [a](b) c
   *       ^
   * > | [a][b] c
   *       ^
   * > | [a][] b
   *       ^
   * > | [a] b
   *       ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        // Note: `markdown-rs` also parses GFM footnotes here, which for us is in
        // an extension.
        // Resource (`[asd](fgh)`)?
        if (code === 40) {
            return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);
        }
        // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?
        if (code === 91) {
            return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);
        }
        // Shortcut (`[asd]`) reference?
        return defined ? labelEndOk(code) : labelEndNok(code);
    }
    /**
   * After `]`, at `[`, but not at a full reference.
   *
   * > 👉 **Note**: we only get here if the label is defined.
   *
   * ```markdown
   * > | [a][] b
   *        ^
   * > | [a] b
   *        ^
   * ```
   *
   * @type {State}
   */ function referenceNotFull(code) {
        return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);
    }
    /**
   * Done, we found something.
   *
   * ```markdown
   * > | [a](b) c
   *           ^
   * > | [a][b] c
   *           ^
   * > | [a][] b
   *          ^
   * > | [a] b
   *        ^
   * ```
   *
   * @type {State}
   */ function labelEndOk(code) {
        // Note: `markdown-rs` does a bunch of stuff here.
        return ok(code);
    }
    /**
   * Done, it’s nothing.
   *
   * There was an okay opening, but we didn’t match anything.
   *
   * ```markdown
   * > | [a](b c
   *        ^
   * > | [a][b c
   *        ^
   * > | [a] b
   *        ^
   * ```
   *
   * @type {State}
   */ function labelEndNok(code) {
        labelStart._balanced = true;
        return nok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeResource(effects, ok, nok) {
    return resourceStart;
    /**
   * At a resource.
   *
   * ```markdown
   * > | [a](b) c
   *        ^
   * ```
   *
   * @type {State}
   */ function resourceStart(code) {
        effects.enter("resource");
        effects.enter("resourceMarker");
        effects.consume(code);
        effects.exit("resourceMarker");
        return resourceBefore;
    }
    /**
   * In resource, after `(`, at optional whitespace.
   *
   * ```markdown
   * > | [a](b) c
   *         ^
   * ```
   *
   * @type {State}
   */ function resourceBefore(code) {
        return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);
    }
    /**
   * In resource, after optional whitespace, at `)` or a destination.
   *
   * ```markdown
   * > | [a](b) c
   *         ^
   * ```
   *
   * @type {State}
   */ function resourceOpen(code) {
        if (code === 41) {
            return resourceEnd(code);
        }
        return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code);
    }
    /**
   * In resource, after destination, at optional whitespace.
   *
   * ```markdown
   * > | [a](b) c
   *          ^
   * ```
   *
   * @type {State}
   */ function resourceDestinationAfter(code) {
        return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);
    }
    /**
   * At invalid destination.
   *
   * ```markdown
   * > | [a](<<) b
   *         ^
   * ```
   *
   * @type {State}
   */ function resourceDestinationMissing(code) {
        return nok(code);
    }
    /**
   * In resource, after destination and whitespace, at `(` or title.
   *
   * ```markdown
   * > | [a](b ) c
   *           ^
   * ```
   *
   * @type {State}
   */ function resourceBetween(code) {
        if (code === 34 || code === 39 || code === 40) {
            return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code);
        }
        return resourceEnd(code);
    }
    /**
   * In resource, after title, at optional whitespace.
   *
   * ```markdown
   * > | [a](b "c") d
   *              ^
   * ```
   *
   * @type {State}
   */ function resourceTitleAfter(code) {
        return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);
    }
    /**
   * In resource, at `)`.
   *
   * ```markdown
   * > | [a](b) d
   *          ^
   * ```
   *
   * @type {State}
   */ function resourceEnd(code) {
        if (code === 41) {
            effects.enter("resourceMarker");
            effects.consume(code);
            effects.exit("resourceMarker");
            effects.exit("resource");
            return ok;
        }
        return nok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeReferenceFull(effects, ok, nok) {
    const self = this;
    return referenceFull;
    /**
   * In a reference (full), at the `[`.
   *
   * ```markdown
   * > | [a][b] d
   *        ^
   * ```
   *
   * @type {State}
   */ function referenceFull(code) {
        return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code);
    }
    /**
   * In a reference (full), after `]`.
   *
   * ```markdown
   * > | [a][b] d
   *          ^
   * ```
   *
   * @type {State}
   */ function referenceFullAfter(code) {
        return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);
    }
    /**
   * In reference (full) that was missing.
   *
   * ```markdown
   * > | [a][b d
   *        ^
   * ```
   *
   * @type {State}
   */ function referenceFullMissing(code) {
        return nok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeReferenceCollapsed(effects, ok, nok) {
    return referenceCollapsedStart;
    /**
   * In reference (collapsed), at `[`.
   *
   * > 👉 **Note**: we only get here if the label is defined.
   *
   * ```markdown
   * > | [a][] d
   *        ^
   * ```
   *
   * @type {State}
   */ function referenceCollapsedStart(code) {
        // We only attempt a collapsed label if there’s a `[`.
        effects.enter("reference");
        effects.enter("referenceMarker");
        effects.consume(code);
        effects.exit("referenceMarker");
        return referenceCollapsedOpen;
    }
    /**
   * In reference (collapsed), at `]`.
   *
   * > 👉 **Note**: we only get here if the label is defined.
   *
   * ```markdown
   * > | [a][] d
   *         ^
   * ```
   *
   *  @type {State}
   */ function referenceCollapsedOpen(code) {
        if (code === 93) {
            effects.enter("referenceMarker");
            effects.consume(code);
            effects.exit("referenceMarker");
            effects.exit("reference");
            return ok;
        }
        return nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-image.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 
/** @type {Construct} */ const labelStartImage = {
    name: "labelStartImage",
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeLabelStartImage(effects, ok, nok) {
    const self = this;
    return start;
    /**
   * Start of label (image) start.
   *
   * ```markdown
   * > | a ![b] c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("labelImage");
        effects.enter("labelImageMarker");
        effects.consume(code);
        effects.exit("labelImageMarker");
        return open;
    }
    /**
   * After `!`, at `[`.
   *
   * ```markdown
   * > | a ![b] c
   *        ^
   * ```
   *
   * @type {State}
   */ function open(code) {
        if (code === 91) {
            effects.enter("labelMarker");
            effects.consume(code);
            effects.exit("labelMarker");
            effects.exit("labelImage");
            return after;
        }
        return nok(code);
    }
    /**
   * After `![`.
   *
   * ```markdown
   * > | a ![b] c
   *         ^
   * ```
   *
   * This is needed in because, when GFM footnotes are enabled, images never
   * form when started with a `^`.
   * Instead, links form:
   *
   * ```markdown
   * ![^a](b)
   *
   * ![^a][b]
   *
   * [b]: c
   * ```
   *
   * ```html
   * <p>!<a href=\"b\">^a</a></p>
   * <p>!<a href=\"c\">^a</a></p>
   * ```
   *
   * @type {State}
   */ function after(code) {
        // To do: use a new field to do this, this is still needed for
        // `micromark-extension-gfm-footnote`, but the `label-start-link`
        // behavior isn’t.
        // Hidden footnotes hook.
        /* c8 ignore next 3 */ return code === 94 && "_hiddenFootnoteSupport" in self.parser.constructs ? nok(code) : ok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-classify-character@1.1.0/node_modules/micromark-util-classify-character/index.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 */ 
/**
 * Classify whether a code represents whitespace, punctuation, or something
 * else.
 *
 * Used for attention (emphasis, strong), whose sequences can open or close
 * based on the class of surrounding characters.
 *
 * > 👉 **Note**: eof (`null`) is seen as whitespace.
 *
 * @param {Code} code
 *   Code.
 * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}
 *   Group.
 */ function classifyCharacter(code) {
    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {
        return 1;
    }
    if (unicodePunctuation(code)) {
        return 2;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/attention.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 


/** @type {Construct} */ const attention = {
    name: "attention",
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
};
/**
 * Take all events and resolve attention to emphasis or strong.
 *
 * @type {Resolver}
 */ function resolveAllAttention(events, context) {
    let index = -1;
    /** @type {number} */ let open;
    /** @type {Token} */ let group;
    /** @type {Token} */ let text;
    /** @type {Token} */ let openingSequence;
    /** @type {Token} */ let closingSequence;
    /** @type {number} */ let use;
    /** @type {Array<Event>} */ let nextEvents;
    /** @type {number} */ let offset;
    // Walk through all events.
    //
    // Note: performance of this is fine on an mb of normal markdown, but it’s
    // a bottleneck for malicious stuff.
    while(++index < events.length){
        // Find a token that can close.
        if (events[index][0] === "enter" && events[index][1].type === "attentionSequence" && events[index][1]._close) {
            open = index;
            // Now walk back to find an opener.
            while(open--){
                // Find a token that can open the closer.
                if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
                context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {
                    // If the opening can close or the closing can open,
                    // and the close size *is not* a multiple of three,
                    // but the sum of the opening and closing size *is* multiple of three,
                    // then don’t match.
                    if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {
                        continue;
                    }
                    // Number of markers to use from the sequence.
                    use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;
                    const start = Object.assign({}, events[open][1].end);
                    const end = Object.assign({}, events[index][1].start);
                    movePoint(start, -use);
                    movePoint(end, use);
                    openingSequence = {
                        type: use > 1 ? "strongSequence" : "emphasisSequence",
                        start,
                        end: Object.assign({}, events[open][1].end)
                    };
                    closingSequence = {
                        type: use > 1 ? "strongSequence" : "emphasisSequence",
                        start: Object.assign({}, events[index][1].start),
                        end
                    };
                    text = {
                        type: use > 1 ? "strongText" : "emphasisText",
                        start: Object.assign({}, events[open][1].end),
                        end: Object.assign({}, events[index][1].start)
                    };
                    group = {
                        type: use > 1 ? "strong" : "emphasis",
                        start: Object.assign({}, openingSequence.start),
                        end: Object.assign({}, closingSequence.end)
                    };
                    events[open][1].end = Object.assign({}, openingSequence.start);
                    events[index][1].start = Object.assign({}, closingSequence.end);
                    nextEvents = [];
                    // If there are more markers in the opening, add them before.
                    if (events[open][1].end.offset - events[open][1].start.offset) {
                        nextEvents = push(nextEvents, [
                            [
                                "enter",
                                events[open][1],
                                context
                            ],
                            [
                                "exit",
                                events[open][1],
                                context
                            ]
                        ]);
                    }
                    // Opening.
                    nextEvents = push(nextEvents, [
                        [
                            "enter",
                            group,
                            context
                        ],
                        [
                            "enter",
                            openingSequence,
                            context
                        ],
                        [
                            "exit",
                            openingSequence,
                            context
                        ],
                        [
                            "enter",
                            text,
                            context
                        ]
                    ]);
                    // Always populated by defaults.
                    // Between.
                    nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));
                    // Closing.
                    nextEvents = push(nextEvents, [
                        [
                            "exit",
                            text,
                            context
                        ],
                        [
                            "enter",
                            closingSequence,
                            context
                        ],
                        [
                            "exit",
                            closingSequence,
                            context
                        ],
                        [
                            "exit",
                            group,
                            context
                        ]
                    ]);
                    // If there are more markers in the closing, add them after.
                    if (events[index][1].end.offset - events[index][1].start.offset) {
                        offset = 2;
                        nextEvents = push(nextEvents, [
                            [
                                "enter",
                                events[index][1],
                                context
                            ],
                            [
                                "exit",
                                events[index][1],
                                context
                            ]
                        ]);
                    } else {
                        offset = 0;
                    }
                    splice(events, open - 1, index - open + 3, nextEvents);
                    index = open + nextEvents.length - offset - 2;
                    break;
                }
            }
        }
    }
    // Remove remaining sequences.
    index = -1;
    while(++index < events.length){
        if (events[index][1].type === "attentionSequence") {
            events[index][1].type = "data";
        }
    }
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeAttention(effects, ok) {
    const attentionMarkers = this.parser.constructs.attentionMarkers.null;
    const previous = this.previous;
    const before = classifyCharacter(previous);
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    /**
   * Before a sequence.
   *
   * ```markdown
   * > | **
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        marker = code;
        effects.enter("attentionSequence");
        return inside(code);
    }
    /**
   * In a sequence.
   *
   * ```markdown
   * > | **
   *     ^^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        if (code === marker) {
            effects.consume(code);
            return inside;
        }
        const token = effects.exit("attentionSequence");
        // To do: next major: move this to resolver, just like `markdown-rs`.
        const after = classifyCharacter(code);
        // Always populated by defaults.
        const open = !after || after === 2 && before || attentionMarkers.includes(code);
        const close = !before || before === 2 && after || attentionMarkers.includes(previous);
        token._open = Boolean(marker === 42 ? open : open && (before || !close));
        token._close = Boolean(marker === 42 ? close : close && (after || !open));
        return ok(code);
    }
}
/**
 * Move a point a bit.
 *
 * Note: `move` only works inside lines! It’s not possible to move past other
 * chunks (replacement characters, tabs, or line endings).
 *
 * @param {Point} point
 * @param {number} offset
 * @returns {void}
 */ function movePoint(point, offset) {
    point.column += offset;
    point.offset += offset;
    point._bufferIndex += offset;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/autolink.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 
/** @type {Construct} */ const autolink = {
    name: "autolink",
    tokenize: tokenizeAutolink
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeAutolink(effects, ok, nok) {
    let size = 0;
    return start;
    /**
   * Start of an autolink.
   *
   * ```markdown
   * > | a<https://example.com>b
   *      ^
   * > | a<user@example.com>b
   *      ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("autolink");
        effects.enter("autolinkMarker");
        effects.consume(code);
        effects.exit("autolinkMarker");
        effects.enter("autolinkProtocol");
        return open;
    }
    /**
   * After `<`, at protocol or atext.
   *
   * ```markdown
   * > | a<https://example.com>b
   *       ^
   * > | a<user@example.com>b
   *       ^
   * ```
   *
   * @type {State}
   */ function open(code) {
        if (asciiAlpha(code)) {
            effects.consume(code);
            return schemeOrEmailAtext;
        }
        return emailAtext(code);
    }
    /**
   * At second byte of protocol or atext.
   *
   * ```markdown
   * > | a<https://example.com>b
   *        ^
   * > | a<user@example.com>b
   *        ^
   * ```
   *
   * @type {State}
   */ function schemeOrEmailAtext(code) {
        // ASCII alphanumeric and `+`, `-`, and `.`.
        if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {
            // Count the previous alphabetical from `open` too.
            size = 1;
            return schemeInsideOrEmailAtext(code);
        }
        return emailAtext(code);
    }
    /**
   * In ambiguous protocol or atext.
   *
   * ```markdown
   * > | a<https://example.com>b
   *        ^
   * > | a<user@example.com>b
   *        ^
   * ```
   *
   * @type {State}
   */ function schemeInsideOrEmailAtext(code) {
        if (code === 58) {
            effects.consume(code);
            size = 0;
            return urlInside;
        }
        // ASCII alphanumeric and `+`, `-`, and `.`.
        if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {
            effects.consume(code);
            return schemeInsideOrEmailAtext;
        }
        size = 0;
        return emailAtext(code);
    }
    /**
   * After protocol, in URL.
   *
   * ```markdown
   * > | a<https://example.com>b
   *             ^
   * ```
   *
   * @type {State}
   */ function urlInside(code) {
        if (code === 62) {
            effects.exit("autolinkProtocol");
            effects.enter("autolinkMarker");
            effects.consume(code);
            effects.exit("autolinkMarker");
            effects.exit("autolink");
            return ok;
        }
        // ASCII control, space, or `<`.
        if (code === null || code === 32 || code === 60 || asciiControl(code)) {
            return nok(code);
        }
        effects.consume(code);
        return urlInside;
    }
    /**
   * In email atext.
   *
   * ```markdown
   * > | a<user.name@example.com>b
   *              ^
   * ```
   *
   * @type {State}
   */ function emailAtext(code) {
        if (code === 64) {
            effects.consume(code);
            return emailAtSignOrDot;
        }
        if (asciiAtext(code)) {
            effects.consume(code);
            return emailAtext;
        }
        return nok(code);
    }
    /**
   * In label, after at-sign or dot.
   *
   * ```markdown
   * > | a<user.name@example.com>b
   *                 ^       ^
   * ```
   *
   * @type {State}
   */ function emailAtSignOrDot(code) {
        return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);
    }
    /**
   * In label, where `.` and `>` are allowed.
   *
   * ```markdown
   * > | a<user.name@example.com>b
   *                   ^
   * ```
   *
   * @type {State}
   */ function emailLabel(code) {
        if (code === 46) {
            effects.consume(code);
            size = 0;
            return emailAtSignOrDot;
        }
        if (code === 62) {
            // Exit, then change the token type.
            effects.exit("autolinkProtocol").type = "autolinkEmail";
            effects.enter("autolinkMarker");
            effects.consume(code);
            effects.exit("autolinkMarker");
            effects.exit("autolink");
            return ok;
        }
        return emailValue(code);
    }
    /**
   * In label, where `.` and `>` are *not* allowed.
   *
   * Though, this is also used in `emailLabel` to parse other values.
   *
   * ```markdown
   * > | a<user.name@ex-ample.com>b
   *                    ^
   * ```
   *
   * @type {State}
   */ function emailValue(code) {
        // ASCII alphanumeric or `-`.
        if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
            const next = code === 45 ? emailValue : emailLabel;
            effects.consume(code);
            return next;
        }
        return nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-text.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 

/** @type {Construct} */ const htmlText = {
    name: "htmlText",
    tokenize: tokenizeHtmlText
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeHtmlText(effects, ok, nok) {
    const self = this;
    /** @type {NonNullable<Code> | undefined} */ let marker;
    /** @type {number} */ let index;
    /** @type {State} */ let returnState;
    return start;
    /**
   * Start of HTML (text).
   *
   * ```markdown
   * > | a <b> c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("htmlText");
        effects.enter("htmlTextData");
        effects.consume(code);
        return open;
    }
    /**
   * After `<`, at tag name or other stuff.
   *
   * ```markdown
   * > | a <b> c
   *        ^
   * > | a <!doctype> c
   *        ^
   * > | a <!--b--> c
   *        ^
   * ```
   *
   * @type {State}
   */ function open(code) {
        if (code === 33) {
            effects.consume(code);
            return declarationOpen;
        }
        if (code === 47) {
            effects.consume(code);
            return tagCloseStart;
        }
        if (code === 63) {
            effects.consume(code);
            return instruction;
        }
        // ASCII alphabetical.
        if (asciiAlpha(code)) {
            effects.consume(code);
            return tagOpen;
        }
        return nok(code);
    }
    /**
   * After `<!`, at declaration, comment, or CDATA.
   *
   * ```markdown
   * > | a <!doctype> c
   *         ^
   * > | a <!--b--> c
   *         ^
   * > | a <![CDATA[>&<]]> c
   *         ^
   * ```
   *
   * @type {State}
   */ function declarationOpen(code) {
        if (code === 45) {
            effects.consume(code);
            return commentOpenInside;
        }
        if (code === 91) {
            effects.consume(code);
            index = 0;
            return cdataOpenInside;
        }
        if (asciiAlpha(code)) {
            effects.consume(code);
            return declaration;
        }
        return nok(code);
    }
    /**
   * In a comment, after `<!-`, at another `-`.
   *
   * ```markdown
   * > | a <!--b--> c
   *          ^
   * ```
   *
   * @type {State}
   */ function commentOpenInside(code) {
        if (code === 45) {
            effects.consume(code);
            return commentEnd;
        }
        return nok(code);
    }
    /**
   * In comment.
   *
   * ```markdown
   * > | a <!--b--> c
   *           ^
   * ```
   *
   * @type {State}
   */ function comment(code) {
        if (code === null) {
            return nok(code);
        }
        if (code === 45) {
            effects.consume(code);
            return commentClose;
        }
        if (markdownLineEnding(code)) {
            returnState = comment;
            return lineEndingBefore(code);
        }
        effects.consume(code);
        return comment;
    }
    /**
   * In comment, after `-`.
   *
   * ```markdown
   * > | a <!--b--> c
   *             ^
   * ```
   *
   * @type {State}
   */ function commentClose(code) {
        if (code === 45) {
            effects.consume(code);
            return commentEnd;
        }
        return comment(code);
    }
    /**
   * In comment, after `--`.
   *
   * ```markdown
   * > | a <!--b--> c
   *              ^
   * ```
   *
   * @type {State}
   */ function commentEnd(code) {
        return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);
    }
    /**
   * After `<![`, in CDATA, expecting `CDATA[`.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *          ^^^^^^
   * ```
   *
   * @type {State}
   */ function cdataOpenInside(code) {
        const value = "CDATA[";
        if (code === value.charCodeAt(index++)) {
            effects.consume(code);
            return index === value.length ? cdata : cdataOpenInside;
        }
        return nok(code);
    }
    /**
   * In CDATA.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *                ^^^
   * ```
   *
   * @type {State}
   */ function cdata(code) {
        if (code === null) {
            return nok(code);
        }
        if (code === 93) {
            effects.consume(code);
            return cdataClose;
        }
        if (markdownLineEnding(code)) {
            returnState = cdata;
            return lineEndingBefore(code);
        }
        effects.consume(code);
        return cdata;
    }
    /**
   * In CDATA, after `]`, at another `]`.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *                    ^
   * ```
   *
   * @type {State}
   */ function cdataClose(code) {
        if (code === 93) {
            effects.consume(code);
            return cdataEnd;
        }
        return cdata(code);
    }
    /**
   * In CDATA, after `]]`, at `>`.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *                     ^
   * ```
   *
   * @type {State}
   */ function cdataEnd(code) {
        if (code === 62) {
            return end(code);
        }
        if (code === 93) {
            effects.consume(code);
            return cdataEnd;
        }
        return cdata(code);
    }
    /**
   * In declaration.
   *
   * ```markdown
   * > | a <!b> c
   *          ^
   * ```
   *
   * @type {State}
   */ function declaration(code) {
        if (code === null || code === 62) {
            return end(code);
        }
        if (markdownLineEnding(code)) {
            returnState = declaration;
            return lineEndingBefore(code);
        }
        effects.consume(code);
        return declaration;
    }
    /**
   * In instruction.
   *
   * ```markdown
   * > | a <?b?> c
   *         ^
   * ```
   *
   * @type {State}
   */ function instruction(code) {
        if (code === null) {
            return nok(code);
        }
        if (code === 63) {
            effects.consume(code);
            return instructionClose;
        }
        if (markdownLineEnding(code)) {
            returnState = instruction;
            return lineEndingBefore(code);
        }
        effects.consume(code);
        return instruction;
    }
    /**
   * In instruction, after `?`, at `>`.
   *
   * ```markdown
   * > | a <?b?> c
   *           ^
   * ```
   *
   * @type {State}
   */ function instructionClose(code) {
        return code === 62 ? end(code) : instruction(code);
    }
    /**
   * After `</`, in closing tag, at tag name.
   *
   * ```markdown
   * > | a </b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function tagCloseStart(code) {
        // ASCII alphabetical.
        if (asciiAlpha(code)) {
            effects.consume(code);
            return tagClose;
        }
        return nok(code);
    }
    /**
   * After `</x`, in a tag name.
   *
   * ```markdown
   * > | a </b> c
   *          ^
   * ```
   *
   * @type {State}
   */ function tagClose(code) {
        // ASCII alphanumerical and `-`.
        if (code === 45 || asciiAlphanumeric(code)) {
            effects.consume(code);
            return tagClose;
        }
        return tagCloseBetween(code);
    }
    /**
   * In closing tag, after tag name.
   *
   * ```markdown
   * > | a </b> c
   *          ^
   * ```
   *
   * @type {State}
   */ function tagCloseBetween(code) {
        if (markdownLineEnding(code)) {
            returnState = tagCloseBetween;
            return lineEndingBefore(code);
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return tagCloseBetween;
        }
        return end(code);
    }
    /**
   * After `<x`, in opening tag name.
   *
   * ```markdown
   * > | a <b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function tagOpen(code) {
        // ASCII alphanumerical and `-`.
        if (code === 45 || asciiAlphanumeric(code)) {
            effects.consume(code);
            return tagOpen;
        }
        if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
            return tagOpenBetween(code);
        }
        return nok(code);
    }
    /**
   * In opening tag, after tag name.
   *
   * ```markdown
   * > | a <b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function tagOpenBetween(code) {
        if (code === 47) {
            effects.consume(code);
            return end;
        }
        // ASCII alphabetical and `:` and `_`.
        if (code === 58 || code === 95 || asciiAlpha(code)) {
            effects.consume(code);
            return tagOpenAttributeName;
        }
        if (markdownLineEnding(code)) {
            returnState = tagOpenBetween;
            return lineEndingBefore(code);
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return tagOpenBetween;
        }
        return end(code);
    }
    /**
   * In attribute name.
   *
   * ```markdown
   * > | a <b c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function tagOpenAttributeName(code) {
        // ASCII alphabetical and `-`, `.`, `:`, and `_`.
        if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
            effects.consume(code);
            return tagOpenAttributeName;
        }
        return tagOpenAttributeNameAfter(code);
    }
    /**
   * After attribute name, before initializer, the end of the tag, or
   * whitespace.
   *
   * ```markdown
   * > | a <b c> d
   *           ^
   * ```
   *
   * @type {State}
   */ function tagOpenAttributeNameAfter(code) {
        if (code === 61) {
            effects.consume(code);
            return tagOpenAttributeValueBefore;
        }
        if (markdownLineEnding(code)) {
            returnState = tagOpenAttributeNameAfter;
            return lineEndingBefore(code);
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return tagOpenAttributeNameAfter;
        }
        return tagOpenBetween(code);
    }
    /**
   * Before unquoted, double quoted, or single quoted attribute value, allowing
   * whitespace.
   *
   * ```markdown
   * > | a <b c=d> e
   *            ^
   * ```
   *
   * @type {State}
   */ function tagOpenAttributeValueBefore(code) {
        if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
            return nok(code);
        }
        if (code === 34 || code === 39) {
            effects.consume(code);
            marker = code;
            return tagOpenAttributeValueQuoted;
        }
        if (markdownLineEnding(code)) {
            returnState = tagOpenAttributeValueBefore;
            return lineEndingBefore(code);
        }
        if (markdownSpace(code)) {
            effects.consume(code);
            return tagOpenAttributeValueBefore;
        }
        effects.consume(code);
        return tagOpenAttributeValueUnquoted;
    }
    /**
   * In double or single quoted attribute value.
   *
   * ```markdown
   * > | a <b c="d"> e
   *             ^
   * ```
   *
   * @type {State}
   */ function tagOpenAttributeValueQuoted(code) {
        if (code === marker) {
            effects.consume(code);
            marker = undefined;
            return tagOpenAttributeValueQuotedAfter;
        }
        if (code === null) {
            return nok(code);
        }
        if (markdownLineEnding(code)) {
            returnState = tagOpenAttributeValueQuoted;
            return lineEndingBefore(code);
        }
        effects.consume(code);
        return tagOpenAttributeValueQuoted;
    }
    /**
   * In unquoted attribute value.
   *
   * ```markdown
   * > | a <b c=d> e
   *            ^
   * ```
   *
   * @type {State}
   */ function tagOpenAttributeValueUnquoted(code) {
        if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {
            return nok(code);
        }
        if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
            return tagOpenBetween(code);
        }
        effects.consume(code);
        return tagOpenAttributeValueUnquoted;
    }
    /**
   * After double or single quoted attribute value, before whitespace or the end
   * of the tag.
   *
   * ```markdown
   * > | a <b c="d"> e
   *               ^
   * ```
   *
   * @type {State}
   */ function tagOpenAttributeValueQuotedAfter(code) {
        if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
            return tagOpenBetween(code);
        }
        return nok(code);
    }
    /**
   * In certain circumstances of a tag where only an `>` is allowed.
   *
   * ```markdown
   * > | a <b c="d"> e
   *               ^
   * ```
   *
   * @type {State}
   */ function end(code) {
        if (code === 62) {
            effects.consume(code);
            effects.exit("htmlTextData");
            effects.exit("htmlText");
            return ok;
        }
        return nok(code);
    }
    /**
   * At eol.
   *
   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
   * > empty tokens.
   *
   * ```markdown
   * > | a <!--a
   *            ^
   *   | b-->
   * ```
   *
   * @type {State}
   */ function lineEndingBefore(code) {
        effects.exit("htmlTextData");
        effects.enter("lineEnding");
        effects.consume(code);
        effects.exit("lineEnding");
        return lineEndingAfter;
    }
    /**
   * After eol, at optional whitespace.
   *
   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
   * > empty tokens.
   *
   * ```markdown
   *   | a <!--a
   * > | b-->
   *     ^
   * ```
   *
   * @type {State}
   */ function lineEndingAfter(code) {
        // Always populated by defaults.
        return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? undefined : 4)(code) : lineEndingAfterPrefix(code);
    }
    /**
   * After eol, after optional whitespace.
   *
   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
   * > empty tokens.
   *
   * ```markdown
   *   | a <!--a
   * > | b-->
   *     ^
   * ```
   *
   * @type {State}
   */ function lineEndingAfterPrefix(code) {
        effects.enter("htmlTextData");
        return returnState(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-link.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 
/** @type {Construct} */ const labelStartLink = {
    name: "labelStartLink",
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeLabelStartLink(effects, ok, nok) {
    const self = this;
    return start;
    /**
   * Start of label (link) start.
   *
   * ```markdown
   * > | a [b] c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("labelLink");
        effects.enter("labelMarker");
        effects.consume(code);
        effects.exit("labelMarker");
        effects.exit("labelLink");
        return after;
    }
    /** @type {State} */ function after(code) {
        // To do: this isn’t needed in `micromark-extension-gfm-footnote`,
        // remove.
        // Hidden footnotes hook.
        /* c8 ignore next 3 */ return code === 94 && "_hiddenFootnoteSupport" in self.parser.constructs ? nok(code) : ok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/hard-break-escape.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 
/** @type {Construct} */ const hardBreakEscape = {
    name: "hardBreakEscape",
    tokenize: tokenizeHardBreakEscape
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeHardBreakEscape(effects, ok, nok) {
    return start;
    /**
   * Start of a hard break (escape).
   *
   * ```markdown
   * > | a\
   *      ^
   *   | b
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("hardBreakEscape");
        effects.consume(code);
        return after;
    }
    /**
   * After `\`, at eol.
   *
   * ```markdown
   * > | a\
   *       ^
   *   | b
   * ```
   *
   *  @type {State}
   */ function after(code) {
        if (markdownLineEnding(code)) {
            effects.exit("hardBreakEscape");
            return ok(code);
        }
        return nok(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-text.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Previous} Previous
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ 
/** @type {Construct} */ const codeText = {
    name: "codeText",
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous
};
// To do: next major: don’t resolve, like `markdown-rs`.
/** @type {Resolver} */ function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    /** @type {number} */ let index;
    /** @type {number | undefined} */ let enter;
    // If we start and end with an EOL or a space.
    if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
        index = headEnterIndex;
        // And we have data.
        while(++index < tailExitIndex){
            if (events[index][1].type === "codeTextData") {
                // Then we have padding.
                events[headEnterIndex][1].type = "codeTextPadding";
                events[tailExitIndex][1].type = "codeTextPadding";
                headEnterIndex += 2;
                tailExitIndex -= 2;
                break;
            }
        }
    }
    // Merge adjacent spaces and data.
    index = headEnterIndex - 1;
    tailExitIndex++;
    while(++index <= tailExitIndex){
        if (enter === undefined) {
            if (index !== tailExitIndex && events[index][1].type !== "lineEnding") {
                enter = index;
            }
        } else if (index === tailExitIndex || events[index][1].type === "lineEnding") {
            events[enter][1].type = "codeTextData";
            if (index !== enter + 2) {
                events[enter][1].end = events[index - 1][1].end;
                events.splice(enter + 2, index - enter - 2);
                tailExitIndex -= index - enter - 2;
                index = enter + 2;
            }
            enter = undefined;
        }
    }
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Previous}
 */ function previous(code) {
    // If there is a previous code, there will always be a tail.
    return code !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeCodeText(effects, ok, nok) {
    const self = this;
    let sizeOpen = 0;
    /** @type {number} */ let size;
    /** @type {Token} */ let token;
    return start;
    /**
   * Start of code (text).
   *
   * ```markdown
   * > | `a`
   *     ^
   * > | \`a`
   *      ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        effects.enter("codeText");
        effects.enter("codeTextSequence");
        return sequenceOpen(code);
    }
    /**
   * In opening sequence.
   *
   * ```markdown
   * > | `a`
   *     ^
   * ```
   *
   * @type {State}
   */ function sequenceOpen(code) {
        if (code === 96) {
            effects.consume(code);
            sizeOpen++;
            return sequenceOpen;
        }
        effects.exit("codeTextSequence");
        return between(code);
    }
    /**
   * Between something and something else.
   *
   * ```markdown
   * > | `a`
   *      ^^
   * ```
   *
   * @type {State}
   */ function between(code) {
        // EOF.
        if (code === null) {
            return nok(code);
        }
        // To do: next major: don’t do spaces in resolve, but when compiling,
        // like `markdown-rs`.
        // Tabs don’t work, and virtual spaces don’t make sense.
        if (code === 32) {
            effects.enter("space");
            effects.consume(code);
            effects.exit("space");
            return between;
        }
        // Closing fence? Could also be data.
        if (code === 96) {
            token = effects.enter("codeTextSequence");
            size = 0;
            return sequenceClose(code);
        }
        if (markdownLineEnding(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return between;
        }
        // Data.
        effects.enter("codeTextData");
        return data(code);
    }
    /**
   * In data.
   *
   * ```markdown
   * > | `a`
   *      ^
   * ```
   *
   * @type {State}
   */ function data(code) {
        if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {
            effects.exit("codeTextData");
            return between(code);
        }
        effects.consume(code);
        return data;
    }
    /**
   * In closing sequence.
   *
   * ```markdown
   * > | `a`
   *       ^
   * ```
   *
   * @type {State}
   */ function sequenceClose(code) {
        // More.
        if (code === 96) {
            effects.consume(code);
            size++;
            return sequenceClose;
        }
        // Done!
        if (size === sizeOpen) {
            effects.exit("codeTextSequence");
            effects.exit("codeText");
            return ok(code);
        }
        // More or less accents: mark as data.
        token.type = "codeTextData";
        return data(code);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/constructs.js
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 */ 

/** @satisfies {Extension['document']} */ const constructs_document = {
    [42]: list,
    [43]: list,
    [45]: list,
    [48]: list,
    [49]: list,
    [50]: list,
    [51]: list,
    [52]: list,
    [53]: list,
    [54]: list,
    [55]: list,
    [56]: list,
    [57]: list,
    [62]: blockQuote
};
/** @satisfies {Extension['contentInitial']} */ const contentInitial = {
    [91]: definition
};
/** @satisfies {Extension['flowInitial']} */ const flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
};
/** @satisfies {Extension['flow']} */ const constructs_flow = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [
        setextUnderline,
        thematicBreak
    ],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced
};
/** @satisfies {Extension['string']} */ const constructs_string = {
    [38]: characterReference,
    [92]: characterEscape
};
/** @satisfies {Extension['text']} */ const constructs_text = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [
        autolink,
        htmlText
    ],
    [91]: labelStartLink,
    [92]: [
        hardBreakEscape,
        characterEscape
    ],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
};
/** @satisfies {Extension['insideSpan']} */ const insideSpan = {
    null: [
        attention,
        resolver
    ]
};
/** @satisfies {Extension['attentionMarkers']} */ const attentionMarkers = {
    null: [
        42,
        95
    ]
};
/** @satisfies {Extension['disable']} */ const disable = {
    null: []
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/parse.js
/**
 * @typedef {import('micromark-util-types').Create} Create
 * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
 */ 






/**
 * @param {ParseOptions | null | undefined} [options]
 * @returns {ParseContext}
 */ function parse(options) {
    const settings = options || {};
    const constructs = /** @type {FullNormalizedExtension} */ combineExtensions([
        constructs_namespaceObject,
        ...settings.extensions || []
    ]);
    /** @type {ParseContext} */ const parser = {
        defined: [],
        lazy: {},
        constructs,
        content: create(content),
        document: create(document_document),
        flow: create(flow),
        string: create(string),
        text: create(text_text)
    };
    return parser;
    /**
   * @param {InitialConstruct} initial
   */ function create(initial) {
        return creator;
        /** @type {Create} */ function creator(from) {
            return createTokenizer(parser, initial, from);
        }
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/preprocess.js
/**
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Encoding} Encoding
 * @typedef {import('micromark-util-types').Value} Value
 */ /**
 * @callback Preprocessor
 * @param {Value} value
 * @param {Encoding | null | undefined} [encoding]
 * @param {boolean | null | undefined} [end=false]
 * @returns {Array<Chunk>}
 */ const search = /[\0\t\n\r]/g;
/**
 * @returns {Preprocessor}
 */ function preprocess() {
    let column = 1;
    let buffer = "";
    /** @type {boolean | undefined} */ let start = true;
    /** @type {boolean | undefined} */ let atCarriageReturn;
    return preprocessor;
    /** @type {Preprocessor} */ function preprocessor(value, encoding, end) {
        /** @type {Array<Chunk>} */ const chunks = [];
        /** @type {RegExpMatchArray | null} */ let match;
        /** @type {number} */ let next;
        /** @type {number} */ let startPosition;
        /** @type {number} */ let endPosition;
        /** @type {Code} */ let code;
        // @ts-expect-error `Buffer` does allow an encoding.
        value = buffer + value.toString(encoding);
        startPosition = 0;
        buffer = "";
        if (start) {
            // To do: `markdown-rs` actually parses BOMs (byte order mark).
            if (value.charCodeAt(0) === 65279) {
                startPosition++;
            }
            start = undefined;
        }
        while(startPosition < value.length){
            search.lastIndex = startPosition;
            match = search.exec(value);
            endPosition = match && match.index !== undefined ? match.index : value.length;
            code = value.charCodeAt(endPosition);
            if (!match) {
                buffer = value.slice(startPosition);
                break;
            }
            if (code === 10 && startPosition === endPosition && atCarriageReturn) {
                chunks.push(-3);
                atCarriageReturn = undefined;
            } else {
                if (atCarriageReturn) {
                    chunks.push(-5);
                    atCarriageReturn = undefined;
                }
                if (startPosition < endPosition) {
                    chunks.push(value.slice(startPosition, endPosition));
                    column += endPosition - startPosition;
                }
                switch(code){
                    case 0:
                        {
                            chunks.push(65533);
                            column++;
                            break;
                        }
                    case 9:
                        {
                            next = Math.ceil(column / 4) * 4;
                            chunks.push(-2);
                            while(column++ < next)chunks.push(-1);
                            break;
                        }
                    case 10:
                        {
                            chunks.push(-4);
                            column = 1;
                            break;
                        }
                    default:
                        {
                            atCarriageReturn = true;
                            column = 1;
                        }
                }
            }
            startPosition = endPosition + 1;
        }
        if (end) {
            if (atCarriageReturn) chunks.push(-5);
            if (buffer) chunks.push(buffer);
            chunks.push(null);
        }
        return chunks;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/postprocess.js
/**
 * @typedef {import('micromark-util-types').Event} Event
 */ 
/**
 * @param {Array<Event>} events
 * @returns {Array<Event>}
 */ function postprocess(events) {
    while(!subtokenize(events)){
    // Empty
    }
    return events;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@1.1.0/node_modules/micromark-util-decode-numeric-character-reference/index.js
/**
 * Turn the number (in string form as either hexa- or plain decimal) coming from
 * a numeric character reference into a character.
 *
 * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes
 * non-characters and control characters safe.
 *
 * @param {string} value
 *   Value to decode.
 * @param {number} base
 *   Numeric base.
 * @returns {string}
 *   Character.
 */ function decodeNumericCharacterReference(value, base) {
    const code = Number.parseInt(value, base);
    if (// C0 except for HT, LF, FF, CR, space.
    code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of C0, and C1 controls.
    code > 126 && code < 160 || // Lone high surrogates and low surrogates.
    code > 55295 && code < 57344 || // Noncharacters.
    code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 /* eslint-enable no-bitwise */  || // Out of range
    code > 1114111) {
        return "�";
    }
    return String.fromCharCode(code);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-decode-string@1.1.0/node_modules/micromark-util-decode-string/index.js


const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
/**
 * Decode markdown strings (which occur in places such as fenced code info
 * strings, destinations, labels, and titles).
 *
 * The “string” content type allows character escapes and -references.
 * This decodes those.
 *
 * @param {string} value
 *   Value to decode.
 * @returns {string}
 *   Decoded value.
 */ function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
}
/**
 * @param {string} $0
 * @param {string} $1
 * @param {string} $2
 * @returns {string}
 */ function decode($0, $1, $2) {
    if ($1) {
        // Escape.
        return $1;
    }
    // Reference.
    const head = $2.charCodeAt(0);
    if (head === 35) {
        const head = $2.charCodeAt(1);
        const hex = head === 120 || head === 88;
        return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
    }
    return decodeNamedCharacterReference($2) || $0;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-from-markdown@1.3.1/node_modules/mdast-util-from-markdown/lib/index.js
/**
 * @typedef {import('micromark-util-types').Encoding} Encoding
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Value} Value
 *
 * @typedef {import('unist').Parent} UnistParent
 * @typedef {import('unist').Point} Point
 *
 * @typedef {import('mdast').PhrasingContent} PhrasingContent
 * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Break} Break
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('mdast').Code} Code
 * @typedef {import('mdast').Definition} Definition
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('mdast').HTML} HTML
 * @typedef {import('mdast').Image} Image
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('mdast').Link} Link
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('mdast').List} List
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('mdast').Text} Text
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 * @typedef {import('mdast').ReferenceType} ReferenceType
 * @typedef {import('../index.js').CompileData} CompileData
 */ /**
 * @typedef {Root | Content} Node
 * @typedef {Extract<Node, UnistParent>} Parent
 *
 * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment
 */ /**
 * @callback Transform
 *   Extra transform, to change the AST afterwards.
 * @param {Root} tree
 *   Tree to transform.
 * @returns {Root | undefined | null | void}
 *   New tree or nothing (in which case the current tree is used).
 *
 * @callback Handle
 *   Handle a token.
 * @param {CompileContext} this
 *   Context.
 * @param {Token} token
 *   Current token.
 * @returns {void}
 *   Nothing.
 *
 * @typedef {Record<string, Handle>} Handles
 *   Token types mapping to handles
 *
 * @callback OnEnterError
 *   Handle the case where the `right` token is open, but it is closed (by the
 *   `left` token) or because we reached the end of the document.
 * @param {Omit<CompileContext, 'sliceSerialize'>} this
 *   Context.
 * @param {Token | undefined} left
 *   Left token.
 * @param {Token} right
 *   Right token.
 * @returns {void}
 *   Nothing.
 *
 * @callback OnExitError
 *   Handle the case where the `right` token is open but it is closed by
 *   exiting the `left` token.
 * @param {Omit<CompileContext, 'sliceSerialize'>} this
 *   Context.
 * @param {Token} left
 *   Left token.
 * @param {Token} right
 *   Right token.
 * @returns {void}
 *   Nothing.
 *
 * @typedef {[Token, OnEnterError | undefined]} TokenTuple
 *   Open token on the stack, with an optional error handler for when
 *   that token isn’t closed properly.
 */ /**
 * @typedef Config
 *   Configuration.
 *
 *   We have our defaults, but extensions will add more.
 * @property {Array<string>} canContainEols
 *   Token types where line endings are used.
 * @property {Handles} enter
 *   Opening handles.
 * @property {Handles} exit
 *   Closing handles.
 * @property {Array<Transform>} transforms
 *   Tree transforms.
 *
 * @typedef {Partial<Config>} Extension
 *   Change how markdown tokens from micromark are turned into mdast.
 *
 * @typedef CompileContext
 *   mdast compiler context.
 * @property {Array<Node | Fragment>} stack
 *   Stack of nodes.
 * @property {Array<TokenTuple>} tokenStack
 *   Stack of tokens.
 * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData
 *   Get data from the key/value store.
 * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData
 *   Set data into the key/value store.
 * @property {(this: CompileContext) => void} buffer
 *   Capture some of the output data.
 * @property {(this: CompileContext) => string} resume
 *   Stop capturing and access the output data.
 * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter
 *   Enter a token.
 * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit
 *   Exit a token.
 * @property {TokenizeContext['sliceSerialize']} sliceSerialize
 *   Get the string value of a token.
 * @property {Config} config
 *   Configuration.
 *
 * @typedef FromMarkdownOptions
 *   Configuration for how to build mdast.
 * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]
 *   Extensions for this utility to change how tokens are turned into a tree.
 *
 * @typedef {ParseOptions & FromMarkdownOptions} Options
 *   Configuration.
 */ // To do: micromark: create a registry of tokens?
// To do: next major: don’t return given `Node` from `enter`.
// To do: next major: remove setter/getter.









const lib_own = {}.hasOwnProperty;
/**
 * @param value
 *   Markdown to parse.
 * @param encoding
 *   Character encoding for when `value` is `Buffer`.
 * @param options
 *   Configuration.
 * @returns
 *   mdast tree.
 */ const fromMarkdown = /**
   * @type {(
   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
   *   ((value: Value, options?: Options | null | undefined) => Root)
   * )}
   */ /**
   * @param {Value} value
   * @param {Encoding | Options | null | undefined} [encoding]
   * @param {Options | null | undefined} [options]
   * @returns {Root}
   */ function(value, encoding, options) {
    if (typeof encoding !== "string") {
        options = encoding;
        encoding = undefined;
    }
    return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));
};
/**
 * Note this compiler only understand complete buffering, not streaming.
 *
 * @param {Options | null | undefined} [options]
 */ function compiler(options) {
    /** @type {Config} */ const config = {
        transforms: [],
        canContainEols: [
            "emphasis",
            "fragment",
            "heading",
            "paragraph",
            "strong"
        ],
        enter: {
            autolink: opener(link),
            autolinkProtocol: onenterdata,
            autolinkEmail: onenterdata,
            atxHeading: opener(heading),
            blockQuote: opener(blockQuote),
            characterEscape: onenterdata,
            characterReference: onenterdata,
            codeFenced: opener(codeFlow),
            codeFencedFenceInfo: buffer,
            codeFencedFenceMeta: buffer,
            codeIndented: opener(codeFlow, buffer),
            codeText: opener(codeText, buffer),
            codeTextData: onenterdata,
            data: onenterdata,
            codeFlowValue: onenterdata,
            definition: opener(definition),
            definitionDestinationString: buffer,
            definitionLabelString: buffer,
            definitionTitleString: buffer,
            emphasis: opener(emphasis),
            hardBreakEscape: opener(hardBreak),
            hardBreakTrailing: opener(hardBreak),
            htmlFlow: opener(html, buffer),
            htmlFlowData: onenterdata,
            htmlText: opener(html, buffer),
            htmlTextData: onenterdata,
            image: opener(image),
            label: buffer,
            link: opener(link),
            listItem: opener(listItem),
            listItemValue: onenterlistitemvalue,
            listOrdered: opener(list, onenterlistordered),
            listUnordered: opener(list),
            paragraph: opener(paragraph),
            reference: onenterreference,
            referenceString: buffer,
            resourceDestinationString: buffer,
            resourceTitleString: buffer,
            setextHeading: opener(heading),
            strong: opener(strong),
            thematicBreak: opener(thematicBreak)
        },
        exit: {
            atxHeading: closer(),
            atxHeadingSequence: onexitatxheadingsequence,
            autolink: closer(),
            autolinkEmail: onexitautolinkemail,
            autolinkProtocol: onexitautolinkprotocol,
            blockQuote: closer(),
            characterEscapeValue: onexitdata,
            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
            characterReferenceValue: onexitcharacterreferencevalue,
            codeFenced: closer(onexitcodefenced),
            codeFencedFence: onexitcodefencedfence,
            codeFencedFenceInfo: onexitcodefencedfenceinfo,
            codeFencedFenceMeta: onexitcodefencedfencemeta,
            codeFlowValue: onexitdata,
            codeIndented: closer(onexitcodeindented),
            codeText: closer(onexitcodetext),
            codeTextData: onexitdata,
            data: onexitdata,
            definition: closer(),
            definitionDestinationString: onexitdefinitiondestinationstring,
            definitionLabelString: onexitdefinitionlabelstring,
            definitionTitleString: onexitdefinitiontitlestring,
            emphasis: closer(),
            hardBreakEscape: closer(onexithardbreak),
            hardBreakTrailing: closer(onexithardbreak),
            htmlFlow: closer(onexithtmlflow),
            htmlFlowData: onexitdata,
            htmlText: closer(onexithtmltext),
            htmlTextData: onexitdata,
            image: closer(onexitimage),
            label: onexitlabel,
            labelText: onexitlabeltext,
            lineEnding: onexitlineending,
            link: closer(onexitlink),
            listItem: closer(),
            listOrdered: closer(),
            listUnordered: closer(),
            paragraph: closer(),
            referenceString: onexitreferencestring,
            resourceDestinationString: onexitresourcedestinationstring,
            resourceTitleString: onexitresourcetitlestring,
            resource: onexitresource,
            setextHeading: closer(onexitsetextheading),
            setextHeadingLineSequence: onexitsetextheadinglinesequence,
            setextHeadingText: onexitsetextheadingtext,
            strong: closer(),
            thematicBreak: closer()
        }
    };
    configure(config, (options || {}).mdastExtensions || []);
    /** @type {CompileData} */ const data = {};
    return compile;
    /**
   * Turn micromark events into an mdast tree.
   *
   * @param {Array<Event>} events
   *   Events.
   * @returns {Root}
   *   mdast tree.
   */ function compile(events) {
        /** @type {Root} */ let tree = {
            type: "root",
            children: []
        };
        /** @type {Omit<CompileContext, 'sliceSerialize'>} */ const context = {
            stack: [
                tree
            ],
            tokenStack: [],
            config,
            enter,
            exit,
            buffer,
            resume,
            setData,
            getData
        };
        /** @type {Array<number>} */ const listStack = [];
        let index = -1;
        while(++index < events.length){
            // We preprocess lists to add `listItem` tokens, and to infer whether
            // items the list itself are spread out.
            if (events[index][1].type === "listOrdered" || events[index][1].type === "listUnordered") {
                if (events[index][0] === "enter") {
                    listStack.push(index);
                } else {
                    const tail = listStack.pop();
                    index = prepareList(events, tail, index);
                }
            }
        }
        index = -1;
        while(++index < events.length){
            const handler = config[events[index][0]];
            if (lib_own.call(handler, events[index][1].type)) {
                handler[events[index][1].type].call(Object.assign({
                    sliceSerialize: events[index][2].sliceSerialize
                }, context), events[index][1]);
            }
        }
        // Handle tokens still being open.
        if (context.tokenStack.length > 0) {
            const tail = context.tokenStack[context.tokenStack.length - 1];
            const handler = tail[1] || defaultOnError;
            handler.call(context, undefined, tail[0]);
        }
        // Figure out `root` position.
        tree.position = {
            start: lib_point(events.length > 0 ? events[0][1].start : {
                line: 1,
                column: 1,
                offset: 0
            }),
            end: lib_point(events.length > 0 ? events[events.length - 2][1].end : {
                line: 1,
                column: 1,
                offset: 0
            })
        };
        // Call transforms.
        index = -1;
        while(++index < config.transforms.length){
            tree = config.transforms[index](tree) || tree;
        }
        return tree;
    }
    /**
   * @param {Array<Event>} events
   * @param {number} start
   * @param {number} length
   * @returns {number}
   */ function prepareList(events, start, length) {
        let index = start - 1;
        let containerBalance = -1;
        let listSpread = false;
        /** @type {Token | undefined} */ let listItem;
        /** @type {number | undefined} */ let lineIndex;
        /** @type {number | undefined} */ let firstBlankLineIndex;
        /** @type {boolean | undefined} */ let atMarker;
        while(++index <= length){
            const event = events[index];
            if (event[1].type === "listUnordered" || event[1].type === "listOrdered" || event[1].type === "blockQuote") {
                if (event[0] === "enter") {
                    containerBalance++;
                } else {
                    containerBalance--;
                }
                atMarker = undefined;
            } else if (event[1].type === "lineEndingBlank") {
                if (event[0] === "enter") {
                    if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {
                        firstBlankLineIndex = index;
                    }
                    atMarker = undefined;
                }
            } else if (event[1].type === "linePrefix" || event[1].type === "listItemValue" || event[1].type === "listItemMarker" || event[1].type === "listItemPrefix" || event[1].type === "listItemPrefixWhitespace") {
            // Empty.
            } else {
                atMarker = undefined;
            }
            if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
                if (listItem) {
                    let tailIndex = index;
                    lineIndex = undefined;
                    while(tailIndex--){
                        const tailEvent = events[tailIndex];
                        if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
                            if (tailEvent[0] === "exit") continue;
                            if (lineIndex) {
                                events[lineIndex][1].type = "lineEndingBlank";
                                listSpread = true;
                            }
                            tailEvent[1].type = "lineEnding";
                            lineIndex = tailIndex;
                        } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
                        // Empty
                        } else {
                            break;
                        }
                    }
                    if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
                        listItem._spread = true;
                    }
                    // Fix position.
                    listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
                    events.splice(lineIndex || index, 0, [
                        "exit",
                        listItem,
                        event[2]
                    ]);
                    index++;
                    length++;
                }
                // Create a new list item.
                if (event[1].type === "listItemPrefix") {
                    listItem = {
                        type: "listItem",
                        _spread: false,
                        start: Object.assign({}, event[1].start),
                        // @ts-expect-error: we’ll add `end` in a second.
                        end: undefined
                    };
                    // @ts-expect-error: `listItem` is most definitely defined, TS...
                    events.splice(index, 0, [
                        "enter",
                        listItem,
                        event[2]
                    ]);
                    index++;
                    length++;
                    firstBlankLineIndex = undefined;
                    atMarker = true;
                }
            }
        }
        events[start][1]._spread = listSpread;
        return length;
    }
    /**
   * Set data.
   *
   * @template {keyof CompileData} Key
   *   Field type.
   * @param {Key} key
   *   Key of field.
   * @param {CompileData[Key]} [value]
   *   New value.
   * @returns {void}
   *   Nothing.
   */ function setData(key, value) {
        data[key] = value;
    }
    /**
   * Get data.
   *
   * @template {keyof CompileData} Key
   *   Field type.
   * @param {Key} key
   *   Key of field.
   * @returns {CompileData[Key]}
   *   Value.
   */ function getData(key) {
        return data[key];
    }
    /**
   * Create an opener handle.
   *
   * @param {(token: Token) => Node} create
   *   Create a node.
   * @param {Handle} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */ function opener(create, and) {
        return open;
        /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {void}
     */ function open(token) {
            enter.call(this, create(token), token);
            if (and) and.call(this, token);
        }
    }
    /**
   * @this {CompileContext}
   * @returns {void}
   */ function buffer() {
        this.stack.push({
            type: "fragment",
            children: []
        });
    }
    /**
   * @template {Node} Kind
   *   Node type.
   * @this {CompileContext}
   *   Context.
   * @param {Kind} node
   *   Node to enter.
   * @param {Token} token
   *   Corresponding token.
   * @param {OnEnterError | undefined} [errorHandler]
   *   Handle the case where this token is open, but it is closed by something else.
   * @returns {Kind}
   *   The given node.
   */ function enter(node, token, errorHandler) {
        const parent = this.stack[this.stack.length - 1];
        // @ts-expect-error: Assume `Node` can exist as a child of `parent`.
        parent.children.push(node);
        this.stack.push(node);
        this.tokenStack.push([
            token,
            errorHandler
        ]);
        // @ts-expect-error: `end` will be patched later.
        node.position = {
            start: lib_point(token.start)
        };
        return node;
    }
    /**
   * Create a closer handle.
   *
   * @param {Handle} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */ function closer(and) {
        return close;
        /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {void}
     */ function close(token) {
            if (and) and.call(this, token);
            exit.call(this, token);
        }
    }
    /**
   * @this {CompileContext}
   *   Context.
   * @param {Token} token
   *   Corresponding token.
   * @param {OnExitError | undefined} [onExitError]
   *   Handle the case where another token is open.
   * @returns {Node}
   *   The closed node.
   */ function exit(token, onExitError) {
        const node = this.stack.pop();
        const open = this.tokenStack.pop();
        if (!open) {
            throw new Error("Cannot close `" + token.type + "` (" + stringifyPosition({
                start: token.start,
                end: token.end
            }) + "): it’s not open");
        } else if (open[0].type !== token.type) {
            if (onExitError) {
                onExitError.call(this, token, open[0]);
            } else {
                const handler = open[1] || defaultOnError;
                handler.call(this, token, open[0]);
            }
        }
        node.position.end = lib_point(token.end);
        return node;
    }
    /**
   * @this {CompileContext}
   * @returns {string}
   */ function resume() {
        return lib_toString(this.stack.pop());
    }
    //
    // Handlers.
    //
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterlistordered() {
        setData("expectingFirstListItemValue", true);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterlistitemvalue(token) {
        if (getData("expectingFirstListItemValue")) {
            const ancestor = this.stack[this.stack.length - 2];
            ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
            setData("expectingFirstListItemValue");
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefencedfenceinfo() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.lang = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefencedfencemeta() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.meta = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefencedfence() {
        // Exit if this is the closing fence.
        if (getData("flowCodeInside")) return;
        this.buffer();
        setData("flowCodeInside", true);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefenced() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
        setData("flowCodeInside");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodeindented() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data.replace(/(\r?\n|\r)$/g, "");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdefinitionlabelstring(token) {
        const label = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.label = label;
        node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdefinitiontitlestring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.title = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdefinitiondestinationstring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.url = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitatxheadingsequence(token) {
        const node = this.stack[this.stack.length - 1];
        if (!node.depth) {
            const depth = this.sliceSerialize(token).length;
            node.depth = depth;
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitsetextheadingtext() {
        setData("setextHeadingSlurpLineEnding", true);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitsetextheadinglinesequence(token) {
        const node = this.stack[this.stack.length - 1];
        node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitsetextheading() {
        setData("setextHeadingSlurpLineEnding");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterdata(token) {
        const node = this.stack[this.stack.length - 1];
        let tail = node.children[node.children.length - 1];
        if (!tail || tail.type !== "text") {
            // Add a new text node.
            tail = text();
            // @ts-expect-error: we’ll add `end` later.
            tail.position = {
                start: lib_point(token.start)
            };
            // @ts-expect-error: Assume `parent` accepts `text`.
            node.children.push(tail);
        }
        this.stack.push(tail);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdata(token) {
        const tail = this.stack.pop();
        tail.value += this.sliceSerialize(token);
        tail.position.end = lib_point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlineending(token) {
        const context = this.stack[this.stack.length - 1];
        // If we’re at a hard break, include the line ending in there.
        if (getData("atHardBreak")) {
            const tail = context.children[context.children.length - 1];
            tail.position.end = lib_point(token.end);
            setData("atHardBreak");
            return;
        }
        if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.includes(context.type)) {
            onenterdata.call(this, token);
            onexitdata.call(this, token);
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexithardbreak() {
        setData("atHardBreak", true);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexithtmlflow() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexithtmltext() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodetext() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlink() {
        const node = this.stack[this.stack.length - 1];
        // Note: there are also `identifier` and `label` fields on this link node!
        // These are used / cleaned here.
        // To do: clean.
        if (getData("inReference")) {
            /** @type {ReferenceType} */ const referenceType = getData("referenceType") || "shortcut";
            node.type += "Reference";
            // @ts-expect-error: mutate.
            node.referenceType = referenceType;
            // @ts-expect-error: mutate.
            delete node.url;
            delete node.title;
        } else {
            // @ts-expect-error: mutate.
            delete node.identifier;
            // @ts-expect-error: mutate.
            delete node.label;
        }
        setData("referenceType");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitimage() {
        const node = this.stack[this.stack.length - 1];
        // Note: there are also `identifier` and `label` fields on this link node!
        // These are used / cleaned here.
        // To do: clean.
        if (getData("inReference")) {
            /** @type {ReferenceType} */ const referenceType = getData("referenceType") || "shortcut";
            node.type += "Reference";
            // @ts-expect-error: mutate.
            node.referenceType = referenceType;
            // @ts-expect-error: mutate.
            delete node.url;
            delete node.title;
        } else {
            // @ts-expect-error: mutate.
            delete node.identifier;
            // @ts-expect-error: mutate.
            delete node.label;
        }
        setData("referenceType");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlabeltext(token) {
        const string = this.sliceSerialize(token);
        const ancestor = this.stack[this.stack.length - 2];
        // @ts-expect-error: stash this on the node, as it might become a reference
        // later.
        ancestor.label = decodeString(string);
        // @ts-expect-error: same as above.
        ancestor.identifier = normalizeIdentifier(string).toLowerCase();
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlabel() {
        const fragment = this.stack[this.stack.length - 1];
        const value = this.resume();
        const node = this.stack[this.stack.length - 1];
        // Assume a reference.
        setData("inReference", true);
        if (node.type === "link") {
            /** @type {Array<StaticPhrasingContent>} */ // @ts-expect-error: Assume static phrasing content.
            const children = fragment.children;
            node.children = children;
        } else {
            node.alt = value;
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitresourcedestinationstring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.url = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitresourcetitlestring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.title = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitresource() {
        setData("inReference");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterreference() {
        setData("referenceType", "collapsed");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitreferencestring(token) {
        const label = this.resume();
        const node = this.stack[this.stack.length - 1];
        // @ts-expect-error: stash this on the node, as it might become a reference
        // later.
        node.label = label;
        // @ts-expect-error: same as above.
        node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
        setData("referenceType", "full");
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcharacterreferencemarker(token) {
        setData("characterReferenceType", token.type);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcharacterreferencevalue(token) {
        const data = this.sliceSerialize(token);
        const type = getData("characterReferenceType");
        /** @type {string} */ let value;
        if (type) {
            value = decodeNumericCharacterReference(data, type === "characterReferenceMarkerNumeric" ? 10 : 16);
            setData("characterReferenceType");
        } else {
            const result = decodeNamedCharacterReference(data);
            value = result;
        }
        const tail = this.stack.pop();
        tail.value += value;
        tail.position.end = lib_point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitautolinkprotocol(token) {
        onexitdata.call(this, token);
        const node = this.stack[this.stack.length - 1];
        node.url = this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitautolinkemail(token) {
        onexitdata.call(this, token);
        const node = this.stack[this.stack.length - 1];
        node.url = "mailto:" + this.sliceSerialize(token);
    }
    //
    // Creaters.
    //
    /** @returns {Blockquote} */ function blockQuote() {
        return {
            type: "blockquote",
            children: []
        };
    }
    /** @returns {Code} */ function codeFlow() {
        return {
            type: "code",
            lang: null,
            meta: null,
            value: ""
        };
    }
    /** @returns {InlineCode} */ function codeText() {
        return {
            type: "inlineCode",
            value: ""
        };
    }
    /** @returns {Definition} */ function definition() {
        return {
            type: "definition",
            identifier: "",
            label: null,
            title: null,
            url: ""
        };
    }
    /** @returns {Emphasis} */ function emphasis() {
        return {
            type: "emphasis",
            children: []
        };
    }
    /** @returns {Heading} */ function heading() {
        // @ts-expect-error `depth` will be set later.
        return {
            type: "heading",
            depth: undefined,
            children: []
        };
    }
    /** @returns {Break} */ function hardBreak() {
        return {
            type: "break"
        };
    }
    /** @returns {HTML} */ function html() {
        return {
            type: "html",
            value: ""
        };
    }
    /** @returns {Image} */ function image() {
        return {
            type: "image",
            title: null,
            url: "",
            alt: null
        };
    }
    /** @returns {Link} */ function link() {
        return {
            type: "link",
            title: null,
            url: "",
            children: []
        };
    }
    /**
   * @param {Token} token
   * @returns {List}
   */ function list(token) {
        return {
            type: "list",
            ordered: token.type === "listOrdered",
            start: null,
            spread: token._spread,
            children: []
        };
    }
    /**
   * @param {Token} token
   * @returns {ListItem}
   */ function listItem(token) {
        return {
            type: "listItem",
            spread: token._spread,
            checked: null,
            children: []
        };
    }
    /** @returns {Paragraph} */ function paragraph() {
        return {
            type: "paragraph",
            children: []
        };
    }
    /** @returns {Strong} */ function strong() {
        return {
            type: "strong",
            children: []
        };
    }
    /** @returns {Text} */ function text() {
        return {
            type: "text",
            value: ""
        };
    }
    /** @returns {ThematicBreak} */ function thematicBreak() {
        return {
            type: "thematicBreak"
        };
    }
}
/**
 * Copy a point-like value.
 *
 * @param {Point} d
 *   Point-like value.
 * @returns {Point}
 *   unist point.
 */ function lib_point(d) {
    return {
        line: d.line,
        column: d.column,
        offset: d.offset
    };
}
/**
 * @param {Config} combined
 * @param {Array<Extension | Array<Extension>>} extensions
 * @returns {void}
 */ function configure(combined, extensions) {
    let index = -1;
    while(++index < extensions.length){
        const value = extensions[index];
        if (Array.isArray(value)) {
            configure(combined, value);
        } else {
            extension(combined, value);
        }
    }
}
/**
 * @param {Config} combined
 * @param {Extension} extension
 * @returns {void}
 */ function extension(combined, extension) {
    /** @type {keyof Extension} */ let key;
    for(key in extension){
        if (lib_own.call(extension, key)) {
            if (key === "canContainEols") {
                const right = extension[key];
                if (right) {
                    combined[key].push(...right);
                }
            } else if (key === "transforms") {
                const right = extension[key];
                if (right) {
                    combined[key].push(...right);
                }
            } else if (key === "enter" || key === "exit") {
                const right = extension[key];
                if (right) {
                    Object.assign(combined[key], right);
                }
            }
        }
    }
}
/** @type {OnEnterError} */ function defaultOnError(left, right) {
    if (left) {
        throw new Error("Cannot close `" + left.type + "` (" + stringifyPosition({
            start: left.start,
            end: left.end
        }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
            start: right.start,
            end: right.end
        }) + ") is open");
    } else {
        throw new Error("Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
            start: right.start,
            end: right.end
        }) + ") is still open");
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/remark-parse@10.0.2/node_modules/remark-parse/lib/index.js
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-from-markdown').Options} Options
 */ 
/**
 * @this {import('unified').Processor}
 * @type {import('unified').Plugin<[Options?] | void[], string, Root>}
 */ function remarkParse(options) {
    /** @type {import('unified').ParserFunction<Root>} */ const parser = (doc)=>{
        // Assume options.
        const settings = /** @type {Options} */ this.data("settings");
        return fromMarkdown(doc, Object.assign({}, settings, options, {
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: this.data("micromarkExtensions") || [],
            mdastExtensions: this.data("fromMarkdownExtensions") || []
        }));
    };
    Object.assign(this, {
        Parser: parser
    });
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/micromark-util-sanitize-uri@1.2.0/node_modules/micromark-util-sanitize-uri/index.js


/**
 * Make a value safe for injection as a URL.
 *
 * This encodes unsafe characters with percent-encoding and skips already
 * encoded sequences (see `normalizeUri`).
 * Further unsafe characters are encoded as character references (see
 * `micromark-util-encode`).
 *
 * A regex of allowed protocols can be given, in which case the URL is
 * sanitized.
 * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or
 * `/^https?$/i` for `img[src]` (this is what `github.com` allows).
 * If the URL includes an unknown protocol (one not matched by `protocol`, such
 * as a dangerous example, `javascript:`), the value is ignored.
 *
 * @param {string | undefined} url
 *   URI to sanitize.
 * @param {RegExp | null | undefined} [protocol]
 *   Allowed protocols.
 * @returns {string}
 *   Sanitized URI.
 */ function sanitizeUri(url, protocol) {
    const value = encode(normalizeUri(url || ""));
    if (!protocol) {
        return value;
    }
    const colon = value.indexOf(":");
    const questionMark = value.indexOf("?");
    const numberSign = value.indexOf("#");
    const slash = value.indexOf("/");
    if (// If there is no protocol, it’s relative.
    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.
    protocol.test(value.slice(0, colon))) {
        return value;
    }
    return "";
}
/**
 * Normalize a URL.
 *
 * Encode unsafe characters with percent-encoding, skipping already encoded
 * sequences.
 *
 * @param {string} value
 *   URI to normalize.
 * @returns {string}
 *   Normalized URI.
 */ function normalizeUri(value) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    let start = 0;
    let skip = 0;
    while(++index < value.length){
        const code = value.charCodeAt(index);
        /** @type {string} */ let replace = "";
        // A correct percent encoded value.
        if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {
            skip = 2;
        } else if (code < 128) {
            if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
                replace = String.fromCharCode(code);
            }
        } else if (code > 55295 && code < 57344) {
            const next = value.charCodeAt(index + 1);
            // A correct surrogate pair.
            if (code < 56320 && next > 56319 && next < 57344) {
                replace = String.fromCharCode(code, next);
                skip = 1;
            } else {
                replace = "�";
            }
        } else {
            replace = String.fromCharCode(code);
        }
        if (replace) {
            result.push(value.slice(start, index), encodeURIComponent(replace));
            start = index + skip + 1;
            replace = "";
        }
        if (skip) {
            index += skip;
            skip = 0;
        }
    }
    return result.join("") + value.slice(start);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/footer.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('./state.js').State} State
 */ 
/**
 * Generate a hast footer for called footnote definitions.
 *
 * @param {State} state
 *   Info passed around.
 * @returns {Element | undefined}
 *   `section` element or `undefined`.
 */ function footer(state) {
    /** @type {Array<ElementContent>} */ const listItems = [];
    let index = -1;
    while(++index < state.footnoteOrder.length){
        const def = state.footnoteById[state.footnoteOrder[index]];
        if (!def) {
            continue;
        }
        const content = state.all(def);
        const id = String(def.identifier).toUpperCase();
        const safeId = normalizeUri(id.toLowerCase());
        let referenceIndex = 0;
        /** @type {Array<ElementContent>} */ const backReferences = [];
        while(++referenceIndex <= state.footnoteCounts[id]){
            /** @type {Element} */ const backReference = {
                type: "element",
                tagName: "a",
                properties: {
                    href: "#" + state.clobberPrefix + "fnref-" + safeId + (referenceIndex > 1 ? "-" + referenceIndex : ""),
                    dataFootnoteBackref: true,
                    className: [
                        "data-footnote-backref"
                    ],
                    ariaLabel: state.footnoteBackLabel
                },
                children: [
                    {
                        type: "text",
                        value: "↩"
                    }
                ]
            };
            if (referenceIndex > 1) {
                backReference.children.push({
                    type: "element",
                    tagName: "sup",
                    children: [
                        {
                            type: "text",
                            value: String(referenceIndex)
                        }
                    ]
                });
            }
            if (backReferences.length > 0) {
                backReferences.push({
                    type: "text",
                    value: " "
                });
            }
            backReferences.push(backReference);
        }
        const tail = content[content.length - 1];
        if (tail && tail.type === "element" && tail.tagName === "p") {
            const tailTail = tail.children[tail.children.length - 1];
            if (tailTail && tailTail.type === "text") {
                tailTail.value += " ";
            } else {
                tail.children.push({
                    type: "text",
                    value: " "
                });
            }
            tail.children.push(...backReferences);
        } else {
            content.push(...backReferences);
        }
        /** @type {Element} */ const listItem = {
            type: "element",
            tagName: "li",
            properties: {
                id: state.clobberPrefix + "fn-" + safeId
            },
            children: state.wrap(content, true)
        };
        state.patch(def, listItem);
        listItems.push(listItem);
    }
    if (listItems.length === 0) {
        return;
    }
    return {
        type: "element",
        tagName: "section",
        properties: {
            dataFootnotes: true,
            className: [
                "footnotes"
            ]
        },
        children: [
            {
                type: "element",
                tagName: state.footnoteLabelTagName,
                properties: {
                    // To do: use structured clone.
                    ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
                    id: "footnote-label"
                },
                children: [
                    {
                        type: "text",
                        value: state.footnoteLabel
                    }
                ]
            },
            {
                type: "text",
                value: "\n"
            },
            {
                type: "element",
                tagName: "ol",
                properties: {},
                children: state.wrap(listItems, true)
            },
            {
                type: "text",
                value: "\n"
            }
        ]
    };
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/lib/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */ /**
 * @typedef {Record<string, unknown>} Props
 * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test
 *   Check for an arbitrary node, unaware of TypeScript inferral.
 *
 * @callback TestFunctionAnything
 *   Check if a node passes a test, unaware of TypeScript inferral.
 * @param {unknown} this
 *   The given context.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean | void}
 *   Whether this node passes the test.
 */ /**
 * @template {Node} Kind
 *   Node type.
 * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest
 *   Check for a node that can be inferred by TypeScript.
 */ /**
 * Check if a node passes a certain test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback TestFunctionPredicate
 *   Complex test function for a node that can be inferred by TypeScript.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this node passes the test.
 */ /**
 * @callback AssertAnything
 *   Check that an arbitrary value is a node, unaware of TypeScript inferral.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean}
 *   Whether this is a node and passes a test.
 */ /**
 * Check if a node is a node and passes a certain node test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback AssertPredicate
 *   Check that an arbitrary value is a specific node, aware of TypeScript.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this is a node and passes a test.
 */ /**
 * Check if `node` is a `Node` and whether it passes the given test.
 *
 * @param node
 *   Thing to check, typically `Node`.
 * @param test
 *   A check for a specific node.
 * @param index
 *   The node’s position in its parent.
 * @param parent
 *   The node’s parent.
 * @returns
 *   Whether `node` is a node and passes a test.
 */ const is = /**
   * @type {(
   *   (() => false) &
   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &
   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &
   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &
   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)
   * )}
   */ /**
     * @param {unknown} [node]
     * @param {Test} [test]
     * @param {number | null | undefined} [index]
     * @param {Parent | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */ // eslint-disable-next-line max-params
function is(node, test, index, parent, context) {
    const check = convert(test);
    if (index !== undefined && index !== null && (typeof index !== "number" || index < 0 || index === Number.POSITIVE_INFINITY)) {
        throw new Error("Expected positive finite index");
    }
    if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {
        throw new Error("Expected parent node");
    }
    if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
        throw new Error("Expected both parent and index");
    }
    // @ts-expect-error Looks like a node.
    return node && node.type && typeof node.type === "string" ? Boolean(check.call(context, node, index, parent)) : false;
};
/**
 * Generate an assertion from a test.
 *
 * Useful if you’re going to test many nodes, for example when creating a
 * utility where something else passes a compatible test.
 *
 * The created function is a bit faster because it expects valid input only:
 * a `node`, `index`, and `parent`.
 *
 * @param test
 *   *   when nullish, checks if `node` is a `Node`.
 *   *   when `string`, works like passing `(node) => node.type === test`.
 *   *   when `function` checks if function passed the node is true.
 *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
 *   *   when `array`, checks if any one of the subtests pass.
 * @returns
 *   An assertion.
 */ const convert = /**
   * @type {(
   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */ /**
     * @param {Test} [test]
     * @returns {AssertAnything}
     */ function(test) {
    if (test === undefined || test === null) {
        return ok;
    }
    if (typeof test === "string") {
        return typeFactory(test);
    }
    if (typeof test === "object") {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === "function") {
        return castFactory(test);
    }
    throw new Error("Expected function, string, or object as test");
};
/**
 * @param {Array<string | Props | TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */ function anyFactory(tests) {
    /** @type {Array<AssertAnything>} */ const checks = [];
    let index = -1;
    while(++index < tests.length){
        checks[index] = convert(tests[index]);
    }
    return castFactory(any);
    /**
   * @this {unknown}
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */ function any(...parameters) {
        let index = -1;
        while(++index < checks.length){
            if (checks[index].call(this, ...parameters)) return true;
        }
        return false;
    }
}
/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {AssertAnything}
 */ function propsFactory(check) {
    return castFactory(all);
    /**
   * @param {Node} node
   * @returns {boolean}
   */ function all(node) {
        /** @type {string} */ let key;
        for(key in check){
            // @ts-expect-error: hush, it sure works as an index.
            if (node[key] !== check[key]) return false;
        }
        return true;
    }
}
/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {AssertAnything}
 */ function typeFactory(check) {
    return castFactory(type);
    /**
   * @param {Node} node
   */ function type(node) {
        return node && node.type === check;
    }
}
/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */ function castFactory(check) {
    return assertion;
    /**
   * @this {unknown}
   * @param {unknown} node
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */ function assertion(node, ...parameters) {
        return Boolean(node && typeof node === "object" && "type" in node && // @ts-expect-error: fine.
        Boolean(check.call(this, node, ...parameters)));
    }
}
function ok() {
    return true;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/color.js
/**
 * @param {string} d
 * @returns {string}
 */ function color(d) {
    return "\x1b[33m" + d + "\x1b[39m";
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 */ /**
 * @typedef {boolean | 'skip'} Action
 *   Union of the action types.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed).
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 *
 * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult
 *   Any value that can be returned from a visitor.
 */ /**
 * @template {Node} [Visited=Node]
 *   Visited node type.
 * @template {Parent} [Ancestor=Parent]
 *   Ancestor type.
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of an ancestor still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Array<Ancestor>} ancestors
 *   Ancestors of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */ /**
 * @template {Node} [Tree=Node]
 *   Tree type.
 * @template {Test} [Check=string]
 *   Test type.
 * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor
 *   Build a typed `Visitor` function from a tree and a test.
 *
 *   It will infer which values are passed as `node` and which as `parents`.
 */ 

/**
 * Continue traversing as normal.
 */ const CONTINUE = true;
/**
 * Stop traversing immediately.
 */ const EXIT = false;
/**
 * Do not traverse this node’s children.
 */ const SKIP = "skip";
/**
 * Visit nodes, with ancestral information.
 *
 * This algorithm performs *depth-first* *tree traversal* in *preorder*
 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
 *
 * You can choose for which nodes `visitor` is called by passing a `test`.
 * For complex tests, you should test yourself in `visitor`, as it will be
 * faster and will have improved type information.
 *
 * Walking the tree is an intensive task.
 * Make use of the return values of the visitor when possible.
 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
 * to check if a node matches, and then perform different operations.
 *
 * You can change the tree.
 * See `Visitor` for more info.
 *
 * @param tree
 *   Tree to traverse.
 * @param test
 *   `unist-util-is`-compatible test
 * @param visitor
 *   Handle each node.
 * @param reverse
 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
 * @returns
 *   Nothing.
 */ const visitParents = /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */ /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor<Node>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */ function(tree, test, visitor, reverse) {
    if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        // @ts-expect-error no visitor given, so `visitor` is test.
        visitor = test;
        test = null;
    }
    const is = convert(test);
    const step = reverse ? -1 : 1;
    factory(tree, undefined, [])();
    /**
       * @param {Node} node
       * @param {number | undefined} index
       * @param {Array<Parent>} parents
       */ function factory(node, index, parents) {
        /** @type {Record<string, unknown>} */ // @ts-expect-error: hush
        const value = node && typeof node === "object" ? node : {};
        if (typeof value.type === "string") {
            const name = // `hast`
            typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : undefined;
            Object.defineProperty(visit, "name", {
                value: "node (" + color(node.type + (name ? "<" + name + ">" : "")) + ")"
            });
        }
        return visit;
        function visit() {
            /** @type {ActionTuple} */ let result = [];
            /** @type {ActionTuple} */ let subresult;
            /** @type {number} */ let offset;
            /** @type {Array<Parent>} */ let grandparents;
            if (!test || is(node, index, parents[parents.length - 1] || null)) {
                result = toResult(visitor(node, parents));
                if (result[0] === EXIT) {
                    return result;
                }
            }
            // @ts-expect-error looks like a parent.
            if (node.children && result[0] !== SKIP) {
                // @ts-expect-error looks like a parent.
                offset = (reverse ? node.children.length : -1) + step;
                // @ts-expect-error looks like a parent.
                grandparents = parents.concat(node);
                // @ts-expect-error looks like a parent.
                while(offset > -1 && offset < node.children.length){
                    // @ts-expect-error looks like a parent.
                    subresult = factory(node.children[offset], offset, grandparents)();
                    if (subresult[0] === EXIT) {
                        return subresult;
                    }
                    offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
                }
            }
            return result;
        }
    }
};
/**
 * Turn a return value into a clean result.
 *
 * @param {VisitorResult} value
 *   Valid return values from visitors.
 * @returns {ActionTuple}
 *   Clean result.
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === "number") {
        return [
            CONTINUE,
            value
        ];
    }
    return [
        value
    ];
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/lib/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */ /**
 * Check if `Child` can be a child of `Ancestor`.
 *
 * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns
 * `never`.
 *
 * @template {Node} Ancestor
 *   Node type.
 * @template {Node} Child
 *   Node type.
 * @typedef {(
 *   Ancestor extends Parent
 *     ? Child extends Ancestor['children'][number]
 *       ? Ancestor
 *       : never
 *     : never
 * )} ParentsOf
 */ /**
 * @template {Node} [Visited=Node]
 *   Visited node type.
 * @template {Parent} [Ancestor=Parent]
 *   Ancestor type.
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform `parent`.
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of `parent` still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Visited extends Node ? number | null : never} index
 *   Index of `node` in `parent`.
 * @param {Ancestor extends Node ? Ancestor | null : never} parent
 *   Parent of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */ /**
 * Build a typed `Visitor` function from a node and all possible parents.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} Visited
 *   Node type.
 * @template {Parent} Ancestor
 *   Parent type.
 * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch
 */ /**
 * Build a typed `Visitor` function from a list of descendants and a test.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} Descendant
 *   Node type.
 * @template {Test} Check
 *   Test type.
 * @typedef {(
 *   BuildVisitorFromMatch<
 *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,
 *     Extract<Descendant, Parent>
 *   >
 * )} BuildVisitorFromDescendants
 */ /**
 * Build a typed `Visitor` function from a tree and a test.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} [Tree=Node]
 *   Node type.
 * @template {Test} [Check=string]
 *   Test type.
 * @typedef {(
 *   BuildVisitorFromDescendants<
 *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,
 *     Check
 *   >
 * )} BuildVisitor
 */ 
/**
 * Visit nodes.
 *
 * This algorithm performs *depth-first* *tree traversal* in *preorder*
 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
 *
 * You can choose for which nodes `visitor` is called by passing a `test`.
 * For complex tests, you should test yourself in `visitor`, as it will be
 * faster and will have improved type information.
 *
 * Walking the tree is an intensive task.
 * Make use of the return values of the visitor when possible.
 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
 * to check if a node matches, and then perform different operations.
 *
 * You can change the tree.
 * See `Visitor` for more info.
 *
 * @param tree
 *   Tree to traverse.
 * @param test
 *   `unist-util-is`-compatible test
 * @param visitor
 *   Handle each node.
 * @param reverse
 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
 * @returns
 *   Nothing.
 */ const visit = /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */ /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */ function(tree, test, visitor, reverse) {
    if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
    }
    visitParents(tree, test, overload, reverse);
    /**
       * @param {Node} node
       * @param {Array<Parent>} parents
       */ function overload(node, parents) {
        const parent = parents[parents.length - 1];
        return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
    }
};


;// CONCATENATED MODULE: ./node_modules/.pnpm/unist-util-position@4.0.4/node_modules/unist-util-position/lib/index.js
/**
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */ /**
 * Get the starting point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */ const pointStart = unist_util_position_lib_point("start");
/**
 * Get the ending point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */ const pointEnd = unist_util_position_lib_point("end");
/**
 * Get the positional info of `node`.
 *
 * @param {NodeLike | Node | null | undefined} [node]
 *   Node.
 * @returns {Position}
 *   Position.
 */ function lib_position(node) {
    return {
        start: pointStart(node),
        end: pointEnd(node)
    };
}
/**
 * Get the positional info of `node`.
 *
 * @param {'start' | 'end'} type
 *   Side.
 * @returns
 *   Getter.
 */ function unist_util_position_lib_point(type) {
    return point;
    /**
   * Get the point info of `node` at a bound side.
   *
   * @param {NodeLike | Node | null | undefined} [node]
   * @returns {Point}
   */ function point(node) {
        const point = node && node.position && node.position[type] || {};
        // To do: next major: don’t return points when invalid.
        return {
            // @ts-expect-error: in practice, null is allowed.
            line: point.line || null,
            // @ts-expect-error: in practice, null is allowed.
            column: point.column || null,
            // @ts-expect-error: in practice, null is allowed.
            offset: point.offset > -1 ? point.offset : null
        };
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/unist-util-generated@2.0.1/node_modules/unist-util-generated/lib/index.js
/**
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef NodeLike
 * @property {PositionLike | null | undefined} [position]
 */ /**
 * Check if `node` is generated.
 *
 * @param {NodeLike | null | undefined} [node]
 *   Node to check.
 * @returns {boolean}
 *   Whether `node` is generated (does not have positional info).
 */ function generated(node) {
    return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-definitions@5.1.2/node_modules/mdast-util-definitions/lib/index.js
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Definition} Definition
 */ /**
 * @typedef {Root | Content} Node
 *
 * @callback GetDefinition
 *   Get a definition by identifier.
 * @param {string | null | undefined} [identifier]
 *   Identifier of definition.
 * @returns {Definition | null}
 *   Definition corresponding to `identifier` or `null`.
 */ 
const mdast_util_definitions_lib_own = {}.hasOwnProperty;
/**
 * Find definitions in `tree`.
 *
 * Uses CommonMark precedence, which means that earlier definitions are
 * preferred over duplicate later definitions.
 *
 * @param {Node} tree
 *   Tree to check.
 * @returns {GetDefinition}
 *   Getter.
 */ function definitions(tree) {
    /** @type {Record<string, Definition>} */ const cache = Object.create(null);
    if (!tree || !tree.type) {
        throw new Error("mdast-util-definitions expected node");
    }
    visit(tree, "definition", (definition)=>{
        const id = clean(definition.identifier);
        if (id && !mdast_util_definitions_lib_own.call(cache, id)) {
            cache[id] = definition;
        }
    });
    return definition;
    /** @type {GetDefinition} */ function definition(identifier) {
        const id = clean(identifier);
        // To do: next major: return `undefined` when not found.
        return id && mdast_util_definitions_lib_own.call(cache, id) ? cache[id] : null;
    }
}
/**
 * @param {string | null | undefined} [value]
 * @returns {string}
 */ function clean(value) {
    return String(value || "").toUpperCase();
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `blockquote` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Blockquote} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function blockquote(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "blockquote",
        properties: {},
        children: state.wrap(state.all(node), true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/break.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').Break} Break
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `break` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Break} node
 *   mdast node.
 * @returns {Array<Element | Text>}
 *   hast element content.
 */ function hardBreak(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "br",
        properties: {},
        children: []
    };
    state.patch(node, result);
    return [
        state.applyData(node, result),
        {
            type: "text",
            value: "\n"
        }
    ];
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/code.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Code} Code
 * @typedef {import('../state.js').State} State

 */ /**
 * Turn an mdast `code` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Code} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function code(state, node) {
    const value = node.value ? node.value + "\n" : "";
    // To do: next major, use `node.lang` w/o regex, the splitting’s been going
    // on for years in remark now.
    const lang = node.lang ? node.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
    /** @type {Properties} */ const properties = {};
    if (lang) {
        properties.className = [
            "language-" + lang
        ];
    }
    // Create `<code>`.
    /** @type {Element} */ let result = {
        type: "element",
        tagName: "code",
        properties,
        children: [
            {
                type: "text",
                value
            }
        ]
    };
    if (node.meta) {
        result.data = {
            meta: node.meta
        };
    }
    state.patch(node, result);
    result = state.applyData(node, result);
    // Create `<pre>`.
    result = {
        type: "element",
        tagName: "pre",
        properties: {},
        children: [
            result
        ]
    };
    state.patch(node, result);
    return result;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Delete} Delete
 * @typedef {import('../state.js').State} State

 */ /**
 * Turn an mdast `delete` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Delete} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function strikethrough(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "del",
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `emphasis` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Emphasis} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function emphasis(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "em",
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
/**
 * @typedef {import('mdast').FootnoteReference} FootnoteReference
 * @typedef {import('hast').Element} Element
 * @typedef {import('../state.js').State} State
 */ 
/**
 * Turn an mdast `footnoteReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {FootnoteReference} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function footnoteReference(state, node) {
    const id = String(node.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    const index = state.footnoteOrder.indexOf(id);
    /** @type {number} */ let counter;
    if (index === -1) {
        state.footnoteOrder.push(id);
        state.footnoteCounts[id] = 1;
        counter = state.footnoteOrder.length;
    } else {
        state.footnoteCounts[id]++;
        counter = index + 1;
    }
    const reuseCounter = state.footnoteCounts[id];
    /** @type {Element} */ const link = {
        type: "element",
        tagName: "a",
        properties: {
            href: "#" + state.clobberPrefix + "fn-" + safeId,
            id: state.clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
            dataFootnoteRef: true,
            ariaDescribedBy: [
                "footnote-label"
            ]
        },
        children: [
            {
                type: "text",
                value: String(counter)
            }
        ]
    };
    state.patch(node, link);
    /** @type {Element} */ const sup = {
        type: "element",
        tagName: "sup",
        properties: {},
        children: [
            link
        ]
    };
    state.patch(node, sup);
    return state.applyData(node, sup);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/footnote.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Footnote} Footnote
 * @typedef {import('../state.js').State} State
 */ 
// To do: when both:
// * <https://github.com/micromark/micromark-extension-footnote>
// * <https://github.com/syntax-tree/mdast-util-footnote>
// …are archived, remove this (also from mdast).
// These inline notes are not used in GFM.
/**
 * Turn an mdast `footnote` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Footnote} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function footnote(state, node) {
    const footnoteById = state.footnoteById;
    let no = 1;
    while(no in footnoteById)no++;
    const identifier = String(no);
    footnoteById[identifier] = {
        type: "footnoteDefinition",
        identifier,
        children: [
            {
                type: "paragraph",
                children: node.children
            }
        ],
        position: node.position
    };
    return footnoteReference(state, {
        type: "footnoteReference",
        identifier,
        position: node.position
    });
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `heading` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Heading} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function heading(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "h" + node.depth,
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/html.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').HTML} Html
 * @typedef {import('../state.js').State} State
 * @typedef {import('../../index.js').Raw} Raw
 */ /**
 * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise
 * nothing).
 *
 * @param {State} state
 *   Info passed around.
 * @param {Html} node
 *   mdast node.
 * @returns {Raw | Element | null}
 *   hast node.
 */ function html(state, node) {
    if (state.dangerous) {
        /** @type {Raw} */ const result = {
            type: "raw",
            value: node.value
        };
        state.patch(node, result);
        return state.applyData(node, result);
    }
    // To do: next major: return `undefined`.
    return null;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/revert.js
/**
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Reference} Reference
 * @typedef {import('mdast').Root} Root
 *
 * @typedef {import('./state.js').State} State
 */ /**
 * @typedef {Root | Content} Nodes
 * @typedef {Extract<Nodes, Reference>} References
 */ // To do: next major: always return array.
/**
 * Return the content of a reference without definition as plain text.
 *
 * @param {State} state
 *   Info passed around.
 * @param {References} node
 *   Reference node (image, link).
 * @returns {ElementContent | Array<ElementContent>}
 *   hast content.
 */ function revert(state, node) {
    const subtype = node.referenceType;
    let suffix = "]";
    if (subtype === "collapsed") {
        suffix += "[]";
    } else if (subtype === "full") {
        suffix += "[" + (node.label || node.identifier) + "]";
    }
    if (node.type === "imageReference") {
        return {
            type: "text",
            value: "![" + node.alt + suffix
        };
    }
    const contents = state.all(node);
    const head = contents[0];
    if (head && head.type === "text") {
        head.value = "[" + head.value;
    } else {
        contents.unshift({
            type: "text",
            value: "["
        });
    }
    const tail = contents[contents.length - 1];
    if (tail && tail.type === "text") {
        tail.value += suffix;
    } else {
        contents.push({
            type: "text",
            value: suffix
        });
    }
    return contents;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
/**
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('../state.js').State} State
 */ 

/**
 * Turn an mdast `imageReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ImageReference} node
 *   mdast node.
 * @returns {ElementContent | Array<ElementContent>}
 *   hast node.
 */ function imageReference(state, node) {
    const def = state.definition(node.identifier);
    if (!def) {
        return revert(state, node);
    }
    /** @type {Properties} */ const properties = {
        src: normalizeUri(def.url || ""),
        alt: node.alt
    };
    if (def.title !== null && def.title !== undefined) {
        properties.title = def.title;
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "img",
        properties,
        children: []
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/image.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Image} Image
 * @typedef {import('../state.js').State} State
 */ 
/**
 * Turn an mdast `image` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Image} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function image_image(state, node) {
    /** @type {Properties} */ const properties = {
        src: normalizeUri(node.url)
    };
    if (node.alt !== null && node.alt !== undefined) {
        properties.alt = node.alt;
    }
    if (node.title !== null && node.title !== undefined) {
        properties.title = node.title;
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "img",
        properties,
        children: []
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `inlineCode` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {InlineCode} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function inlineCode(state, node) {
    /** @type {Text} */ const text = {
        type: "text",
        value: node.value.replace(/\r?\n|\r/g, " ")
    };
    state.patch(node, text);
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "code",
        properties: {},
        children: [
            text
        ]
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('../state.js').State} State
 */ 

/**
 * Turn an mdast `linkReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {LinkReference} node
 *   mdast node.
 * @returns {ElementContent | Array<ElementContent>}
 *   hast node.
 */ function linkReference(state, node) {
    const def = state.definition(node.identifier);
    if (!def) {
        return revert(state, node);
    }
    /** @type {Properties} */ const properties = {
        href: normalizeUri(def.url || "")
    };
    if (def.title !== null && def.title !== undefined) {
        properties.title = def.title;
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "a",
        properties,
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/link.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Link} Link
 * @typedef {import('../state.js').State} State
 */ 
/**
 * Turn an mdast `link` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Link} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function link_link(state, node) {
    /** @type {Properties} */ const properties = {
        href: normalizeUri(node.url)
    };
    if (node.title !== null && node.title !== undefined) {
        properties.title = node.title;
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "a",
        properties,
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Parent} Parent
 * @typedef {import('mdast').Root} Root
 * @typedef {import('../state.js').State} State
 */ /**
 * @typedef {Root | Content} Nodes
 * @typedef {Extract<Nodes, Parent>} Parents
 */ /**
 * Turn an mdast `listItem` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ListItem} node
 *   mdast node.
 * @param {Parents | null | undefined} parent
 *   Parent of `node`.
 * @returns {Element}
 *   hast node.
 */ function listItem(state, node, parent) {
    const results = state.all(node);
    const loose = parent ? listLoose(parent) : listItemLoose(node);
    /** @type {Properties} */ const properties = {};
    /** @type {Array<ElementContent>} */ const children = [];
    if (typeof node.checked === "boolean") {
        const head = results[0];
        /** @type {Element} */ let paragraph;
        if (head && head.type === "element" && head.tagName === "p") {
            paragraph = head;
        } else {
            paragraph = {
                type: "element",
                tagName: "p",
                properties: {},
                children: []
            };
            results.unshift(paragraph);
        }
        if (paragraph.children.length > 0) {
            paragraph.children.unshift({
                type: "text",
                value: " "
            });
        }
        paragraph.children.unshift({
            type: "element",
            tagName: "input",
            properties: {
                type: "checkbox",
                checked: node.checked,
                disabled: true
            },
            children: []
        });
        // According to github-markdown-css, this class hides bullet.
        // See: <https://github.com/sindresorhus/github-markdown-css>.
        properties.className = [
            "task-list-item"
        ];
    }
    let index = -1;
    while(++index < results.length){
        const child = results[index];
        // Add eols before nodes, except if this is a loose, first paragraph.
        if (loose || index !== 0 || child.type !== "element" || child.tagName !== "p") {
            children.push({
                type: "text",
                value: "\n"
            });
        }
        if (child.type === "element" && child.tagName === "p" && !loose) {
            children.push(...child.children);
        } else {
            children.push(child);
        }
    }
    const tail = results[results.length - 1];
    // Add a final eol.
    if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
        children.push({
            type: "text",
            value: "\n"
        });
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "li",
        properties,
        children
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
/**
 * @param {Parents} node
 * @return {Boolean}
 */ function listLoose(node) {
    let loose = false;
    if (node.type === "list") {
        loose = node.spread || false;
        const children = node.children;
        let index = -1;
        while(!loose && ++index < children.length){
            loose = listItemLoose(children[index]);
        }
    }
    return loose;
}
/**
 * @param {ListItem} node
 * @return {Boolean}
 */ function listItemLoose(node) {
    const spread = node.spread;
    return spread === undefined || spread === null ? node.children.length > 1 : spread;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/list.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').List} List
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `list` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {List} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function list_list(state, node) {
    /** @type {Properties} */ const properties = {};
    const results = state.all(node);
    let index = -1;
    if (typeof node.start === "number" && node.start !== 1) {
        properties.start = node.start;
    }
    // Like GitHub, add a class for custom styling.
    while(++index < results.length){
        const child = results[index];
        if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
            properties.className = [
                "contains-task-list"
            ];
            break;
        }
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: node.ordered ? "ol" : "ul",
        properties,
        children: state.wrap(results, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `paragraph` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Paragraph} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function paragraph(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "p",
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/root.js
/**
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `root` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastRoot} node
 *   mdast node.
 * @returns {HastRoot | HastElement}
 *   hast node.
 */ function root(state, node) {
    /** @type {HastRoot} */ const result = {
        type: "root",
        children: state.wrap(state.all(node))
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `strong` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Strong} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function strong(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "strong",
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Table} Table
 * @typedef {import('../state.js').State} State
 */ 
/**
 * Turn an mdast `table` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Table} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function table(state, node) {
    const rows = state.all(node);
    const firstRow = rows.shift();
    /** @type {Array<Element>} */ const tableContent = [];
    if (firstRow) {
        /** @type {Element} */ const head = {
            type: "element",
            tagName: "thead",
            properties: {},
            children: state.wrap([
                firstRow
            ], true)
        };
        state.patch(node.children[0], head);
        tableContent.push(head);
    }
    if (rows.length > 0) {
        /** @type {Element} */ const body = {
            type: "element",
            tagName: "tbody",
            properties: {},
            children: state.wrap(rows, true)
        };
        const start = pointStart(node.children[1]);
        const end = pointEnd(node.children[node.children.length - 1]);
        if (start.line && end.line) body.position = {
            start,
            end
        };
        tableContent.push(body);
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "table",
        properties: {},
        children: state.wrap(tableContent, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js
/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Parent} Parent
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').TableRow} TableRow
 * @typedef {import('../state.js').State} State
 */ /**
 * @typedef {Root | Content} Nodes
 * @typedef {Extract<Nodes, Parent>} Parents
 */ /**
 * Turn an mdast `tableRow` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {TableRow} node
 *   mdast node.
 * @param {Parents | null | undefined} parent
 *   Parent of `node`.
 * @returns {Element}
 *   hast node.
 */ function tableRow(state, node, parent) {
    const siblings = parent ? parent.children : undefined;
    // Generate a body row when without parent.
    const rowIndex = siblings ? siblings.indexOf(node) : 1;
    const tagName = rowIndex === 0 ? "th" : "td";
    const align = parent && parent.type === "table" ? parent.align : undefined;
    const length = align ? align.length : node.children.length;
    let cellIndex = -1;
    /** @type {Array<ElementContent>} */ const cells = [];
    while(++cellIndex < length){
        // Note: can also be undefined.
        const cell = node.children[cellIndex];
        /** @type {Properties} */ const properties = {};
        const alignValue = align ? align[cellIndex] : undefined;
        if (alignValue) {
            properties.align = alignValue;
        }
        /** @type {Element} */ let result = {
            type: "element",
            tagName,
            properties,
            children: []
        };
        if (cell) {
            result.children = state.all(cell);
            state.patch(cell, result);
            result = state.applyData(node, result);
        }
        cells.push(result);
    }
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "tr",
        properties: {},
        children: state.wrap(cells, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').TableCell} TableCell
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `tableCell` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {TableCell} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function tableCell(state, node) {
    // Note: this function is normally not called: see `table-row` for how rows
    // and their cells are compiled.
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "td",
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js
const tab = 9 /* `\t` */ ;
const space = 32 /* ` ` */ ;
/**
 * Remove initial and final spaces and tabs at the line breaks in `value`.
 * Does not trim initial and final spaces and tabs of the value itself.
 *
 * @param {string} value
 *   Value to trim.
 * @returns {string}
 *   Trimmed value.
 */ function trimLines(value) {
    const source = String(value);
    const search = /\r?\n|\r/g;
    let match = search.exec(source);
    let last = 0;
    /** @type {Array<string>} */ const lines = [];
    while(match){
        lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);
        last = match.index + match[0].length;
        match = search.exec(source);
    }
    lines.push(trimLine(source.slice(last), last > 0, false));
    return lines.join("");
}
/**
 * @param {string} value
 *   Line to trim.
 * @param {boolean} start
 *   Whether to trim the start of the line.
 * @param {boolean} end
 *   Whether to trim the end of the line.
 * @returns {string}
 *   Trimmed line.
 */ function trimLine(value, start, end) {
    let startIndex = 0;
    let endIndex = value.length;
    if (start) {
        let code = value.codePointAt(startIndex);
        while(code === tab || code === space){
            startIndex++;
            code = value.codePointAt(startIndex);
        }
    }
    if (end) {
        let code = value.codePointAt(endIndex - 1);
        while(code === tab || code === space){
            endIndex--;
            code = value.codePointAt(endIndex - 1);
        }
    }
    return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/text.js
/**
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').Text} HastText
 * @typedef {import('mdast').Text} MdastText
 * @typedef {import('../state.js').State} State
 */ 
/**
 * Turn an mdast `text` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastText} node
 *   mdast node.
 * @returns {HastText | HastElement}
 *   hast node.
 */ function handlers_text_text(state, node) {
    /** @type {HastText} */ const result = {
        type: "text",
        value: trimLines(String(node.value))
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn an mdast `thematicBreak` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ThematicBreak} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */ function thematic_break_thematicBreak(state, node) {
    /** @type {Element} */ const result = {
        type: "element",
        tagName: "hr",
        properties: {},
        children: []
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/index.js
























/**
 * Default handlers for nodes.
 */ const handlers = {
    blockquote: blockquote,
    break: hardBreak,
    code: code,
    delete: strikethrough,
    emphasis: emphasis,
    footnoteReference: footnoteReference,
    footnote: footnote,
    heading: heading,
    html: html,
    imageReference: imageReference,
    image: image_image,
    inlineCode: inlineCode,
    linkReference: linkReference,
    link: link_link,
    listItem: listItem,
    list: list_list,
    paragraph: paragraph,
    root: root,
    strong: strong,
    table: table,
    tableCell: tableCell,
    tableRow: tableRow,
    text: handlers_text_text,
    thematicBreak: thematic_break_thematicBreak,
    toml: ignore,
    yaml: ignore,
    definition: ignore,
    footnoteDefinition: ignore
};
// Return nothing for nodes that are ignored.
function ignore() {
    // To do: next major: return `undefined`.
    return null;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/state.js
/**
 * @typedef {import('hast').Content} HastContent
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').ElementContent} HastElementContent
 * @typedef {import('hast').Properties} HastProperties
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('hast').Text} HastText
 *
 * @typedef {import('mdast').Content} MdastContent
 * @typedef {import('mdast').Definition} MdastDefinition
 * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
 * @typedef {import('mdast').Parent} MdastParent
 * @typedef {import('mdast').Root} MdastRoot
 */ /**
 * @typedef {HastRoot | HastContent} HastNodes
 * @typedef {MdastRoot | MdastContent} MdastNodes
 * @typedef {Extract<MdastNodes, MdastParent>} MdastParents
 *
 * @typedef EmbeddedHastFields
 *   hast fields.
 * @property {string | null | undefined} [hName]
 *   Generate a specific element with this tag name instead.
 * @property {HastProperties | null | undefined} [hProperties]
 *   Generate an element with these properties instead.
 * @property {Array<HastElementContent> | null | undefined} [hChildren]
 *   Generate an element with this content instead.
 *
 * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData
 *   mdast data with embedded hast fields.
 *
 * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData
 *   mdast node with embedded hast data.
 *
 * @typedef PointLike
 *   Point-like value.
 * @property {number | null | undefined} [line]
 *   Line.
 * @property {number | null | undefined} [column]
 *   Column.
 * @property {number | null | undefined} [offset]
 *   Offset.
 *
 * @typedef PositionLike
 *   Position-like value.
 * @property {PointLike | null | undefined} [start]
 *   Point-like value.
 * @property {PointLike | null | undefined} [end]
 *   Point-like value.
 *
 * @callback Handler
 *   Handle a node.
 * @param {State} state
 *   Info passed around.
 * @param {any} node
 *   mdast node to handle.
 * @param {MdastParents | null | undefined} parent
 *   Parent of `node`.
 * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
 *   hast node.
 *
 * @callback HFunctionProps
 *   Signature of `state` for when props are passed.
 * @param {MdastNodes | PositionLike | null | undefined} node
 *   mdast node or unist position.
 * @param {string} tagName
 *   HTML tag name.
 * @param {HastProperties} props
 *   Properties.
 * @param {Array<HastElementContent> | null | undefined} [children]
 *   hast content.
 * @returns {HastElement}
 *   Compiled element.
 *
 * @callback HFunctionNoProps
 *   Signature of `state` for when no props are passed.
 * @param {MdastNodes | PositionLike | null | undefined} node
 *   mdast node or unist position.
 * @param {string} tagName
 *   HTML tag name.
 * @param {Array<HastElementContent> | null | undefined} [children]
 *   hast content.
 * @returns {HastElement}
 *   Compiled element.
 *
 * @typedef HFields
 *   Info on `state`.
 * @property {boolean} dangerous
 *   Whether HTML is allowed.
 * @property {string} clobberPrefix
 *   Prefix to use to prevent DOM clobbering.
 * @property {string} footnoteLabel
 *   Label to use to introduce the footnote section.
 * @property {string} footnoteLabelTagName
 *   HTML used for the footnote label.
 * @property {HastProperties} footnoteLabelProperties
 *   Properties on the HTML tag used for the footnote label.
 * @property {string} footnoteBackLabel
 *   Label to use from backreferences back to their footnote call.
 * @property {(identifier: string) => MdastDefinition | null} definition
 *   Definition cache.
 * @property {Record<string, MdastFootnoteDefinition>} footnoteById
 *   Footnote definitions by their identifier.
 * @property {Array<string>} footnoteOrder
 *   Identifiers of order when footnote calls first appear in tree order.
 * @property {Record<string, number>} footnoteCounts
 *   Counts for how often the same footnote was called.
 * @property {Handlers} handlers
 *   Applied handlers.
 * @property {Handler} unknownHandler
 *   Handler for any none not in `passThrough` or otherwise handled.
 * @property {(from: MdastNodes, node: HastNodes) => void} patch
 *   Copy a node’s positional info.
 * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData
 *   Honor the `data` of `from`, and generate an element instead of `node`.
 * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one
 *   Transform an mdast node to hast.
 * @property {(node: MdastNodes) => Array<HastElementContent>} all
 *   Transform the children of an mdast parent to hast.
 * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap
 *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.
 * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment
 *   Like `state` but lower-level and usable on non-elements.
 *   Deprecated: use `patch` and `applyData`.
 * @property {Array<string>} passThrough
 *   List of node types to pass through untouched (except for their children).
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [allowDangerousHtml=false]
 *   Whether to persist raw HTML in markdown in the hast tree.
 * @property {string | null | undefined} [clobberPrefix='user-content-']
 *   Prefix to use before the `id` attribute on footnotes to prevent it from
 *   *clobbering*.
 * @property {string | null | undefined} [footnoteBackLabel='Back to content']
 *   Label to use from backreferences back to their footnote call (affects
 *   screen readers).
 * @property {string | null | undefined} [footnoteLabel='Footnotes']
 *   Label to use for the footnotes section (affects screen readers).
 * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]
 *   Properties to use on the footnote label (note that `id: 'footnote-label'`
 *   is always added as footnote calls use it with `aria-describedby` to
 *   provide an accessible label).
 * @property {string | null | undefined} [footnoteLabelTagName='h2']
 *   Tag name to use for the footnote label.
 * @property {Handlers | null | undefined} [handlers]
 *   Extra handlers for nodes.
 * @property {Array<string> | null | undefined} [passThrough]
 *   List of custom mdast node types to pass through (keep) in hast (note that
 *   the node itself is passed, but eventual children are transformed).
 * @property {Handler | null | undefined} [unknownHandler]
 *   Handler for all unknown nodes.
 *
 * @typedef {Record<string, Handler>} Handlers
 *   Handle nodes.
 *
 * @typedef {HFunctionProps & HFunctionNoProps & HFields} State
 *   Info passed around.
 */ 




const state_own = {}.hasOwnProperty;
/**
 * Create `state` from an mdast tree.
 *
 * @param {MdastNodes} tree
 *   mdast node to transform.
 * @param {Options | null | undefined} [options]
 *   Configuration.
 * @returns {State}
 *   `state` function.
 */ function createState(tree, options) {
    const settings = options || {};
    const dangerous = settings.allowDangerousHtml || false;
    /** @type {Record<string, MdastFootnoteDefinition>} */ const footnoteById = {};
    // To do: next major: add `options` to state, remove:
    // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,
    // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,
    // `unknownHandler`.
    // To do: next major: move to `state.options.allowDangerousHtml`.
    state.dangerous = dangerous;
    // To do: next major: move to `state.options`.
    state.clobberPrefix = settings.clobberPrefix === undefined || settings.clobberPrefix === null ? "user-content-" : settings.clobberPrefix;
    // To do: next major: move to `state.options`.
    state.footnoteLabel = settings.footnoteLabel || "Footnotes";
    // To do: next major: move to `state.options`.
    state.footnoteLabelTagName = settings.footnoteLabelTagName || "h2";
    // To do: next major: move to `state.options`.
    state.footnoteLabelProperties = settings.footnoteLabelProperties || {
        className: [
            "sr-only"
        ]
    };
    // To do: next major: move to `state.options`.
    state.footnoteBackLabel = settings.footnoteBackLabel || "Back to content";
    // To do: next major: move to `state.options`.
    state.unknownHandler = settings.unknownHandler;
    // To do: next major: move to `state.options`.
    state.passThrough = settings.passThrough;
    state.handlers = {
        ...handlers,
        ...settings.handlers
    };
    // To do: next major: replace utility with `definitionById` object, so we
    // only walk once (as we need footnotes too).
    state.definition = definitions(tree);
    state.footnoteById = footnoteById;
    /** @type {Array<string>} */ state.footnoteOrder = [];
    /** @type {Record<string, number>} */ state.footnoteCounts = {};
    state.patch = patch;
    state.applyData = applyData;
    state.one = oneBound;
    state.all = allBound;
    state.wrap = state_wrap;
    // To do: next major: remove `augment`.
    state.augment = augment;
    visit(tree, "footnoteDefinition", (definition)=>{
        const id = String(definition.identifier).toUpperCase();
        // Mimick CM behavior of link definitions.
        // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.
        if (!state_own.call(footnoteById, id)) {
            footnoteById[id] = definition;
        }
    });
    // @ts-expect-error Hush, it’s fine!
    return state;
    /**
   * Finalise the created `right`, a hast node, from `left`, an mdast node.
   *
   * @param {MdastNodeWithData | PositionLike | null | undefined} left
   * @param {HastElementContent} right
   * @returns {HastElementContent}
   */ /* c8 ignore start */ // To do: next major: remove.
    function augment(left, right) {
        // Handle `data.hName`, `data.hProperties, `data.hChildren`.
        if (left && "data" in left && left.data) {
            /** @type {MdastData} */ const data = left.data;
            if (data.hName) {
                if (right.type !== "element") {
                    right = {
                        type: "element",
                        tagName: "",
                        properties: {},
                        children: []
                    };
                }
                right.tagName = data.hName;
            }
            if (right.type === "element" && data.hProperties) {
                right.properties = {
                    ...right.properties,
                    ...data.hProperties
                };
            }
            if ("children" in right && right.children && data.hChildren) {
                right.children = data.hChildren;
            }
        }
        if (left) {
            const ctx = "type" in left ? left : {
                position: left
            };
            if (!generated(ctx)) {
                // @ts-expect-error: fine.
                right.position = {
                    start: pointStart(ctx),
                    end: pointEnd(ctx)
                };
            }
        }
        return right;
    }
    /* c8 ignore stop */ /**
   * Create an element for `node`.
   *
   * @type {HFunctionProps}
   */ /* c8 ignore start */ // To do: next major: remove.
    function state(node, tagName, props, children) {
        if (Array.isArray(props)) {
            children = props;
            props = {};
        }
        // @ts-expect-error augmenting an element yields an element.
        return augment(node, {
            type: "element",
            tagName,
            properties: props || {},
            children: children || []
        });
    }
    /* c8 ignore stop */ /**
   * Transform an mdast node into a hast node.
   *
   * @param {MdastNodes} node
   *   mdast node.
   * @param {MdastParents | null | undefined} [parent]
   *   Parent of `node`.
   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
   *   Resulting hast node.
   */ function oneBound(node, parent) {
        // @ts-expect-error: that’s a state :)
        return state_one(state, node, parent);
    }
    /**
   * Transform the children of an mdast node into hast nodes.
   *
   * @param {MdastNodes} parent
   *   mdast node to compile
   * @returns {Array<HastElementContent>}
   *   Resulting hast nodes.
   */ function allBound(parent) {
        // @ts-expect-error: that’s a state :)
        return state_all(state, parent);
    }
}
/**
 * Copy a node’s positional info.
 *
 * @param {MdastNodes} from
 *   mdast node to copy from.
 * @param {HastNodes} to
 *   hast node to copy into.
 * @returns {void}
 *   Nothing.
 */ function patch(from, to) {
    if (from.position) to.position = lib_position(from);
}
/**
 * Honor the `data` of `from` and maybe generate an element instead of `to`.
 *
 * @template {HastNodes} Type
 *   Node type.
 * @param {MdastNodes} from
 *   mdast node to use data from.
 * @param {Type} to
 *   hast node to change.
 * @returns {Type | HastElement}
 *   Nothing.
 */ function applyData(from, to) {
    /** @type {Type | HastElement} */ let result = to;
    // Handle `data.hName`, `data.hProperties, `data.hChildren`.
    if (from && from.data) {
        const hName = from.data.hName;
        const hChildren = from.data.hChildren;
        const hProperties = from.data.hProperties;
        if (typeof hName === "string") {
            // Transforming the node resulted in an element with a different name
            // than wanted:
            if (result.type === "element") {
                result.tagName = hName;
            } else {
                result = {
                    type: "element",
                    tagName: hName,
                    properties: {},
                    children: []
                };
            // To do: next major: take the children from the `root`, or inject the
            // raw/text/comment or so into the element?
            // if ('children' in node) {
            //   // @ts-expect-error: assume `children` are allowed in elements.
            //   result.children = node.children
            // } else {
            //   // @ts-expect-error: assume `node` is allowed in elements.
            //   result.children.push(node)
            // }
            }
        }
        if (result.type === "element" && hProperties) {
            result.properties = {
                ...result.properties,
                ...hProperties
            };
        }
        if ("children" in result && result.children && hChildren !== null && hChildren !== undefined) {
            // @ts-expect-error: assume valid children are defined.
            result.children = hChildren;
        }
    }
    return result;
}
/**
 * Transform an mdast node into a hast node.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} node
 *   mdast node.
 * @param {MdastParents | null | undefined} [parent]
 *   Parent of `node`.
 * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
 *   Resulting hast node.
 */ // To do: next major: do not expose, keep bound.
function state_one(state, node, parent) {
    const type = node && node.type;
    // Fail on non-nodes.
    if (!type) {
        throw new Error("Expected node, got `" + node + "`");
    }
    if (state_own.call(state.handlers, type)) {
        return state.handlers[type](state, node, parent);
    }
    if (state.passThrough && state.passThrough.includes(type)) {
        // To do: next major: deep clone.
        // @ts-expect-error: types of passed through nodes are expected to be added manually.
        return "children" in node ? {
            ...node,
            children: state_all(state, node)
        } : node;
    }
    if (state.unknownHandler) {
        return state.unknownHandler(state, node, parent);
    }
    return defaultUnknownHandler(state, node);
}
/**
 * Transform the children of an mdast node into hast nodes.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} parent
 *   mdast node to compile
 * @returns {Array<HastElementContent>}
 *   Resulting hast nodes.
 */ // To do: next major: do not expose, keep bound.
function state_all(state, parent) {
    /** @type {Array<HastElementContent>} */ const values = [];
    if ("children" in parent) {
        const nodes = parent.children;
        let index = -1;
        while(++index < nodes.length){
            const result = state_one(state, nodes[index], parent);
            // To do: see if we van clean this? Can we merge texts?
            if (result) {
                if (index && nodes[index - 1].type === "break") {
                    if (!Array.isArray(result) && result.type === "text") {
                        result.value = result.value.replace(/^\s+/, "");
                    }
                    if (!Array.isArray(result) && result.type === "element") {
                        const head = result.children[0];
                        if (head && head.type === "text") {
                            head.value = head.value.replace(/^\s+/, "");
                        }
                    }
                }
                if (Array.isArray(result)) {
                    values.push(...result);
                } else {
                    values.push(result);
                }
            }
        }
    }
    return values;
}
/**
 * Transform an unknown node.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} node
 *   Unknown mdast node.
 * @returns {HastText | HastElement}
 *   Resulting hast node.
 */ function defaultUnknownHandler(state, node) {
    const data = node.data || {};
    /** @type {HastText | HastElement} */ const result = "value" in node && !(state_own.call(data, "hProperties") || state_own.call(data, "hChildren")) ? {
        type: "text",
        value: node.value
    } : {
        type: "element",
        tagName: "div",
        properties: {},
        children: state_all(state, node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
/**
 * Wrap `nodes` with line endings between each node.
 *
 * @template {HastContent} Type
 *   Node type.
 * @param {Array<Type>} nodes
 *   List of nodes to wrap.
 * @param {boolean | null | undefined} [loose=false]
 *   Whether to add line endings at start and end.
 * @returns {Array<Type | HastText>}
 *   Wrapped nodes.
 */ function state_wrap(nodes, loose) {
    /** @type {Array<Type | HastText>} */ const result = [];
    let index = -1;
    if (loose) {
        result.push({
            type: "text",
            value: "\n"
        });
    }
    while(++index < nodes.length){
        if (index) result.push({
            type: "text",
            value: "\n"
        });
        result.push(nodes[index]);
    }
    if (loose && nodes.length > 0) {
        result.push({
            type: "text",
            value: "\n"
        });
    }
    return result;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/index.js
/**
 * @typedef {import('hast').Content} HastContent
 * @typedef {import('hast').Root} HastRoot
 *
 * @typedef {import('mdast').Content} MdastContent
 * @typedef {import('mdast').Root} MdastRoot
 *
 * @typedef {import('./state.js').Options} Options
 */ /**
 * @typedef {HastRoot | HastContent} HastNodes
 * @typedef {MdastRoot | MdastContent} MdastNodes
 */ 

/**
 * Transform mdast to hast.
 *
 * ##### Notes
 *
 * ###### HTML
 *
 * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
 * as semistandard `raw` nodes.
 * Most utilities ignore `raw` nodes but two notable ones don’t:
 *
 * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will
 *     output the raw HTML.
 *     This is typically discouraged as noted by the option name but is useful
 *     if you completely trust authors
 * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them
 *     into standard hast nodes (`element`, `text`, etc).
 *     This is a heavy task as it needs a full HTML parser, but it is the only
 *     way to support untrusted content
 *
 * ###### Footnotes
 *
 * Many options supported here relate to footnotes.
 * Footnotes are not specified by CommonMark, which we follow by default.
 * They are supported by GitHub, so footnotes can be enabled in markdown with
 * `mdast-util-gfm`.
 *
 * The options `footnoteBackLabel` and `footnoteLabel` define natural language
 * that explains footnotes, which is hidden for sighted users but shown to
 * assistive technology.
 * When your page is not in English, you must define translated values.
 *
 * Back references use ARIA attributes, but the section label itself uses a
 * heading that is hidden with an `sr-only` class.
 * To show it to sighted users, define different attributes in
 * `footnoteLabelProperties`.
 *
 * ###### Clobbering
 *
 * Footnotes introduces a problem, as it links footnote calls to footnote
 * definitions on the page through `id` attributes generated from user content,
 * which results in DOM clobbering.
 *
 * DOM clobbering is this:
 *
 * ```html
 * <p id=x></p>
 * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
 * ```
 *
 * Elements by their ID are made available by browsers on the `window` object,
 * which is a security risk.
 * Using a prefix solves this problem.
 *
 * More information on how to handle clobbering and the prefix is explained in
 * Example: headings (DOM clobbering) in `rehype-sanitize`.
 *
 * ###### Unknown nodes
 *
 * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
 * The default behavior for unknown nodes is:
 *
 * *   when the node has a `value` (and doesn’t have `data.hName`,
 *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
 *     node
 * *   otherwise, create a `<div>` element (which could be changed with
 *     `data.hName`), with its children mapped from mdast to hast as well
 *
 * This behavior can be changed by passing an `unknownHandler`.
 *
 * @param {MdastNodes} tree
 *   mdast tree.
 * @param {Options | null | undefined} [options]
 *   Configuration.
 * @returns {HastNodes | null | undefined}
 *   hast tree.
 */ // To do: next major: always return a single `root`.
function toHast(tree, options) {
    const state = createState(tree, options);
    const node = state.one(tree, null);
    const foot = footer(state);
    if (foot) {
        // @ts-expect-error If there’s a footer, there were definitions, meaning block
        // content.
        // So assume `node` is a parent node.
        node.children.push({
            type: "text",
            value: "\n"
        }, foot);
    }
    // To do: next major: always return root?
    return Array.isArray(node) ? {
        type: "root",
        children: node
    } : node;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/remark-rehype@10.1.0/node_modules/remark-rehype/lib/index.js
/**
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('mdast-util-to-hast').Options} Options
 * @typedef {import('unified').Processor<any, any, any, any>} Processor
 *
 * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree
 */ 
// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(
/**
 * Plugin that turns markdown into HTML to support rehype.
 *
 * *   If a destination processor is given, that processor runs with a new HTML
 *     (hast) tree (bridge-mode).
 *     As the given processor runs with a hast tree, and rehype plugins support
 *     hast, that means rehype plugins can be used with the given processor.
 *     The hast tree is discarded in the end.
 *     It’s highly unlikely that you want to do this.
 * *   The common case is to not pass a destination processor, in which case the
 *     current processor continues running with a new HTML (hast) tree
 *     (mutate-mode).
 *     As the current processor continues with a hast tree, and rehype plugins
 *     support hast, that means rehype plugins can be used after
 *     `remark-rehype`.
 *     It’s likely that this is what you want to do.
 *
 * @param destination
 *   Optional unified processor.
 * @param options
 *   Options passed to `mdast-util-to-hast`.
 */ const remarkRehype = /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */ function(destination, options) {
    return destination && "run" in destination ? bridge(destination, options) : mutate(destination || options);
};
/* harmony default export */ const lib = (remarkRehype);
/**
 * Bridge-mode.
 * Runs the destination with the new hast tree.
 *
 * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}
 */ function bridge(destination, options) {
    return (node, file, next)=>{
        destination.run(toHast(node, options), file, (error)=>{
            next(error);
        });
    };
}
/**
 * Mutate-mode.
 * Further plugins run on the hast tree.
 *
 * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}
 */ function mutate(options) {
    // @ts-expect-error: assume a corresponding node is returned by `toHast`.
    return (node)=>toHast(node, options);
}

// EXTERNAL MODULE: ./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js
var prop_types = __webpack_require__(59102);
;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/schema.js
/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */ class Schema {
    /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */ constructor(property, normal, space){
        this.property = property;
        this.normal = normal;
        if (space) {
            this.space = space;
        }
    }
}
/** @type {Properties} */ Schema.prototype.property = {};
/** @type {Normal} */ Schema.prototype.normal = {};
/** @type {string|null} */ Schema.prototype.space = null;

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/merge.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */ 
/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */ function merge(definitions, space) {
    /** @type {Properties} */ const property = {};
    /** @type {Normal} */ const normal = {};
    let index = -1;
    while(++index < definitions.length){
        Object.assign(property, definitions[index].property);
        Object.assign(normal, definitions[index].normal);
    }
    return new Schema(property, normal, space);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/normalize.js
/**
 * @param {string} value
 * @returns {string}
 */ function normalize(value) {
    return value.toLowerCase();
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/info.js
class Info {
    /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */ constructor(property, attribute){
        /** @type {string} */ this.property = property;
        /** @type {string} */ this.attribute = attribute;
    }
}
/** @type {string|null} */ Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/types.js
let powers = 0;
const types_boolean = increment();
const booleanish = increment();
const overloadedBoolean = increment();
const number = increment();
const spaceSeparated = increment();
const commaSeparated = increment();
const commaOrSpaceSeparated = increment();
function increment() {
    return 2 ** ++powers;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/defined-info.js


/** @type {Array<keyof types>} */ // @ts-expect-error: hush.
const checks = Object.keys(types_namespaceObject);
class DefinedInfo extends Info {
    /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */ constructor(property, attribute, mask, space){
        let index = -1;
        super(property, attribute);
        mark(this, "space", space);
        if (typeof mask === "number") {
            while(++index < checks.length){
                const check = checks[index];
                mark(this, checks[index], (mask & types_namespaceObject[check]) === types_namespaceObject[check]);
            }
        }
    }
}
DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */ function mark(values, key, value) {
    if (value) {
        // @ts-expect-error: assume `value` matches the expected value of `key`.
        values[key] = value;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/create.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */ 


const create_own = {}.hasOwnProperty;
/**
 * @param {Definition} definition
 * @returns {Schema}
 */ function create(definition) {
    /** @type {Properties} */ const property = {};
    /** @type {Normal} */ const normal = {};
    /** @type {string} */ let prop;
    for(prop in definition.properties){
        if (create_own.call(definition.properties, prop)) {
            const value = definition.properties[prop];
            const info = new DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);
            if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
                info.mustUseProperty = true;
            }
            property[prop] = info;
            normal[normalize(prop)] = prop;
            normal[normalize(info.attribute)] = prop;
        }
    }
    return new Schema(property, normal, definition.space);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/xlink.js

const xlink = create({
    space: "xlink",
    transform (_, prop) {
        return "xlink:" + prop.slice(5).toLowerCase();
    },
    properties: {
        xLinkActuate: null,
        xLinkArcRole: null,
        xLinkHref: null,
        xLinkRole: null,
        xLinkShow: null,
        xLinkTitle: null,
        xLinkType: null
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/xml.js

const xml = create({
    space: "xml",
    transform (_, prop) {
        return "xml:" + prop.slice(3).toLowerCase();
    },
    properties: {
        xmlLang: null,
        xmlBase: null,
        xmlSpace: null
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/case-sensitive-transform.js
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */ function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/case-insensitive-transform.js

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */ function caseInsensitiveTransform(attributes, property) {
    return caseSensitiveTransform(attributes, property.toLowerCase());
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/xmlns.js


const xmlns = create({
    space: "xmlns",
    attributes: {
        xmlnsxlink: "xmlns:xlink"
    },
    transform: caseInsensitiveTransform,
    properties: {
        xmlns: null,
        xmlnsXLink: null
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/aria.js


const aria = create({
    transform (_, prop) {
        return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
    },
    properties: {
        ariaActiveDescendant: null,
        ariaAtomic: booleanish,
        ariaAutoComplete: null,
        ariaBusy: booleanish,
        ariaChecked: booleanish,
        ariaColCount: number,
        ariaColIndex: number,
        ariaColSpan: number,
        ariaControls: spaceSeparated,
        ariaCurrent: null,
        ariaDescribedBy: spaceSeparated,
        ariaDetails: null,
        ariaDisabled: booleanish,
        ariaDropEffect: spaceSeparated,
        ariaErrorMessage: null,
        ariaExpanded: booleanish,
        ariaFlowTo: spaceSeparated,
        ariaGrabbed: booleanish,
        ariaHasPopup: null,
        ariaHidden: booleanish,
        ariaInvalid: null,
        ariaKeyShortcuts: null,
        ariaLabel: null,
        ariaLabelledBy: spaceSeparated,
        ariaLevel: number,
        ariaLive: null,
        ariaModal: booleanish,
        ariaMultiLine: booleanish,
        ariaMultiSelectable: booleanish,
        ariaOrientation: null,
        ariaOwns: spaceSeparated,
        ariaPlaceholder: null,
        ariaPosInSet: number,
        ariaPressed: booleanish,
        ariaReadOnly: booleanish,
        ariaRelevant: null,
        ariaRequired: booleanish,
        ariaRoleDescription: spaceSeparated,
        ariaRowCount: number,
        ariaRowIndex: number,
        ariaRowSpan: number,
        ariaSelected: booleanish,
        ariaSetSize: number,
        ariaSort: null,
        ariaValueMax: number,
        ariaValueMin: number,
        ariaValueNow: number,
        ariaValueText: null,
        role: null
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/html.js



const html_html = create({
    space: "html",
    attributes: {
        acceptcharset: "accept-charset",
        classname: "class",
        htmlfor: "for",
        httpequiv: "http-equiv"
    },
    transform: caseInsensitiveTransform,
    mustUseProperty: [
        "checked",
        "multiple",
        "muted",
        "selected"
    ],
    properties: {
        // Standard Properties.
        abbr: null,
        accept: commaSeparated,
        acceptCharset: spaceSeparated,
        accessKey: spaceSeparated,
        action: null,
        allow: null,
        allowFullScreen: types_boolean,
        allowPaymentRequest: types_boolean,
        allowUserMedia: types_boolean,
        alt: null,
        as: null,
        async: types_boolean,
        autoCapitalize: null,
        autoComplete: spaceSeparated,
        autoFocus: types_boolean,
        autoPlay: types_boolean,
        capture: types_boolean,
        charSet: null,
        checked: types_boolean,
        cite: null,
        className: spaceSeparated,
        cols: number,
        colSpan: null,
        content: null,
        contentEditable: booleanish,
        controls: types_boolean,
        controlsList: spaceSeparated,
        coords: number | commaSeparated,
        crossOrigin: null,
        data: null,
        dateTime: null,
        decoding: null,
        default: types_boolean,
        defer: types_boolean,
        dir: null,
        dirName: null,
        disabled: types_boolean,
        download: overloadedBoolean,
        draggable: booleanish,
        encType: null,
        enterKeyHint: null,
        form: null,
        formAction: null,
        formEncType: null,
        formMethod: null,
        formNoValidate: types_boolean,
        formTarget: null,
        headers: spaceSeparated,
        height: number,
        hidden: types_boolean,
        high: number,
        href: null,
        hrefLang: null,
        htmlFor: spaceSeparated,
        httpEquiv: spaceSeparated,
        id: null,
        imageSizes: null,
        imageSrcSet: null,
        inputMode: null,
        integrity: null,
        is: null,
        isMap: types_boolean,
        itemId: null,
        itemProp: spaceSeparated,
        itemRef: spaceSeparated,
        itemScope: types_boolean,
        itemType: spaceSeparated,
        kind: null,
        label: null,
        lang: null,
        language: null,
        list: null,
        loading: null,
        loop: types_boolean,
        low: number,
        manifest: null,
        max: null,
        maxLength: number,
        media: null,
        method: null,
        min: null,
        minLength: number,
        multiple: types_boolean,
        muted: types_boolean,
        name: null,
        nonce: null,
        noModule: types_boolean,
        noValidate: types_boolean,
        onAbort: null,
        onAfterPrint: null,
        onAuxClick: null,
        onBeforeMatch: null,
        onBeforePrint: null,
        onBeforeUnload: null,
        onBlur: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onContextLost: null,
        onContextMenu: null,
        onContextRestored: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFormData: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLanguageChange: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadEnd: null,
        onLoadStart: null,
        onMessage: null,
        onMessageError: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRejectionHandled: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onScrollEnd: null,
        onSecurityPolicyViolation: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onSlotChange: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnhandledRejection: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onWheel: null,
        open: types_boolean,
        optimum: number,
        pattern: null,
        ping: spaceSeparated,
        placeholder: null,
        playsInline: types_boolean,
        poster: null,
        preload: null,
        readOnly: types_boolean,
        referrerPolicy: null,
        rel: spaceSeparated,
        required: types_boolean,
        reversed: types_boolean,
        rows: number,
        rowSpan: number,
        sandbox: spaceSeparated,
        scope: null,
        scoped: types_boolean,
        seamless: types_boolean,
        selected: types_boolean,
        shape: null,
        size: number,
        sizes: null,
        slot: null,
        span: number,
        spellCheck: booleanish,
        src: null,
        srcDoc: null,
        srcLang: null,
        srcSet: null,
        start: number,
        step: null,
        style: null,
        tabIndex: number,
        target: null,
        title: null,
        translate: null,
        type: null,
        typeMustMatch: types_boolean,
        useMap: null,
        value: booleanish,
        width: number,
        wrap: null,
        // Legacy.
        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
        align: null,
        aLink: null,
        archive: spaceSeparated,
        axis: null,
        background: null,
        bgColor: null,
        border: number,
        borderColor: null,
        bottomMargin: number,
        cellPadding: null,
        cellSpacing: null,
        char: null,
        charOff: null,
        classId: null,
        clear: null,
        code: null,
        codeBase: null,
        codeType: null,
        color: null,
        compact: types_boolean,
        declare: types_boolean,
        event: null,
        face: null,
        frame: null,
        frameBorder: null,
        hSpace: number,
        leftMargin: number,
        link: null,
        longDesc: null,
        lowSrc: null,
        marginHeight: number,
        marginWidth: number,
        noResize: types_boolean,
        noHref: types_boolean,
        noShade: types_boolean,
        noWrap: types_boolean,
        object: null,
        profile: null,
        prompt: null,
        rev: null,
        rightMargin: number,
        rules: null,
        scheme: null,
        scrolling: booleanish,
        standby: null,
        summary: null,
        text: null,
        topMargin: number,
        valueType: null,
        version: null,
        vAlign: null,
        vLink: null,
        vSpace: number,
        // Non-standard Properties.
        allowTransparency: null,
        autoCorrect: null,
        autoSave: null,
        disablePictureInPicture: types_boolean,
        disableRemotePlayback: types_boolean,
        prefix: null,
        property: null,
        results: number,
        security: null,
        unselectable: null
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/svg.js



const svg = create({
    space: "svg",
    attributes: {
        accentHeight: "accent-height",
        alignmentBaseline: "alignment-baseline",
        arabicForm: "arabic-form",
        baselineShift: "baseline-shift",
        capHeight: "cap-height",
        className: "class",
        clipPath: "clip-path",
        clipRule: "clip-rule",
        colorInterpolation: "color-interpolation",
        colorInterpolationFilters: "color-interpolation-filters",
        colorProfile: "color-profile",
        colorRendering: "color-rendering",
        crossOrigin: "crossorigin",
        dataType: "datatype",
        dominantBaseline: "dominant-baseline",
        enableBackground: "enable-background",
        fillOpacity: "fill-opacity",
        fillRule: "fill-rule",
        floodColor: "flood-color",
        floodOpacity: "flood-opacity",
        fontFamily: "font-family",
        fontSize: "font-size",
        fontSizeAdjust: "font-size-adjust",
        fontStretch: "font-stretch",
        fontStyle: "font-style",
        fontVariant: "font-variant",
        fontWeight: "font-weight",
        glyphName: "glyph-name",
        glyphOrientationHorizontal: "glyph-orientation-horizontal",
        glyphOrientationVertical: "glyph-orientation-vertical",
        hrefLang: "hreflang",
        horizAdvX: "horiz-adv-x",
        horizOriginX: "horiz-origin-x",
        horizOriginY: "horiz-origin-y",
        imageRendering: "image-rendering",
        letterSpacing: "letter-spacing",
        lightingColor: "lighting-color",
        markerEnd: "marker-end",
        markerMid: "marker-mid",
        markerStart: "marker-start",
        navDown: "nav-down",
        navDownLeft: "nav-down-left",
        navDownRight: "nav-down-right",
        navLeft: "nav-left",
        navNext: "nav-next",
        navPrev: "nav-prev",
        navRight: "nav-right",
        navUp: "nav-up",
        navUpLeft: "nav-up-left",
        navUpRight: "nav-up-right",
        onAbort: "onabort",
        onActivate: "onactivate",
        onAfterPrint: "onafterprint",
        onBeforePrint: "onbeforeprint",
        onBegin: "onbegin",
        onCancel: "oncancel",
        onCanPlay: "oncanplay",
        onCanPlayThrough: "oncanplaythrough",
        onChange: "onchange",
        onClick: "onclick",
        onClose: "onclose",
        onCopy: "oncopy",
        onCueChange: "oncuechange",
        onCut: "oncut",
        onDblClick: "ondblclick",
        onDrag: "ondrag",
        onDragEnd: "ondragend",
        onDragEnter: "ondragenter",
        onDragExit: "ondragexit",
        onDragLeave: "ondragleave",
        onDragOver: "ondragover",
        onDragStart: "ondragstart",
        onDrop: "ondrop",
        onDurationChange: "ondurationchange",
        onEmptied: "onemptied",
        onEnd: "onend",
        onEnded: "onended",
        onError: "onerror",
        onFocus: "onfocus",
        onFocusIn: "onfocusin",
        onFocusOut: "onfocusout",
        onHashChange: "onhashchange",
        onInput: "oninput",
        onInvalid: "oninvalid",
        onKeyDown: "onkeydown",
        onKeyPress: "onkeypress",
        onKeyUp: "onkeyup",
        onLoad: "onload",
        onLoadedData: "onloadeddata",
        onLoadedMetadata: "onloadedmetadata",
        onLoadStart: "onloadstart",
        onMessage: "onmessage",
        onMouseDown: "onmousedown",
        onMouseEnter: "onmouseenter",
        onMouseLeave: "onmouseleave",
        onMouseMove: "onmousemove",
        onMouseOut: "onmouseout",
        onMouseOver: "onmouseover",
        onMouseUp: "onmouseup",
        onMouseWheel: "onmousewheel",
        onOffline: "onoffline",
        onOnline: "ononline",
        onPageHide: "onpagehide",
        onPageShow: "onpageshow",
        onPaste: "onpaste",
        onPause: "onpause",
        onPlay: "onplay",
        onPlaying: "onplaying",
        onPopState: "onpopstate",
        onProgress: "onprogress",
        onRateChange: "onratechange",
        onRepeat: "onrepeat",
        onReset: "onreset",
        onResize: "onresize",
        onScroll: "onscroll",
        onSeeked: "onseeked",
        onSeeking: "onseeking",
        onSelect: "onselect",
        onShow: "onshow",
        onStalled: "onstalled",
        onStorage: "onstorage",
        onSubmit: "onsubmit",
        onSuspend: "onsuspend",
        onTimeUpdate: "ontimeupdate",
        onToggle: "ontoggle",
        onUnload: "onunload",
        onVolumeChange: "onvolumechange",
        onWaiting: "onwaiting",
        onZoom: "onzoom",
        overlinePosition: "overline-position",
        overlineThickness: "overline-thickness",
        paintOrder: "paint-order",
        panose1: "panose-1",
        pointerEvents: "pointer-events",
        referrerPolicy: "referrerpolicy",
        renderingIntent: "rendering-intent",
        shapeRendering: "shape-rendering",
        stopColor: "stop-color",
        stopOpacity: "stop-opacity",
        strikethroughPosition: "strikethrough-position",
        strikethroughThickness: "strikethrough-thickness",
        strokeDashArray: "stroke-dasharray",
        strokeDashOffset: "stroke-dashoffset",
        strokeLineCap: "stroke-linecap",
        strokeLineJoin: "stroke-linejoin",
        strokeMiterLimit: "stroke-miterlimit",
        strokeOpacity: "stroke-opacity",
        strokeWidth: "stroke-width",
        tabIndex: "tabindex",
        textAnchor: "text-anchor",
        textDecoration: "text-decoration",
        textRendering: "text-rendering",
        typeOf: "typeof",
        underlinePosition: "underline-position",
        underlineThickness: "underline-thickness",
        unicodeBidi: "unicode-bidi",
        unicodeRange: "unicode-range",
        unitsPerEm: "units-per-em",
        vAlphabetic: "v-alphabetic",
        vHanging: "v-hanging",
        vIdeographic: "v-ideographic",
        vMathematical: "v-mathematical",
        vectorEffect: "vector-effect",
        vertAdvY: "vert-adv-y",
        vertOriginX: "vert-origin-x",
        vertOriginY: "vert-origin-y",
        wordSpacing: "word-spacing",
        writingMode: "writing-mode",
        xHeight: "x-height",
        // These were camelcased in Tiny. Now lowercased in SVG 2
        playbackOrder: "playbackorder",
        timelineBegin: "timelinebegin"
    },
    transform: caseSensitiveTransform,
    properties: {
        about: commaOrSpaceSeparated,
        accentHeight: number,
        accumulate: null,
        additive: null,
        alignmentBaseline: null,
        alphabetic: number,
        amplitude: number,
        arabicForm: null,
        ascent: number,
        attributeName: null,
        attributeType: null,
        azimuth: number,
        bandwidth: null,
        baselineShift: null,
        baseFrequency: null,
        baseProfile: null,
        bbox: null,
        begin: null,
        bias: number,
        by: null,
        calcMode: null,
        capHeight: number,
        className: spaceSeparated,
        clip: null,
        clipPath: null,
        clipPathUnits: null,
        clipRule: null,
        color: null,
        colorInterpolation: null,
        colorInterpolationFilters: null,
        colorProfile: null,
        colorRendering: null,
        content: null,
        contentScriptType: null,
        contentStyleType: null,
        crossOrigin: null,
        cursor: null,
        cx: null,
        cy: null,
        d: null,
        dataType: null,
        defaultAction: null,
        descent: number,
        diffuseConstant: number,
        direction: null,
        display: null,
        dur: null,
        divisor: number,
        dominantBaseline: null,
        download: types_boolean,
        dx: null,
        dy: null,
        edgeMode: null,
        editable: null,
        elevation: number,
        enableBackground: null,
        end: null,
        event: null,
        exponent: number,
        externalResourcesRequired: null,
        fill: null,
        fillOpacity: number,
        fillRule: null,
        filter: null,
        filterRes: null,
        filterUnits: null,
        floodColor: null,
        floodOpacity: null,
        focusable: null,
        focusHighlight: null,
        fontFamily: null,
        fontSize: null,
        fontSizeAdjust: null,
        fontStretch: null,
        fontStyle: null,
        fontVariant: null,
        fontWeight: null,
        format: null,
        fr: null,
        from: null,
        fx: null,
        fy: null,
        g1: commaSeparated,
        g2: commaSeparated,
        glyphName: commaSeparated,
        glyphOrientationHorizontal: null,
        glyphOrientationVertical: null,
        glyphRef: null,
        gradientTransform: null,
        gradientUnits: null,
        handler: null,
        hanging: number,
        hatchContentUnits: null,
        hatchUnits: null,
        height: null,
        href: null,
        hrefLang: null,
        horizAdvX: number,
        horizOriginX: number,
        horizOriginY: number,
        id: null,
        ideographic: number,
        imageRendering: null,
        initialVisibility: null,
        in: null,
        in2: null,
        intercept: number,
        k: number,
        k1: number,
        k2: number,
        k3: number,
        k4: number,
        kernelMatrix: commaOrSpaceSeparated,
        kernelUnitLength: null,
        keyPoints: null,
        keySplines: null,
        keyTimes: null,
        kerning: null,
        lang: null,
        lengthAdjust: null,
        letterSpacing: null,
        lightingColor: null,
        limitingConeAngle: number,
        local: null,
        markerEnd: null,
        markerMid: null,
        markerStart: null,
        markerHeight: null,
        markerUnits: null,
        markerWidth: null,
        mask: null,
        maskContentUnits: null,
        maskUnits: null,
        mathematical: null,
        max: null,
        media: null,
        mediaCharacterEncoding: null,
        mediaContentEncodings: null,
        mediaSize: number,
        mediaTime: null,
        method: null,
        min: null,
        mode: null,
        name: null,
        navDown: null,
        navDownLeft: null,
        navDownRight: null,
        navLeft: null,
        navNext: null,
        navPrev: null,
        navRight: null,
        navUp: null,
        navUpLeft: null,
        navUpRight: null,
        numOctaves: null,
        observer: null,
        offset: null,
        onAbort: null,
        onActivate: null,
        onAfterPrint: null,
        onBeforePrint: null,
        onBegin: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnd: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFocusIn: null,
        onFocusOut: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadStart: null,
        onMessage: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onMouseWheel: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRepeat: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onShow: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onZoom: null,
        opacity: null,
        operator: null,
        order: null,
        orient: null,
        orientation: null,
        origin: null,
        overflow: null,
        overlay: null,
        overlinePosition: number,
        overlineThickness: number,
        paintOrder: null,
        panose1: null,
        path: null,
        pathLength: number,
        patternContentUnits: null,
        patternTransform: null,
        patternUnits: null,
        phase: null,
        ping: spaceSeparated,
        pitch: null,
        playbackOrder: null,
        pointerEvents: null,
        points: null,
        pointsAtX: number,
        pointsAtY: number,
        pointsAtZ: number,
        preserveAlpha: null,
        preserveAspectRatio: null,
        primitiveUnits: null,
        propagate: null,
        property: commaOrSpaceSeparated,
        r: null,
        radius: null,
        referrerPolicy: null,
        refX: null,
        refY: null,
        rel: commaOrSpaceSeparated,
        rev: commaOrSpaceSeparated,
        renderingIntent: null,
        repeatCount: null,
        repeatDur: null,
        requiredExtensions: commaOrSpaceSeparated,
        requiredFeatures: commaOrSpaceSeparated,
        requiredFonts: commaOrSpaceSeparated,
        requiredFormats: commaOrSpaceSeparated,
        resource: null,
        restart: null,
        result: null,
        rotate: null,
        rx: null,
        ry: null,
        scale: null,
        seed: null,
        shapeRendering: null,
        side: null,
        slope: null,
        snapshotTime: null,
        specularConstant: number,
        specularExponent: number,
        spreadMethod: null,
        spacing: null,
        startOffset: null,
        stdDeviation: null,
        stemh: null,
        stemv: null,
        stitchTiles: null,
        stopColor: null,
        stopOpacity: null,
        strikethroughPosition: number,
        strikethroughThickness: number,
        string: null,
        stroke: null,
        strokeDashArray: commaOrSpaceSeparated,
        strokeDashOffset: null,
        strokeLineCap: null,
        strokeLineJoin: null,
        strokeMiterLimit: number,
        strokeOpacity: number,
        strokeWidth: null,
        style: null,
        surfaceScale: number,
        syncBehavior: null,
        syncBehaviorDefault: null,
        syncMaster: null,
        syncTolerance: null,
        syncToleranceDefault: null,
        systemLanguage: commaOrSpaceSeparated,
        tabIndex: number,
        tableValues: null,
        target: null,
        targetX: number,
        targetY: number,
        textAnchor: null,
        textDecoration: null,
        textRendering: null,
        textLength: null,
        timelineBegin: null,
        title: null,
        transformBehavior: null,
        type: null,
        typeOf: commaOrSpaceSeparated,
        to: null,
        transform: null,
        u1: null,
        u2: null,
        underlinePosition: number,
        underlineThickness: number,
        unicode: null,
        unicodeBidi: null,
        unicodeRange: null,
        unitsPerEm: number,
        values: null,
        vAlphabetic: number,
        vMathematical: number,
        vectorEffect: null,
        vHanging: number,
        vIdeographic: number,
        version: null,
        vertAdvY: number,
        vertOriginX: number,
        vertOriginY: number,
        viewBox: null,
        viewTarget: null,
        visibility: null,
        width: null,
        widths: null,
        wordSpacing: null,
        writingMode: null,
        x: null,
        x1: null,
        x2: null,
        xChannelSelector: null,
        xHeight: number,
        y: null,
        y1: null,
        y2: null,
        yChannelSelector: null,
        z: null,
        zoomAndPan: null
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/index.js
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */ 









const property_information_html = merge([
    xml,
    xlink,
    xmlns,
    aria,
    html_html
], "html");
const property_information_svg = merge([
    xml,
    xlink,
    xmlns,
    aria,
    svg
], "svg");

;// CONCATENATED MODULE: ./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.6_react@18.2.0/node_modules/react-markdown/lib/rehype-filter.js

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 *
 * @callback AllowElement
 * @param {Element} element
 * @param {number} index
 * @param {Element|Root} parent
 * @returns {boolean|undefined}
 *
 * @typedef Options
 * @property {Array<string>} [allowedElements]
 * @property {Array<string>} [disallowedElements=[]]
 * @property {AllowElement} [allowElement]
 * @property {boolean} [unwrapDisallowed=false]
 */ /**
 * @type {import('unified').Plugin<[Options], Root>}
 */ function rehypeFilter(options) {
    if (options.allowedElements && options.disallowedElements) {
        throw new TypeError("Only one of `allowedElements` and `disallowedElements` should be defined");
    }
    if (options.allowedElements || options.disallowedElements || options.allowElement) {
        return (tree)=>{
            visit(tree, "element", (node, index, parent_)=>{
                const parent = /** @type {Element|Root} */ parent_;
                /** @type {boolean|undefined} */ let remove;
                if (options.allowedElements) {
                    remove = !options.allowedElements.includes(node.tagName);
                } else if (options.disallowedElements) {
                    remove = options.disallowedElements.includes(node.tagName);
                }
                if (!remove && options.allowElement && typeof index === "number") {
                    remove = !options.allowElement(node, index, parent);
                }
                if (remove && typeof index === "number") {
                    if (options.unwrapDisallowed && node.children) {
                        parent.children.splice(index, 1, ...node.children);
                    } else {
                        parent.children.splice(index, 1);
                    }
                    return index;
                }
                return undefined;
            });
        };
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/index.js
var react_is = __webpack_require__(90982);
;// CONCATENATED MODULE: ./node_modules/.pnpm/hast-util-whitespace@2.0.1/node_modules/hast-util-whitespace/index.js
/**
 * Check if the given value is *inter-element whitespace*.
 *
 * @param {unknown} thing
 *   Thing to check (typically `Node` or `string`).
 * @returns {boolean}
 *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
 *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
 *   (`\r`), or form feed (`\f`).
 *   If a node is passed it must be a `Text` node, whose `value` field is
 *   checked.
 */ function whitespace(thing) {
    /** @type {string} */ const value = // @ts-expect-error looks like a node.
    thing && typeof thing === "object" && thing.type === "text" ? thing.value || "" : thing;
    // HTML whitespace expression.
    // See <https://infra.spec.whatwg.org/#ascii-whitespace>.
    return typeof value === "string" && value.replace(/[ \t\n\f\r]/g, "") === "";
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/find.js
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */ 


const valid = /^data[-\w.:]+$/i;
const dash = /-[a-z]/g;
const cap = /[A-Z]/g;
/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */ function find(schema, value) {
    const normal = normalize(value);
    let prop = value;
    let Type = Info;
    if (normal in schema.normal) {
        return schema.property[schema.normal[normal]];
    }
    if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
        // Attribute or property.
        if (value.charAt(4) === "-") {
            // Turn it into a property.
            const rest = value.slice(5).replace(dash, camelcase);
            prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
        } else {
            // Turn it into an attribute.
            const rest = value.slice(4);
            if (!dash.test(rest)) {
                let dashes = rest.replace(cap, kebab);
                if (dashes.charAt(0) !== "-") {
                    dashes = "-" + dashes;
                }
                value = "data" + dashes;
            }
        }
        Type = DefinedInfo;
    }
    return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */ function kebab($0) {
    return "-" + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */ function camelcase($0) {
    return $0.charAt(1).toUpperCase();
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/hast-to-react.js
/**
 * `hast` is close to `React`, but differs in a couple of cases.
 *
 * To get a React property from a hast property, check if it is in
 * `hastToReact`, if it is, then use the corresponding value,
 * otherwise, use the hast property.
 *
 * @type {Record<string, string>}
 */ const hastToReact = {
    classId: "classID",
    dataType: "datatype",
    itemId: "itemID",
    strokeDashArray: "strokeDasharray",
    strokeDashOffset: "strokeDashoffset",
    strokeLineCap: "strokeLinecap",
    strokeLineJoin: "strokeLinejoin",
    strokeMiterLimit: "strokeMiterlimit",
    typeOf: "typeof",
    xLinkActuate: "xlinkActuate",
    xLinkArcRole: "xlinkArcrole",
    xLinkHref: "xlinkHref",
    xLinkRole: "xlinkRole",
    xLinkShow: "xlinkShow",
    xLinkTitle: "xlinkTitle",
    xLinkType: "xlinkType",
    xmlnsXLink: "xmlnsXlink"
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js
/**
 * Parse space-separated tokens to an array of strings.
 *
 * @param {string} value
 *   Space-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */ function space_separated_tokens_parse(value) {
    const input = String(value || "").trim();
    return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
/**
 * Serialize an array of strings as space separated-tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @returns {string}
 *   Space-separated tokens.
 */ function stringify(values) {
    return values.join(" ").trim();
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js
/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */ /**
 * @typedef {Options} StringifyOptions
 *   Please use `StringifyOptions` instead.
 */ /**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value
 *   Comma-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */ function comma_separated_tokens_parse(value) {
    /** @type {Array<string>} */ const tokens = [];
    const input = String(value || "");
    let index = input.indexOf(",");
    let start = 0;
    /** @type {boolean} */ let end = false;
    while(!end){
        if (index === -1) {
            index = input.length;
            end = true;
        }
        const token = input.slice(start, index).trim();
        if (token || !end) {
            tokens.push(token);
        }
        start = index + 1;
        index = input.indexOf(",", start);
    }
    return tokens;
}
/**
 * Serialize an array of strings or numbers to comma-separated tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @param {Options} [options]
 *   Configuration for `stringify` (optional).
 * @returns {string}
 *   Comma-separated tokens.
 */ function comma_separated_tokens_stringify(values, options) {
    const settings = options || {};
    // Ensure the last empty entry is seen.
    const input = values[values.length - 1] === "" ? [
        ...values,
        ""
    ] : values;
    return input.join((settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")).trim();
}

// EXTERNAL MODULE: ./node_modules/.pnpm/style-to-object@0.4.1/node_modules/style-to-object/index.js
var style_to_object = __webpack_require__(12238);
;// CONCATENATED MODULE: ./node_modules/.pnpm/style-to-object@0.4.1/node_modules/style-to-object/index.mjs

/* harmony default export */ const node_modules_style_to_object = (style_to_object);

;// CONCATENATED MODULE: ./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.6_react@18.2.0/node_modules/react-markdown/lib/uri-transformer.js
const protocols = [
    "http",
    "https",
    "mailto",
    "tel"
];
/**
 * @param {string} uri
 * @returns {string}
 */ function uriTransformer(uri) {
    const url = (uri || "").trim();
    const first = url.charAt(0);
    if (first === "#" || first === "/") {
        return url;
    }
    const colon = url.indexOf(":");
    if (colon === -1) {
        return url;
    }
    let index = -1;
    while(++index < protocols.length){
        const protocol = protocols[index];
        if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
            return url;
        }
    }
    index = url.indexOf("?");
    if (index !== -1 && colon > index) {
        return url;
    }
    index = url.indexOf("#");
    if (index !== -1 && colon > index) {
        return url;
    }
    // eslint-disable-next-line no-script-url
    return "javascript:void(0)";
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.6_react@18.2.0/node_modules/react-markdown/lib/ast-to-react.js
/**
 * @template T
 * @typedef {import('react').ComponentType<T>} ComponentType<T>
 */ /**
 * @template {import('react').ElementType} T
 * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>
 */ /**
 * @typedef {import('react').ReactNode} ReactNode
 * @typedef {import('unist').Position} Position
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Text} Text
 * @typedef {import('hast').Comment} Comment
 * @typedef {import('hast').DocType} Doctype
 * @typedef {import('property-information').Info} Info
 * @typedef {import('property-information').Schema} Schema
 * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps
 *
 * @typedef Raw
 * @property {'raw'} type
 * @property {string} value
 *
 * @typedef Context
 * @property {Options} options
 * @property {Schema} schema
 * @property {number} listDepth
 *
 * @callback TransformLink
 * @param {string} href
 * @param {Array<ElementContent>} children
 * @param {string?} title
 * @returns {string}
 *
 * @callback TransformImage
 * @param {string} src
 * @param {string} alt
 * @param {string?} title
 * @returns {string}
 *
 * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType
 *
 * @callback TransformLinkTarget
 * @param {string} href
 * @param {Array<ElementContent>} children
 * @param {string?} title
 * @returns {TransformLinkTargetType|undefined}
 *
 * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames
 *
 * To do: is `data-sourcepos` typeable?
 *
 * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps
 * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps
 * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps
 * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps
 * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps
 * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps
 * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps
 * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps
 *
 * @typedef {ComponentType<CodeProps>} CodeComponent
 * @typedef {ComponentType<HeadingProps>} HeadingComponent
 * @typedef {ComponentType<LiProps>} LiComponent
 * @typedef {ComponentType<OrderedListProps>} OrderedListComponent
 * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent
 * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent
 * @typedef {ComponentType<TableRowProps>} TableRowComponent
 * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent
 *
 * @typedef SpecialComponents
 * @property {CodeComponent|ReactMarkdownNames} code
 * @property {HeadingComponent|ReactMarkdownNames} h1
 * @property {HeadingComponent|ReactMarkdownNames} h2
 * @property {HeadingComponent|ReactMarkdownNames} h3
 * @property {HeadingComponent|ReactMarkdownNames} h4
 * @property {HeadingComponent|ReactMarkdownNames} h5
 * @property {HeadingComponent|ReactMarkdownNames} h6
 * @property {LiComponent|ReactMarkdownNames} li
 * @property {OrderedListComponent|ReactMarkdownNames} ol
 * @property {TableDataCellComponent|ReactMarkdownNames} td
 * @property {TableHeaderCellComponent|ReactMarkdownNames} th
 * @property {TableRowComponent|ReactMarkdownNames} tr
 * @property {UnorderedListComponent|ReactMarkdownNames} ul
 *
 * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components
 *
 * @typedef Options
 * @property {boolean} [sourcePos=false]
 * @property {boolean} [rawSourcePos=false]
 * @property {boolean} [skipHtml=false]
 * @property {boolean} [includeElementIndex=false]
 * @property {null|false|TransformLink} [transformLinkUri]
 * @property {TransformImage} [transformImageUri]
 * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]
 * @property {Components} [components]
 */ 







const ast_to_react_own = {}.hasOwnProperty;
// The table-related elements that must not contain whitespace text according
// to React.
const tableElements = new Set([
    "table",
    "thead",
    "tbody",
    "tfoot",
    "tr"
]);
/**
 * @param {Context} context
 * @param {Element|Root} node
 */ function childrenToReact(context, node) {
    /** @type {Array<ReactNode>} */ const children = [];
    let childIndex = -1;
    /** @type {Comment|Doctype|Element|Raw|Text} */ let child;
    while(++childIndex < node.children.length){
        child = node.children[childIndex];
        if (child.type === "element") {
            children.push(toReact(context, child, childIndex, node));
        } else if (child.type === "text") {
            // Currently, a warning is triggered by react for *any* white space in
            // tables.
            // So we drop it.
            // See: <https://github.com/facebook/react/pull/7081>.
            // See: <https://github.com/facebook/react/pull/7515>.
            // See: <https://github.com/remarkjs/remark-react/issues/64>.
            // See: <https://github.com/remarkjs/react-markdown/issues/576>.
            if (node.type !== "element" || !tableElements.has(node.tagName) || !whitespace(child)) {
                children.push(child.value);
            }
        } else if (child.type === "raw" && !context.options.skipHtml) {
            // Default behavior is to show (encoded) HTML.
            children.push(child.value);
        }
    }
    return children;
}
/**
 * @param {Context} context
 * @param {Element} node
 * @param {number} index
 * @param {Element|Root} parent
 */ function toReact(context, node, index, parent) {
    const options = context.options;
    const transform = options.transformLinkUri === undefined ? uriTransformer : options.transformLinkUri;
    const parentSchema = context.schema;
    /** @type {ReactMarkdownNames} */ // @ts-expect-error assume a known HTML/SVG element.
    const name = node.tagName;
    /** @type {Record<string, unknown>} */ const properties = {};
    let schema = parentSchema;
    /** @type {string} */ let property;
    if (parentSchema.space === "html" && name === "svg") {
        schema = property_information_svg;
        context.schema = schema;
    }
    if (node.properties) {
        for(property in node.properties){
            if (ast_to_react_own.call(node.properties, property)) {
                addProperty(properties, property, node.properties[property], context);
            }
        }
    }
    if (name === "ol" || name === "ul") {
        context.listDepth++;
    }
    const children = childrenToReact(context, node);
    if (name === "ol" || name === "ul") {
        context.listDepth--;
    }
    // Restore parent schema.
    context.schema = parentSchema;
    // Nodes created by plugins do not have positional info, in which case we use
    // an object that matches the position interface.
    const position = node.position || {
        start: {
            line: null,
            column: null,
            offset: null
        },
        end: {
            line: null,
            column: null,
            offset: null
        }
    };
    const component = options.components && ast_to_react_own.call(options.components, name) ? options.components[name] : name;
    const basic = typeof component === "string" || component === react_shared_subset.Fragment;
    if (!react_is.isValidElementType(component)) {
        throw new TypeError(`Component for name \`${name}\` not defined or is not renderable`);
    }
    properties.key = index;
    if (name === "a" && options.linkTarget) {
        properties.target = typeof options.linkTarget === "function" ? options.linkTarget(String(properties.href || ""), node.children, typeof properties.title === "string" ? properties.title : null) : options.linkTarget;
    }
    if (name === "a" && transform) {
        properties.href = transform(String(properties.href || ""), node.children, typeof properties.title === "string" ? properties.title : null);
    }
    if (!basic && name === "code" && parent.type === "element" && parent.tagName !== "pre") {
        properties.inline = true;
    }
    if (!basic && (name === "h1" || name === "h2" || name === "h3" || name === "h4" || name === "h5" || name === "h6")) {
        properties.level = Number.parseInt(name.charAt(1), 10);
    }
    if (name === "img" && options.transformImageUri) {
        properties.src = options.transformImageUri(String(properties.src || ""), String(properties.alt || ""), typeof properties.title === "string" ? properties.title : null);
    }
    if (!basic && name === "li" && parent.type === "element") {
        const input = getInputElement(node);
        properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;
        properties.index = getElementsBeforeCount(parent, node);
        properties.ordered = parent.tagName === "ol";
    }
    if (!basic && (name === "ol" || name === "ul")) {
        properties.ordered = name === "ol";
        properties.depth = context.listDepth;
    }
    if (name === "td" || name === "th") {
        if (properties.align) {
            if (!properties.style) properties.style = {};
            // @ts-expect-error assume `style` is an object
            properties.style.textAlign = properties.align;
            delete properties.align;
        }
        if (!basic) {
            properties.isHeader = name === "th";
        }
    }
    if (!basic && name === "tr" && parent.type === "element") {
        properties.isHeader = Boolean(parent.tagName === "thead");
    }
    // If `sourcePos` is given, pass source information (line/column info from markdown source).
    if (options.sourcePos) {
        properties["data-sourcepos"] = flattenPosition(position);
    }
    if (!basic && options.rawSourcePos) {
        properties.sourcePosition = node.position;
    }
    // If `includeElementIndex` is given, pass node index info to components.
    if (!basic && options.includeElementIndex) {
        properties.index = getElementsBeforeCount(parent, node);
        properties.siblingCount = getElementsBeforeCount(parent);
    }
    if (!basic) {
        properties.node = node;
    }
    // Ensure no React warnings are emitted for void elements w/ children.
    return children.length > 0 ? /*#__PURE__*/ react_shared_subset.createElement(component, properties, children) : /*#__PURE__*/ react_shared_subset.createElement(component, properties);
}
/**
 * @param {Element|Root} node
 * @returns {Element?}
 */ function getInputElement(node) {
    let index = -1;
    while(++index < node.children.length){
        const child = node.children[index];
        if (child.type === "element" && child.tagName === "input") {
            return child;
        }
    }
    return null;
}
/**
 * @param {Element|Root} parent
 * @param {Element} [node]
 * @returns {number}
 */ function getElementsBeforeCount(parent, node) {
    let index = -1;
    let count = 0;
    while(++index < parent.children.length){
        if (parent.children[index] === node) break;
        if (parent.children[index].type === "element") count++;
    }
    return count;
}
/**
 * @param {Record<string, unknown>} props
 * @param {string} prop
 * @param {unknown} value
 * @param {Context} ctx
 */ function addProperty(props, prop, value, ctx) {
    const info = find(ctx.schema, prop);
    let result = value;
    // Ignore nullish and `NaN` values.
    // eslint-disable-next-line no-self-compare
    if (result === null || result === undefined || result !== result) {
        return;
    }
    // Accept `array`.
    // Most props are space-separated.
    if (Array.isArray(result)) {
        result = info.commaSeparated ? comma_separated_tokens_stringify(result) : stringify(result);
    }
    if (info.property === "style" && typeof result === "string") {
        result = parseStyle(result);
    }
    if (info.space && info.property) {
        props[ast_to_react_own.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;
    } else if (info.attribute) {
        props[info.attribute] = result;
    }
}
/**
 * @param {string} value
 * @returns {Record<string, string>}
 */ function parseStyle(value) {
    /** @type {Record<string, string>} */ const result = {};
    try {
        node_modules_style_to_object(value, iterator);
    } catch  {
    // Silent.
    }
    return result;
    /**
   * @param {string} name
   * @param {string} v
   */ function iterator(name, v) {
        const k = name.slice(0, 4) === "-ms-" ? `ms-${name.slice(4)}` : name;
        result[k.replace(/-([a-z])/g, styleReplacer)] = v;
    }
}
/**
 * @param {unknown} _
 * @param {string} $1
 */ function styleReplacer(_, $1) {
    return $1.toUpperCase();
}
/**
 * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos
 * @returns {string}
 */ function flattenPosition(pos) {
    return [
        pos.start.line,
        ":",
        pos.start.column,
        "-",
        pos.end.line,
        ":",
        pos.end.column
    ].map(String).join("");
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.6_react@18.2.0/node_modules/react-markdown/lib/react-markdown.js
/**
 * @typedef {import('react').ReactNode} ReactNode
 * @typedef {import('react').ReactElement<{}>} ReactElement
 * @typedef {import('unified').PluggableList} PluggableList
 * @typedef {import('hast').Root} Root
 * @typedef {import('./rehype-filter.js').Options} FilterOptions
 * @typedef {import('./ast-to-react.js').Options} TransformOptions
 *
 * @typedef CoreOptions
 * @property {string} children
 *
 * @typedef PluginOptions
 * @property {PluggableList} [remarkPlugins=[]]
 * @property {PluggableList} [rehypePlugins=[]]
 * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]
 *
 * @typedef LayoutOptions
 * @property {string} [className]
 *
 * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions
 *
 * @typedef Deprecation
 * @property {string} id
 * @property {string} [to]
 */ 








const react_markdown_own = {}.hasOwnProperty;
const changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
/** @type {Record<string, Deprecation>} */ const deprecated = {
    plugins: {
        to: "remarkPlugins",
        id: "change-plugins-to-remarkplugins"
    },
    renderers: {
        to: "components",
        id: "change-renderers-to-components"
    },
    astPlugins: {
        id: "remove-buggy-html-in-markdown-parser"
    },
    allowDangerousHtml: {
        id: "remove-buggy-html-in-markdown-parser"
    },
    escapeHtml: {
        id: "remove-buggy-html-in-markdown-parser"
    },
    source: {
        to: "children",
        id: "change-source-to-children"
    },
    allowNode: {
        to: "allowElement",
        id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    allowedTypes: {
        to: "allowedElements",
        id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    disallowedTypes: {
        to: "disallowedElements",
        id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    includeNodeIndex: {
        to: "includeElementIndex",
        id: "change-includenodeindex-to-includeelementindex"
    }
};
/**
 * React component to render markdown.
 *
 * @param {ReactMarkdownOptions} options
 * @returns {ReactElement}
 */ function ReactMarkdown(options) {
    for(const key in deprecated){
        if (react_markdown_own.call(deprecated, key) && react_markdown_own.call(options, key)) {
            const deprecation = deprecated[key];
            console.warn(`[react-markdown] Warning: please ${deprecation.to ? `use \`${deprecation.to}\` instead of` : "remove"} \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`);
            delete deprecated[key];
        }
    }
    const processor = unified().use(remarkParse).use(options.remarkPlugins || []).use(lib, {
        ...options.remarkRehypeOptions,
        allowDangerousHtml: true
    }).use(options.rehypePlugins || []).use(rehypeFilter, options);
    const file = new VFile();
    if (typeof options.children === "string") {
        file.value = options.children;
    } else if (options.children !== undefined && options.children !== null) {
        console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${options.children}\`)`);
    }
    const hastNode = processor.runSync(processor.parse(file), file);
    if (hastNode.type !== "root") {
        throw new TypeError("Expected a `root` node");
    }
    /** @type {ReactElement} */ let result = /*#__PURE__*/ react_shared_subset.createElement(react_shared_subset.Fragment, {}, childrenToReact({
        options,
        schema: property_information_html,
        listDepth: 0
    }, hastNode));
    if (options.className) {
        result = /*#__PURE__*/ react_shared_subset.createElement("div", {
            className: options.className
        }, result);
    }
    return result;
}
ReactMarkdown.propTypes = {
    // Core options:
    children: prop_types.string,
    // Layout options:
    className: prop_types.string,
    // Filter options:
    allowElement: prop_types.func,
    allowedElements: prop_types.arrayOf(prop_types.string),
    disallowedElements: prop_types.arrayOf(prop_types.string),
    unwrapDisallowed: prop_types.bool,
    // Plugin options:
    remarkPlugins: prop_types.arrayOf(prop_types.oneOfType([
        prop_types.object,
        prop_types.func,
        prop_types.arrayOf(prop_types.oneOfType([
            prop_types.bool,
            prop_types.string,
            prop_types.object,
            prop_types.func,
            prop_types.arrayOf(// prettier-ignore
            // type-coverage:ignore-next-line
            prop_types.any)
        ]))
    ])),
    rehypePlugins: prop_types.arrayOf(prop_types.oneOfType([
        prop_types.object,
        prop_types.func,
        prop_types.arrayOf(prop_types.oneOfType([
            prop_types.bool,
            prop_types.string,
            prop_types.object,
            prop_types.func,
            prop_types.arrayOf(// prettier-ignore
            // type-coverage:ignore-next-line
            prop_types.any)
        ]))
    ])),
    // Transform options:
    sourcePos: prop_types.bool,
    rawSourcePos: prop_types.bool,
    skipHtml: prop_types.bool,
    includeElementIndex: prop_types.bool,
    transformLinkUri: prop_types.oneOfType([
        prop_types.func,
        prop_types.bool
    ]),
    linkTarget: prop_types.oneOfType([
        prop_types.func,
        prop_types.string
    ]),
    transformImageUri: prop_types.func,
    components: prop_types.object
};


/***/ })

};
;